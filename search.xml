<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>開発メモ その211 boostを使った最小のCMakeプロジェクト その3</title>
      <link href="2020/06/13/4373/"/>
      <url>2020/06/13/4373/</url>
      
        <content type="html"><![CDATA[<p>きちんとCMakeのfind_packageを使いましょう</p><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>かなり前に、<a href="https://taktak.jp/2017/12/23/2761">開発メモ その94 boostを使った最小のCMakeプロジェクト その2</a>を記事にしたのですが</p><ul><li>リンクするライブラリを個別に全部手書き</li><li>find_packageを使っていない</li></ul><p>というあまり宜しくない作りをしていました。</p><p>といっても、個人的には、自分が何を使っているのか､明示的にどこのディレクトリにあるライブラリをリンクしているかを意識できるように、パスを外部から指摘できる方式は好んで使います。<br>CMakeはライブラリが見つからないさい、どこを探しに行ったのかという情報が見えづらかったり、親切な作りになっていないのが不満です。</p><p>無論、クロスプラットフォームで作ったりする際は絶大なパワーを発揮するのですが… </p><p>Boost程度、自分でビルドして、find_packageでサクッと使ってみようと思いました。</p><p>が、1点だけ嵌りました。<br>Windows、OSXはすんなりだったのに、Linuxだけはダメでした。</p><h1 id="What’s-wrong"><a href="#What’s-wrong" class="headerlink" title="What’s wrong?"></a>What’s wrong?</h1><p>結論から言えば、CMakeにおけるConfigモード、つまり、 <strong>&lt;パッケージ名&gt;Config.cmake</strong>の場所を環境変数で指定する方法で問題が起きました。<br>問題は環境変数名。<br>大文字と小文字を明確に区別したため、find_packageに失敗しました。<br>Windows、OSXでは大文字小文字を区別しなかったのですが…</p><p>WindowsとOSXでは <script src="https://gist.github.com/takuya-takeuchi/53139807488c21394ac6f2bae1465c24.js"></script></p><p>Linuxではこう。</p><script src="https://gist.github.com/takuya-takeuchi/9a1462f44d67115f4a04a9f2613f9da3.js"></script><p><strong>-G</strong>オプションが違いますが、環境変数とCMakeの引数<strong>BOOST_DIR</strong>の<strong>BOOST</strong>が<strong>Boost</strong>かどうかがミソです。<br>別に分ける必要はないですが、環境引数に合わせて大文字にしていたのが運の尽きでした。</p><p>ビルド後に生成されるCMakeの設定ファイルは、<strong>win64\cmake\Boost-1.73.0\BoostConfig.cmake</strong> のような感じですが、CMakeにおけるConfigモードではパッケージ名は <strong>&lt;パッケージ名&gt;Config.cmake</strong> です。<br>つまり<strong>Boost</strong>になります。<br>そして、環境変数による指定も、<strong>Boost_DIR</strong>となります。</p><p>それだけですが…はまりました。</p>]]></content>
      
      
      <categories>
          
          <category> その他 </category>
          
          <category> boost </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その210 CentOS7 on Gen2 Hyper-V VM のディスクをリサイズする</title>
      <link href="2020/06/10/4368/"/>
      <url>2020/06/10/4368/</url>
      
        <content type="html"><![CDATA[<p>検索してもなかなか出てこない+ビクビクしながら実施するのは嫌なので</p><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>掲題通りなんですが、Ubuntuだとここまで面倒ではなくて、手順は広まっている。<br>けど、CentOS7のファイルシステムに<strong>XFS</strong>が採用された事で色々変わったのでしょう。</p><ul><li>インストール後、rootまたはhomeが小さくて困った、サイズを変更したい</li><li>拡大は良いが縮小するために一度パーティションの削除が必要で困った</li></ul><p>こういう事例があります。<br>はい、私です。業務ではまりました。</p><p>忘れないように、見返せるようにメモをとります。</p><h1 id="How-to"><a href="#How-to" class="headerlink" title="How to?"></a>How to?</h1><p>まず直前の状態。</p><script src="https://gist.github.com/takuya-takeuchi/fe08cd6042c6bf4fdd874db4bef81c06.js"></script><p>ここからリサイズを実施。<br>まずシャットダウン。</p><h2 id="1-Hyper-Vからディスク拡張"><a href="#1-Hyper-Vからディスク拡張" class="headerlink" title="1. Hyper-Vからディスク拡張"></a>1. Hyper-Vからディスク拡張</h2><p>これは簡単です。<br>GUIからどうぞ。<br>今回は20GBから30GBに拡張しました。</p><h2 id="2-ディスクの状態を確認"><a href="#2-ディスクの状態を確認" class="headerlink" title="2. ディスクの状態を確認"></a>2. ディスクの状態を確認</h2><script src="https://gist.github.com/takuya-takeuchi/af3d64ff75bff147378591c6215a3a9c.js"></script><p>はい、何も変わっていません。</p><h2 id="3-partedでディスクを修正"><a href="#3-partedでディスクを修正" class="headerlink" title="3. partedでディスクを修正"></a>3. partedでディスクを修正</h2><p>このままだとフリーな領域が見えませんので、<strong>parted</strong>で修正します。</p><script src="https://gist.github.com/takuya-takeuchi/7da40c38daea8244af0ebc3b87fcfcaf.js"></script><p>対話形式で処理を進めます。<br>パーティションを修正するので、<strong>p</strong>を押下すると、<strong>バックアップGPTテーブルがディスクの終端にありません。</strong> という警告が出ます。<br>無論、ディスクを拡張したからです。<br>修正するかと聞かれますのでs、<strong>Fix</strong>と入力します。<br>さらに <strong>/dev/sda に利用可能なスペースのすべてが使用されているわけではないようです。</strong> という警告が出ます。<br>修正するかと聞かれますのでs、<strong>Fix</strong>と入力します。</p><script src="https://gist.github.com/takuya-takeuchi/763c44111bb5b1406e5082fc288bce15.js"></script><p>修正が実施され、ディスクの情報が出力されます。<br>ここで <strong>Disk /dev/sda: 32.2GB</strong> の部分の数値を記録します。<br>後から使用します。<br>この数値がHyper-Vで拡張したディスクサイズになっています。</p><h2 id="4-resizepartで実際にリサイズ"><a href="#4-resizepartで実際にリサイズ" class="headerlink" title="4. resizepartで実際にリサイズ"></a>4. resizepartで実際にリサイズ</h2><p>同じくpartedのコマンドの一つ<strong>resizepart</strong>でパーティションのサイズを変更します。<br>修正対象は、3つめのパーティションになります。<br>そして、パーティションの終端を指定します。つまり、先ほどのディスクサイズを指定します。</p><script src="https://gist.github.com/takuya-takeuchi/215f693547ce49fb95597c3b0a1a13b1.js"></script><p>リサイズ後、<strong>p</strong>コマンドで確認します。</p><script src="https://gist.github.com/takuya-takeuchi/a7385023523728ba329e890f24472b85.js"></script><p>しっかりと、サイズが増えていることがわかります。<br><strong>q</strong>を押下してpartedを終了しします。</p><h2 id="5-pvresizeで物理ボリュームをリサイズ"><a href="#5-pvresizeで物理ボリュームをリサイズ" class="headerlink" title="5. pvresizeで物理ボリュームをリサイズ"></a>5. pvresizeで物理ボリュームをリサイズ</h2><p>続いて、物理ボリュームのリサイズ。<br>修正前はこうなります。</p><script src="https://gist.github.com/takuya-takeuchi/332ded30e4e3010dd0fc10464345ffaf.js"></script><p>修正対象の物理ボリュームを指定して、<strong>pvresize</strong>を実行するだけで、最大まで物理ボリュームを拡張します。</p><script src="https://gist.github.com/takuya-takeuchi/cf2353c7b5f9857c82ece05ec0d63981.js"></script><p>空き領域が増えたことがわかります。</p><h2 id="6-lvextendで論理ボリュームをリサイズ"><a href="#6-lvextendで論理ボリュームをリサイズ" class="headerlink" title="6. lvextendで論理ボリュームをリサイズ"></a>6. lvextendで論理ボリュームをリサイズ</h2><p>これで最後です。<br>先ほど拡張した物理ボリューム内のデバイスマッパーが割り当てたデバイスを拡張します。<br>つまり、**/dev/sda3** 配下のデバイスになります。<br>この関係は<strong>lsblk</strong>で確認できます。</p><script src="https://gist.github.com/takuya-takeuchi/c0c26bb62c1e73da676644344c98aa39.js"></script><p>ここでは、</p><ul><li><strong>centos-root</strong></li><li><strong>centos-swap</strong></li></ul><p>を拡張できます。<br>片方に空き領域を全部足してもイイですし、均等に配分しても構いません。<br>ここでは、10:0でrootに配分します、というかswapにはlvextendで拡張できません。<br><strong>fsadm: Filesystem “swap” on device “/dev/mapper/centos-swap” is not supported by this tool.</strong> って言われて怒られますので。</p><script src="https://gist.github.com/takuya-takeuchi/d25877f77130528c0672337dd3327477.js"></script><p>指定は、現在の空き領域の何%を指定したデバイスに追加するか､という意味になります。<br>今回は全部を配分するので100%を指定しました。</p><h2 id="7-確認"><a href="#7-確認" class="headerlink" title="7. 確認"></a>7. 確認</h2><p>こうなりました。<br>無事に10GB増えていることがわかります。</p><script src="https://gist.github.com/takuya-takeuchi/8478bc2e68a217ab2b2b16fb923d74c1.js"></script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> CentOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その209  Build1660001055 でエラーが発生しました</title>
      <link href="2020/05/30/4359/"/>
      <url>2020/05/30/4359/</url>
      
        <content type="html"><![CDATA[<p>Xamarinで実機にデプロイできなくなりました</p><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><font color="red">2020/06/02 更新</br>Visual Studio 2019 16.6.1 で本問題は修正されました。</font></p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://docs.microsoft.com/ja-jp/visualstudio/releases/2019/release-notes#16.6.1" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=docs.microsoft.com"></img><div class="hbc-site-name">docs.microsoft.com</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png"></img></div><div class="hbc-text"><div class="hbc-title">Visual Studio 2019 バージョン 16.8 リリース ノート</div><div class="hbc-url">https://docs.microsoft.com/ja-jp/visualstudio/releases/2019/release-notes#16.6.1</div><div class="hbc-description">最新機能、バグの修正、および Visual Studio 2019 v16.8 のサポートを取得します。 今すぐダウンロード。</div></div></div></div></a></div></div><p><a href="../../../../public/2020/05/66c19942ab4ba346fdb64ccc04cde373-3.png"><img src="../../../../public/2020/05/66c19942ab4ba346fdb64ccc04cde373-3.png"></a></p><p>デプロイできるプロジェクトとそうでないプロジェクトがあるので原因は不明。</p><blockquote><p>重大度レベル コード 説明 プロジェクト ファイル 行 抑制状態 エラー MessagingRemoteException: トピック xvs/Build/16.6.0.1055/execute-task/Xamarin.OpenCV.iOS/edf9d5b002fCopy の応答を実行中にクライアント Build1660001055 でエラーが発生しました TypeInitializationException: The type initializer for ‘Microsoft.Build.Tasks.Copy’ threw an exception. PlatformNotSupportedException: Operation is not supported on this platform. Xamarin.OpenCV.iOS</p></blockquote><p>ただ、Visual Studio 2019 16.6.0のバグであり、これはMicrosoftも認めていて、16.7.0 Preview1で修正済み。<br>でも16.6.0のPreviewの段階で報告されているのに正式リリースでも治っていないのはどういうことなのさ。</p><h1 id="How-to-resolve"><a href="#How-to-resolve" class="headerlink" title="How to resolve?"></a>How to resolve?</h1><p>回避策は</p><ul><li>16.5.5にダウングレード</li><li>16.7.0 Preview1にアップグレード</li><li>Visual Studio for Macからデプロイ</li></ul><p>の3択。<br>が、Communityはかなり炎上している。</p><p>そりゃ、アップグレードしたらバイナリを作成できないんだから…ね。</p><p>実機検証だけはMacからするようにして対処しました。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> Xamarin </category>
          
          <category> Visual Studio </category>
          
          <category> Apple </category>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その208 MT1001: Could not find an application at the specified directory</title>
      <link href="2020/05/30/4355/"/>
      <url>2020/05/30/4355/</url>
      
        <content type="html"><![CDATA[<p>Xamarinで実機デバッグが出来なくなった場合のエラー</p><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>以前は動いていたソースも変えていないiOSアプリを実機でバッグなり焦った際のメモ。<br>こんなエラーがでます。</p><p><a href="../../../../public/2020/05/44d29d2792be3bad9a9ed98c7bbb20d6-1.png"><img src="../../../../public/2020/05/44d29d2792be3bad9a9ed98c7bbb20d6-1.png"></a></p><ul><li>MT1001: Could not find an application at the specified directory:</li><li>MT1006: Could not install the application</li></ul><p><strong>Could not install the application</strong>っていうから、書き込み先に権限が無いのか？とか思っていてMac側を調べても特におかしいことは無し。<br>ただ、書き込み先のバイナリが古いのが気になりました。<br>古いのは書き込めなかったからだと思いますが。</p><h1 id="How-to-resolve"><a href="#How-to-resolve" class="headerlink" title="How to resolve?"></a>How to resolve?</h1><p>解決策がQiitaにありました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://qiita.com/gnk263/items/e43796e96249f03fb70b" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=qiita.com"></img><div class="hbc-site-name">Qiita</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.qiita.com%2Fassets%2Fpublic%2Farticle-ogp-background-1150d8b18a7c15795b701a55ae908f94.png?ixlib=rb-1.2.2&w=1200&mark=https%3A%2F%2Fqiita-user-contents.imgix.net%2F~text%3Fixlib%3Drb-1.2.2%26w%3D840%26h%3D380%26txt%3DXamarin%25E3%2581%25A7%25E4%25BD%259C%25E6%2588%2590%25E3%2581%2597%25E3%2581%259FiOS%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2581%258C%25E5%25AE%259F%25E6%25A9%259F%25E3%2583%2587%25E3%2583%2590%25E3%2583%2583%25E3%2582%25B0%25E8%25B5%25B7%25E5%258B%2595%25E3%2581%25A7%25E3%2581%258D%25E3%2581%25AA%25E3%2581%258F%25E3%2581%25AA%25E3%2581%25A3%25E3%2581%259F%25E5%25A0%25B4%25E5%2590%2588%25E3%2581%25AE%25E5%25AF%25BE%25E5%2587%25A6%25E6%2596%25B9%25E6%25B3%2595%26txt-color%3D%2523333%26txt-font%3DHiragino%2520Sans%2520W6%26txt-size%3D54%26txt-clip%3Dellipsis%26txt-align%3Dcenter%252Cmiddle%26s%3D379c038c83b73ae72d4fe3612569b269&mark-align=center%2Cmiddle&blend=https%3A%2F%2Fqiita-user-contents.imgix.net%2F~text%3Fixlib%3Drb-1.2.2%26w%3D840%26h%3D500%26txt%3D%2540gnk263%26txt-color%3D%2523333%26txt-font%3DHiragino%2520Sans%2520W6%26txt-size%3D45%26txt-align%3Dright%252Cbottom%26s%3D7cb627717321e8c528dd0f58df92b75e&blend-align=center%2Cmiddle&blend-mode=normal&s=bb4628a5ddd348cfcd846d7d68ab924d"></img></div><div class="hbc-text"><div class="hbc-title">Xamarinで作成したiOSアプリが実機デバッグ起動できなくなった場合の対処方法 - Qiita</div><div class="hbc-url">https://qiita.com/gnk263/items/e43796e96249f03fb70b</div><div class="hbc-description">はじめにXamarin.Formsを使用してiOSアプリを作成していましたが、いつの間にか、ビルドしたアプリを起動できなくなりました。対処方法を残しておきます。環境PC等Windows 10Visual ...</div></div></div></div></a></div></div><p>要する実機アイコンから一度アプリを削除しろということです。<br>当然、データも消えますし、一度プロファイルでインストールしたアプリの承認も行う必要があります。</p><p>面倒ですが､とりあえず解決。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> Xamarin </category>
          
          <category> Visual Studio </category>
          
          <category> Apple </category>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その207 OpenCVのiOS 静的ライブラリからUniversal Static Libraryを作成する</title>
      <link href="2020/05/30/4353/"/>
      <url>2020/05/30/4353/</url>
      
        <content type="html"><![CDATA[<p>自分でビルドしたiOSバイナリからUniversal Static Libraryを作成します。</p><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Universal Static Libraryというのは複数のアーキテクチャのバイナリが一つに結合されたバイナリです。<br>つまり、arm7、arm7s、arm64などを一つのバイナリとして扱うことが可能です。</p><p>これによって、アーキテクチャに応じてバイナリのリンクを変更しなくて済むというメリットがあります。<br>しかし、当然バイナリサイズが膨れ上がるので、サポートするつもりのないアーキテクチャのバイナリは除外するか、そもそも個々のバイナリを小さくする工夫が必要です。</p><p><strong>OpenCV</strong>は後者のサイズを小さくする工夫が可能です。<br>ビルドオプションで必要なコンポーネントだけを指定することができます。</p><p>工夫の方法は割愛して、単純に作成した<strong>libopencv_merged.a</strong>を、Universal Static Libraryとして結合してみます。<br>掲題の通りなんですが、情報が少ないんですよ。</p><h1 id="How-to-do"><a href="#How-to-do" class="headerlink" title="How to do?"></a>How to do?</h1><p>OpenCVのiOSビルドを行うと、下記のアーキテクチャのバイナリが生成されます。</p><ul><li>armv7</li><li>armv7s</li><li>arm64</li><li>i386</li><li>x86_64</li></ul><p>最後の2つはsimulator用ですが。</p><p>また、出力先の <strong>/lib/Release</strong>には<strong>libopencv_merged.a</strong>が存在します。<br><strong>libopencv_world.a</strong>とは違い、他の静的ライブラリ(libpng.aとか)を結合しているように見えます。</p><p>これを結合してみます。</p><script src="https://gist.github.com/takuya-takeuchi/ff97a095159532525822c2b40cbae7d1.js"></script><p>一つのlibopencv_merged.aが生成され、fileコマンドで確認すると全部のアーキテクチャが一つになっていることがわかります。</p>]]></content>
      
      
      <categories>
          
          <category> Apple </category>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その206 &quot;VCRemoteClean&quot; タスクは、必要なパラメーター &quot;RemoteRootDirectory&quot; に対して値を指定されていませんでした。</title>
      <link href="2020/05/30/4335/"/>
      <url>2020/05/30/4335/</url>
      
        <content type="html"><![CDATA[<p>意味が分からないエラー</p><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>掲題の通りなんですが、情報が少ないんですよ。<br>問題は、iOSのクロスプラットフォームC＋＋ライブラリをVisual Studioからビルドする際のエラー。</p><p><a href="../../../../public/2020/05/44d29d2792be3bad9a9ed98c7bbb20d6.png"><img src="../../../../public/2020/05/44d29d2792be3bad9a9ed98c7bbb20d6.png"></a></p><p>Xamarinの場合はMacホストと接続できていないよ、って教えてくれるのですが、そんな便利機能、流石C++。あるわけない。</p><p>それで何とか見つけたのが公式。<br>公式が役立つのはかなり久しぶりな気がします。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://docs.microsoft.com/en-us/cpp/cross-platform/install-and-configure-tools-to-build-using-ios?view=vs-2019&redirectedfrom=MSDN#ConfigureVS" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=docs.microsoft.com"></img><div class="hbc-site-name">docs.microsoft.com</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">Install and configure tools to build using iOS</div><div class="hbc-url">https://docs.microsoft.com/en-us/cpp/cross-platform/install-and-configure-tools-to-build-using-ios?view=vs-2019&redirectedfrom=MSDN#ConfigureVS</div></div></div></div></a></div></div><h1 id="How-to-do"><a href="#How-to-do" class="headerlink" title="How to do?"></a>How to do?</h1><p>要するにビルド環境、つまりMacにつながらないよって、エラーなのですが… プロジェクトの設定ではなく、Visual Studio全体のオプションに答えがあります。</p><p>上のオプションで設定できるのですが、まずはMac側で設定が必要です。</p><h2 id="1-vcremoteのインストール"><a href="#1-vcremoteのインストール" class="headerlink" title="1. vcremoteのインストール"></a>1. vcremoteのインストール</h2><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://docs.microsoft.com/en-us/cpp/cross-platform/install-and-configure-tools-to-build-using-ios?view=vs-2019&redirectedfrom=MSDN#Install" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=docs.microsoft.com"></img><div class="hbc-site-name">docs.microsoft.com</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">Install and configure tools to build using iOS</div><div class="hbc-url">https://docs.microsoft.com/en-us/cpp/cross-platform/install-and-configure-tools-to-build-using-ios?view=vs-2019&redirectedfrom=MSDN#Install</div></div></div></div></a></div></div><p>ここに書いてあるのが、なんと<strong>Node.js</strong>が必要。しかもバージョンが指定されている徹底ぶり。<br>ここは素直に従うべきです。ただでさえ意味不明なエラーが多いiOSのクロスプラットフォームライブラリ作成。<br>余計なことはしないほうが無難です。</p><blockquote><p>Node.js version 12.14.1 and npm version 6.13.4 Install version 12.14.1 of Node.js on your Mac. If you install the Node.js package, it should come with npm version 6.13.4. Other versions of Node.js and npm may not support some modules used in the remote agent vcremote, which can cause vcremote installation to fail. We recommend you install Node.js by using a package manager such as Node Version Manager. Avoid using the command sudo to install Node.js, as some modules can fail to install when using sudo.</p></blockquote><p>なので</p><ul><li>Node.jsは<strong>12.14.1</strong></li><li>npmは<strong>6.13.4</strong></li><li><strong>nvm</strong>推奨</li><li>sudoは使うな ** Homebrew** は注意</li></ul><p>を守って環境を作ります。</p><h3 id="1-1-nvm"><a href="#1-1-nvm" class="headerlink" title="1-1. nvm"></a>1-1. nvm</h3><p>公式のバージョンを調べます。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/nvm-sh/nvm/releases" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars2.githubusercontent.com/u/49963700?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">Releases · nvm-sh/nvm</div><div class="hbc-url">https://github.com/nvm-sh/nvm/releases</div><div class="hbc-description">Node Version Manager - POSIX-compliant bash script to manage multiple active node.js versions - nvm-sh/nvm</div></div></div></div></a></div></div><p>最新は2020/05/30時点で<strong>v0.35.3</strong>になります。<br>これを利用してMacにビルドに使うユーザでログインし、下記でインストールします。</p><script src="https://gist.github.com/takuya-takeuchi/880709966c7c4ecbbc47e1957cfca6f3.js"></script><p>インストールが完了すると <strong>.bash_profile</strong> に追加されます。<br>環境変数を反映させインストール出来ているかをチェックします。</p><script src="https://gist.github.com/takuya-takeuchi/adabb6efc91568dd882267dd056162cf.js"></script><h3 id="1-2-Node-js"><a href="#1-2-Node-js" class="headerlink" title="1-2. Node.js"></a>1-2. Node.js</h3><p><strong>nvm</strong>が入ったので、サクサクインストールします。</p><script src="https://gist.github.com/takuya-takeuchi/f971a4d9288318dec66d7844f292859b.js"></script><p>これで、npmも指定されたバージョンがインストールされます。</p><h3 id="1-3-remote-agent"><a href="#1-3-remote-agent" class="headerlink" title="1-3. remote agent"></a>1-3. remote agent</h3><p>目的のブツです。</p><script src="https://gist.github.com/takuya-takeuchi/170dcc3b07b57e16bfa4f8c06a7bfff2.js"></script><h2 id="2-vcremote設定"><a href="#2-vcremote設定" class="headerlink" title="2. vcremote設定"></a>2. vcremote設定</h2><p>vcremoteを起動します。初回起動時に色々インストールされます。<br>Xcode 11.5がインストールされるので少し時間がかかります。</p><script src="https://gist.github.com/takuya-takeuchi/5b213bcba2a9446d2024919c35b3781b.js"></script><p>最後に出力された、</p><ul><li>Port</li><li>Secure</li><li>Pin</li></ul><p>をVisaul Studioに10分以内に入力します。<br><strong>ツール(T) - オプション(O)</strong> から<strong>クロス プラットフォーム - C++ - iOS - ペアリング</strong>を選択し、下記に上述の値を設定します。<br>リモートルートはログインユーザのvcremoteのパスを指定します。</p><p><a href="../../../../public/2020/05/847517bd5c442db351fff81e3067d31a-1.png"><img src="../../../../public/2020/05/847517bd5c442db351fff81e3067d31a-1.png"></a></p><p>入力後、ペアリングを押下すると正常に接続されたことを示すメッセージが出力されます。</p><p><a href="../../../../public/2020/05/3c1ed548fe5ec54df3675251ff33ad70-1.png"><img src="../../../../public/2020/05/3c1ed548fe5ec54df3675251ff33ad70-1.png"></a></p><h2 id="3-ビルド"><a href="#3-ビルド" class="headerlink" title="3. ビルド"></a>3. ビルド</h2><p>この状態でiOSのC++プロジェクトをビルドすることが出来るようになりますが、ここで問題が。<br>ビルドに失敗してログに下記のメッセージが出力されている場合があります。</p><script src="https://gist.github.com/takuya-takeuchi/e41c666c0f758718480a98be9a692fb0.js"></script><p>この場合はMacのGUIにログインし、Xcodeを起動させ、設定画面の<strong>Locations</strong>を開きます。</p><p><a href="../../../../public/2020/05/0d40a5e4a645fc6b96e767d64ac0878e.png"><img src="../../../../public/2020/05/0d40a5e4a645fc6b96e767d64ac0878e.png"></a></p><p><strong>Command Line Tools</strong>が空になっているので最新のXcodeを選択しXcodeを終了します。<br>この状態で念のため、vcremoteを終了し再度起動します。<br>初回起動以降はペアリングが済んでいれば､何も表示されずすぐに起動されます。<br>起動後、Visual Studioからビルドすると無事に成功するはずです。</p><h2 id="4-出力先はどこ？"><a href="#4-出力先はどこ？" class="headerlink" title="4. 出力先はどこ？"></a>4. 出力先はどこ？</h2><p>出力されるはずのバイナリはWindows側ではなくMac側に出力されます。<br>具体的な場所はビルドログを見るとわかります。<br>または出力先に*.recipeファイルがありますので、それをテキストファイルで開きます。</p><script src="https://gist.github.com/takuya-takeuchi/38f76c1814fd97ca88f3c4b2469ab05b.js"></script><p><strong>BuiltOutputs</strong> に記載されています。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> Visual Studio </category>
          
          <category> Apple </category>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その205 LinuxでCPU脆弱性対策を無効にしてみる</title>
      <link href="2020/05/23/4326/"/>
      <url>2020/05/23/4326/</url>
      
        <content type="html"><![CDATA[<p>タイトル通り</p><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>流石に仕事で全部無謀にすることがあるのか、と思いますがネットワークから完全に隔離されているマシンとかならありではと思わなくも無い。</p><h1 id="How-to-do"><a href="#How-to-do" class="headerlink" title="How to do?"></a>How to do?</h1><p>親切な方の記事は下記。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://hackmd.io/@GKcnNngaSBe9qCYV54wL8g/HykmqcS-N" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=hackmd.io"></img><div class="hbc-site-name">HackMD</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://i.imgur.com/fqm72bC.png"></img></div><div class="hbc-text"><div class="hbc-title">LinuxでSpectreの遅くなる脆弱性対策を無効化する - HackMD</div><div class="hbc-url">https://hackmd.io/@GKcnNngaSBe9qCYV54wL8g/HykmqcS-N</div><div class="hbc-description">###### tags: `Linux`  LinuxでSpectreの遅くなる脆弱性対策を無効化する ===  Linuxは、**カーネルパラメータ**に脆弱性対策を無効化するオプションを渡すといい</div></div></div></div></a></div></div><p>各パラメータの意味は自分で調べました。</p><ul><li><strong>nopti</strong><ul><li>Page Table Isolation を無効</li></ul></li><li><strong>noibpb</strong><ul><li>Indirect Branch Prediction Barriers を無効</li></ul></li><li><strong>noibrs</strong><ul><li>Indirect Branch Restricted Speculation を無効</li></ul></li><li><strong>nospectre_v2</strong><ul><li>Spectre バリアント 2 (Indirect Branch Speculation) 脆弱性に対する緩和策をすべて無効</li></ul></li><li><strong>nospec_store_bypass_disable</strong><ul><li>投機的ストアバイパス脆弱性に関する軽減策をすべて無効</li></ul></li></ul><p>面倒なので全部無効にします (白目)<br>手順は下記。</p><p><strong>/etc/default/grub</strong> の <strong>GRUB_CMDLINE_LINUX</strong> にこれらの引数を追加してします。<br>なおこの設定は永続的になります。<br>下記は全部の脆弱性に対する<strong>全て</strong>の緩和対策(つまり脆弱性を受ける可能性の低減)を無効にします。</p><script src="https://gist.github.com/takuya-takeuchi/27bb6df7e8e742d02da7d0e260fc45ee.js"></script><p>個別に無効にするなら下記のように、上述のパラメータを半角で区切ります。</p><script src="https://gist.github.com/takuya-takeuchi/cad60b040dc23d8cea1a239d77571615.js"></script><p>編集後、<code>sudo update-grub</code> して再起動が必要です。</p><p>脆弱性対策が無効にされたかどうかは下記のよう、スクリプトをダウンロードして実行するとわかります。</p><script src="https://gist.github.com/takuya-takeuchi/fa74d0dd73296b3ff70bf972219ac436.js"></script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その204 SECCOMPが有効かどうかを確認する</title>
      <link href="2020/05/23/4321/"/>
      <url>2020/05/23/4321/</url>
      
        <content type="html"><![CDATA[<p>LinuxでSECCOMP(SECure COMPuting mode)が有効かどうかを確認する方法</p><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>何故コレを確認したいかというと、twitterで<strong>CPU律速なRuby/Pythonコードはデフォルト設定のdocker上で遅くなる</strong>という興味深い記事が流れてきたためです。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://mametter.hatenablog.com/entry/2020/05/23/032650" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=mametter.hatenablog.com"></img><div class="hbc-site-name">まめめも</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://ogimage.blog.st-hatena.com/17680117126965966783/26006613572305513/1590232057"></img></div><div class="hbc-text"><div class="hbc-title">CPU律速なRuby/Pythonコードはデフォルト設定のdocker上で遅くなる - まめめも</div><div class="hbc-url">https://mametter.hatenablog.com/entry/2020/05/23/032650</div><div class="hbc-description">English version 要約 dockerはデフォルトでセキュリティ機構（Spectre脆弱性の対策）を有効にします。この影響で、RubyやPythonのようなインタプリタは速度が劣化します。特にCPU律速なプログラムで顕著に遅くなります（実行時間が倍くらいになることがあ…</div></div></div></div></a></div></div><p>なので、この記事は、自分の環境でもこの現象が起きるのかを確認するためのメモになります。</p><h1 id="How-to-do"><a href="#How-to-do" class="headerlink" title="How to do?"></a>How to do?</h1><p>これだけ。</p><script src="https://gist.github.com/takuya-takeuchi/2da8b98ed0ea8ea1cbcf25573b0e40aa.js"></script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その203 ORACLEで「ソケットから読み込むデータはこれ以上ありません」(勘違い)</title>
      <link href="2020/05/13/4309/"/>
      <url>2020/05/13/4309/</url>
      
        <content type="html"><![CDATA[<p>ORACLEで作ったデフォルトデータベースにつながらない、と勘違いした問題。</p><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>SQLPLUSはつながるのに、<strong>SQL Developer</strong>や<strong>JetBrains DataGrip</strong>から上述のエラーが出てしまった。</p><p><a href="../../../../public/2020/05/66c19942ab4ba346fdb64ccc04cde373.png"><img src="../../../../public/2020/05/66c19942ab4ba346fdb64ccc04cde373.png"></a></p><p>※上の設定はSIDを間違っています。正しくは<strong>ORCL</strong> これが原因でした。<strong>ORCL</strong>にすれば問題なかったです。後述の共有サーバーモードに変更する必要もないです。</p><h1 id="How-to-resolve"><a href="#How-to-resolve" class="headerlink" title="How to resolve?"></a>How to resolve?</h1><p>間違っていますが…途中までの経過を。</p><p>調べた結果、<strong>Database Configuration Assistant</strong>を起動し、問題のデータベースの設定を変更するとよいらしい。<br><strong>共有サーバーモード</strong>にするらしい。</p><p><a href="../../../../public/2020/05/66c19942ab4ba346fdb64ccc04cde373-2.png"><img src="../../../../public/2020/05/66c19942ab4ba346fdb64ccc04cde373-2.png"></a><br> 完了を押下して続行するも、再構成途中で下記のエラーで落ちる。</p><p><a href="../../../../public/2020/05/66c19942ab4ba346fdb64ccc04cde373-1.png"><img src="../../../../public/2020/05/66c19942ab4ba346fdb64ccc04cde373-1.png"></a><br> なんかemora.keyがないとかどうとかなので、EMリポジトリを作れと。<br>指示に従い、 <script src="https://gist.github.com/takuya-takeuchi/1a85b6949f7ee37232b88832c92eb430.js"></script></p><p>とするもエラー。<br>指示に従いログを見ると… <script src="https://gist.github.com/takuya-takeuchi/ffdbbd114ea9e14a8e46e142d349d22e.js"></script></p><p>問題のオブジェクトを消しては、再作成を繰り返し、いい加減埒が明かないと思い、調べた。<br>結果、 </p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://w.atwiki.jp/honu/pages/19.html" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=w.atwiki.jp"></img><div class="hbc-site-name">honu @ ウィキ</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://img.atwiki.jp/_img/og_image.png"></img></div><div class="hbc-text"><div class="hbc-title">GridControl環境構成再び・・・ - honu @ ウィキ</div><div class="hbc-url">https://w.atwiki.jp/honu/pages/19.html</div><div class="hbc-description">グリッドコントロール環境構成で参考にしたサイトは以下 http://www.oracle.com/technetwork/articles/revitt-oem-096363.html#l 躓いたとこ...</div></div></div></div></a></div></div> <div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://blog.itpub.net/7636787/viewspace-752662/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=blog.itpub.net"></img><div class="hbc-site-name">blog.itpub.net</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">How to manually set up oracle enterprise manager_ITPUB博客</div><div class="hbc-url">http://blog.itpub.net/7636787/viewspace-752662/</div><div class="hbc-description">emca is used to configure enterprise manager.Please refer to http://space.itpub.net/20943428/viewspace-628782 to set up enterprise manager.Y…</div></div></div></div></a></div></div><p>上記記事のコマンドを足し合わせた下記のコマンドをSQLPLUSで実行。</p><script src="https://gist.github.com/takuya-takeuchi/fb7d3cc4e5fb76f3ab36b9ffb0f92a43.js"></script><p>そして再実行した結果。うまくいきました。</p><script src="https://gist.github.com/takuya-takeuchi/d24b7c0fc76e3feefc025c87a7d08fdc.js"></script><p><strong>Database Configuration Assistant</strong>での設定変更も無事に成功しました。<br>もっとも、最初に書いたように何の意味もありませんでしたが。</p>]]></content>
      
      
      <categories>
          
          <category> rdms </category>
          
          <category> Oracle </category>
          
          <category> データベース </category>
          
          <category> RDMS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その202 libsodiumでファイル暗号化 (XChaCha20-Poly1305)</title>
      <link href="2020/04/28/4301/"/>
      <url>2020/04/28/4301/</url>
      
        <content type="html"><![CDATA[<p>libsodiumでファイル暗号化を試してみました。</p><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>何故ファイル暗号化に<strong>libsodium</strong>が必要なのかというと</p><ul><li>C++で使いたい</li><li>OpenSSLはビルドが面倒</li><li>ライセンスが緩い</li></ul><p>という3点です。</p><p>そんなlibsodiumはこちら </p><p>**Networking and Cryptography library (NaCL)**の構成コンポーネントのフォークです。</p><ul><li>クロスプラットフォーム</li><li>ISCライセンス<ul><li>2条項BSDライセンスと同等</li></ul></li><li>開発が活発</li><li>PHP 7.2から暗号化のコアとして採用</li></ul><p>という特徴があります。<br>そんあlibsodiumを使って暗号化処理を試してみました。</p><h1 id="How-to-do"><a href="#How-to-do" class="headerlink" title="How to do?"></a>How to do?</h1><p>ソースは下記です。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/takuya-takeuchi/Demo/tree/master/libsodium1" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/6241854?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">takuya-takeuchi/Demo</div><div class="hbc-url">https://github.com/takuya-takeuchi/Demo/tree/master/libsodium1</div><div class="hbc-description">Sample source code for Demonstration, Experiment and Test - takuya-takeuchi/Demo</div></div></div></div></a></div></div><p>公式提供のサンプルコードをベースにしているのですが、</p><ul><li>C++化<ul><li>iostreamを使っているためfopenとか除去</li></ul></li><li>引数チェックなど追加</li><li>libsodiumをCMakeから利用</li><li>libsodiumは静的リンク</li></ul><p>と改良してあります。</p><p>暗号方式は、<strong>ChaCha20-Poly1305</strong>になります。<br>詳細はググっていただければと思いますが</p><ul><li>Googleが推奨<ul><li>TLS 1.3で提案されている</li></ul></li><li>RFC7539として標準化済み</li><li>ローパフォーマンスなマシンで高速に動作<ul><li>ハードウェアで高速化できるAESとは違いCPUのSIMDを効率的に使えるため、モバイルでも高速</li><li>参考 <a href="https://developers-jp.googleblog.com/2019/03/adiantum.html">Adiantum : 低廉な端末でも効率的に使える暗号化技術</a></li></ul></li></ul><p>とモダンな感じがするアルゴリズムです。</p><p>そして、libsodiumにはChaCha20-Poly1305の実装として下記が提供されています。</p><ul><li>ChaCha20-Poly1305 (オリジナル実装)</li><li>IETF ChaCha20-Poly1305</li><li>XChaCha20-Poly1305 (今回使ったのはこれ)</li></ul><p>実装の際は、Nonceの長さやメッセージの最大長が違ったりするといった感じに見えます。<br>(今回使った)XChaCha20-Poly1305での暗号/復号化に必要なのはKEYのみ。<br>どうも、Nonceは暗号化ファイルのヘッダーに埋め込まれる感じに見えます。<br>ただ、ヘッダー自体がKEYを使って生成されているので、Nonceが生で入っているような感じでは無いです (未確認) <script src="https://gist.github.com/takuya-takeuchi/bac743b2f3dfd875836c0b9f5ca8bc60.js"></script></p><script src="https://gist.github.com/takuya-takeuchi/44e628f7baeaa36c290f1af73ba798f5.js"></script><p>ヘッダーにnonceフィールドがあるのできっとそうなのでしょう。<br>また、暗号化は</p><ol><li>ヘッダー挿入</li><li>チャンクサイズ(4096)毎に暗号化</li></ol><p>するだけです。<br>復号化も</p><ol><li>ヘッダー解析</li><li>チャンクサイズ(4096)毎に復号化</li></ol><p>というシンプルさなのも実装が容易で好ましいです。</p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
          <category> 暗号化 </category>
          
          <category> libsodium </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その201 PowerShellで変数の実行プログラムを簡単に起動する</title>
      <link href="2020/04/28/4298/"/>
      <url>2020/04/28/4298/</url>
      
        <content type="html"><![CDATA[<p>変数内に記された実行プログラムを実行するには</p><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>Invoke-Expression</strong>でもいいですが、もっと手軽に。</p><h1 id="How-to-do"><a href="#How-to-do" class="headerlink" title="How to do?"></a>How to do?</h1><p>PowerShellの演算子には <strong>呼び出し演算子 (実行演算子)</strong> というのがあります。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://docs.microsoft.com/ja-jp/powershell/module/microsoft.powershell.core/about/about_operators?view=powershell-7#call-operator-" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=docs.microsoft.com"></img><div class="hbc-site-name">docs.microsoft.com</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://docs.microsoft.com/media/logos/logo-powershell-social.png"></img></div><div class="hbc-text"><div class="hbc-title">about_Operators - PowerShell</div><div class="hbc-url">https://docs.microsoft.com/ja-jp/powershell/module/microsoft.powershell.core/about/about_operators?view=powershell-7#call-operator-</div><div class="hbc-description">PowerShell でサポートされている演算子について説明します。</div></div></div></div></a></div></div><p>こんな感じ。</p><script src="https://gist.github.com/takuya-takeuchi/8a04df219c4aa44f7288dd601d1140dc.js"></script>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> PowerShell </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その200 VisualStudioにおけるvar型のヒント表記を無効にする</title>
      <link href="2020/04/26/4291/"/>
      <url>2020/04/26/4291/</url>
      
        <content type="html"><![CDATA[<p>var型に対して明示的な型名がヒント表示されるのが邪魔</p><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>説明するよりも見たほうが早い。</p><p><a href="../../../../public/2020/04/66c19942ab4ba346fdb64ccc04cde373-2.png"><img src="../../../../public/2020/04/66c19942ab4ba346fdb64ccc04cde373-2.png"></a></p><p>列がずれるし、型が変わるとヒントも変化するから、キャレットが突然ずれてわかりにくいことがある。</p><h1 id="How-to-fix"><a href="#How-to-fix" class="headerlink" title="How to fix?"></a>How to fix?</h1><p>これは、<strong>Visual Studio</strong> の機能ではなく、<strong>Resharper</strong> の機能でした。<br>なので、ヒント表記が出ている行を選択して左側のアクションボタンをクリックすると、このヒント表記を無効にできるオプション <strong>Hide type name hints for implicitly typed variables</strong>を選択することで隠すことが可能になる。</p><p><a href="../../../../public/2020/04/66c19942ab4ba346fdb64ccc04cde373-3.png"><img src="../../../../public/2020/04/66c19942ab4ba346fdb64ccc04cde373-3.png"></a><br> きれいになりました。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> Visual Studio </category>
          
          <category> JetBrains </category>
          
          <category> jetbrains </category>
          
          <category> ReSharper </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その199 Spring Bootでorg.springframework.webが見つからない</title>
      <link href="2020/04/03/4278/"/>
      <url>2020/04/03/4278/</url>
      
        <content type="html"><![CDATA[<p>Spring Bootでorg.springframework.webが見つからない。</p><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Sprint Bootのデモプロジェクトを </p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://start.spring.io/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=start.spring.io"></img><div class="hbc-site-name">start.spring.io</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">undefined</div><div class="hbc-url">https://start.spring.io/</div></div></div></div></a></div></div><p>で作成した。</p><p><a href="../../../../public/2020/04/screencapture-start-spring-io-2020-04-03-19_49_50.png"><img src="../../../../public/2020/04/screencapture-start-spring-io-2020-04-03-19_49_50-1024x504.png"></a></p><p>こんな感じ。</p><p>このサンプルを<strong>IntellJ IDEA</strong>で開いて、適当なRestContollerを作成したところが掲題のエラー。</p><p><a href="../../../../public/2020/04/66c19942ab4ba346fdb64ccc04cde373-1.png"><img src="../../../../public/2020/04/66c19942ab4ba346fdb64ccc04cde373-1.png"></a></p><h1 id="How-to-fix"><a href="#How-to-fix" class="headerlink" title="How to fix?"></a>How to fix?</h1><p><strong>build.gradle</strong>を下記のように変更。</p><script src="https://gist.github.com/takuya-takeuchi/aad11e72e4bcac6fa9cb66d4d58ca387.js"></script><p>これでビルドが通ります。<br><strong>spring initializr</strong>で<strong>Spring Web</strong>を追加する方法でも可能です。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> Gradle </category>
          
          <category> Sprint Boot </category>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その198 Could not initialize class org.codehaus.groovy.reflection.ReflectionCache</title>
      <link href="2020/04/02/4275/"/>
      <url>2020/04/02/4275/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Could not initialize class org.codehaus.groovy.reflection.ReflectionCache というエラーが表示される。</p><a id="more"></a><p>会社を辞めて転職するため、C/C++、C#、Python以外の習得言語が欲しくなり、昔資格として取得したJavaの勉強を始めた。<br>とっかかりとして、簡単なWebAPを作ってみることにしたのだが、<strong>IntelliJ IDEA</strong> を使って <strong>Spring BOOT + Gradle</strong> のプロジェクトを用意した。</p><p>が、よくわからなかったので </p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://start.spring.io/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=start.spring.io"></img><div class="hbc-site-name">start.spring.io</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">undefined</div><div class="hbc-url">https://start.spring.io/</div></div></div></div></a></div></div><p>を使ってプロジェクトファイルを作って活用することにしてみた。</p><p>そして遭遇したのが表題。</p><h1 id="What-does-it-mean"><a href="#What-does-it-mean" class="headerlink" title="What does it mean?"></a>What does it mean?</h1><p>結論から言えば、<strong>JDK 14</strong>のせい。</p><p>既に報告されている。<br>解決策として、利用するGradleのバージョンを6.3にすることで対応できるというのが、この記事の2日前(2020/03/31)に報告されていた。</p><p>修正は、<strong>gradle\wrapper\gradle-wrapper.properties</strong> を下記のように修正してビルドし直す。</p><script src="https://gist.github.com/takuya-takeuchi/c6eae2d9bb4cc4c4e13c6f80cbeca51b.js"></script><p>これで直った!!</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> JetBrains </category>
          
          <category> Gradle </category>
          
          <category> jetbrains </category>
          
          <category> Sprint Boot </category>
          
          <category> IntelliJ IDEA </category>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その197 Visual Studio Codeのエクスプローラーを改善する  その2</title>
      <link href="2020/03/14/4249/"/>
      <url>2020/03/14/4249/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Visual Studio Codeのエクスプローラーの挙動を自分好みにする その2。</p><a id="more"></a><p>タブでファイルの表示を切り替えるとエクスプローラーペインでの選択状態も同期して変更される機能があります。<br>あれが非常に煩わしい。<br>なので無効化する。</p><h1 id="How-to"><a href="#How-to" class="headerlink" title="How to?"></a>How to?</h1><p>下記の設定のチェックを外します。</p><p><a href="../../../../public/2020/03/66c19942ab4ba346fdb64ccc04cde373.png"><img src="../../../../public/2020/03/66c19942ab4ba346fdb64ccc04cde373.png"></a></p><p> 無効化されました。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> Visual Studio Code </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その196 Ubuntu 18.04のSSDを新しいSSDにクローンする</title>
      <link href="2020/03/08/4264/"/>
      <url>2020/03/08/4264/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>dockerイメージがディスク容量を逼迫していたため新しいSSDを購入しクローンしました。</p><ul><li>移行元 (/dev/sdd)<ul><li>256GB (Ubuntu 18.04.3)</li></ul></li><li>移行先 (/dev/sdc)<ul><li>512GB</li></ul></li></ul><p>懸念点は、ディスクサイズが違っても大丈夫か、未割り当て領域を拡張できるか、の2点ですが結論から言うと問題ありませんでした。</p><h1 id="How-to-resolve"><a href="#How-to-resolve" class="headerlink" title="How to resolve?"></a>How to resolve?</h1><p>下記のページを参考にさせていただきました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://toranosuke.hatenablog.com/entry/2018-0913_disk-clone-linux" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=toranosuke.hatenablog.com"></img><div class="hbc-site-name">虎之助の徒然記</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/toranosuke_blog/20180922/20180922103535.jpg"></img></div><div class="hbc-text"><div class="hbc-title">クローンディスクの作り方 (1) Linuxの場合 - 虎之助の徒然記</div><div class="hbc-url">http://toranosuke.hatenablog.com/entry/2018-0913_disk-clone-linux</div><div class="hbc-description">【概要】 Linuxを用いたクローンディスクの作り方について説明します。ディスククローンには、dd、gdisk、gpartedの3つのコマンドを用います。それぞれの使い方や注意事項についてまとめます。 1. はじめに 2. クローンディスクの作成 3. 事前準備 3.1 必要なツ…</div></div></div></div></a></div></div><h2 id="LiveCD起動"><a href="#LiveCD起動" class="headerlink" title="LiveCD起動"></a>LiveCD起動</h2><p>実行中のシステムをクローンできませんので、LiveCDとか別のOSを起動し、移行元、移行先のディスクを接続します。</p><h2 id="クローン実行"><a href="#クローン実行" class="headerlink" title="クローン実行"></a>クローン実行</h2><p>下記でクローンします。入力と出力を間違えないように。lsblkコマンドなどできちんと確認。<br>また進捗状況は出力されません。</p><script src="https://gist.github.com/takuya-takeuchi/6339786833c06b480da4fd7d5013397e.js"></script><h2 id="GPTテーブル修正"><a href="#GPTテーブル修正" class="headerlink" title="GPTテーブル修正"></a>GPTテーブル修正</h2><script src="https://gist.github.com/takuya-takeuchi/a9aeda362bebe95becf514fc43e28428.js"></script><h2 id="ディスク拡張"><a href="#ディスク拡張" class="headerlink" title="ディスク拡張"></a>ディスク拡張</h2><p>GPartedを起動し、末尾の未割り当て領域を既存のパーティションの拡張先に割り当てます。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その195 Ubuntu 18.04でXRDPを使うとアイコンとDockが消える</title>
      <link href="2020/03/04/4258/"/>
      <url>2020/03/04/4258/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>自宅では再現しなかったのですが、会社の開発機で現象が発生したため対処法をメモ。<br>自宅のUbuntu18は <strong>Ubuntu 18.04.3 LTS</strong> だったがそれが起因しているだろうか。</p><h1 id="How-to-resolve"><a href="#How-to-resolve" class="headerlink" title="How to resolve?"></a>How to resolve?</h1><p>下記のページで対処法が載っていました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://c-nergy.be/blog/?p=12155" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=c-nergy.be"></img><div class="hbc-site-name">c-nergy.be</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">xRDP – How to Fix Theme issues in Ubuntu 18.04 remote session – Griffon&#39;s IT Library</div><div class="hbc-url">https://c-nergy.be/blog/?p=12155</div></div></div></div></a></div></div><p><strong>GNOME Tweak tool</strong>をインストールし適切な設定を行うことでアイコンとDockを復活させることが可能である。</p><script src="https://gist.github.com/takuya-takeuchi/978b7e350ada191ea2bc0d3069c9091b.js"></script><p><a href="../../../../public/2020/03/01.png"><img src="../../../../public/2020/03/01-1024x579.png"></a></p><p> Tweakで起動</p><p><a href="../../../../public/2020/03/02.png"><img src="../../../../public/2020/03/02.png"></a></p><p>Desktopからアイコンを表示できる</p><p><a href="../../../../public/2020/03/03.png"><img src="../../../../public/2020/03/03.png"></a></p><p> AppearanceでThemeやアイコンを変更可能</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> Ubuntu </category>
          
          <category> リモートデスクトップ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その194 gRPC v1.26.0 C++をビルドしHello World</title>
      <link href="2020/02/08/4248/"/>
      <url>2020/02/08/4248/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>gRPCのv1.26.0をC++でビルドしてHello Worldを動かします。</p><a id="more"></a><p>今更な記事ですが、C#、Java、Pythonと違いC++のgRPCは動かすまでもが面倒です。<br>しかも公式のサンプルですら。<br>こういうエラーに苦しめられます。</p><ul><li><a href="https://github.com/grpc/grpc/issues/16741">https://github.com/grpc/grpc/issues/16741</a></li><li><a href="https://github.com/grpc/grpc/issues/17576">https://github.com/grpc/grpc/issues/17576</a></li><li><a href="https://github.com/grpc/grpc/issues/19873">https://github.com/grpc/grpc/issues/19873</a></li></ul><p>でネットをさまよっていると解決策を提示してくれている方の記事が。<br>正確には上の問題を解決する意図の記事ではないのですが。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://medium.com/@melpon/grpc-c-%E3%81%AE%E7%92%B0%E5%A2%83%E3%82%92%E6%A7%8B%E7%AF%89%E3%81%99%E3%82%8B-4f5f40fb10ec" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=medium.com"></img><div class="hbc-site-name">Medium</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">gRPC C++ の環境を構築する</div><div class="hbc-url">https://medium.com/@melpon/grpc-c-%E3%81%AE%E7%92%B0%E5%A2%83%E3%82%92%E6%A7%8B%E7%AF%89%E3%81%99%E3%82%8B-4f5f40fb10ec</div><div class="hbc-description">アプリケーションから gRPC C++ を利用できる環境を作るのは、CMake の add_subdirectory を使えばある程度簡単にできます。</div></div></div></div></a></div></div><p>上の説明を整えて、シェルスクリプトにまとめました。<br>この方の記事ではHello Worldを実行しているわけではないですが。</p><h1 id="How-to"><a href="#How-to" class="headerlink" title="How to?"></a>How to?</h1><p>ソースは下記にまとめてあります。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/takuya-takeuchi/Demo/tree/master/gRPC2" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/6241854?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">takuya-takeuchi/Demo</div><div class="hbc-url">https://github.com/takuya-takeuchi/Demo/tree/master/gRPC2</div><div class="hbc-description">Sample source code for Demonstration, Experiment and Test - takuya-takeuchi/Demo</div></div></div></div></a></div></div><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>Ubuntu 18.04のdockerコンテナでビルドします。</p><script src="https://gist.github.com/takuya-takeuchi/392604c9580c4d8964a37f92880b7a3a.js"></script><p>そしてコンテナのビルドと起動のシェル。</p><script src="https://gist.github.com/takuya-takeuchi/70b71265c85ac926f03babf08822acf2.js"></script><h2 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h2><p>gRPCのビルドです。<br>上のコンテナ内で実行します。</p><script src="https://gist.github.com/takuya-takeuchi/168cb79b3dfebc3723750fa4becedd45.js"></script><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>これも上のコンテナ内で実行します。</p><script src="https://gist.github.com/takuya-takeuchi/d432165953927a262287ab69af07aaff.js"></script><p>上のスクリプト群を順番に実行すると、最終的にサーバーのLISTENとクライアントからの呼び出しが実行されます。</p><script src="https://gist.github.com/takuya-takeuchi/d7b82612e7c0d5beedf8d838cf8d7cf7.js"></script>]]></content>
      
      
      <categories>
          
          <category> 仮想化 </category>
          
          <category> Docker </category>
          
          <category> Linux </category>
          
          <category> C/C++ </category>
          
          <category> linux </category>
          
          <category> remote-procedure-call </category>
          
          <category> Ubuntu </category>
          
          <category> Google </category>
          
          <category> gRPC </category>
          
          <category> Remote Procedure Call </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その193 Visual Studio Codeのエクスプローラーを改善する</title>
      <link href="2020/01/25/4239/"/>
      <url>2020/01/25/4239/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Visual Studio Codeのエクスプローラーの挙動を自分好みにする。</p><a id="more"></a><p>1.41から<strong>コンパクトフォルダ</strong>なる深い階層のディレクトリ表示をまとめて表示する機能がデフォルトで有効になりました。</p><p><a href="../../../../public/2020/01/1.png"><img src="../../../../public/2020/01/1.png"></a></p><p>最初は我慢していましたが、コピーや移動でミスが多発してきたので戻すことにしました。</p><p>あとはディレクトリのインデントが狭いのも何気に見づらいのも改善。</p><h1 id="How-to"><a href="#How-to" class="headerlink" title="How to?"></a>How to?</h1><h2 id="コンパクトフォルダの無効化"><a href="#コンパクトフォルダの無効化" class="headerlink" title="コンパクトフォルダの無効化"></a>コンパクトフォルダの無効化</h2><p>下記の設定のチェックを外します。</p><p><a href="../../../../public/2020/01/3.png"><img src="../../../../public/2020/01/3.png"></a></p><p>無事に戻りました。</p><p> <a href="../../../../public/2020/01/2.png"><img src="../../../../public/2020/01/2.png"></a></p><h2 id="インデント幅の調整"><a href="#インデント幅の調整" class="headerlink" title="インデント幅の調整"></a>インデント幅の調整</h2><p>下記の設定で調整可能。デフォルトは8ピクセルでした。</p><p><a href="../../../../public/2020/01/4.png"><img src="../../../../public/2020/01/4.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> Visual Studio Code </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その192 Linuxの共有オブジェクト(so)ファイルの名前を変更する</title>
      <link href="2020/01/19/4233/"/>
      <url>2020/01/19/4233/</url>
      
        <content type="html"><![CDATA[<p>soファイルの名前を変えても別プログラムからリンクがうまくいかなかった問題での対応。</p><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>NVIDIA Caffeを改造したライブラリを作っているのですが、都合上オリジナルのNVIDIA Caffe (libcaffe.so) と共存させる必要があり、その改造Caffe (以下libcaffemod.so) をシステムにインストールします。<br>オリジナルのNVIDIA Caffeの出力は下記。</p><script src="https://gist.github.com/takuya-takeuchi/70c95c1d61c529486b488f9c568bae47.js"></script> 単純にファイル名を変えて、システム (/usr/lib/x86\_64-linux-gnu/)にインストールしたところでうまく動きません。<p>というのも、単純に名前を変えてリンクしようとしてもうまくいきません。</p><p>例えば、下記の簡単なプログラム。</p><script src="https://gist.github.com/takuya-takeuchi/84b5e3de5c3d23ea29c40e0139d3f5ed.js"></script><p>これに、libcaffe.so.0.17.3をlibcaffemod.soに名前を変えてコピーしリンクさせてみます。<br><strong>CMakeLists.txt</strong>は下記。</p><script src="https://gist.github.com/takuya-takeuchi/86cba3e45c2da3d0361595a2c8e8c48e.js"></script><p>実行してみます。単純にCaffeのバージョンを出力するだけです。</p><p>ではリンクしているsoファイルは何になるか? <script src="https://gist.github.com/takuya-takeuchi/e69328c96f62c9e6fd901103877bc085.js"></script></p><p>名前変更前にリンクしています。<br>動いているのはリンク先の同じディレクトリにオリジナルのlibcaffeが存在するからです。<br>libcaffe.soを全部削除するとプログラムが動かなくなります。</p><p>どうするべきか。</p><h1 id="How-to"><a href="#How-to" class="headerlink" title="How to?"></a>How to?</h1><p>共有オブジェクトファイルは内部に共有オブジェクトの名前を保持しています。<br>これが原因で、リンク先がファイル名変更前になっていたのです。<br>下記は名前だけ変更したlibcaffemod.soの内部に保持した名前を確認しています。</p><script src="https://gist.github.com/takuya-takeuchi/ceaada13ff7f112de0a775aea4613b23.js"></script><p>正攻法はNVIDIA CaffeのMakefileやCMakeLists.txtを書き換えて、正しい名前で出力するようにするべきです。<br>が、単純に変更してもうまくビルドできませんでした。<br>なので別の方法を。</p><h2 id="PatchELF"><a href="#PatchELF" class="headerlink" title="PatchELF"></a>PatchELF</h2><p><strong>PatchELF</strong>というLinuxの <strong>ELF (Executable and Linkable Format)ファイル</strong> を操作するツールを使います。</p><p>バイナリで配布はされていないのでソースからビルドします。<br>最新版を使ってください。少し古い版の0.8はうまく動きませんでした。</p><script src="https://gist.github.com/takuya-takeuchi/fa796dc541bceff59a6f9548b786130e.js"></script><p>make installはしてもしなくても。<br>同じディレクトリのsrc配下にバイナリが生成されるので。</p><p>これを使って先のlibcaffemod.soを変更します。<br>**–set-soname**コマンドを使います。最初の引数が新しい名前、最後が対象ファイルのパスです。</p><script src="https://gist.github.com/takuya-takeuchi/fca72b85600c0674bac4694f2742a7c4.js"></script><p>見事に変更されました。<br>一度サンプルプログラムのbuildを削除してからビルドし直して、lddでリンク先を確認してみます。</p><script src="https://gist.github.com/takuya-takeuchi/46aa3687439a1cf4fafe761a004cb632.js"></script><p>きちんと変わっていますね。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その191 Visual Studio CodeのRomote Containerに拡張機能がインストールできない場合</title>
      <link href="2020/01/09/4226/"/>
      <url>2020/01/09/4226/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Visual Studio Codeでコンテナ内に拡張機能をインストールできない場合の対応。</p><a id="more"></a><p>こんな感じのエラーが、コンテナ内ででます。<br>proxyや証明書はインストールしたコンテナのはずなのですが。</p><p>根本原因を追究したかったのですが、時間がなかったので暫定対応を行いました。</p><h1 id="How-to"><a href="#How-to" class="headerlink" title="How to?"></a>How to?</h1><p><strong>Remote - Containers</strong>拡張でデバッグ用のコンテナを起動する際、code-serverが読み込まれるのですが、その際に拡張機能の入手に失敗してるようです。<br>そのため、</p><ul><li>コンテナ起動時に拡張機能をインストール</li><li>コンテナビルド時に拡張機能をインストール</li></ul><p>という手法がとれます。<br>今回は後者を。</p><p><strong>Remote - Containers</strong>拡張で作成されるデバッグコンテナのDockerfileに <script src="https://gist.github.com/takuya-takeuchi/0bc62f765a374c2cc31806d002b8756b.js"></script> のような記述を追加します。<br>これにより、拡張機能があらかじめ追加された状態になります。</p><p>また拡張機能をあらかじめ入れておくことで、コンテナをビルドし直した際に、再度拡張機能をインストールし直す必要もなくなります。<br>本来はコンテナ起動後、手動で拡張機能をインストールしコンテナのリロードで有効化するのですが、それをスキップできます。</p><p>こんな感じ。</p><p><a href="../../../../public/2020/01/6.png"><img src="../../../../public/2020/01/6.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> Visual Studio Code </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その190 .NET CoreでP/Invokeでの動的リンクに失敗したためLD_DEBUGで原因を調べてみる</title>
      <link href="2020/01/03/4223/"/>
      <url>2020/01/03/4223/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Windows上でOpenCVのstaticライブラリを作成し、自作のdllにリンクさせる方法。</p><a id="more"></a><p>.NETでP/Invokeするとよくあるエラーの一つが、Nativeのdllが見つからないというのがあります。<br>例えば下記のような。</p><script src="https://gist.github.com/takuya-takeuchi/f71cab63107096c94711412d651c713d.js"></script><p>たいていは、そのdllがないのではなく、そのdllが依存しているライブラリが存在しないというパターンが多い。<br>Windowsの場合は<strong>DepenecyWalker</strong>とかで割と簡単に原因がわかる。<br>OSXなら、<strong>otool -L</strong>、Linuxの場合は、<strong>ldd</strong>を使えばわかる。</p><p>しかし、今回、Ubuntuで発生した上記エラーに対し、lddを適用したところ <script src="https://gist.github.com/takuya-takeuchi/2a586668e71d77495788d9066ff0fef0.js"></script></p><p>エラーが見当たらなかった。</p><p>という問題の解決方法。</p><h1 id="How-to"><a href="#How-to" class="headerlink" title="How to?"></a>How to?</h1><p>タイトル通り<strong>LD_DEBUG</strong>を使います。<br>ググっても、使い方がわかりづらかったのですが、要するに <script src="https://gist.github.com/takuya-takeuchi/74fb869c4545bedfee6bf616d0ee6bd7.js"></script></p><p>のように、問題が発生するコマンドと合わせて実行するということです。</p><p>標準エラー出力に出力されるのでリダイレクトでファイルに書き出します。<br>かなり巨大なので注意。</p><script src="https://gist.github.com/takuya-takeuchi/df829543c2edca762f812f89ecf79829.js"></script><p>問題のdll名をgrepしていくと怪しそうなところが。<br>要するに、シンボル <strong>omp_get_max_threads</strong> を <strong>lookup in</strong> していったけどついに見つかりませんでした、ということでした。</p><p>今回はdllがなかったのではなくシンボルが見つからなかったというパターン。<br>自分で呼び出しているものならともかく依存しているライブラリだと実行時のエラーメッセージには出ませんね。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> C/C++ </category>
          
          <category> linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その189 OpenCVを自作dllに静的リンクさせる</title>
      <link href="2019/12/31/4219/"/>
      <url>2019/12/31/4219/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Windows上でOpenCVのstaticライブラリを作成し、自作のdllにリンクさせる方法。</p><a id="more"></a><p>普通にリンクさせると、</p><blockquote><p>opencv_world341.lib(alloc.cpp.obj) : error LNK2038: ‘RuntimeLibrary’ の不一致が検出されました。値 ‘MT_StaticRelease’ が MD_DynamicRele ase の値 ‘opencv.obj’ と一致しません。</p></blockquote><p>と表示されてしまう。<br>一工夫必要。</p><h1 id="How-to"><a href="#How-to" class="headerlink" title="How to?"></a>How to?</h1><p>CMakeに渡す引数に下記を追加。特に、<strong>BUILD_WITH_STATIC_CRT</strong>が重要。</p><ul><li>BUILD_SHARED_LIBS=OFF</li><li>BUILD_WITH_STATIC_CRT=OFF</li></ul><p>OpenCVのビルドとサンプルdllをビルドできるサンプルは下記。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/takuya-takeuchi/Demo/tree/master/OpenCVStatic" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/6241854?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">takuya-takeuchi/Demo</div><div class="hbc-url">https://github.com/takuya-takeuchi/Demo/tree/master/OpenCVStatic</div><div class="hbc-description">Sample source code for Demonstration, Experiment and Test - takuya-takeuchi/Demo</div></div></div></div></a></div></div><p>下記のように簡単に使用可能。</p><script src="https://gist.github.com/takuya-takeuchi/17f71c2169dcf8d3c65f2d7c911bd350.js"></script>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
          <category> その他 </category>
          
          <category> CMake </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その188 privateなdocker registryにログインすると x509 エラー</title>
      <link href="2019/11/30/4211/"/>
      <url>2019/11/30/4211/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>自宅のSynology上に構築したdocker registryに<strong>Let’s Encrypt</strong>でHTTPS化後、Webブラウザからアクセスはできるが、docker loginによる認証が下記のように通らない場合の対応。</p><script src="https://gist.github.com/takuya-takeuchi/8d616d1770260292a3652c5365cc1d35.js"></script><h1 id="How-to"><a href="#How-to" class="headerlink" title="How to?"></a>How to?</h1><p>docker registryで使用している証明書 (*.crt) をdocker loginを使うマシンにコピーします。<br><strong>REGISTRY_HTTP_TLS_CERTIFICATE</strong>で指定しているはず。</p><p>コピーした*crtを<strong>registry.crt</strong>とします。<br>こんな感じでdockerデーモン管理下の証明書置き場に展開します。<br>展開する際、ファイル名は<strong>ca.crt</strong>にします。</p><script src="https://gist.github.com/takuya-takeuchi/3056bc9f552faff6274ab8e484821161.js"></script><p>もう一度ログインしてみます。</p><script src="https://gist.github.com/takuya-takeuchi/e1ebd4b4df9d9af409dddcc1e66ae75b.js"></script><p>うまくいきました。</p>]]></content>
      
      
      <categories>
          
          <category> 仮想化 </category>
          
          <category> Docker </category>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その187 Ubuntuで次回起動時のOSを一時的に変更する</title>
      <link href="2019/11/10/4205/"/>
      <url>2019/11/10/4205/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>作業メモ</p><h1 id="How-to"><a href="#How-to" class="headerlink" title="How to?"></a>How to?</h1><h3 id="再起動してUEFIスクリーンを表示"><a href="#再起動してUEFIスクリーンを表示" class="headerlink" title="再起動してUEFIスクリーンを表示"></a>再起動してUEFIスクリーンを表示</h3><script src="https://gist.github.com/takuya-takeuchi/b6ab29a1c2f17e42c3f3e51dcb490fb5.js"></script><h3 id="次回起動OSを一時的に指定"><a href="#次回起動OSを一時的に指定" class="headerlink" title="次回起動OSを一時的に指定"></a>次回起動OSを一時的に指定</h3><script src="https://gist.github.com/takuya-takeuchi/0a311ce3410ac29b7d6df8b04dd6f37e.js"></script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その187 Ubuntu 18.04.3でXRDPを使う</title>
      <link href="2019/11/10/4203/"/>
      <url>2019/11/10/4203/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>割とネットで転がっている話題ですが。<br>肝は<strong>18.04.3</strong>であること。</p><h1 id="What-is-a-problem"><a href="#What-is-a-problem" class="headerlink" title="What is a problem?"></a>What is a problem?</h1><p>どうも、<strong>18.04.2</strong>で<strong>xorgxrdp</strong>というパッケージが<strong>xrdp</strong>のインストールで入らなくなった模様。<br>なので、私がお世話になっていた下記のページの方法では少し手順が不足するようになりました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://www.hiroom2.com/2018/04/28/ubuntu-1804-xrdp-gnome-ja/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=www.hiroom2.com"></img><div class="hbc-site-name">Narrow Escape</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://image.jimcdn.com/app/cms/image/transf/dimension=4000x3000:format=png/path/sdcc8e67e188f864a/image/i02a2694d25d939a7/version/1525686928/image.png"></img></div><div class="hbc-text"><div class="hbc-title">Ubuntu 18.04: GNOMEデスクトップ環境にXRDPで接続する</div><div class="hbc-url">https://www.hiroom2.com/2018/04/28/ubuntu-1804-xrdp-gnome-ja/</div><div class="hbc-description">XRDPをインストールして、GNOMEデスクトップ環境にXRDPで接続する手順を記載します。</div></div></div></div></a></div></div><p>なので、最後に追加インストールを加えた下記のシェルで対応可能なはず。</p><script src="https://gist.github.com/takuya-takeuchi/daa219001c3674aab7e5d18832d7ec88.js"></script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> Ubuntu </category>
          
          <category> リモートデスクトップ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その186 git lfs でpushする際のコマンド</title>
      <link href="2019/11/10/4199/"/>
      <url>2019/11/10/4199/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>作業メモ。<br>Windowsからpushしようとすると色々エラーが発生し、いつも面倒だな、と思うので。</p><h1 id="How-to"><a href="#How-to" class="headerlink" title="How to"></a>How to</h1><p>下記で対応。</p><script src="https://gist.github.com/takuya-takeuchi/6216b32c22d08e29127a60ed40262999.js"></script>]]></content>
      
      
      <categories>
          
          <category> バージョン管理システム </category>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETで機械学習を試してみる ML.NET編 第2回</title>
      <link href="2019/10/15/4191/"/>
      <url>2019/10/15/4191/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2019/10/14/4174">前回</a>の続き。</p><a id="more"></a><h1 id="デモ-の続き"><a href="#デモ-の続き" class="headerlink" title="デモ (の続き)"></a>デモ (の続き)</h1><p><a href="https://taktak.jp/2019/10/14/4174">前回</a>はプロジェクトにONNXファイルを追加し、コードが自動生成されることを確認しました。<br>あと、前回記述を忘れましたが、アプリは <strong>.NET Core 3.0</strong> です。</p><h2 id="パッケージ追加"><a href="#パッケージ追加" class="headerlink" title="パッケージ追加"></a>パッケージ追加</h2><p>生成されたコードは様々なパッケージに依存しています。</p><p><a href="../../../../public/2019/10/32eff7f7fc3f627041293d786a8ff203.png"><img src="../../../../public/2019/10/32eff7f7fc3f627041293d786a8ff203.png"></a></p><p>これを解決するために、nugetで下記のパッケージを追加します。</p><ul><li>Microsoft.Windows.SDK.Contracts<ul><li>10.0.17763.1000</li></ul></li></ul><p>これでビルドが通ります。</p><h2 id="画像の読み込み処理の下準備"><a href="#画像の読み込み処理の下準備" class="headerlink" title="画像の読み込み処理の下準備"></a>画像の読み込み処理の下準備</h2><p>前回生成した自動生成の <strong>Input クラス</strong> を下記のように修正。</p><script src="https://gist.github.com/takuya-takeuchi/12387a96a0ab4f76f3d5ef2ee24dfe7d.js"></script><h2 id="Parserの作成"><a href="#Parserの作成" class="headerlink" title="Parserの作成"></a>Parserの作成</h2><p>先に、YOLOの出力をBoundingBoxに変換するパーサーを作ります。<br>幸いにして偉大なる先人が既に作成していらしたので、クラス名などを手直ししてプロジェクトに追加します。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/elbruno/Blog/tree/master/20180806%20UwpMLNet%20TinyYoloV2%201.2/Yolo9000" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/3533489?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">elbruno/Blog</div><div class="hbc-url">https://github.com/elbruno/Blog/tree/master/20180806%20UwpMLNet%20TinyYoloV2%201.2/Yolo9000</div><div class="hbc-description">Source code to support some of my Blog entries. Contribute to elbruno/Blog development by creating an account on GitHub.</div></div></div></div></a></div></div><p>上から下記の2つを移植します。</p><ul><li>YoloBoundingBox.cs</li><li>YoloWinMLParser.cs</li></ul><h2 id="推論処理"><a href="#推論処理" class="headerlink" title="推論処理"></a>推論処理</h2><p>モデルファイル、画像ファイルを読みこんで推論します。<br>コンソールなので引数にモデルファイルと画像ファイルのパスを渡します。<br>また、画像に対して結果を描画したいので、下記のパッケージを追加します。</p><ul><li>System.Drawing.Common</li></ul><p>そして出来上がったのが下記。</p><script src="https://gist.github.com/takuya-takeuchi/b5e1cb0848210944cf00f74d97e0f5ff.js"></script><p>結果の閾値は少し恣意的に選定しましたが、結果の画像は下記です。<br>なお、入力画像は、<a href="https://github.com/pjreddie/darknet/blob/master/data/dog.jpg">本家YOLOのリポジトリにあるサンプル画像</a>です。</p><p><a href="../../../../public/2019/10/result.jpg"><img src="../../../../public/2019/10/result.jpg"></a></p><p>自転車が領域に対して矩形が大きすぎますが、他は概ね正しいです。<br>実際のYOLO v3は正しく認識できていた記憶があるので、Tiny故の精度の低さでしょうか?</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>C#だけでYOLOを使うことができました。<br>モデルファイルの推論処理周りはだいぶ楽ですが、画像の読み書きは完全にUWPの世界で正直面倒….</p><h1 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h1><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/takuya-takeuchi/Demo/tree/master/ML.NET1/YoloTest" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/6241854?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">takuya-takeuchi/Demo</div><div class="hbc-url">https://github.com/takuya-takeuchi/Demo/tree/master/ML.NET1/YoloTest</div><div class="hbc-description">Sample source code for Demonstration, Experiment and Test - takuya-takeuchi/Demo</div></div></div></div></a></div></div>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET </category>
          
          <category> net-framework </category>
          
          <category> .NET Framework </category>
          
          <category> %e3%83%87%e3%82%a3%e3%83%bc%e3%83%97%e3%83%a9%e3%83%bc%e3%83%8b%e3%83%b3%e3%82%b0 </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> ディープラーニング </category>
          
          <category> .NETで機械学習を試してみる ML.NET編 </category>
          
          <category> ML.NET </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETで機械学習を試してみる ML.NET編 第1回</title>
      <link href="2019/10/14/4174/"/>
      <url>2019/10/14/4174/</url>
      
        <content type="html"><![CDATA[<p>もう旬なネタでも無いですが。</p><a id="more"></a><h1 id="What’s-is-ML-NET"><a href="#What’s-is-ML-NET" class="headerlink" title="What’s is ML.NET?"></a>What’s is ML.NET?</h1><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://docs.microsoft.com/ja-jp/dotnet/machine-learning/how-does-mldotnet-work" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=docs.microsoft.com"></img><div class="hbc-site-name">docs.microsoft.com</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png"></img></div><div class="hbc-text"><div class="hbc-title">ML.NET の概要とそのしくみ - ML.NET</div><div class="hbc-url">https://docs.microsoft.com/ja-jp/dotnet/machine-learning/how-does-mldotnet-work</div><div class="hbc-description">ML.NET を使用すると、オンラインまたはオフラインのどちらのシナリオでも、.NET アプリケーションに機械学習を追加できます。 この機能により、データを使った自動予測をアプリケーションで利用できるようになります。ML.NET を使うためにネットワークに接続する必要はありません…</div></div></div></div></a></div></div><p>要するに</p><ul><li>.NETアプリケーションに機械学習の機能を追加</li><li>オンライン、オフラインどっちも大丈夫だけどオフライン対応すればネットワークは気にしなくてもいい</li><li>32bitアプリも大丈夫<ul><li>ただし、Tensorflow、LightGBM、ONNXに関連する機能は使えない</li></ul></li></ul><p>って感じ。</p><p>現状、ディープラーニングの機能をエコシステム、特にデスクトップアプリに組み込むには、</p><ul><li>モデルファイルの読み込み、推論のI/F</li><li>GPUのサポート<ul><li>無くても良いが性能がボトルネックになる</li></ul></li></ul><p>が必須。</p><p>ディープラーニングの学習はPython一強で、ビジネスにデプロイしようとするとこれが足を引っ張る。<br>無論、Pythonで推論を提供するサーバーライクなアプリを書けば良いが、ネットワーク越しにすると、通信速度が足を引っ張る。システムにインストールするとPythonが必要になり、客先のシステムの制限に引っかかる可能性がある。</p><p>これらを打開するためにも、現在、AIを実世界にデプロイする方法がいろいろ模索されており、ML.NETもその一つ。</p><h1 id="デモ-の準備"><a href="#デモ-の準備" class="headerlink" title="デモ (の準備)"></a>デモ (の準備)</h1><p>今回は、YOLO (You Only Look Once) v2のTinyモデルで物体認識のタスクをためす。<br>デモの開発・実行環境</p><ul><li>Windows 10 1809以降<ul><li>Windows ML APIの正式版のため</li><li>開発自体は1809以前でも良い (Windows SDKがあれば)</li></ul></li><li>Visual Studio 2017以降<ul><li>2019のが良い</li></ul></li><li>C#の.NET Coreコンソール</li></ul><h2 id="モデルファイル"><a href="#モデルファイル" class="headerlink" title="モデルファイル"></a>モデルファイル</h2><p>モデルファイルはネットに転がっているのですが… </p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://gallery.azure.ai/Model/Tiny-YOLOv2" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=gallery.azure.ai"></img><div class="hbc-site-name">Azure AI Gallery</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://az712634.vo.msecnd.net/content/14b2744cf8d6418c87ffddc3f3127242/9502630827244d60a1214f250e3bbca7/025a4433063f41528a9fea4be7e57619/aacb964eee004036a24f7d802b32a763/image"></img></div><div class="hbc-text"><div class="hbc-title">Tiny YOLOv2</div><div class="hbc-url">https://gallery.azure.ai/Model/Tiny-YOLOv2</div><div class="hbc-description">This model is a real-time neural network for object detection that detects 20 different classes. It is made up of 9 convolutional layers and…</div></div></div></div></a></div></div><p>のは <strong>使えません</strong>。<br>古いのか、後述のツールでコードの自動生成が効きません。</p><p>なので、githubから入手します。</p><p><a href="../../../../public/2019/10/8b2af5a5f3b0c51914faf7ce8e0473c6.png"><img src="../../../../public/2019/10/8b2af5a5f3b0c51914faf7ce8e0473c6-1024x500.png"></a></p><p><strong>tiny_yolov2.tar.gz</strong> というファイルがダウンロードできます。<br><strong>1.0 は使えない</strong> のでそれ以外を。<br>ダウンロード後、展開して <strong>model.onnx</strong> だけ取り出して名前を変更しておきます。<br>ここでは <strong>Tiny_yolov2_1.3.onnx</strong> に変更しています。</p><h2 id="コード生成"><a href="#コード生成" class="headerlink" title="コード生成"></a>コード生成</h2><p>入手したモデルファイルからコードを生成します。<br>機械学習の面倒なところの一つに入出力データのI/Fを合わせる、というところがあります。<br>どんなアプリもそうなのですが、機械学習はこのあたりが厳密。<br>エラー無く動いても結果がおかしい、ということは多々あります (例えば、RGBチャネルの順番が違うとか)</p><p>このあたりの手間をなくすために下記の方法が用意されています。</p><ul><li>Windows Machine Learning Code Generator<ul><li>Visual Studioの拡張機能</li></ul></li><li>mlgen<ul><li>Windows SDK付属のCLI</li></ul></li></ul><h3 id="Windows-Machine-Learning-Code-Generator"><a href="#Windows-Machine-Learning-Code-Generator" class="headerlink" title="Windows Machine Learning Code Generator"></a>Windows Machine Learning Code Generator</h3><p>インストールは簡単。</p><p><a href="../../../../public/2019/10/84c2bd2c9ea17da274f2ee054f35a83f.png"><img src="../../../../public/2019/10/84c2bd2c9ea17da274f2ee054f35a83f.png"></a></p><p>インストール後、全てのVisual Studioを終了。再起動ではなく、終了。でないとインストーラが起動しないので。<br>プロジェクトに先のONNXファイルをプロジェクトに読み込ませます。<br>そしてプロジェクトに先のONNXファイルを追加します。<br>すると、ONNXファイルに対応するコードが自動生成されます。</p><p><a href="../../../../public/2019/10/41794d932ba8e7e87dbf64be9631aa3f.png"><img src="../../../../public/2019/10/41794d932ba8e7e87dbf64be9631aa3f.png"></a></p><p>注意するのは、フォルダの中に追加すると、プロジェクトのルートにも同じファイルが重複して生成されてしまいます。<br>削除すれば問題ないですが。</p><h3 id="mlgen"><a href="#mlgen" class="headerlink" title="mlgen"></a>mlgen</h3><p><strong>mlgen.exe</strong> は <strong>C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x64\mlgen.exe</strong> とかのSDK配下に存在します。<br>ヘルプを見てみます。</p><script src="https://gist.github.com/takuya-takeuchi/07152550bc8da37d80ddadcdf2950858.js"></script> 指定するのは、<ul><li>入力元のONNXファイルのパス</li><li>出力するコードの言語</li><li>出力するコードの名前空間<ul><li>オプション。</li></ul></li><li>出力するコードのクラス名に付与する接頭辞<ul><li>オプション。</li></ul></li><li>出力先ディレクトリ<ul><li>オプション。なければ標準出力に出力。</li></ul></li></ul><p>です。<br>試しに、名前空間、接頭辞、出力先を指定せずに実行してみました。</p><script src="https://gist.github.com/takuya-takeuchi/a0f2369470304930d2fbd138e77bdd77.js"></script><p>みたいにしてみます。</p><p>先に拡張機能で生成したものと同じものができます。<br>(名前空間は除く)</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p><strong>Windows 10 SDK バージョン 1903 (10.0.18362.1)</strong> からは <strong>mlgen</strong> は同梱されませんので、拡張機能を使いましょう。<br>古いmlgenでも良いですが、最新のONNXファイルに対応されない可能性が高いのでやめましょう。</p><p>拡張機能のディレクトリ配下にmlgen.exeがあるのでそれを使うのもありかも (<strong>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\Extensions\brkn2ieg.yfd\mlgen.exe</strong> とか。非公式でしょうが)</p><p>また、実行時、<strong>Required attribute ‘consumed_inputs’ is missing</strong> というエラーが出たりしたら、古い (例えば、10.0.17763.0より古い) mlgen で変換できたりする可能性がありますが、使わない方が無難です。古いAPIを想定しているので。</p><p>例えば、最初に使えないと話した1.0のONNXファイル。<br>こんな感じで全然違うコードができます。</p><script src="https://gist.github.com/takuya-takeuchi/1d1549aadbbdef77aa00302a6db32e7f.js"></script><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>今回はここまで。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET </category>
          
          <category> net-framework </category>
          
          <category> .NET Framework </category>
          
          <category> %e3%83%87%e3%82%a3%e3%83%bc%e3%83%97%e3%83%a9%e3%83%bc%e3%83%8b%e3%83%b3%e3%82%b0 </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> ディープラーニング </category>
          
          <category> .NETで機械学習を試してみる ML.NET編 </category>
          
          <category> ML.NET </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その185 Ubuntu 16.04でデフォルトのPythonをPython3にする</title>
      <link href="2019/10/12/4170/"/>
      <url>2019/10/12/4170/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>作業メモ。<br>基本の基本ですが。</p><h1 id="How-to"><a href="#How-to" class="headerlink" title="How to"></a>How to</h1><p>単純に、<strong>alias</strong> 駄目でした。<br>どういうときに駄目だったかというと <strong>Makefile</strong> でpython呼び出してもaliasだと反映前になっていたため。</p><p>対応は <script src="https://gist.github.com/takuya-takeuchi/a697ead7a22cf531735cd34e86b149ce.js"></script></p>]]></content>
      
      
      <categories>
          
          <category> %e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%e8%a8%80%e8%aa%9e </category>
          
          <category> Linux </category>
          
          <category> Python </category>
          
          <category> linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その184 JenkinsにOSXのSlaveノードを追加する</title>
      <link href="2019/10/05/4164/"/>
      <url>2019/10/05/4164/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>追加する作業のメモ。<br>MacMiniのTimemachine復元に失敗したため再インストールしたので。</p><h1 id="How-to"><a href="#How-to" class="headerlink" title="How to"></a>How to</h1><h2 id="OSX側"><a href="#OSX側" class="headerlink" title="OSX側"></a>OSX側</h2><p>まず、秘密鍵、公開鍵を作成し、<strong>authorized_keys</strong>を作成していきます。</p><script src="https://gist.github.com/takuya-takeuchi/27ad837ad33498e0b517297ea421b894.js"></script><p>続いて、Javaをインストール。<br>サクッとHomebrewでインストール。</p><script src="https://gist.github.com/takuya-takeuchi/ff5a020023c01f382831251c2b1832a8.js"></script><h2 id="Jenkins側"><a href="#Jenkins側" class="headerlink" title="Jenkins側"></a>Jenkins側</h2><p>注意するのは、既存のエージェント設定は作り直したほうが良いです。<br>というのも、認証情報だけ更新しても動作しなかったためです。<br>ノードを追加します。<br>新規で作り直すので、<strong>Permanent Agent</strong>を指定。</p><p><a href="../../../../public/2019/10/001.png"><img src="../../../../public/2019/10/001-1024x214.png"></a></p><p><strong>リモートFSルート</strong>はJenkinsユーザのフォルダ配下を指定します。<br>認証情報は次の画像のような感じ。</p><p><a href="../../../../public/2019/10/002.png"><img src="../../../../public/2019/10/002-1024x613.png"></a></p><p>秘密鍵は<strong>BEGIN RSA PRIVATE KEY</strong>と<strong>END RSA PRIVATE KEY</strong>を含む形でペーストします。</p><p><a href="../../../../public/2019/10/003.png"><img src="../../../../public/2019/10/003-1024x537.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> Apple </category>
          
          <category> CI </category>
          
          <category> ci </category>
          
          <category> Jenkins </category>
          
          <category> OSX </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その183 添字演算子をポインターオブジェクトから使う</title>
      <link href="2019/09/28/4162/"/>
      <url>2019/09/28/4162/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><a href="https://taktak.jp/2019/09/28/4159">前回</a>同様。</p><h1 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h1><script src="https://gist.github.com/takuya-takeuchi/21e571815f6bef4538289540dfb5f3a9.js"></script> ありがとう、SO!!]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その182 関数呼び出し演算子をポインターオブジェクトから使う</title>
      <link href="2019/09/28/4159/"/>
      <url>2019/09/28/4159/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>もうタイトルそのまま。<br>すぐに忘れるし、調べてもキーワードが悪いのか、すぐにたどり着けないためメモ。</p><h1 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h1><script src="https://gist.github.com/takuya-takeuchi/7672909457cbc1ccb71a6d29573a1038.js"></script> ありがとう、SO!!]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その181 公式GitLabからExportしてImportする際にエラー</title>
      <link href="2019/09/24/4129/"/>
      <url>2019/09/24/4129/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>公式のGitLabのリポジトリをExportしてローカルのGitLabにImportする際、下記のエラーが発生しました。</p><p><a href="../../../../public/2019/09/error-1.png"><img src="../../../../public/2019/09/error-1-1024x128.png"></a></p><p><strong>Import version mismatch: Required 0.2.3 but was 0.2.4</strong></p><h1 id="What-does-it-mean"><a href="#What-does-it-mean" class="headerlink" title="What does it mean?"></a>What does it mean?</h1><p>要するに</p><p><strong>(Export先のGitLabは)0.2.3を要求しているけど、(Import仕様としているデータは)0.2.4だよ</strong></p><p>ってことです。</p><p>大抵、公式のGitLabは最新版なので、ローカルのGitLabが古く、Importシステムのバージョン不一致になってしまった模様。</p><h1 id="How-to-resolve"><a href="#How-to-resolve" class="headerlink" title="How to resolve?"></a>How to resolve?</h1><p>安全にやるなら、ローカルのGitLabをバージョンアップするのが筋でしょうが、そうはいかないからこの記事があるわけです。</p><p>対策を探したところ、公式のIssueに </p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://gitlab.com/gitlab-org/gitlab-foss/issues/27217#note_23249225" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=gitlab.com"></img><div class="hbc-site-name">GitLab</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://assets.gitlab-static.net/uploads/-/system/project/avatar/13083/logo-extra-whitespace.png"></img></div><div class="hbc-text"><div class="hbc-title">After attempting to import old project: Import version mismatch - stuck at error, can&#39;t attempt any other import (#27217) · Issues · GitLab.org / GitLab FOSS</div><div class="hbc-url">https://gitlab.com/gitlab-org/gitlab-foss/issues/27217#note_23249225</div><div class="hbc-description"> Summary I exported a project from GitLab 8.13 (if I recall correctly) a while back, which is now deleted. I just...</div></div></div></div></a></div></div><blockquote><p>If the import is small or does not have many features there are more probabilities that it will succeed, and you could try the following at your own risk:</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir project_export</span><br><span class="line">tar xfv old_export_file.tar.gz -C project_export</span><br><span class="line"><span class="built_in">cd</span> project_export</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;0.1.6&#x27;</span> &gt; VERSION</span><br><span class="line">tar czf experimental_new_project_export.tar.gz *</span><br></pre></td></tr></table></figure><p>と紹介されていました。</p><p>バージョンの不一致をだますために、内部のバージョン表記を書き換えるようです。<br>上のシェルを少し使いやすくしました。</p><script src="https://gist.github.com/takuya-takeuchi/a69bf72041bafe66ab3d6abfa573da04.js"></script><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./sample.sh 2019-09-24_01-11-731_testman_tests_export.tar 0.2.3</span><br></pre></td></tr></table></figure><p>指定したエクスポートファイルのバージョンを第2引数で指定したバージョンで上書きします。</p><p>当然ながら問題が起きる可能性がありますが、まずはお試しあれ。<br>ソースだけなら普通にcloneアンドpushで良いですが、Issueがあるとそうもいかず。</p>]]></content>
      
      
      <categories>
          
          <category> バージョン管理システム </category>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その180 Ubuntuに最新のgitをインストール</title>
      <link href="2019/09/21/4126/"/>
      <url>2019/09/21/4126/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>もう何番煎じかわからないですが。</p><h1 id="How-to"><a href="#How-to" class="headerlink" title="How to?"></a>How to?</h1><p>最初は公式 </p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://launchpad.net/~git-core/+archive/ubuntu/ppa" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=launchpad.net"></img><div class="hbc-site-name">Launchpad</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="/@@/launchpad.png"></img></div><div class="hbc-text"><div class="hbc-title">Git stable releases : “Ubuntu Git Maintainers” team</div><div class="hbc-url">https://launchpad.net/~git-core/+archive/ubuntu/ppa</div><div class="hbc-description">The most current stable version of Git for Ubuntu.For release candidates, go to https://launchpad.net/~git-core/+archive/candidate .</div></div></div></div></a></div></div><p>に従ったのですが、<strong>add-apt-repository</strong>がハングしてしまいうまくいかず。<br>そのため、手動でsource.listを編集する方法を。</p><script src="https://gist.github.com/takuya-takeuchi/351ee08b112ce9e2fb57b27e5ac5f796.js"></script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> バージョン管理システム </category>
          
          <category> git </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その179 Lenovo Chromebook S330にUbuntu18.04をインストールしSSHで接続</title>
      <link href="2019/08/13/4109/"/>
      <url>2019/08/13/4109/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>こんなのを購入して遊んでいます。</p><p>ベースはLinuxなので遊びたいのですが、Chromebookへの接続はいろいろ制限されています。<br>例えば、Teamviewerはクライアント専用。これは面白くないです。</p><p>なので、仮想OSとして<strong>Ubuntu 18.04</strong>をインストールし遊んでみます。</p><h1 id="Install-Ubuntu"><a href="#Install-Ubuntu" class="headerlink" title="Install Ubuntu"></a>Install Ubuntu</h1><p>まずは仮想OSのインストール。</p><h2 id="デベロッパーモードで起動"><a href="#デベロッパーモードで起動" class="headerlink" title="デベロッパーモードで起動"></a>デベロッパーモードで起動</h2><p>ESCキーとF3 (再読込ボタン) を押しながら電源を入れ、<strong>Ctrl+D</strong> を押してデベロッパーモードで起動。<br>ローカルのデータが消えますので購入直後に実施しましょう。</p><h2 id="croutonをインストール"><a href="#croutonをインストール" class="headerlink" title="croutonをインストール"></a>croutonをインストール</h2><p><strong>crouton</strong>は、ChromeBookにLinux環境を構築するためのツール。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/dnschneid/crouton" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars1.githubusercontent.com/u/522200?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">dnschneid/crouton</div><div class="hbc-url">https://github.com/dnschneid/crouton</div><div class="hbc-description">Chromium OS Universal Chroot Environment. Contribute to dnschneid/crouton development by creating an account on GitHub.</div></div></div></div></a></div></div><p>Chromeブラウザを起動しアドレスバーに <strong><a href="https://goo.gl/fd3zc">https://goo.gl/fd3zc</a></strong> と入力し保存します。<br>省略アドレスで、<strong><a href="https://raw.githubusercontent.com/dnschneid/crouton/master/installer/crouton">https://raw.githubusercontent.com/dnschneid/crouton/master/installer/crouton</a></strong>にリダイレクトされます。</p><h2 id="Ubuntu-18-04をインストール"><a href="#Ubuntu-18-04をインストール" class="headerlink" title="Ubuntu 18.04をインストール"></a>Ubuntu 18.04をインストール</h2><p><strong>Ctrl+Alt+T</strong>でターミナルタブを開きます。<br>シェルに切り替えるために</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> shell</span></span><br></pre></td></tr></table></figure><p>と入力します。<br>続いて、ダウンロードしたcroutonを使い、インストールを行います。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo sh ~/Downloads/crouton -r bionic -t gnome-desktop</span></span><br></pre></td></tr></table></figure><p>実行するとインストールが始まります。<br>しばらくすると、インストールしたUbuntuに追加するユーザ名とパスワードを聞かれます。</p><h2 id="Ubuntu-18-04を起動"><a href="#Ubuntu-18-04を起動" class="headerlink" title="Ubuntu 18.04を起動"></a>Ubuntu 18.04を起動</h2><p>ターミナルタブから</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo startgnome</span></span><br></pre></td></tr></table></figure><p>これでUbuntuに切り替わります。<br>Chrome OSに戻りたい場合は、<strong>Ctrl+Alt+Shift+F1</strong>で戻ります。<br>停止するなら、ターミナル上で<strong>Ctrl+C</strong>で停止できます。</p><h1 id="Install-sshd"><a href="#Install-sshd" class="headerlink" title="Install sshd"></a>Install sshd</h1><p>Ubuntuにsshdをインストールします。<br>まずターミナルを起動します。<br><strong>Activity</strong>から<strong>terminal</strong>と入力します</p><h2 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h2><p>ターミナルから</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt update</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt upgrade</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt install -y ssh iptables net-tools</span></span><br></pre></td></tr></table></figure><p>として必要なパッケージをインストールしておきます。<br><strong>net-tools</strong>はなくてもよいですが、通信状況とかを把握したいなら必須です。</p><h2 id="ファイアウォールの変更"><a href="#ファイアウォールの変更" class="headerlink" title="ファイアウォールの変更"></a>ファイアウォールの変更</h2><p>ターミナルから <strong>/etc/rc.local</strong> を作成し、変更をします。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vi /etc/rc.local</span></span><br></pre></td></tr></table></figure><p>下記の内容を追加します。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/sbin/iptables -P INPUT ACCEPT</span><br></pre></td></tr></table></figure><p>この内容はすべてのインバウンド通信を許可するなので不安なら </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/sbin/iptables -I INPUT -p tcp --dport 22 -j ACCEPT</span><br></pre></td></tr></table></figure><p>とします。</p><h2 id="sshd自動起動設定"><a href="#sshd自動起動設定" class="headerlink" title="sshd自動起動設定"></a>sshd自動起動設定</h2><p>続いて、**/etc/rc.local** に下記の内容を追加します。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p -m0755 /var/run/sshd</span><br><span class="line">/usr/sbin/sshd</span><br></pre></td></tr></table></figure><p>そして、保存を行い、</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo chmod 755 /etc/rc.local</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls -la /etc/rc.local</span></span><br><span class="line">-rwxr-xr-x. 1 root root 115 Aug 13 04:10 /etc/rc.local</span><br></pre></td></tr></table></figure><p>実行権限を付与します。</p><h2 id="鍵の生成"><a href="#鍵の生成" class="headerlink" title="鍵の生成"></a>鍵の生成</h2><p>SSHの接続に必要なホストの秘密鍵、公開鍵を生成します。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo ssh-keygen -A</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls -la /etc/ssh</span></span><br><span class="line">total 596</span><br><span class="line">drwxr-xr-x.   2 root root   4096 Aug 13 04:18 .</span><br><span class="line">drwxr-xr-x. 120 root root   4096 Aug 13 04:16 ..</span><br><span class="line">-rw-r--r--.   1 root root 553122 Mar  4 21:17 moduli</span><br><span class="line">-rw-r--r--.   1 root root   1580 Mar  4 21:17 ssh_config</span><br><span class="line">-rw-r--r--.   1 root root   3264 Mar  4 21:17 sshd_config</span><br><span class="line">-rw-------.   1 root root    668 Aug 13 04:18 ssh_host_dsa_key</span><br><span class="line">-rw-r--r--.   1 root root    604 Aug 13 04:18 ssh_host_dsa_key.pub</span><br><span class="line">-rw-------.   1 root root    227 Aug 13 04:16 ssh_host_ecdsa_key</span><br><span class="line">-rw-r--r--.   1 root root    176 Aug 13 04:16 ssh_host_ecdsa_key.pub</span><br><span class="line">-rw-------.   1 root root    411 Aug 13 04:16 ssh_host_ed25519_key</span><br><span class="line">-rw-r--r--.   1 root root     96 Aug 13 04:16 ssh_host_ed25519_key.pub</span><br><span class="line">-rw-------.   1 root root   1679 Aug 13 04:16 ssh_host_rsa_key</span><br><span class="line">-rw-r--r--.   1 root root    396 Aug 13 04:16 ssh_host_rsa_key.pub</span><br><span class="line">-rw-r--r--.   1 root root    338 Aug 13 04:16 ssh_import_id</span><br></pre></td></tr></table></figure><p>実行権限を付与します。</p><h2 id="sshd起動"><a href="#sshd起動" class="headerlink" title="sshd起動"></a>sshd起動</h2><p>一度手動で起動してみます。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo /sbin/iptables -P INPUT ACCEPT</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo mkdir -p -m0755 /var/run/sshd</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo /usr/sbin/sshd</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ss -lnt</span></span><br><span class="line">State         Recv-Q          Send-Q                    Local Address:Port                    Peer Address:Port</span><br><span class="line">LISTEN        0               5                             127.0.0.1:30001                        0.0.0.0:*</span><br><span class="line">LISTEN        0               128                             0.0.0.0:22                           0.0.0.0:*</span><br><span class="line">LISTEN        0               128                                [::]:22                              [::]:*  </span><br></pre></td></tr></table></figure><p>起動が確認できれば、ChromeOSに戻ってUbuntuを停止、再度起動した後でも自動でsshdが起動します。<br>そして、外部からsshで接続してみます。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh hogehoge@192.168.11.XX</span></span><br><span class="line">hogehoge@192.168.11.XX&#x27;s password:</span><br><span class="line">Welcome to Ubuntu 18.04.3 LTS (GNU/Linux 3.18.0-19346-g9ff80f5e4c97 aarch64)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * Documentation:  https://help.ubuntu.com</span><br><span class="line"> * Management:     https://landscape.canonical.com</span><br><span class="line"> * Support:        https://ubuntu.com/advantage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0 packages can be updated.</span><br><span class="line">0 updates are security updates.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Your Hardware Enablement Stack (HWE) is supported until April 2023.</span><br><span class="line">Last login: Tue Aug 13 04:48:22 2019 from 192.168.11.YY</span><br><span class="line">(bionic)hogehoge@localhost:~$</span><br></pre></td></tr></table></figure><p>きちんと、<strong>aarch64</strong>のUbuntuにつながっていることがわかります。</p>]]></content>
      
      
      <categories>
          
          <category> google </category>
          
          <category> Google </category>
          
          <category> Chrome OS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その178 Git LFSで巨大なファイルをpushすると i/o timeout</title>
      <link href="2019/07/28/4104/"/>
      <url>2019/07/28/4104/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>こんな感じのエラーがでました。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LFS: Put https://hogehoge:12345/test/sample.git/gitlab-lfs/objects/e14f763270cf193d0b5f74b169f44157a4b0c6efa708f4dd0ff78ee691763bcb/1999639040: read tcp [240b:251:2640:1600:a92c:da86:91c8:8cc5]:45540-&gt;[240b:251:2640:1600:211:32ff:fe6d:4a4b]:61792: i/o timeout</span><br><span class="line">error: failed to push some refs to &#x27;https://hogehoge:12345/test/sample.git&#x27;</span><br></pre></td></tr></table></figure><h1 id="How-to-resolve"><a href="#How-to-resolve" class="headerlink" title="How to resolve?"></a>How to resolve?</h1><p>タイムアウト値の延長またはタイムアウトを無効にします。<br>ユーザー全体なら <strong>–global</strong> をつけます。</p><h2 id="無効"><a href="#無効" class="headerlink" title="無効"></a>無効</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> git config lfs.activitytimeout 0</span></span><br></pre></td></tr></table></figure><h2 id="X-秒に延長"><a href="#X-秒に延長" class="headerlink" title="X 秒に延長"></a>X 秒に延長</h2><p>数字の単位は秒。下記は30秒。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> git config lfs.activitytimeout 30</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> バージョン管理システム </category>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その177 Visual Studio Code Remote SSHでつながらない</title>
      <link href="2019/07/06/4096/"/>
      <url>2019/07/06/4096/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>メモ。</p><h1 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h1><h2 id="ssh-config-の場所が悪い"><a href="#ssh-config-の場所が悪い" class="headerlink" title="ssh.config の場所が悪い"></a>ssh.config の場所が悪い</h2><p>接続に失敗した際、出力コンソールに下記のようなログが出ていました。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">remote-ssh@0.44.0</span><br><span class="line">win32 x64</span><br><span class="line">SSH Resolver called for &quot;ssh-remote+7b22686f73744e616d65223a223139322e3136382e31312e31315b5562756e74755f31382e30342e325f4c54535d222c2275736572223a22742d74616b6575636869227d&quot;, attempt 1</span><br><span class="line">SSH Resolver called for host: t-takeuchi@192.168.11.11[Ubuntu_18.04.2_LTS]</span><br><span class="line">Setting up SSH remote &quot;192.168.11.11[Ubuntu_18.04.2_LTS]&quot;</span><br><span class="line">Using commit id &quot;0f3794b38477eea13fb47fbe15a42798e6129338&quot; and quality &quot;stable&quot; for server</span><br><span class="line">Testing ssh with ssh -V</span><br><span class="line">ssh exited with code: 0</span><br><span class="line">Got stderr from ssh: OpenSSH_for_Windows_7.7p1, LibreSSL 2.6.5</span><br><span class="line">Using SSH config file &quot;C:\Users\TAKUYA\Dropbox\Settings\Visual Studio Code\Remote Development\ssh.config&quot;</span><br><span class="line">Install and start server if needed</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Can<span class="string">&#x27;t open user config file C:\\XXXX\\Visual: No suc</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> h file or directory</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> プロセスが、存在しないパイプに書き込もうとしました。</span></span><br><span class="line"><span class="meta">&gt;</span></span><br><span class="line">&quot;install&quot; terminal command done</span><br><span class="line">Received install output: プロセスが、存在しないパイプに書き込もうとしました。</span><br><span class="line">Failed to parse remote port from server output: プロセスが、存在しないパイプに書き込もうとしました。</span><br></pre></td></tr></table></figure><p>ログを書き込もうとしたら、書き込みに失敗したもよう。<br>原因が<strong>ssh.config</strong>をおいたパスに空白が含まれている、ということ。</p><p>それくらい対処してくださいよ、Microsoftさん。</p><h2 id="Windowsの環境変数なんてしらない"><a href="#Windowsの環境変数なんてしらない" class="headerlink" title="Windowsの環境変数なんてしらない"></a>Windowsの環境変数なんてしらない</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">remote-ssh@0.44.0</span><br><span class="line">win32 x64</span><br><span class="line">SSH Resolver called for &quot;ssh-remote+192.168.11.11&quot;, attempt 1</span><br><span class="line">SSH Resolver called for host: 192.168.11.11</span><br><span class="line">Setting up SSH remote &quot;192.168.11.11&quot;</span><br><span class="line">Using commit id &quot;0f3794b38477eea13fb47fbe15a42798e6129338&quot; and quality &quot;stable&quot; for server</span><br><span class="line">Testing ssh with ssh -V</span><br><span class="line">ssh exited with code: 0</span><br><span class="line">Got stderr from ssh: OpenSSH_for_Windows_7.7p1, LibreSSL 2.6.5</span><br><span class="line">Using SSH config file &quot;C:\XXXX\ssh.config&quot;</span><br><span class="line">Install and start server if needed</span><br><span class="line"><span class="meta">&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> percent_expand: unknown key %U</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> プロセスが、存在しないパイプに書き込もうとしました。</span></span><br><span class="line"><span class="meta">&gt;</span></span><br><span class="line">&quot;install&quot; terminal command done</span><br><span class="line">Received install output: プロセスが、存在しないパイプに書き込もうとしました。</span><br><span class="line">Failed to parse remote port from server output: プロセスが、存在しないパイプに書き込もうとしました。</span><br></pre></td></tr></table></figure><p><strong>ssh.confg</strong>で秘密鍵のファイルパスに <strong>環境変数%USERPROFILE%</strong> を使おうとしたためです。<br>環境変数は使わないほうがよいでしょう。</p><h2 id="OSXにつながらない"><a href="#OSXにつながらない" class="headerlink" title="OSXにつながらない"></a>OSXにつながらない</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">remote-ssh@0.44.0</span><br><span class="line">win32 x64</span><br><span class="line">SSH Resolver called for &quot;ssh-remote+7b22686f73744e616d65223a224d61634d696e69283139322e3136382e31312e3829227d&quot;, attempt 1</span><br><span class="line">SSH Resolver called for host: MacMini(192.168.11.8)</span><br><span class="line">Setting up SSH remote &quot;MacMini(192.168.11.8)&quot;</span><br><span class="line">Using commit id &quot;0f3794b38477eea13fb47fbe15a42798e6129338&quot; and quality &quot;stable&quot; for server</span><br><span class="line">Testing ssh with ssh -V</span><br><span class="line">ssh exited with code: 0</span><br><span class="line">Got stderr from ssh: OpenSSH_for_Windows_7.7p1, LibreSSL 2.6.5</span><br><span class="line">Using SSH config file &quot;C:\XXXX\ssh.config&quot;</span><br><span class="line">Install and start server if needed</span><br><span class="line"><span class="meta">&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Password:</span></span><br><span class="line">&quot;install&quot; wrote data to terminal: &quot;**********&quot;</span><br><span class="line"><span class="meta">&gt;</span></span><br><span class="line"><span class="meta">&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> sed: 1: <span class="string">&quot;s/^linux //gi&quot;</span>: bad flag <span class="keyword">in</span> substitute <span class="built_in">command</span>: <span class="string">&#x27;i&#x27;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Unsupported architecture:</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> a223db13-3bae-4f5f-ab69-b2f577125593<span class="comment">##27##</span></span></span><br><span class="line"><span class="meta">&gt;</span></span><br><span class="line">&quot;install&quot; terminal command done</span><br><span class="line">Received install output: a223db13-3bae-4f5f-ab69-b2f577125593##27##</span><br><span class="line">Unsupported architecture</span><br><span class="line">The remote server architecture is not supported</span><br><span class="line">------</span><br></pre></td></tr></table></figure><p>OSXは<strong>FrerBSD</strong>の派生です。<br><strong>sed</strong>コマンドはFreeBSDとLinuxではコマンドが異なります。<br>公式を確認してもOSXが使えない、という表記が見つかりませんでしたが、おそらくダメでしょう。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> Visual Studio Code </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その176 Docker Jenkins in Synology NAS</title>
      <link href="2019/06/14/4074/"/>
      <url>2019/06/14/4074/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>Jenkins</strong>をSynology NASに構築したのでメモ。<br>Slaveノードは別マシンに構築します。</p><h1 id="How-to"><a href="#How-to" class="headerlink" title="How to?"></a>How to?</h1><h2 id="用意するもの"><a href="#用意するもの" class="headerlink" title="用意するもの"></a>用意するもの</h2><p>jenkinsのディレクトリを用意します。<br>これらはdockerコンテナにマウントされます。<br>今回は下記をマウントします。</p><ul><li>/docker/jenkins/jenkins_home</li><li>/docker/jenkins/share/jenkins</li><li>/docker/jenkins/share/jenkins/ref</li></ul><p>そして権限を変更します。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo chown -R 1000 /volume1/docker/jenkins</span></span><br></pre></td></tr></table></figure><h4 id="Jenkinsのダウンロード"><a href="#Jenkinsのダウンロード" class="headerlink" title="Jenkinsのダウンロード"></a>Jenkinsのダウンロード</h4><p>dockerの場合、コンテナ内のデータは破棄されてしまうため、Jenkins本体をマウントする形にすることでアップデートできるようにします。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://jenkins.io/download/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=jenkins.io"></img><div class="hbc-site-name">Jenkins download and deployment</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://www.jenkins.io/images/logo-title-opengraph.png"></img></div><div class="hbc-text"><div class="hbc-title">Jenkins download and deployment</div><div class="hbc-url">https://jenkins.io/download/</div><div class="hbc-description">Jenkins – an open source automation server which enables developers around the world to reliably build, test, and deploy their software</div></div></div></div></a></div></div><p><strong>Generic Java package (.war)**をダウンロードし、</strong>Jenkins.war<strong>を</strong>/docker/jenkins/share/jenkins**にコピーします。</p><h4 id="キーストアの作成"><a href="#キーストアの作成" class="headerlink" title="キーストアの作成"></a>キーストアの作成</h4><p>HTTPSで接続するために作成します。既に<strong>Let’s Encrypt</strong>で証明書は発行済みであるものとします。<br>HTTPで良い場合は、必要ありません。</p><p>Javaをインストールする必要があるので<strong>パッケージ センター</strong>からインストールします。<br><strong>パッケージ センター</strong><br><a href="../../../../public/2019/06/01-1.png"><img src="../../../../public/2019/06/01-1-1024x560.png"></a></p><p><strong>インストール後のパス</strong><br><a href="../../../../public/2019/06/02-1.png"><img src="../../../../public/2019/06/02-1.png"></a></p><p>続いて、下記のシェルをsudoで実行します。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">KEYROOT=/usr/syno/etc/certificate/system/default</span><br><span class="line">KEY_PEM=$&#123;KEYROOT&#125;/privkey.pem</span><br><span class="line">CERT_PEM=$&#123;KEYROOT&#125;/cert.pem</span><br><span class="line">JAVA_HOME=/var/packages/Java7/target/j2sdk-image/jre/bin</span><br><span class="line">KEYSTORE=/volume1/docker/jenkins/jenkins_home/keystore</span><br><span class="line"></span><br><span class="line">openssl rsa -des3 -in $KEY_PEM -out key.encrypted.pem</span><br><span class="line">openssl pkcs12 -inkey key.encrypted.pem -in $CERT_PEM -export -out keys.encrypted.pkcs12</span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;JAVA_HOME&#125;/keytool -importkeystore -srckeystore keys.encrypted.pkcs12 -srcstoretype pkcs12 -destkeystore <span class="variable">$KEYSTORE</span></span></span><br></pre></td></tr></table></figure><p>下記のように実行します。<br>パスワードの空文字は許容されません。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo ./generate_jenkins_keystore.sh</span></span><br><span class="line">writing RSA key</span><br><span class="line">Enter PEM pass phrase:</span><br><span class="line">Verifying - Enter PEM pass phrase:</span><br><span class="line">Enter pass phrase for key.encrypted.pem:</span><br><span class="line">Enter Export Password:</span><br><span class="line">Verifying - Enter Export Password:</span><br><span class="line">Importing keystore keys.encrypted.pkcs12 to /volume1/docker/jenkins/keystore_...</span><br><span class="line">Enter destination keystore password:</span><br><span class="line">Re-enter new password:</span><br><span class="line">Enter source keystore password:</span><br><span class="line">Entry for alias 1 successfully imported.</span><br><span class="line">Import command completed:  1 entries successfully imported, 0 entries failed or cancelled</span><br><span class="line"></span><br><span class="line">Warning:</span><br><span class="line">The JKS keystore uses a proprietary format. It is recommended to migrate to PKCS12 which is an industry standard format using &quot;keytool -importkeystore -srckeystore /volume1/docker/jenkins/keystore_ -destkeystore /volume1/docker/jenkins/keystore_ -deststoretype pkcs12&quot;.</span><br></pre></td></tr></table></figure><h4 id="コンテナの作成"><a href="#コンテナの作成" class="headerlink" title="コンテナの作成"></a>コンテナの作成</h4><p>キーストア作成の時に入力したパスワードを指定してコンテナの起動を実行します。<br>ホスト側のポートは適宜変更します。<br>HTTPで良い場合は、**–http** から始まる引数を削除します。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker run -v /volume1/docker/jenkins/jenkins_home:/var/jenkins_home \</span></span><br><span class="line">                  -v /volume1/docker/jenkins/share/jenkins:/usr/share/jenkins \</span><br><span class="line">                  -p 38080:8443 \</span><br><span class="line">                  -p 50003:50000 \</span><br><span class="line">                  --name jenkins \</span><br><span class="line">                  jenkins/jenkins:alpine \</span><br><span class="line">                  --httpPort=-1 \</span><br><span class="line">                  --httpsPort=8443 \</span><br><span class="line">                  --httpsKeyStore=/var/jenkins_home/keystore \</span><br><span class="line">                  --httpsKeyStorePassword=</span><br></pre></td></tr></table></figure><p>コンソールが流れてしばらくすると<strong>admin</strong>の初期パスワードが表示されますのでメモしておきます。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">*************************************************************</span><br><span class="line">*************************************************************</span><br><span class="line">*************************************************************</span><br><span class="line"></span><br><span class="line">Jenkins initial setup is required. An admin user has been created and a password generated.</span><br><span class="line">Please use the following password to proceed to installation:</span><br><span class="line"></span><br><span class="line">b0c58624703945a3ba1517b556b0f1bc</span><br><span class="line"></span><br><span class="line">This may also be found at: /var/jenkins_home/secrets/initialAdminPassword</span><br><span class="line"></span><br><span class="line">*************************************************************</span><br><span class="line">*************************************************************</span><br><span class="line">*************************************************************</span><br></pre></td></tr></table></figure><h4 id="初期設定"><a href="#初期設定" class="headerlink" title="初期設定"></a>初期設定</h4><p>ブラウザからアクセスします。</p><p><strong>Jenkinsのアンロック。メモした初期パスワードを入力</strong></p><p><strong>Jenkinsのアンロック</strong><br><a href="../../../../public/2019/06/03-1.png"><img src="../../../../public/2019/06/03-1-1024x840.png"></a></p><p><strong>プラグインのインストール。Install suggested plugins を選択</strong><br><a href="../../../../public/2019/06/04-1.png"><img src="../../../../public/2019/06/04-1-1024x840.png"></a></p><p><strong>インストール中</strong><br><a href="../../../../public/2019/06/05-1.png"><img src="../../../../public/2019/06/05-1-1024x840.png"></a></p><p><strong>ユーザ登録。入力後、Save and Finish</strong><br><a href="../../../../public/2019/06/06-1.png"><img src="../../../../public/2019/06/06-1-1024x840.png"></a></p><p><strong>準備完了</strong><br><a href="../../../../public/2019/06/07.png"><img src="../../../../public/2019/06/07-1024x840.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> 仮想化 </category>
          
          <category> Docker </category>
          
          <category> CI </category>
          
          <category> NAS </category>
          
          <category> Synology </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その175 Docker Registry in Synology NAS</title>
      <link href="2019/06/09/4060/"/>
      <url>2019/06/09/4060/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Dockerイメージを保存するプライベートなDocker RegistryをSynology NASに構築したのでメモ。<br>Docker Registryもdockerコンテナとして動作します。</p><h1 id="How-to"><a href="#How-to" class="headerlink" title="How to?"></a>How to?</h1><h2 id="用意するもの"><a href="#用意するもの" class="headerlink" title="用意するもの"></a>用意するもの</h2><p>設定ファイル、イメージを格納するディレクトリを用意します。<br>これらはdockerコンテナにマウントされます。<br>今回は下記をマウントします。</p><ul><li>/docker/registry/config/config.yml</li><li>/docker/registry/config/htpasswd</li><li>/docker/registry/images</li><li>/docker/registry/certs</li></ul><h4 id="docker-registry-config-config-yml"><a href="#docker-registry-config-config-yml" class="headerlink" title="/docker/registry/config/config.yml"></a>/docker/registry/config/config.yml</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">0.1</span></span><br><span class="line"><span class="attr">log:</span></span><br><span class="line">  <span class="attr">fields:</span></span><br><span class="line">    <span class="attr">service:</span> <span class="string">registry</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">  <span class="attr">delete:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span>     <span class="comment"># open delete api</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">blobdescriptor:</span> <span class="string">inmemory</span></span><br><span class="line">  <span class="attr">filesystem:</span></span><br><span class="line">    <span class="attr">rootdirectory:</span> <span class="string">/var/lib/registry</span></span><br><span class="line"><span class="attr">http:</span></span><br><span class="line">  <span class="attr">addr:</span> <span class="string">:5000</span></span><br><span class="line">  <span class="attr">headers:</span></span><br><span class="line">    <span class="attr">X-Content-Type-Options:</span> [<span class="string">nosniff</span>]</span><br><span class="line"><span class="attr">health:</span></span><br><span class="line">  <span class="attr">storagedriver:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">interval:</span> <span class="string">10s</span></span><br><span class="line">    <span class="attr">threshold:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">auth:</span></span><br><span class="line">  <span class="attr">htpasswd:</span></span><br><span class="line">    <span class="attr">realm:</span> <span class="string">basic-realm</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/auth/htpasswd</span>    <span class="comment"># use apache basic-auth</span></span><br></pre></td></tr></table></figure><h4 id="docker-registry-config-htpasswd"><a href="#docker-registry-config-htpasswd" class="headerlink" title="/docker/registry/config/htpasswd"></a>/docker/registry/config/htpasswd</h4><p>registryへのログインパスワードを格納するファイルです。<br>下記のようにdockerコンテナに作らせます。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run --rm -ti xmartlabs/htpasswd   &gt; htpasswd</span></span><br></pre></td></tr></table></figure><h4 id="docker-registry-images"><a href="#docker-registry-images" class="headerlink" title="/docker/registry/images"></a>/docker/registry/images</h4><p>dockerイメージの保存先です。<br>ただのフォルダです。</p><h4 id="docker-registry-certs"><a href="#docker-registry-certs" class="headerlink" title="/docker/registry/certs"></a>/docker/registry/certs</h4><p>sslのための証明書、<em>.crt、</em>.keyを格納しておきます。<br><strong>Let’s Encrypt</strong>が更新されたらここを更新します。</p><p>HTTPSでregistryにアクセスするのが基本です。ここを設定しなくても利用はできますが、dockerの設定で信頼できないregistryにアクセスできるよう設定を追加する必要があるので、ここはきちんと設定しておきます。</p><h2 id="コンテナ作成"><a href="#コンテナ作成" class="headerlink" title="コンテナ作成"></a>コンテナ作成</h2><p><strong>registryをpullします</strong><br><a href="../../../../public/2019/06/01.png"><img src="../../../../public/2019/06/01-1024x553.png"></a></p><p><strong>pullできました</strong><br><a href="../../../../public/2019/06/02.png"><img src="../../../../public/2019/06/02-1024x551.png"></a></p><p><strong>コンテナを作成します</strong><br><a href="../../../../public/2019/06/03.png"><img src="../../../../public/2019/06/03.png"></a></p><p><strong>詳細設定のボリューム</strong><br><a href="../../../../public/2019/06/04.png"><img src="../../../../public/2019/06/04.png"></a></p><p><strong>詳細設定のポート設定</strong><br><a href="../../../../public/2019/06/05.png"><img src="../../../../public/2019/06/05.png"></a></p><p><strong>詳細設定の環境</strong><br><a href="../../../../public/2019/06/06.png"><img src="../../../../public/2019/06/06.png"></a></p><p>以上で完成です。</p><h2 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h2><p>コンテナを起動後、dockerからログインできるかどうかを確認します。<br>ポート番号を確認し下記のように確認しておきます。<br>usernameとpasswordは最初に作ったhtpasswdファイルで作成した情報になります。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> docker login https://hogehoge:28009/</span></span><br><span class="line">Username: xxxxxx</span><br><span class="line">Password:</span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure><p>もしssl設定をしていない場合は下記のようになりますので、クライアント側でdockerの設定を変更しておきます。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> docker login http://192.168.11.17:28009</span></span><br><span class="line">Username: xxxxxx</span><br><span class="line">Password:</span><br><span class="line">Error response from daemon: Get https://192.168.11.17:28009/v2/: http: server gave HTTP response to HTTPS client</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 仮想化 </category>
          
          <category> Docker </category>
          
          <category> NAS </category>
          
          <category> Synology </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その174 WindowsコンテナとLinuxコンテナを共存させる</title>
      <link href="2019/06/09/4052/"/>
      <url>2019/06/09/4052/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><a href="https://taktak.jp/2019/06/09/4047">前回</a>はシステムで利用するコンテナをWindowsからLinuxコンテナ、その逆と切り替えてみました。</p><h1 id="How-to"><a href="#How-to" class="headerlink" title="How to"></a>How to</h1><p>まずWindowsコンテナに切り替えます。<br>そして<strong>Experimental</strong>を有効化します。</p><p><a href="../../../../public/2019/06/docker.png"><img src="../../../../public/2019/06/docker.png"></a></p><h2 id="Linux-イメージを動かしてみる"><a href="#Linux-イメージを動かしてみる" class="headerlink" title="Linux イメージを動かしてみる"></a>Linux イメージを動かしてみる</h2><p>alpineコンテナが動いています。<br>ホストのディレクトリもマウントできています。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&gt; docker version</span><br><span class="line"><span class="function">Client: <span class="title">Docker</span> <span class="title">Engine</span> - <span class="title">Community</span></span></span><br><span class="line"><span class="function"> <span class="title">Version</span>:           18.09.2</span></span><br><span class="line"><span class="function"> <span class="title">API</span> <span class="title">version</span>:       1.39</span></span><br><span class="line"><span class="function"> <span class="title">Go</span> <span class="title">version</span>:        <span class="title">go1</span>.10.8</span></span><br><span class="line"><span class="function"> <span class="title">Git</span> <span class="title">commit</span>:        6247962</span></span><br><span class="line"><span class="function"> <span class="title">Built</span>:             <span class="title">Sun</span> <span class="title">Feb</span> 10 04:12:31 2019</span></span><br><span class="line"><span class="function"> <span class="title">OS</span>/<span class="title">Arch</span>:           <span class="title">windows</span>/<span class="title">amd64</span></span></span><br><span class="line"><span class="function"> <span class="title">Experimental</span>:      <span class="title">false</span></span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function"><span class="title">Server</span>: <span class="title">Docker</span> <span class="title">Engine</span> - <span class="title">Community</span></span></span><br><span class="line"><span class="function"> <span class="title">Engine</span>:</span></span><br><span class="line"><span class="function">  <span class="title">Version</span>:          18.09.2</span></span><br><span class="line"><span class="function">  <span class="title">API</span> <span class="title">version</span>:      1.39 (<span class="title">minimum</span> <span class="title">version</span> 1.24)</span></span><br><span class="line"><span class="function">  <span class="title">Go</span> <span class="title">version</span>:       <span class="title">go1</span>.10.6</span></span><br><span class="line"><span class="function">  <span class="title">Git</span> <span class="title">commit</span>:       6247962</span></span><br><span class="line"><span class="function">  <span class="title">Built</span>:            <span class="title">Sun</span> <span class="title">Feb</span> 10 04:28:48 2019</span></span><br><span class="line"><span class="function">  <span class="title">OS</span>/<span class="title">Arch</span>:          <span class="title">windows</span>/<span class="title">amd64</span></span></span><br><span class="line"><span class="function">  <span class="title">Experimental</span>:     <span class="title">true</span></span></span><br><span class="line"><span class="function">&gt; <span class="title">docker</span> <span class="title">run</span> --<span class="title">rm</span> -<span class="title">v</span> <span class="title">c</span>:/<span class="title">Users</span>:/<span class="title">data</span> <span class="title">alpine</span> <span class="title">ls</span> /<span class="title">data</span></span></span><br><span class="line"><span class="function"><span class="title">All</span> <span class="title">Users</span></span></span><br><span class="line"><span class="function"><span class="title">Default</span></span></span><br><span class="line"><span class="function"><span class="title">Default</span> <span class="title">User</span></span></span><br><span class="line"><span class="function"><span class="title">DefaultAppPool</span></span></span><br><span class="line"><span class="function"><span class="title">Public</span></span></span><br><span class="line"><span class="function"><span class="title">TAKUYA</span></span></span><br><span class="line"><span class="function"><span class="title">desktop.ini</span></span></span><br></pre></td></tr></table></figure><h2 id="Windowsイメージ"><a href="#Windowsイメージ" class="headerlink" title="Windowsイメージ"></a>Windowsイメージ</h2><p><strong>Windows Server Core</strong>と<strong>alpine</strong>が表示されています。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; docker images</span><br><span class="line">REPOSITORY                               TAG                             IMAGE ID            CREATED             SIZE</span><br><span class="line">nvidia/cuda                              <span class="number">10</span>.<span class="number">0</span>-cudnn7-devel-ubuntu16.<span class="number">04</span>   c963dc0723b7        <span class="number">8</span> days ago          <span class="number">3</span>.<span class="number">17</span>GB</span><br><span class="line">nvidia/cuda                              <span class="number">9</span>.<span class="number">2</span>-cudnn7-devel-ubuntu16.<span class="number">04</span>    fa48202870f2        <span class="number">8</span> days ago          <span class="number">3</span>.<span class="number">09</span>GB</span><br><span class="line">mcr.microsoft.com/windows/servercore     <span class="number">1809</span>-amd64                      <span class="number">43</span>c05724e30b        <span class="number">2</span> weeks ago         <span class="number">4</span>.<span class="number">56</span>GB</span><br><span class="line">ubuntu                                   <span class="number">16</span>.<span class="number">04</span>                           <span class="number">2</span>a697363a870        <span class="number">3</span> weeks ago         <span class="number">134</span>MB</span><br><span class="line">alpine                                   latest                          <span class="number">055936</span>d39205        <span class="number">4</span> weeks ago         <span class="number">6</span>.<span class="number">28</span>MB</span><br></pre></td></tr></table></figure><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>Windowsコンテナに切り替えればイメージを共存されることができました。<br>ドライブの共有も問題なしです。</p>]]></content>
      
      
      <categories>
          
          <category> 仮想化 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その173 WindowsコンテナとLinuxコンテナを切り替える</title>
      <link href="2019/06/09/4047/"/>
      <url>2019/06/09/4047/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>Docker for Windows</strong>でコンテナを切り替えてみました。<br>環境はこんな感じです。</p><p><a href="../../../../public/2019/06/docker_about.png"><img src="../../../../public/2019/06/docker_about.png"></a></p><h1 id="How-to"><a href="#How-to" class="headerlink" title="How to"></a>How to</h1><p>特に難しいことはありません。<br>タスクトレイの <strong>Switch to Windows containers…</strong> をクリックするだけです。</p><h2 id="Linux-から-Windows-へ"><a href="#Linux-から-Windows-へ" class="headerlink" title="Linux から Windows へ"></a>Linux から Windows へ</h2><p>切り替えた直後です。<br>イメージが消えています。ちょっと驚きます。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&gt;docker version</span><br><span class="line"><span class="function">Client: <span class="title">Docker</span> <span class="title">Engine</span> - <span class="title">Community</span></span></span><br><span class="line"><span class="function"> <span class="title">Version</span>:           18.09.2</span></span><br><span class="line"><span class="function"> <span class="title">API</span> <span class="title">version</span>:       1.39</span></span><br><span class="line"><span class="function"> <span class="title">Go</span> <span class="title">version</span>:        <span class="title">go1</span>.10.8</span></span><br><span class="line"><span class="function"> <span class="title">Git</span> <span class="title">commit</span>:        6247962</span></span><br><span class="line"><span class="function"> <span class="title">Built</span>:             <span class="title">Sun</span> <span class="title">Feb</span> 10 04:12:31 2019</span></span><br><span class="line"><span class="function"> <span class="title">OS</span>/<span class="title">Arch</span>:           <span class="title">windows</span>/<span class="title">amd64</span></span></span><br><span class="line"><span class="function"> <span class="title">Experimental</span>:      <span class="title">false</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Server</span>: <span class="title">Docker</span> <span class="title">Engine</span> - <span class="title">Community</span></span></span><br><span class="line"><span class="function"> <span class="title">Engine</span>:</span></span><br><span class="line"><span class="function">  <span class="title">Version</span>:          18.09.2</span></span><br><span class="line"><span class="function">  <span class="title">API</span> <span class="title">version</span>:      1.39 (<span class="title">minimum</span> <span class="title">version</span> 1.24)</span></span><br><span class="line"><span class="function">  <span class="title">Go</span> <span class="title">version</span>:       <span class="title">go1</span>.10.6</span></span><br><span class="line"><span class="function">  <span class="title">Git</span> <span class="title">commit</span>:       6247962</span></span><br><span class="line"><span class="function">  <span class="title">Built</span>:            <span class="title">Sun</span> <span class="title">Feb</span> 10 04:28:48 2019</span></span><br><span class="line"><span class="function">  <span class="title">OS</span>/<span class="title">Arch</span>:          <span class="title">windows</span>/<span class="title">amd64</span></span></span><br><span class="line"><span class="function">  <span class="title">Experimental</span>:     <span class="title">false</span></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">TAKUYA</span>&gt;<span class="title">docker</span> <span class="title">images</span></span></span><br><span class="line"><span class="function"><span class="title">REPOSITORY</span>          <span class="title">TAG</span>                 <span class="title">IMAGE</span> <span class="title">ID</span>            <span class="title">CREATED</span>             <span class="title">SIZE</span></span></span><br></pre></td></tr></table></figure><h2 id="Windows-から-Linux-へ"><a href="#Windows-から-Linux-へ" class="headerlink" title="Windows から Linux へ"></a>Windows から Linux へ</h2><p>戻してみます。<br>イメージが戻っています。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&gt;docker version</span><br><span class="line"><span class="function">Client: <span class="title">Docker</span> <span class="title">Engine</span> - <span class="title">Community</span></span></span><br><span class="line"><span class="function"> <span class="title">Version</span>:           18.09.2</span></span><br><span class="line"><span class="function"> <span class="title">API</span> <span class="title">version</span>:       1.39</span></span><br><span class="line"><span class="function"> <span class="title">Go</span> <span class="title">version</span>:        <span class="title">go1</span>.10.8</span></span><br><span class="line"><span class="function"> <span class="title">Git</span> <span class="title">commit</span>:        6247962</span></span><br><span class="line"><span class="function"> <span class="title">Built</span>:             <span class="title">Sun</span> <span class="title">Feb</span> 10 04:12:31 2019</span></span><br><span class="line"><span class="function"> <span class="title">OS</span>/<span class="title">Arch</span>:           <span class="title">windows</span>/<span class="title">amd64</span></span></span><br><span class="line"><span class="function"> <span class="title">Experimental</span>:      <span class="title">false</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Server</span>: <span class="title">Docker</span> <span class="title">Engine</span> - <span class="title">Community</span></span></span><br><span class="line"><span class="function"> <span class="title">Engine</span>:</span></span><br><span class="line"><span class="function">  <span class="title">Version</span>:          18.09.2</span></span><br><span class="line"><span class="function">  <span class="title">API</span> <span class="title">version</span>:      1.39 (<span class="title">minimum</span> <span class="title">version</span> 1.12)</span></span><br><span class="line"><span class="function">  <span class="title">Go</span> <span class="title">version</span>:       <span class="title">go1</span>.10.6</span></span><br><span class="line"><span class="function">  <span class="title">Git</span> <span class="title">commit</span>:       6247962</span></span><br><span class="line"><span class="function">  <span class="title">Built</span>:            <span class="title">Sun</span> <span class="title">Feb</span> 10 04:13:06 2019</span></span><br><span class="line"><span class="function">  <span class="title">OS</span>/<span class="title">Arch</span>:          <span class="title">linux</span>/<span class="title">amd64</span></span></span><br><span class="line"><span class="function">  <span class="title">Experimental</span>:     <span class="title">true</span></span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">TAKUYA</span>&gt;<span class="title">docker</span> <span class="title">images</span></span></span><br><span class="line"><span class="function"><span class="title">REPOSITORY</span>                               <span class="title">TAG</span>                             <span class="title">IMAGE</span> <span class="title">ID</span>            <span class="title">CREATED</span>             <span class="title">SIZE</span></span></span><br><span class="line"><span class="function"><span class="title">mcr.microsoft.com</span>/<span class="title">dotnet</span>/<span class="title">core</span>/<span class="title">sdk</span>        2.1-<span class="title">bionic</span>                      28<span class="title">d5b1e8a03b</span>        2 <span class="title">weeks</span> <span class="title">ago</span>         1.7<span class="title">GB</span></span></span><br><span class="line"><span class="function"><span class="title">mcr.microsoft.com</span>/<span class="title">dotnet</span>/<span class="title">core</span>/<span class="title">runtime</span>    2.1-<span class="title">bionic</span>                      51<span class="title">c475cc6ed8</span>        2 <span class="title">weeks</span> <span class="title">ago</span>         194<span class="title">MB</span></span></span><br><span class="line"><span class="function"><span class="title">ubuntu</span>                                   <span class="title">latest</span>                          7698<span class="title">f282e524</span>        3 <span class="title">weeks</span> <span class="title">ago</span>         69.9<span class="title">MB</span></span></span><br><span class="line"><span class="function"><span class="title">nvidia</span>/<span class="title">cuda</span>                              10.0-<span class="title">cudnn7</span>-<span class="title">devel</span>-<span class="title">centos6</span>       1<span class="title">d245213a2c9</span>        2 <span class="title">months</span> <span class="title">ago</span>        2.88<span class="title">GB</span></span></span><br><span class="line"><span class="function"><span class="title">nvidia</span>/<span class="title">cuda</span>                              10.0-<span class="title">cudnn7</span>-<span class="title">devel</span>-<span class="title">ubuntu16</span>.04   <span class="title">e1d637677e0d</span>        2 <span class="title">months</span> <span class="title">ago</span>        3.08<span class="title">GB</span></span></span><br><span class="line"><span class="function"><span class="title">centos</span>                                   7                               9<span class="title">f38484d220f</span>        2 <span class="title">months</span> <span class="title">ago</span>        202<span class="title">MB</span></span></span><br><span class="line"><span class="function"><span class="title">ubuntu</span>                                   16.04                           7<span class="title">e87e2b3bf7a</span>        4 <span class="title">months</span> <span class="title">ago</span>        117<span class="title">MB</span></span></span><br><span class="line"><span class="function"><span class="title">ubuntu</span>                                   14.04                           5<span class="title">dbc3f318ea5</span>        4 <span class="title">months</span> <span class="title">ago</span>        188<span class="title">MB</span></span></span><br><span class="line"><span class="function"><span class="title">ubuntu</span>                                   18.04                           20<span class="title">bb25d32758</span>        4 <span class="title">months</span> <span class="title">ago</span>        87.5<span class="title">MB</span></span></span><br><span class="line"><span class="function"><span class="title">alpine</span>                                   <span class="title">edge</span>                            <span class="title">dacde26455ab</span>        5 <span class="title">months</span> <span class="title">ago</span>        5.28<span class="title">MB</span></span></span><br><span class="line"><span class="function"><span class="title">alpine</span>                                   <span class="title">latest</span>                          3<span class="title">f53bb00af94</span>        5 <span class="title">months</span> <span class="title">ago</span>        4.41<span class="title">MB</span></span></span><br><span class="line"><span class="function"><span class="title">nvidia</span>/<span class="title">cuda</span>                              9.2-<span class="title">cudnn7</span>-<span class="title">devel</span>-<span class="title">ubuntu16</span>.04    7<span class="title">affc4c2ce61</span>        6 <span class="title">months</span> <span class="title">ago</span>        2.9<span class="title">GB</span></span></span><br><span class="line"><span class="function"><span class="title">nvidia</span>/<span class="title">cuda</span>                              9.2-<span class="title">cudnn7</span>-<span class="title">devel</span>-<span class="title">centos6</span>        <span class="title">b26377b9a39a</span>        7 <span class="title">months</span> <span class="title">ago</span>        2.82<span class="title">GB</span></span></span><br><span class="line"><span class="function"><span class="title">docker4w</span>/<span class="title">nsenter</span>-<span class="title">dockerd</span>                 <span class="title">latest</span>                          2<span class="title">f1c802f322f</span>        7 <span class="title">months</span> <span class="title">ago</span>        187<span class="title">kB</span></span></span><br><span class="line"><span class="function"><span class="title">centos</span>                                   6.10                            30<span class="title">e66b619e9f</span>        8 <span class="title">months</span> <span class="title">ago</span>        194<span class="title">MB</span></span></span><br></pre></td></tr></table></figure><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>イメージを共存することはできませんが、切り替えたからと言って前の環境に戻せなくなる、ということはありません。</p>]]></content>
      
      
      <categories>
          
          <category> 仮想化 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その172 Synology GitLabでLFSを使ってみる</title>
      <link href="2019/05/20/4042/"/>
      <url>2019/05/20/4042/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>自宅のNASでGitLabをDockerで運用していますが、LFSを有効にするのに苦労したのでメモ。</p><h1 id="How-to"><a href="#How-to" class="headerlink" title="How to"></a>How to</h1><h2 id="URL変更"><a href="#URL変更" class="headerlink" title="URL変更"></a>URL変更</h2><p>Dockerの環境変数で<strong>GITLAB_HOST</strong>を変更します。<br>既定では<strong>localhost</strong>になっているので変更します。</p><h2 id="HTTPS有効"><a href="#HTTPS有効" class="headerlink" title="HTTPS有効"></a>HTTPS有効</h2><p>これは私の環境では有効だったのでスキップ。<br>ただ、Dockerの環境変数で<strong>GITLAB_PORT</strong>に対応するGitLabのポートが<strong>80</strong>のため、ここを<strong>443</strong>に変更します。</p><h2 id="プロジェクトでLFSを有効"><a href="#プロジェクトでLFSを有効" class="headerlink" title="プロジェクトでLFSを有効"></a>プロジェクトでLFSを有効</h2><p><strong>General Settings</strong>の<strong>Permissions</strong>から<strong>Git Large File Storage</strong>を有効にします。<br>これは各プロジェクトで有効にします。</p><h2 id="クローン-amp-プッシュ"><a href="#クローン-amp-プッシュ" class="headerlink" title="クローン&amp;プッシュ"></a>クローン&amp;プッシュ</h2><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git clone https://hogehoge.com/data/test.git</span><br><span class="line"><span class="built_in">cd</span> test</span><br><span class="line">git lfs install</span><br><span class="line">git lfs track *.jpg</span><br><span class="line">git add *.jpg</span><br><span class="line">git add .gitattributes</span><br><span class="line">git commit -m &quot;initial commit&quot;</span><br><span class="line">git config --add lfs.url &quot;https://hogehoge.com/data/test.git/info/lfs/&quot;</span><br><span class="line">git config lfs.contenttype false</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p><strong>git config lfs.contenttype false</strong>がミソです。<br>これは </p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://gitlab.com/gitlab-org/gitlab-ce/issues/49934#what-is-the-current-bug-behaviour" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=gitlab.com"></img><div class="hbc-site-name">GitLab</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://assets.gitlab-static.net/uploads/-/system/project/avatar/13083/logo-extra-whitespace.png"></img></div><div class="hbc-text"><div class="hbc-title">GitLab CE Git LFS failing to push large repo due to unsupported Content-Type header(s) (#49934) · Issues · GitLab.org / GitLab FOSS</div><div class="hbc-url">https://gitlab.com/gitlab-org/gitlab-ce/issues/49934#what-is-the-current-bug-behaviour</div><div class="hbc-description"> Summary Cannot push to a large repository (around ~3800 files, totalling ~1.6GB) with Git LFS.  </div></div></div></div></a></div></div><p>に書いてありました。</p>]]></content>
      
      
      <categories>
          
          <category> NAS </category>
          
          <category> バージョン管理システム </category>
          
          <category> Synology </category>
          
          <category> git </category>
          
          <category> GitLab </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その171 ChainerのモデルデータをONNXに変換してみる</title>
      <link href="2019/04/02/4024/"/>
      <url>2019/04/02/4024/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>Chainer</strong>はPythonで動きます。<br>学習はPythonで良くてもシステムに組み込む際にPythonは聊か都合が悪いです。<br>なので、学習結果であるモデルファイルをPython以外の言語で扱えるように、共通データフォーマットである <strong>ONNX (Open Neural Network Exchange)</strong> に変換してみます。</p><h1 id="How-to"><a href="#How-to" class="headerlink" title="How to"></a>How to</h1><p>シンプルなMNISTのサンプルで生成されるモデルファイルを変換してみます。<br>まずはChainerの環境を構築。Windows上の仮想環境を想定。</p><h2 id="環境構築"><a href="#環境構築" class="headerlink" title="環境構築"></a>環境構築</h2><p>を参考にし、下記のコマンドを実行します。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; python -m pip install --upgrade pip</span><br><span class="line">&gt; python -m pip install cupy==<span class="number">5</span>.<span class="number">3</span>.<span class="number">0</span></span><br><span class="line">&gt; python -m pip install cupy-cuda92==<span class="number">5</span>.<span class="number">3</span>.<span class="number">0</span></span><br><span class="line">&gt; python -m pip install chainer==<span class="number">5</span>.<span class="number">3</span>.<span class="number">0</span></span><br><span class="line">&gt; python -m pip install onnx-chainer</span><br></pre></td></tr></table></figure><p>インストール後はCUDAを認識しているかを確認します。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; python -c &quot;import chainer; chainer.<span class="built_in">print</span>\_runtime\_info()&quot;</span><br><span class="line"><span class="function">latform: <span class="title">Windows</span>-10-10.0.17763-<span class="title">SP0</span></span></span><br><span class="line"><span class="function"><span class="title">Chainer</span>: 5.3.0</span></span><br><span class="line"><span class="function"><span class="title">NumPy</span>: 1.16.2</span></span><br><span class="line"><span class="function"><span class="title">CuPy</span>:</span></span><br><span class="line"><span class="function">  <span class="title">CuPy</span> <span class="title">Version</span>          : 5.3.0</span></span><br><span class="line"><span class="function">  <span class="title">CUDA</span> <span class="title">Root</span>             : <span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">NVIDIA</span> <span class="title">GPU</span> <span class="title">Computing</span> <span class="title">Toolkit</span>\<span class="title">CUDA</span>\<span class="title">v9</span>.2</span></span><br><span class="line"><span class="function">  <span class="title">CUDA</span> <span class="title">Build</span> <span class="title">Version</span>    : 9020</span></span><br><span class="line"><span class="function">  <span class="title">CUDA</span> <span class="title">Driver</span> <span class="title">Version</span>   : 10000</span></span><br><span class="line"><span class="function">  <span class="title">CUDA</span> <span class="title">Runtime</span> <span class="title">Version</span>  : 9020</span></span><br><span class="line"><span class="function">  <span class="title">cuDNN</span> <span class="title">Build</span> <span class="title">Version</span>   : 7402</span></span><br><span class="line"><span class="function">  <span class="title">cuDNN</span> <span class="title">Version</span>         : 7402</span></span><br><span class="line"><span class="function">  <span class="title">NCCL</span> <span class="title">Build</span> <span class="title">Version</span>    : <span class="title">None</span></span></span><br><span class="line"><span class="function">  <span class="title">NCCL</span> <span class="title">Runtime</span> <span class="title">Version</span>  : <span class="title">None</span></span></span><br><span class="line"><span class="function"><span class="title">iDeep</span>: <span class="title">Not</span> <span class="title">Available</span></span></span><br></pre></td></tr></table></figure><h2 id="学習と変換"><a href="#学習と変換" class="headerlink" title="学習と変換"></a>学習と変換</h2><p>ソースをクローンし、<strong>train_mnist.py</strong>を修正します。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; git clone https://github.com/chainer/chainer</span><br><span class="line">&gt; <span class="built_in">cd</span> chainer</span><br><span class="line">&gt; git checkout v5.<span class="number">3</span>.<span class="number">0</span></span><br><span class="line">&gt; <span class="built_in">cd</span> examples\\mnist</span><br></pre></td></tr></table></figure><p>修正前はモデルファイルを出力しないためです。<br>修正は下記2箇所。</p><h4 id="箇所1"><a href="#箇所1" class="headerlink" title="箇所1"></a>箇所1</h4><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">import argparse</span><br><span class="line"></span><br><span class="line">import chainer</span><br><span class="line">import chainer.functions as F</span><br><span class="line">import chainer.links as L</span><br><span class="line">from chainer import training</span><br><span class="line">from chainer.training import extensions</span><br><span class="line"></span><br><span class="line"><span class="addition">+ import os</span></span><br><span class="line"><span class="addition">+ from chainer import serializers</span></span><br><span class="line"><span class="addition">+ import onnx_chainer</span></span><br><span class="line"><span class="addition">+ import cupy as xp</span></span><br></pre></td></tr></table></figure><h4 id="箇所2"><a href="#箇所2" class="headerlink" title="箇所2"></a>箇所2</h4><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    if args.resume:</span><br><span class="line">        # Resume from a snapshot</span><br><span class="line">        chainer.serializers.load_npz(args.resume, trainer)</span><br><span class="line"></span><br><span class="line">    # Run the training</span><br><span class="line">    trainer.run()</span><br><span class="line"></span><br><span class="line"><span class="addition">+    model_file = os.path.join(args.out, &#x27;mnist.model&#x27;)</span></span><br><span class="line"><span class="addition">+    onnx_file = os.path.join(args.out, &#x27;mnist.onnx&#x27;)</span></span><br><span class="line"><span class="addition">+    serializers.save_npz(model_file, model)</span></span><br><span class="line"><span class="addition">+    chainer.config.train = False</span></span><br><span class="line"><span class="addition">+    # ダミーデータ</span></span><br><span class="line"><span class="addition">+    x = xp.zeros((1, 1, 28, 28), dtype=xp.float32)</span></span><br><span class="line"><span class="addition">+    onnx_chainer.export(model.predictor, x, filename=onnx_file)</span></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>下記を実行します。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&gt; python train_mnist.py --gpu <span class="number">0</span></span><br><span class="line"><span class="function">GPU: 0</span></span><br><span class="line"><span class="function"># <span class="title">unit</span>: 1000</span></span><br><span class="line"><span class="function"># <span class="title">Minibatch</span>-<span class="title">size</span>: 100</span></span><br><span class="line"><span class="function"># <span class="title">epoch</span>: 20</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Downloading</span> <span class="title">from</span> <span class="title">http</span>://<span class="title">yann.lecun.com</span>/<span class="title">exdb</span>/<span class="title">mnist</span>/<span class="title">train</span>-<span class="title">images</span>-<span class="title">idx3</span>-<span class="title">ubyte.gz</span>...</span></span><br><span class="line"><span class="function"><span class="title">Downloading</span> <span class="title">from</span> <span class="title">http</span>://<span class="title">yann.lecun.com</span>/<span class="title">exdb</span>/<span class="title">mnist</span>/<span class="title">train</span>-<span class="title">labels</span>-<span class="title">idx1</span>-<span class="title">ubyte.gz</span>...</span></span><br><span class="line"><span class="function"><span class="title">Downloading</span> <span class="title">from</span> <span class="title">http</span>://<span class="title">yann.lecun.com</span>/<span class="title">exdb</span>/<span class="title">mnist</span>/<span class="title">t10k</span>-<span class="title">images</span>-<span class="title">idx3</span>-<span class="title">ubyte.gz</span>...</span></span><br><span class="line"><span class="function"><span class="title">Downloading</span> <span class="title">from</span> <span class="title">http</span>://<span class="title">yann.lecun.com</span>/<span class="title">exdb</span>/<span class="title">mnist</span>/<span class="title">t10k</span>-<span class="title">labels</span>-<span class="title">idx1</span>-<span class="title">ubyte.gz</span>...</span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">Works</span>\<span class="title">Python</span>\<span class="title">envs</span>\<span class="title">Chainer_5</span>.3.0\<span class="title">lib</span>\<span class="title">site</span>-<span class="title">packages</span>\<span class="title">chainer</span>\<span class="title">training</span>\<span class="title">extensions</span>\<span class="title">plot_report.py</span>:25: <span class="title">UserWarning</span>: <span class="title">matplotlib</span> <span class="title">is</span> <span class="title">not</span> <span class="title">installed</span> <span class="title">on</span> <span class="title">your</span> <span class="title">environment</span>, <span class="title">so</span> <span class="title">nothing</span> <span class="title">will</span> <span class="title">be</span> <span class="title">plotted</span> <span class="title">at</span> <span class="title">this</span> <span class="title">time</span>. <span class="title">Please</span> <span class="title">install</span> <span class="title">matplotlib</span> <span class="title">to</span> <span class="title">plot</span> <span class="title">figures</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  $ <span class="title">pip</span> <span class="title">install</span> <span class="title">matplotlib</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  <span class="title">warnings.warn</span>(&#x27;<span class="title">matplotlib</span> <span class="title">is</span> <span class="title">not</span> <span class="title">installed</span> <span class="title">on</span> <span class="title">your</span> <span class="title">environment</span>, &#x27;</span></span><br><span class="line"><span class="function"><span class="title">epoch</span>       <span class="title">main</span>/<span class="title">loss</span>   <span class="title">validation</span>/<span class="title">main</span>/<span class="title">loss</span>  <span class="title">main</span>/<span class="title">accuracy</span>  <span class="title">validation</span>/<span class="title">main</span>/<span class="title">accuracy</span>  <span class="title">elapsed_time</span></span></span><br><span class="line"><span class="function">1           0.189437    0.0972368             0.94235        0.9701                    8.70826</span></span><br><span class="line"><span class="function">2           0.0736203   0.0654                0.977182       0.9789                    11.5016</span></span><br><span class="line"><span class="function">3           0.0483072   0.0657967             0.984433       0.9786                    13.9685</span></span><br><span class="line"><span class="function">4           0.0344889   0.0775722             0.988614       0.9779                    16.4064</span></span><br><span class="line"><span class="function">5           0.0307565   0.073484              0.990132       0.9808                    18.8182</span></span><br><span class="line"><span class="function">6           0.0247791   0.0676734             0.991932       0.981                     21.2477</span></span><br><span class="line"><span class="function">7           0.0187978   0.0756141             0.993648       0.9822                    23.7888</span></span><br><span class="line"><span class="function">8           0.0151227   0.0729054             0.994965       0.9836                    26.2349</span></span><br><span class="line"><span class="function">9           0.0162507   0.09349               0.994649       0.9805                    28.6772</span></span><br><span class="line"><span class="function">10          0.0186082   0.07771               0.994565       0.983                     31.1291</span></span><br><span class="line"><span class="function">11          0.0121478   0.0878187             0.996282       0.9829                    33.575</span></span><br><span class="line"><span class="function">12          0.0139532   0.103692              0.995515       0.9803                    36.1334</span></span><br><span class="line"><span class="function">13          0.0128902   0.0869704             0.996015       0.9812                    38.5139</span></span><br><span class="line"><span class="function">14          0.00887171  0.0960986             0.997182       0.9807                    40.966</span></span><br><span class="line"><span class="function">15          0.00950978  0.0941747             0.997016       0.9835                    43.492</span></span><br><span class="line"><span class="function">16          0.0117687   0.112775              0.996632       0.9805                    45.8972</span></span><br><span class="line"><span class="function">17          0.012322    0.109815              0.996782       0.9803                    48.2932</span></span><br><span class="line"><span class="function">18          0.00880352  0.10031               0.997383       0.9818                    50.731</span></span><br><span class="line"><span class="function">19          0.00929279  0.118552              0.997365       0.979                     53.3326</span></span><br><span class="line"><span class="function">20          0.00607901  0.0849677             0.99825        0.9852</span></span><br></pre></td></tr></table></figure><p>学習の結果、<strong>result\mnist.model</strong>と<strong>resultmnist.onnx</strong>が出力されています。</p>]]></content>
      
      
      <categories>
          
          <category> %e3%83%87%e3%82%a3%e3%83%bc%e3%83%97%e3%83%a9%e3%83%bc%e3%83%8b%e3%83%b3%e3%82%b0 </category>
          
          <category> Chainer </category>
          
          <category> ディープラーニング </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その170 M2DetをUbuntu18.04で使ってみる(学習編)</title>
      <link href="2019/04/02/4014/"/>
      <url>2019/04/02/4014/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><a href="https://taktak.jp/2019/04/01/4007">前回</a>の続き。<br>今回は学習を行ってみます。</p><h1 id="How-to"><a href="#How-to" class="headerlink" title="How to"></a>How to</h1><p>公式によると下記のコマンドで学習できるとのこと。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python train.py -c=configs/m2det512_vgg.py --ngpu 4 -t True  </span><br></pre></td></tr></table></figure><p>しかしこのコマンドは<strong>TensorBorad</strong>を使った学習になります。<br>つまりTensorFlowが必要になります。<br>必要ない場合は</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python train.py -c=configs/m2det512_vgg.py --ngpu 4  </span><br></pre></td></tr></table></figure><p>でOK。<br>**–npgu**引数は利用するGPUの数。4個をサンプルとして表記しておくあたり、どれだけリソースを使うのか、とビクビクします。</p><h2 id="モデルファイル"><a href="#モデルファイル" class="headerlink" title="モデルファイル"></a>モデルファイル</h2><p>まず、pretrainedモデルをダウンロードします。<br>これは前回ダウンロードしたものとは異なります。<br>公式リンクにも書いておらず、ファイル名から検索をかけた結果、下記のページにリンクが書いてありました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://s3.amazonaws.com/amdegroot-models/vgg16_reducedfc.pth mkdir weights mv vgg16_reducedfc.pth weights</span><br></pre></td></tr></table></figure><h2 id="データセット"><a href="#データセット" class="headerlink" title="データセット"></a>データセット</h2><p>データセットをダウンロードします。しかし、これも公式には書いていません。<br>上述の<strong>ssd.pytorch</strong>でスクリプトが用意されています。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/amdegroot/ssd.pytorch  </span><br></pre></td></tr></table></figure><p>そして、このリポジトリにある下記のスクリプトからデータセットをダウンロードします。</p><ul><li>COCO<ul><li>./data/scripts/COCO2014.sh</li><li>~/data にダウンロードされる</li></ul></li><li>VOC2007<ul><li>./data/scripts/VOC2007.sh</li><li>~/data にダウンロードされる</li></ul></li><li>VOC2012<ul><li>./data/scripts/VOC2012.sh</li><li>~/data にダウンロードされる</li></ul></li></ul><p>必要に応じてシンボリックリンクで退避するなど工夫する</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /media/hdd/work/data ~/data  </span><br></pre></td></tr></table></figure><p>ダウンロード完了後、</p><ul><li>COCO<ul><li><strong>~/data/coco/annotations/annotations</strong> の中身を <strong>~/data/coco/annotations</strong> に移動 その場所に展開</li><li><strong>~/data/coco/images/train2014</strong>、 <strong>~/data/coco/images/val2014</strong> が存在することを確認</li><li>wget <a href="https://github.com/insikk/coco_dataset_trainval35k/blob/master/instances_valminusminival2014.json.zip?raw=true">https://github.com/insikk/coco_dataset_trainval35k/blob/master/instances_valminusminival2014.json.zip?raw=true</a> -O instances_valminusminival2014.json.zip</li><li>=/data/cocoで実行、展開、annotationsへ移動</li></ul></li></ul><p>し、<strong>data/coco.py</strong>を下記のように変更します。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    def __init__(self, root, image_sets, preproc=None, target_transform=None,</span><br><span class="line">                 dataset_name=&#x27;COCO&#x27;):</span><br><span class="line">        self.root = root</span><br><span class="line">        self.data_path = os.path.join(os.path.expanduser(&quot;~&quot;),&#x27;data&#x27;)</span><br><span class="line"><span class="deletion">-        self.cache_path = os.path.join(self.data_path, &#x27;coco_cache&#x27;)</span></span><br><span class="line"><span class="addition">+        self.cache_path = os.path.join(self.data_path, &#x27;coco&#x27;)</span></span><br><span class="line">        self.image_set = image_sets </span><br></pre></td></tr></table></figure><p>そして前述の学習コマンドを実行します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python train.py -c=configs/m2det512_vgg.py --ngpu 1  </span><br></pre></td></tr></table></figure><p>がいろいろエラーが。</p><h4 id="エラー1"><a href="#エラー1" class="headerlink" title="エラー1"></a>エラー1</h4><p><strong>data/coco.py</strong> を直していない時のエラー</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">creating index...</span><br><span class="line">index created!</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;train.py&quot;</span>, line 58, <span class="keyword">in</span> </span><br><span class="line">    dataset = get_dataloader(cfg, args.dataset, <span class="string">&#x27;train_sets&#x27;</span>)</span><br><span class="line">  File <span class="string">&quot;/media/hdd/work/local/M2Det/utils/core.py&quot;</span>, line 93, <span class="keyword">in</span> get_dataloader</span><br><span class="line">    getattr(cfg.dataset, dataset)[setname], _preproc)</span><br><span class="line">  File <span class="string">&quot;/media/hdd/work/local/M2Det/data/coco.py&quot;</span>, line 65, <span class="keyword">in</span> __init__</span><br><span class="line">    self.annotations.extend(self._load_coco_annotations(coco_name, indexes,_COCO))</span><br><span class="line">  File <span class="string">&quot;/media/hdd/work/local/M2Det/data/coco.py&quot;</span>, line 101, <span class="keyword">in</span> _load_coco_annotations</span><br><span class="line">    with open(cache_file, <span class="string">&#x27;wb&#x27;</span>) as fid:</span><br><span class="line">FileNotFoundError: [Errno 2] No such file or directory: <span class="string">&#x27;/home/takuya/data/coco_cache/train2014_gt_roidb.pkl&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="エラー2"><a href="#エラー2" class="headerlink" title="エラー2"></a>エラー2</h4><p>バッチサイズが大きすぎる。<br><strong>configs/m2det512_vgg.py</strong> で <strong>per_batch_size</strong> を小さくする</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">===&gt; Training M2Det on COCO</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;train.py&quot;</span>, line 86, <span class="keyword">in</span> </span><br><span class="line">    out = net(images)</span><br><span class="line">  File <span class="string">&quot;/media/hdd/Ubuntu18.04/python/M2Det/lib/python3.6/site-packages/torch/nn/modules/module.py&quot;</span>, line 477, <span class="keyword">in</span> __call__</span><br><span class="line">    result = self.forward(*input, **kwargs)</span><br><span class="line">  File <span class="string">&quot;/media/hdd/work/local/M2Det/m2det.py&quot;</span>, line 106, <span class="keyword">in</span> forward</span><br><span class="line">    x = self.base[k](x)</span><br><span class="line">  File <span class="string">&quot;/media/hdd/Ubuntu18.04/python/M2Det/lib/python3.6/site-packages/torch/nn/modules/module.py&quot;</span>, line 477, <span class="keyword">in</span> __call__</span><br><span class="line">    result = self.forward(*input, **kwargs)</span><br><span class="line">  File <span class="string">&quot;/media/hdd/Ubuntu18.04/python/M2Det/lib/python3.6/site-packages/torch/nn/modules/conv.py&quot;</span>, line 301, <span class="keyword">in</span> forward</span><br><span class="line">    self.padding, self.dilation, self.groups)</span><br><span class="line">RuntimeError: CUDA error: out of memory</span><br></pre></td></tr></table></figure><p>これらを超えて学習が始まりましたが、まったく終わりません。<br>COCOのデータの画像数が多いのもありますが、<strong>1080</strong>だとバッチサイズ4が限界で、1epoch回すのに6hかかりました。<br>なので学習は断念しました。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> %e3%83%87%e3%82%a3%e3%83%bc%e3%83%97%e3%83%a9%e3%83%bc%e3%83%8b%e3%83%b3%e3%82%b0 </category>
          
          <category> PyTorch </category>
          
          <category> ディープラーニング </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その169 M2DetをUbuntu18.04で使ってみる(デモ編)</title>
      <link href="2019/04/01/4007/"/>
      <url>2019/04/01/4007/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>2019年最新のObject Detectionである<strong>M2Det</strong>を使ってみます。<br>目標は自作のデータセットを使うこと。<br>まずはサンプルを実行してみます。</p><h1 id="How-to"><a href="#How-to" class="headerlink" title="How to"></a>How to</h1><p>公式ページはこちら。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/qijiezhao/M2Det#Introduction" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars1.githubusercontent.com/u/20857077?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">qijiezhao/M2Det</div><div class="hbc-url">https://github.com/qijiezhao/M2Det#Introduction</div><div class="hbc-description">M2Det: A Single-Shot Object Detector based on Multi-Level Feature Pyramid Network - qijiezhao/M2Det</div></div></div></div></a></div></div><p>なお</p><ul><li>推奨は<strong>Anaconda</strong>のようですが、ピュアなPythonで試します。</li><li>Python 3.6.7</li><li>CUDA 9.2</li></ul><p>という前提です。</p><h2 id="仮想環境構築"><a href="#仮想環境構築" class="headerlink" title="仮想環境構築"></a>仮想環境構築</h2><p>仮想環境を作成しアクティベートします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install python3-venvpython3-tk</span><br><span class="line">$ python3 -m venv M2Det</span><br><span class="line">$ <span class="built_in">source</span> M2Det/bin/activate</span><br></pre></td></tr></table></figure><h2 id="環境変数設定"><a href="#環境変数設定" class="headerlink" title="環境変数設定"></a>環境変数設定</h2><p>CUDAの環境変数を設定します。<br>設定済みならスキップ。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">VERSION=9.2</span><br><span class="line"><span class="built_in">export</span> CUDA_HOME=/usr/<span class="built_in">local</span>/cuda-<span class="variable">$&#123;VERSION&#125;</span></span><br><span class="line"><span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/cuda-<span class="variable">$&#123;VERSION&#125;</span>/bin:<span class="variable">$&#123;PATH&#125;</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$LD_LIBRARY_PATH</span>:<span class="variable">$&#123;CUDA_HOME&#125;</span>/lib64</span><br></pre></td></tr></table></figure><p>設定後、下記のコマンドで確認を行います。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ nvcc: NVIDIA (R) Cuda compiler driver</span><br><span class="line">Copyright (c) 2005-2018 NVIDIA Corporation</span><br><span class="line">Built on Tue_Jun_12_23:07:04_CDT_2018</span><br><span class="line">Cuda compilation tools, release 9.2, V9.2.148</span><br></pre></td></tr></table></figure><h2 id="パッケージのインストール"><a href="#パッケージのインストール" class="headerlink" title="パッケージのインストール"></a>パッケージのインストール</h2><p><strong>M2Det</strong>は<strong>PyTorch</strong>の<strong>0.4.1</strong>をサポートと明言していますので従います。<br>古いバージョンは下記のページから入手します。<br>自分の環境のCUDAと合わせて適切なファイルをダウンロードします。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://pytorch.org/get-started/previous-versions/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=pytorch.org"></img><div class="hbc-site-name">pytorch.org</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://pytorch.org/assets/images/pytorch-logo.png"></img></div><div class="hbc-text"><div class="hbc-title">PyTorch</div><div class="hbc-url">https://pytorch.org/get-started/previous-versions/</div><div class="hbc-description">An open source deep learning platform that provides a seamless path from research prototyping to production deployment.</div></div></div></div></a></div></div><p>今回は<strong>torch-0.4.1-cp36-cp36m-linux_x86_64.whl</strong>になります。<br>なお、途中の <strong>–cache-dir</strong> は、自環境でディスク容量不足のエラーが出たための対策です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python -m pip install torch-0.4.1-cp36-cp36m-linux_x86_64.whl</span><br><span class="line">Processing ./torch-0.4.1-cp36-cp36m-linux_x86_64.whl</span><br><span class="line">Could not install packages due to an EnvironmentError: [Errno 28] デバイスに空き領域がありません</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://download.pytorch.org/whl/cu92/torch-0.4.1-cp36-cp36m-linux_x86_64.whl</span><br><span class="line"></span><br><span class="line">$ python -m pip install pip --upgrade</span><br><span class="line">$ python -m pip install numpy</span><br><span class="line">$ python -m pip install --cache-dir=./cache --build ./cache torch-0.4.1-cp36-cp36m-linux_x86_64.whl</span><br><span class="line">$ python -m pip install torchvision</span><br><span class="line">$ python -m pip install opencv-python tqdm</span><br><span class="line">$ python -m pip install cython matplotlib addict termcolor python3-tk</span><br></pre></td></tr></table></figure><p>インストール後、下記のようにしてPyTorchがCUDAを認識しているかどうかを確認します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ python</span><br><span class="line">Python 3.6.7 (default, Oct 22 2018, 11:32:17)</span><br><span class="line">[GCC 8.2.0] on linux</span><br><span class="line">Type <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> or <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; import torch</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(torch.cuda.is_available())</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; torch.cuda.get_device_name(0)</span><br><span class="line"><span class="string">&#x27;GeForce GTX 1080&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="ソースの入手"><a href="#ソースの入手" class="headerlink" title="ソースの入手"></a>ソースの入手</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/qijiezhao/M2Det.git</span><br></pre></td></tr></table></figure><h2 id="pycocotoolsとnms"><a href="#pycocotoolsとnms" class="headerlink" title="pycocotoolsとnms"></a>pycocotoolsとnms</h2><p>ソースに付属のスクリプトを使って<strong>pycocotools</strong>と<strong>nms</strong>をインストールします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> M2Det</span><br><span class="line">chmod +x make.sh</span><br><span class="line">./make.sh</span><br></pre></td></tr></table></figure><h2 id="デモ"><a href="#デモ" class="headerlink" title="デモ"></a>デモ</h2><p>まず、pretrainedファイルをダウンロードします。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://drive.google.com/file/d/1NM1UDdZnwHwiNDxhcP-nndaWj24m-90L/view?usp=sharing" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=drive.google.com"></img><div class="hbc-site-name">Google Docs</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">m2det512_vgg.pth</div><div class="hbc-url">https://drive.google.com/file/d/1NM1UDdZnwHwiNDxhcP-nndaWj24m-90L/view?usp=sharing</div></div></div></div></a></div></div><p>ダウンロードしたファイルはどこでもいいので移動します。<br>そして、下記のコマンドを実行します。<br>ダウンロードしたファイルの移動先をどこでもよいといったのは、**-m** 引数にダウンロードしたファイルのパスを指定するからです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python demo.py -c=configs/m2det512_vgg.py -m=m2det512_vgg.pth --show</span><br></pre></td></tr></table></figure><p>実行時はGUI画面が必要です。SSHからだと、</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pos:(15.4,175.9,34.7,213.7), ids:handbag, score:0.009</span><br><span class="line">pos:(97.1,248.4,128.3,304.3), ids:handbag, score:0.002</span><br><span class="line">: cannot connect to X server</span><br></pre></td></tr></table></figure><p>とエラーが出るためです。<br>ただし、**–show<strong>を外せば画面には表示されません。<br>出力結果が</strong>imgs**ディレクトリに書き出されます。</p><p>GUI上で実行すると下記のように画像が一定間隔で切り割って結果が表示されます。<br>(クリックして拡大するとアニメーションします)</p><p><a href="../../../../public/2019/04/movie.gif"><img src="../../../../public/2019/04/movie-1024x635.gif"></a></p><p> ちなみに、実行時のGPUの使用メモリは約3600MBでした。</p>]]></content>
      
      
      <categories>
          
          <category> %e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%e8%a8%80%e8%aa%9e </category>
          
          <category> Linux </category>
          
          <category> Python </category>
          
          <category> linux </category>
          
          <category> %e3%83%87%e3%82%a3%e3%83%bc%e3%83%97%e3%83%a9%e3%83%bc%e3%83%8b%e3%83%b3%e3%82%b0 </category>
          
          <category> PyTorch </category>
          
          <category> ディープラーニング </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その168 Windowsコンテナを使ってみる</title>
      <link href="2019/03/11/3982/"/>
      <url>2019/03/11/3982/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>開発中のOSSでWindows Server Coreへの対応についてのissueがあったので、調査がてら導入してみる。<br>Windows Server 2016を使います。<br>評価版で検証を行います。</p><h1 id="How-to"><a href="#How-to" class="headerlink" title="How to"></a>How to</h1><p>下記の方が教えてくれました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://qiita.com/anikundesu/items/f6e1561b8d99c6ee6156" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=qiita.com"></img><div class="hbc-site-name">Qiita</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.qiita.com%2Fassets%2Fpublic%2Farticle-ogp-background-1150d8b18a7c15795b701a55ae908f94.png?ixlib=rb-1.2.2&w=1200&mark=https%3A%2F%2Fqiita-user-contents.imgix.net%2F~text%3Fixlib%3Drb-1.2.2%26w%3D840%26h%3D380%26txt%3DWindows%2520Server%25202016%25E3%2581%25A7Windows%2520Server%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2586%25E3%2583%258A%25E3%2583%25BC%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2584%25E5%25A7%258B%25E3%2582%2581%25E3%2582%258B%26txt-color%3D%2523333%26txt-font%3DHiragino%2520Sans%2520W6%26txt-size%3D54%26txt-clip%3Dellipsis%26txt-align%3Dcenter%252Cmiddle%26s%3D7bb5059e525dd7d2e855b10a2696669a&mark-align=center%2Cmiddle&blend=https%3A%2F%2Fqiita-user-contents.imgix.net%2F~text%3Fixlib%3Drb-1.2.2%26w%3D840%26h%3D500%26txt%3D%2540anikundesu%26txt-color%3D%2523333%26txt-font%3DHiragino%2520Sans%2520W6%26txt-size%3D45%26txt-align%3Dright%252Cbottom%26s%3D1d1d55e60d5c29cd18ba11cb0df17b5d&blend-align=center%2Cmiddle&blend-mode=normal&s=47109e8d8d67c91da78576b75a76253b"></img></div><div class="hbc-text"><div class="hbc-title">Windows Server 2016でWindows Serverコンテナーを使い始める - Qiita</div><div class="hbc-url">https://qiita.com/anikundesu/items/f6e1561b8d99c6ee6156</div><div class="hbc-description">この記事は、「クラウド時代のシステム管理」の記事を転記したものです。Windows Server 2016からDocker APIに対応した「Windows Serverコンテナー」と、より強固なプロセス分離機能を備えた「Hyper...</div></div></div></div></a></div></div><h2 id="Windowsの最新化"><a href="#Windowsの最新化" class="headerlink" title="Windowsの最新化"></a>Windowsの最新化</h2><p>全てのセキュリティパッチを含む更新を行います。</p><h2 id="コンテナの有効化"><a href="#コンテナの有効化" class="headerlink" title="コンテナの有効化"></a>コンテナの有効化</h2><p><strong>役割と機能の追加</strong>から<strong>コンテナ</strong>を有効化します。</p><h2 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h2><p>管理者権限で<strong>PowerShell</strong>を起動。<br>場合によっては下記のように <strong>Nuget</strong> の更新が必要になりますが、その場合はYesと答え、もう一度コマンドを実行します。</p><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">Install-Module</span> <span class="literal">-Name</span> DockerMsftProvider <span class="literal">-Repository</span> PSGallery –Force</span><br><span class="line"></span><br><span class="line">NuGet provider is required to <span class="keyword">continue</span></span><br><span class="line">PowerShellGet requires NuGet provider version <span class="string">&#x27;2.8.5.201&#x27;</span> or newer to interact with Nu<span class="built_in">Get-based</span> repositories. The NuGet provider must be available <span class="keyword">in</span> <span class="string">&#x27;C:\Program Files\PackageManagement\ProviderAssemblies&#x27;</span> or</span><br><span class="line"><span class="string">&#x27;C:\Users\Administrator\AppData\Local\PackageManagement\ProviderAssemblies&#x27;</span>. You can also install the NuGet provider by running <span class="string">&#x27;Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force&#x27;</span>. <span class="keyword">Do</span> you want PowerShellGet to</span><br><span class="line">install and import the NuGet provider now?</span><br><span class="line"><span class="function">[<span class="type">Y</span>] <span class="title">Yes</span></span>  <span class="function">[<span class="type">N</span>] <span class="title">No</span></span>  <span class="function">[<span class="type">S</span>] <span class="title">Suspend</span></span>  <span class="function">[?] <span class="title">Help</span></span> (default is <span class="string">&quot;Y&quot;</span>): Y</span><br><span class="line">&gt; <span class="built_in">Install-Module</span> <span class="literal">-Name</span> DockerMsftProvider <span class="literal">-Repository</span> PSGallery –Force</span><br></pre></td></tr></table></figure><p>パッケージソースからのインストールを信頼するかどうかの確認。<br>Yesと答えます。<br>少し時間がかかりますが、待っているとインストールが完了します。<br>完了後、再起動します。<br>再起動後、dockerをインストールします。</p><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Users\Administrator&gt; <span class="built_in">Install-Package</span> <span class="literal">-Name</span> docker <span class="literal">-ProviderName</span> DockerMsftProvider</span><br><span class="line"></span><br><span class="line">The package(s) come(s) from a package source that is not marked as trusted.</span><br><span class="line">Are you sure you want to install software from <span class="string">&#x27;DockerDefault&#x27;</span>?</span><br><span class="line"><span class="function">[<span class="type">Y</span>] <span class="title">Yes</span></span>  <span class="function">[<span class="type">A</span>] <span class="title">Yes</span></span> to All  <span class="function">[<span class="type">N</span>] <span class="title">No</span></span>  <span class="function">[<span class="type">L</span>] <span class="title">No</span></span> to All  <span class="function">[<span class="type">S</span>] <span class="title">Suspend</span></span>  <span class="function">[?] <span class="title">Help</span></span> (default is <span class="string">&quot;N&quot;</span>): Y</span><br><span class="line"></span><br><span class="line">Name                           Version          Source           Summary</span><br><span class="line">----                           -------          ------           -------</span><br><span class="line">Docker                         <span class="number">18.09</span>.<span class="number">3</span>          DockerDefault    Contains Docker EE <span class="keyword">for</span> use with Windows Server.</span><br></pre></td></tr></table></figure><h2 id="確認"><a href="#確認" class="headerlink" title="確認"></a>確認</h2><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt; docker version</span><br><span class="line">Client:</span><br><span class="line"> Version:           <span class="number">18.09</span>.<span class="number">3</span></span><br><span class="line"> API version:       <span class="number">1.39</span></span><br><span class="line"> Go version:        go1.<span class="number">10.8</span></span><br><span class="line"> Git commit:        <span class="number">142</span>dfcedca</span><br><span class="line"> Built:             <span class="number">02</span>/<span class="number">28</span>/<span class="number">2019</span> <span class="number">06</span>:<span class="number">33</span>:<span class="number">17</span></span><br><span class="line"> OS/Arch:           windows/amd64</span><br><span class="line"> Experimental:      false</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          <span class="number">18.09</span>.<span class="number">3</span></span><br><span class="line">  API version:      <span class="number">1.39</span> (minimum version <span class="number">1.24</span>)</span><br><span class="line">  Go version:       go1.<span class="number">10.8</span></span><br><span class="line">  Git commit:       <span class="number">142</span>dfcedca</span><br><span class="line">  Built:            <span class="number">02</span>/<span class="number">28</span>/<span class="number">2019</span> <span class="number">06</span>:<span class="number">31</span>:<span class="number">15</span></span><br><span class="line">  OS/Arch:          windows/amd64</span><br><span class="line">  Experimental:     false</span><br></pre></td></tr></table></figure><h2 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h2><h4 id="コードの用意"><a href="#コードの用意" class="headerlink" title="コードの用意"></a>コードの用意</h4><p>動かしたいサンプルは</p><ul><li>Windows Server Core 2016</li><li>dotnet core のコンソール</li></ul><p>となります。<br>コードは下記になります。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Sample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(System.Environment.OSVersion.Platform);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>コンテナ内でソースを用意するのは面倒なので、あらかじめ用意しておいて、ビルド時にコピーするようにします。</p><h4 id="サンプル実行"><a href="#サンプル実行" class="headerlink" title="サンプル実行"></a>サンプル実行</h4><p>下記の<strong>Dockerfile</strong>を作成します。</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> mcr.microsoft.com/windows/servercore:<span class="number">10.0</span>.<span class="number">14393.2665</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SHELL</span><span class="bash"> [<span class="string">&quot;powershell&quot;</span>, <span class="string">&quot;-Command&quot;</span>, <span class="string">&quot;<span class="variable">$ErrorActionPreference</span> = &#x27;Stop&#x27;; <span class="variable">$ProgressPreference</span> = &#x27;SilentlyContinue&#x27;;&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install .NET Core SDK</span></span><br><span class="line"><span class="keyword">ENV</span> DOTNET_SDK_VERSION <span class="number">2.2</span>.<span class="number">104</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> Invoke-WebRequest -OutFile dotnet.zip https://dotnetcli.blob.core.windows.net/dotnet/Sdk/<span class="variable">$Env</span>:DOTNET_SDK_VERSION/dotnet-sdk-<span class="variable">$Env</span>:DOTNET_SDK_VERSION-win-x64.zip; \</span></span><br><span class="line"><span class="bash">    <span class="variable">$dotnet_sha512</span> = <span class="string">&#x27;2e73f64a7fdf0f9e03a58a1824375dab91cae658c1863d5130047064643a5c035db25251c443e9e0eded73ffe7b33ae6e1be4e16083da6122dfc1a7d6e2f1564&#x27;</span>; \</span></span><br><span class="line"><span class="bash">    <span class="keyword">if</span> ((Get-FileHash dotnet.zip -Algorithm sha512).Hash -ne <span class="variable">$dotnet_sha512</span>) &#123; \</span></span><br><span class="line"><span class="bash">        Write-Host <span class="string">&#x27;CHECKSUM VERIFICATION FAILED!&#x27;</span>; \</span></span><br><span class="line"><span class="bash">        <span class="built_in">exit</span> 1; \</span></span><br><span class="line"><span class="bash">    &#125;; \</span></span><br><span class="line"><span class="bash">    \</span></span><br><span class="line"><span class="bash">    Expand-Archive dotnet.zip -DestinationPath <span class="variable">$Env</span>:ProgramFiles\dotnet; \</span></span><br><span class="line"><span class="bash">    Remove-Item -Force dotnet.zip</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SHELL</span><span class="bash"> [<span class="string">&quot;cmd&quot;</span>, <span class="string">&quot;/S&quot;</span>, <span class="string">&quot;/C&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> [<span class="string">&quot;C:/Program Files/dotnet/dotnet.exe&quot;</span>, <span class="string">&quot;new&quot;</span>, <span class="string">&quot;console&quot;</span>, <span class="string">&quot;-n&quot;</span>, <span class="string">&quot;Sample&quot;</span>]</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> [<span class="string">&quot;Program.cs&quot;</span>, <span class="string">&quot;c:/Sample&quot;</span>]</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> Sample</span></span><br></pre></td></tr></table></figure><p>そして実行。<br><strong>dotnet</strong>の初回起動時の復元処理に時間がかかります。<br>終わらなかったら、一度Ctrl+CでbuildをキャンセルするとOKです。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t test .</span><br><span class="line">$ docker run -t test <span class="built_in">cmd</span></span><br><span class="line">&gt; &quot;C:\Program Files\dotnet\dotnet.exe&quot; run -c Release</span><br><span class="line">Win32NT</span><br></pre></td></tr></table></figure><p>詳細なバージョン情報も表示してみます。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">powershell [System.Environment]::OSVersion</span><br><span class="line">Platform ServicePack Version      VersionString</span><br><span class="line">-------- ----------- -------      -------------</span><br><span class="line"> Win32NT             <span class="number">10</span>.<span class="number">0</span>.<span class="number">14393</span>.<span class="number">0</span> Microsoft Windows NT <span class="number">10</span>.<span class="number">0</span>.<span class="number">14393</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 仮想化 </category>
          
          <category> Microsoft </category>
          
          <category> Docker </category>
          
          <category> Windows </category>
          
          <category> Windows Server </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その167 Raspberry Pi 3をWindows 10でエミュレートする</title>
      <link href="2019/03/03/3967/"/>
      <url>2019/03/03/3967/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>備忘録。<br>RaspberryPIを仮想環境で使いたくなったのでメモ。<br>ただし、現時点ではARM64のエミュレートはできませんでした。</p><h1 id="How-to"><a href="#How-to" class="headerlink" title="How to"></a>How to</h1><p>下記の方が教えてくれました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://jyn.jp/raspbian-on-qemu/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=jyn.jp"></img><div class="hbc-site-name">純規の暇人趣味ブログ</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://jyn.jp/wp-core/wp-content/uploads/2017/01/raspbian-on-qemu-001.png"></img></div><div class="hbc-text"><div class="hbc-title">RaspbianをQEMUで動かす | 純規の暇人趣味ブログ</div><div class="hbc-url">https://jyn.jp/raspbian-on-qemu/</div><div class="hbc-description">どうも、ビンの王冠をスプーンで開けようとして指を怪我したニンゲンです。(怠慢ヨクナイネ)ちなみにビンの王冠と芥川龍之介は同い年なんですよ、知らなくて良い雑学ですね、脳の容量の無駄遣いです(参考：Wikipediaの王冠と芥川龍之介ページ)どうでも良い雑学はさておき、今回はRasp…</div></div></div></div></a></div></div><h2 id="QEMUのインストール"><a href="#QEMUのインストール" class="headerlink" title="QEMUのインストール"></a>QEMUのインストール</h2><p>下記から最新版をダウンロードしてインストール。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://qemu.weilnetz.de/w64/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=qemu.weilnetz.de"></img><div class="hbc-site-name">qemu.weilnetz.de</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">QEMU for Windows – Installers (64 bit)</div><div class="hbc-url">https://qemu.weilnetz.de/w64/</div><div class="hbc-description">QEMU Binaries for Windows</div></div></div></div></a></div></div><h3 id="Raspbian-Jessieのダウンロード"><a href="#Raspbian-Jessieのダウンロード" class="headerlink" title="Raspbian Jessieのダウンロード"></a>Raspbian Jessieのダウンロード</h3><p>下記からダウンロード。<br>最新のStrechは動かなかったので断念。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://ftp.jaist.ac.jp/pub/raspberrypi/raspbian_lite/images/raspbian_lite-2017-01-10/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=ftp.jaist.ac.jp"></img><div class="hbc-site-name">ftp.jaist.ac.jp</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">Index of /pub/raspberrypi/raspbian_lite/images/raspbian_lite-2017-01-10</div><div class="hbc-url">http://ftp.jaist.ac.jp/pub/raspberrypi/raspbian_lite/images/raspbian_lite-2017-01-10/</div></div></div></div></a></div></div><h3 id="QEMU用カーネルとDevice-Treeファイル"><a href="#QEMU用カーネルとDevice-Treeファイル" class="headerlink" title="QEMU用カーネルとDevice Treeファイル"></a>QEMU用カーネルとDevice Treeファイル</h3><p>下記から、</p><ul><li>versatile-pb.dtb</li><li>kernel-qemu-4.4.34-jessie</li></ul><p>をダウンロード。<br><strong>kernel-qemu</strong>はバージョンが随時変わります。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/dhruvvyas90/qemu-rpi-kernel" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/1730398?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">dhruvvyas90/qemu-rpi-kernel</div><div class="hbc-url">https://github.com/dhruvvyas90/qemu-rpi-kernel</div><div class="hbc-description">Qemu kernel for emulating Rpi on QEMU. Contribute to dhruvvyas90/qemu-rpi-kernel development by creating an account on GitHub.</div></div></div></div></a></div></div><h3 id="下準備"><a href="#下準備" class="headerlink" title="下準備"></a>下準備</h3><p>仮想マシンでも何でも良いのでダウンロードしたRaspbianのイメージを仮想マシンにコピー。</p><h4 id="セクターの確認"><a href="#セクターの確認" class="headerlink" title="セクターの確認"></a>セクターの確認</h4><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ fdisk -l <span class="number">2017</span>-<span class="number">01</span>-<span class="number">11</span>-raspbian-jessie-lite.img</span><br><span class="line">Disk <span class="number">2017</span>-<span class="number">01</span>-<span class="number">11</span>-raspbian-jessie-lite.img: <span class="number">1</span>.<span class="number">3</span> GiB, <span class="number">1390411776</span> bytes, <span class="number">2715648</span> sectors</span><br><span class="line"><span class="function">Units: <span class="title">sectors</span> <span class="title">of</span> 1 * 512 = 512 <span class="title">bytes</span></span></span><br><span class="line"><span class="function"><span class="title">Sector</span> <span class="title">size</span> (<span class="title">logical</span>/<span class="title">physical</span>): 512 <span class="title">bytes</span> / 512 <span class="title">bytes</span></span></span><br><span class="line"><span class="function"><span class="title">I</span>/<span class="title">O</span> <span class="title">size</span> (<span class="title">minimum</span>/<span class="title">optimal</span>): 512 <span class="title">bytes</span> / 512 <span class="title">bytes</span></span></span><br><span class="line"><span class="function"><span class="title">Disklabel</span> <span class="title">type</span>: <span class="title">dos</span></span></span><br><span class="line"><span class="function"><span class="title">Disk</span> <span class="title">identifier</span>: 0<span class="title">x244b8248</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Device</span>                               <span class="title">Boot</span>  <span class="title">Start</span>     <span class="title">End</span> <span class="title">Sectors</span>  <span class="title">Size</span> <span class="title">Id</span> <span class="title">Type</span></span></span><br><span class="line"><span class="function">2017-01-11-<span class="title">raspbian</span>-<span class="title">jessie</span>-<span class="title">lite.img1</span>        8192  137215  129024   63<span class="title">M</span>  <span class="title">c</span> <span class="title">W95</span> <span class="title">FAT32</span> (<span class="title">LBA</span>)</span></span><br><span class="line"><span class="function">2017-01-11-<span class="title">raspbian</span>-<span class="title">jessie</span>-<span class="title">lite.img2</span>      137216 2715647 2578432  1.2<span class="title">G</span> 83 <span class="title">Linux</span></span></span><br></pre></td></tr></table></figure><h4 id="マウント"><a href="#マウント" class="headerlink" title="マウント"></a>マウント</h4><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mount -v -o offset=$((<span class="number">512</span>\*<span class="number">137216</span>)) -t ext4 ./<span class="number">2017</span>-<span class="number">01</span>-<span class="number">11</span>-raspbian-jessie-lite.img /mnt/</span><br><span class="line"><span class="function">mount: /<span class="title">dev</span>/<span class="title">loop0</span> <span class="title">mounted</span> <span class="title">on</span> /<span class="title">mnt</span>.</span></span><br></pre></td></tr></table></figure><h4 id="ファイルシステムテーブルの編集"><a href="#ファイルシステムテーブルの編集" class="headerlink" title="ファイルシステムテーブルの編集"></a>ファイルシステムテーブルの編集</h4><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi /mnt/etc/fstab</span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">proc            /proc           proc    defaults          0       0</span><br><span class="line"><span class="deletion">-/dev/mmcblk0p1  /boot           vfat    defaults          0       2</span></span><br><span class="line"><span class="deletion">- /dev/mmcblk0p2  /               ext4    defaults,noatime  0       1</span></span><br><span class="line"><span class="addition">+ #/dev/mmcblk0p1  /boot           vfat    defaults          0       2</span></span><br><span class="line"><span class="addition">+ #/dev/mmcblk0p2  /               ext4    defaults,noatime  0       1</span></span><br></pre></td></tr></table></figure><h4 id="ld-so-preloadの編集"><a href="#ld-so-preloadの編集" class="headerlink" title="ld.so.preloadの編集"></a>ld.so.preloadの編集</h4><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo editor /mnt/etc/ld.so.preload</span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- /usr/lib/arm-linux-gnueabihf/libarmmem.so</span></span><br><span class="line"><span class="addition">+ #/usr/lib/arm-linux-gnueabihf/libarmmem.so</span></span><br></pre></td></tr></table></figure><h4 id="アンマウント"><a href="#アンマウント" class="headerlink" title="アンマウント"></a>アンマウント</h4><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo umount /mnt</span><br></pre></td></tr></table></figure><h3 id="起動"><a href="#起動" class="headerlink" title="起動"></a>起動</h3><p><strong>-hda</strong>でダウンロードしたRaspbianのイメージを指定します。これがHDDになります </p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> QEMU=&quot;C:\Program Files\qemu\qemu-system-arm.exe&quot;</span><br><span class="line"><span class="variable">%QEMU%</span> -kernel kernel-qemu-<span class="number">4</span>.<span class="number">4</span>.<span class="number">34</span>-jessie ^</span><br><span class="line">       -cpu arm1176 ^</span><br><span class="line">       -m <span class="number">256</span> ^</span><br><span class="line">       -M versatilepb ^</span><br><span class="line">       -serial stdio ^</span><br><span class="line">       -<span class="built_in">append</span> &quot;root=/dev/sda2 rootfstype=ext4 rw&quot; ^</span><br><span class="line">       -hda <span class="number">2017</span>-<span class="number">01</span>-<span class="number">11</span>-raspbian-jessie-lite.img ^</span><br><span class="line">       -<span class="built_in">net</span> nic ^</span><br><span class="line">       -<span class="built_in">net</span> user,hostfwd=tcp::<span class="number">20022</span>-:<span class="number">22</span></span><br></pre></td></tr></table></figure><p><a href="../../../../public/2019/03/2ea62eac32df3663a4e6e25e8b57148e.png"><img src="../../../../public/2019/03/2ea62eac32df3663a4e6e25e8b57148e.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> 仮想化 </category>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> QEMU </category>
          
          <category> Raspbian </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その166 重すぎるリポジトリをgit fetchする</title>
      <link href="2019/02/24/3960/"/>
      <url>2019/02/24/3960/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>備忘録。<br>自宅のライブラリ保存用リポジトリが巨大化してpullできなくなりました。<br>その際の対策。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch</span><br><span class="line"><span class="function">remote: <span class="title">Enumerating</span> <span class="title">objects</span>: 8824, <span class="title">done</span>.</span></span><br><span class="line"><span class="function"><span class="title">remote</span>: <span class="title">Counting</span> <span class="title">objects</span>: 100% (8821/8821), <span class="title">done</span>.</span></span><br><span class="line"><span class="function"><span class="title">error</span>: <span class="title">RPC</span> <span class="title">failed</span>; <span class="title">curl</span> 56 <span class="title">Failure</span> <span class="title">when</span> <span class="title">receiving</span> <span class="title">data</span> <span class="title">from</span> <span class="title">the</span> <span class="title">peer</span></span></span><br><span class="line"><span class="function"><span class="title">fatal</span>: <span class="title">the</span> <span class="title">remote</span> <span class="title">end</span> <span class="title">hung</span> <span class="title">up</span> <span class="title">unexpectedly</span></span></span><br><span class="line"><span class="function"><span class="title">fatal</span>: <span class="title">protocol</span> <span class="title">error</span>: <span class="title">bad</span> <span class="title">pack</span> <span class="title">header</span></span></span><br></pre></td></tr></table></figure><h1 id="How-to"><a href="#How-to" class="headerlink" title="How to"></a>How to</h1><p>下記の方が教えてくれました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://r-h.hatenablog.com/entry/2013/12/07/093423" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=r-h.hatenablog.com"></img><div class="hbc-site-name">webネタ</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://ogimage.blog.st-hatena.com/12704346814673877293/12921228815714017690/1386376545"></img></div><div class="hbc-text"><div class="hbc-title">gitで重いリポジトリをcloneするとき - webネタ</div><div class="hbc-url">http://r-h.hatenablog.com/entry/2013/12/07/093423</div><div class="hbc-description">git clone http://example.com/fuga.git remote: Counting objects: 3203, done. remote: warning: suboptimal pack - out of memory remote: fatal: …</div></div></div></div></a></div></div><p>徐々にfetchしてpullすればよいと。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch --depth <span class="number">1</span></span><br><span class="line"><span class="function">remote: <span class="title">Enumerating</span> <span class="title">objects</span>: 8374, <span class="title">done</span>.</span></span><br><span class="line"><span class="function"><span class="title">remote</span>: <span class="title">Counting</span> <span class="title">objects</span>: 100% (8374/8374), <span class="title">done</span>.</span></span><br><span class="line"><span class="function"><span class="title">remote</span>: <span class="title">Compressing</span> <span class="title">objects</span>: 100% (6008/6008), <span class="title">done</span>.</span></span><br><span class="line"><span class="function"><span class="title">remote</span>: <span class="title">Total</span> 8356 (<span class="title">delta</span> 2189), <span class="title">reused</span> 8277 (<span class="title">delta</span> 2170)</span></span><br><span class="line"><span class="function"><span class="title">Receiving</span> <span class="title">objects</span>: 100% (8356/8356), 1.31 <span class="title">GiB</span> | 28.65 <span class="title">MiB</span>/<span class="title">s</span>, <span class="title">done</span>.</span></span><br><span class="line"><span class="function"><span class="title">Resolving</span> <span class="title">deltas</span>: 100% (2189/2189), <span class="title">completed</span> <span class="title">with</span> 9 <span class="title">local</span> <span class="title">objects</span>.</span></span><br><span class="line"><span class="function"><span class="title">From</span> <span class="title">https</span>://<span class="title">hogehoge</span>:3000/<span class="title">git</span>/<span class="title">Lib</span></span></span><br><span class="line"><span class="function"> + 67<span class="title">ccf8298</span>...3<span class="title">fb81d65f</span> <span class="title">master</span>     -&gt; <span class="title">origin</span>/<span class="title">master</span>  (<span class="title">forced</span> <span class="title">update</span>)</span></span><br><span class="line"><span class="function"> * [<span class="title">new</span> <span class="title">branch</span>]          <span class="title">develop</span>    -&gt; <span class="title">origin</span>/<span class="title">develop</span></span></span><br><span class="line"><span class="function">$ <span class="title">git</span> <span class="title">fetch</span> --<span class="title">depth</span> 10</span></span><br><span class="line"><span class="function"><span class="title">remote</span>: <span class="title">Enumerating</span> <span class="title">objects</span>: 332, <span class="title">done</span>.</span></span><br><span class="line"><span class="function"><span class="title">remote</span>: <span class="title">Counting</span> <span class="title">objects</span>: 100% (331/331), <span class="title">done</span>.</span></span><br><span class="line"><span class="function"><span class="title">remote</span>: <span class="title">Compressing</span> <span class="title">objects</span>: 100% (154/154), <span class="title">done.R</span></span></span><br><span class="line"><span class="function"><span class="title">remote</span>: <span class="title">Total</span> 310 (<span class="title">delta</span> 166), <span class="title">reused</span> 262 (<span class="title">delta</span> 149)</span></span><br><span class="line"><span class="function"><span class="title">Receiving</span> <span class="title">objects</span>: 100% (310/310), 66.85 <span class="title">MiB</span> | 25.18 <span class="title">MiB</span>/<span class="title">s</span>, <span class="title">done</span>.</span></span><br><span class="line"><span class="function"><span class="title">Resolving</span> <span class="title">deltas</span>: 100% (166/166), <span class="title">completed</span> <span class="title">with</span> 10 <span class="title">local</span> <span class="title">objects</span>.</span></span><br><span class="line"><span class="function">$ <span class="title">git</span> <span class="title">fetch</span> --<span class="title">depth</span> 100</span></span><br><span class="line"><span class="function"><span class="title">remote</span>: <span class="title">Enumerating</span> <span class="title">objects</span>: 6031, <span class="title">done</span>.</span></span><br><span class="line"><span class="function"><span class="title">remote</span>: <span class="title">Counting</span> <span class="title">objects</span>: 100% (5332/5332), <span class="title">done</span>.</span></span><br><span class="line"><span class="function"><span class="title">remote</span>: <span class="title">Compressing</span> <span class="title">objects</span>: 100% (4312/4312), <span class="title">done</span>.</span></span><br><span class="line"><span class="function"><span class="title">remote</span>: <span class="title">Total</span> 5107 (<span class="title">delta</span> 1739), <span class="title">reused</span> 2367 (<span class="title">delta</span> 531)</span></span><br><span class="line"><span class="function"><span class="title">Receiving</span> <span class="title">objects</span>: 100% (5107/5107), 208.07 <span class="title">MiB</span> | 14.61 <span class="title">MiB</span>/<span class="title">s</span>, <span class="title">done</span>.</span></span><br><span class="line"><span class="function"><span class="title">Resolving</span> <span class="title">deltas</span>: 100% (1739/1739), <span class="title">completed</span> <span class="title">with</span> 120 <span class="title">local</span> <span class="title">objects</span>.</span></span><br><span class="line"><span class="function">$ <span class="title">git</span> <span class="title">fetch</span></span></span><br><span class="line"><span class="function">$ <span class="title">git</span> <span class="title">pull</span> <span class="title">origin</span> <span class="title">master</span></span></span><br></pre></td></tr></table></figure><p>cloneの場合も同様。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone --depth <span class="number">1</span> http://example.com/fuga.git</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> バージョン管理システム </category>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その165 gitで全ブランチをpullする</title>
      <link href="2019/01/15/3952/"/>
      <url>2019/01/15/3952/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>備忘録。<br><strong>Ubuntu</strong>、<strong>Git for Windows</strong>で使えました。</p><h1 id="How-to"><a href="#How-to" class="headerlink" title="How to"></a>How to</h1><p>下記の方が教えてくれました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://rock-and-hack.blogspot.com/2012/11/git-pull.html" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=rock-and-hack.blogspot.com"></img><div class="hbc-site-name">rock-and-hack.blogspot.com</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">git : 全てのブランチをpullするワンライナー</div><div class="hbc-url">http://rock-and-hack.blogspot.com/2012/11/git-pull.html</div><div class="hbc-description">すごく久々の投稿。   とりあえずコマンドを先に。   for branch in `git branch -r | grep -v HEAD | awk -F&#39;/&#39; &#39;{print $2}&#39;`; do git checkout $branch; git pull; done ※…</div></div></div></div></a></div></div><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> branch <span class="keyword">in</span> \`git branch -r | grep -v HEAD | awk -F<span class="string">&#x27;/&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>\`; <span class="keyword">do</span> git checkout <span class="variable">$branch</span>; git pull; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>Googleで<strong>git 全ブランチ</strong>で検索してトップに出てくるページのスクリプトは使えませんでした。</p>]]></content>
      
      
      <categories>
          
          <category> バージョン管理システム </category>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その164 Ubuntu 18.04にCUDA 9.2をインストール</title>
      <link href="2019/01/03/3946/"/>
      <url>2019/01/03/3946/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>CUDA</strong>のダウンロードページでCUDA 9.2にアクセスすると </p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://developer.nvidia.com/cuda-92-download-archive" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=developer.nvidia.com"></img><div class="hbc-site-name">NVIDIA Developer</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">CUDA Toolkit 9.2 Download</div><div class="hbc-url">https://developer.nvidia.com/cuda-92-download-archive</div><div class="hbc-description">Select Target Platform Click on the green buttons that describe your target platform. Only supported platforms will be shown. Operating Syst…</div></div></div></div></a></div></div><p><a href="../../../../public/2019/01/1.png"><img src="../../../../public/2019/01/1.png"></a><br> <strong>Ubuntu 18.04</strong>に対応していないように見える。<br>そこはかとない不安を感じながら9.2をインストールしたのでメモ。</p><h1 id="How-to"><a href="#How-to" class="headerlink" title="How to"></a>How to</h1><p><strong>17.10</strong> を選択し、<strong>runfile [local]</strong> を選択しダウンロードするだけです。<br>パッチもあるので忘れないこと。</p><h2 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh cuda_9.2.148_396.37_linux</span><br></pre></td></tr></table></figure><p>でインストールを開始する。<br>最初にEULAの承諾を求められるので末尾に移動する。<br><strong>Ctrl+F</strong>で一気に末尾に。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Do you accept the previously <span class="built_in">read</span> EULA?</span><br><span class="line">accept/decline/quit:accept</span><br></pre></td></tr></table></figure><p>EULAの承諾に対しては<strong>accept</strong>と押下してENTER。<br>以降は、質問に答えていく形で、<strong>y</strong>または<strong>n</strong>と<strong>Enter</strong>を駆使します。<br>途中でドライバーのインストールを聞かれますが、既に入っているなら無理してインストールする必要はないです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">You are attempting to install on an unsupported configuration. Do you wish to <span class="built_in">continue</span>?</span><br><span class="line">(y)es/(n)o [ default is no ]: y</span><br><span class="line"></span><br><span class="line">Install NVIDIA Accelerated Graphics Driver <span class="keyword">for</span> Linux-x86_64 396.37?</span><br><span class="line">(y)es/(n)o/(q)uit: n</span><br><span class="line"></span><br><span class="line">Install the CUDA 9.2 Toolkit?</span><br><span class="line">(y)es/(n)o/(q)uit: y</span><br><span class="line"></span><br><span class="line">Enter Toolkit Location</span><br><span class="line"> [ default is /usr/<span class="built_in">local</span>/cuda-9.2 ]:</span><br><span class="line"></span><br><span class="line">Do you want to install a symbolic link at /usr/<span class="built_in">local</span>/cuda?</span><br><span class="line">(y)es/(n)o/(q)uit: y</span><br><span class="line"></span><br><span class="line">Install the CUDA 9.2 Samples?</span><br><span class="line">(y)es/(n)o/(q)uit: y</span><br><span class="line"></span><br><span class="line">Enter CUDA Samples Location</span><br><span class="line"> [ default is /home/takuya ]:</span><br><span class="line"></span><br><span class="line">Installing the CUDA Toolkit <span class="keyword">in</span> /usr/<span class="built_in">local</span>/cuda-9.2 ...</span><br><span class="line">Installing the CUDA Samples <span class="keyword">in</span> /home/takuya ...</span><br><span class="line">Copying samples to /home/takuya/NVIDIA_CUDA-9.2_Samples now...</span><br><span class="line">Finished copying samples.</span><br><span class="line"></span><br><span class="line">===========</span><br><span class="line">= Summary =</span><br><span class="line">===========</span><br><span class="line"></span><br><span class="line">Driver:   Not Selected</span><br><span class="line">Toolkit:  Installed <span class="keyword">in</span> /usr/<span class="built_in">local</span>/cuda-9.2</span><br><span class="line">Samples:  Installed <span class="keyword">in</span> /home/takuya</span><br><span class="line"></span><br><span class="line">Please make sure that</span><br><span class="line"> -   PATH includes /usr/<span class="built_in">local</span>/cuda-9.2/bin</span><br><span class="line"> -   LD_LIBRARY_PATH includes /usr/<span class="built_in">local</span>/cuda-9.2/lib64, or, add /usr/<span class="built_in">local</span>/cuda-9.2/lib64 to /etc/ld.so.conf and run ldconfig as root</span><br><span class="line"></span><br><span class="line">To uninstall the CUDA Toolkit, run the uninstall script <span class="keyword">in</span> /usr/<span class="built_in">local</span>/cuda-9.2/bin</span><br><span class="line"></span><br><span class="line">Please see CUDA_Installation_Guide_Linux.pdf <span class="keyword">in</span> /usr/<span class="built_in">local</span>/cuda-9.2/doc/pdf <span class="keyword">for</span> detailed information on setting up CUDA.</span><br><span class="line"></span><br><span class="line">***WARNING: Incomplete installation! This installation did not install the CUDA Driver. A driver of version at least 384.00 is required <span class="keyword">for</span> CUDA 9.2 functionality to work.</span><br><span class="line">To install the driver using this installer, run the following <span class="built_in">command</span>, replacing  with the name of this run file:</span><br><span class="line">    sudo .run -silent -driver</span><br><span class="line"></span><br><span class="line">Logfile is /tmp/cuda_install_2992.log</span><br></pre></td></tr></table></figure><h2 id="パッチのインストール"><a href="#パッチのインストール" class="headerlink" title="パッチのインストール"></a>パッチのインストール</h2><p>こちらもEULAの承諾が必要です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh cuda_9.2.148.1_linux</span><br></pre></td></tr></table></figure><p>承諾方法は同様。<br>聞かれるのはインストール先のみ。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Enter CUDA Toolkit installation directory</span><br><span class="line"> [ default is /usr/<span class="built_in">local</span>/cuda-9.2 ]:</span><br><span class="line"></span><br><span class="line">Installation complete!</span><br><span class="line">Installation directory: /usr/<span class="built_in">local</span>/cuda-9.2</span><br></pre></td></tr></table></figure><p>簡単ですね。<br><strong>apt</strong>を使うインストールよりも、こちらのが簡単な気がしないでもないです。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> gpupu </category>
          
          <category> Ubuntu </category>
          
          <category> CUDA </category>
          
          <category> GPUPU </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その163 Ubuntu 18.04 with CUDA 9.2でcaffeをビルドする</title>
      <link href="2019/01/03/3942/"/>
      <url>2019/01/03/3942/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>Ubuntu 18.04</strong>でパッケージマネージャーからインストールできる<strong>gcc</strong>のバージョンが7になっている。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ gcc --version</span><br><span class="line">gcc (Ubuntu 7.3.0-27ubuntu1~18.04) 7.3.0</span><br><span class="line">Copyright (C) 2017 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the <span class="built_in">source</span> <span class="keyword">for</span> copying conditions.  There is NO</span><br><span class="line">warranty; not even <span class="keyword">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br></pre></td></tr></table></figure><p><strong>CUDA 9</strong>が6以降のgccでのビルドをサポートしていないため、caffeをビルドしようとするとエラーが起きてします。<br>が、<strong>openpose</strong>でビルドするときはこのエラーが起きないんですよね… ちなみにこんなエラー。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ cmake --build . --config Release</span><br><span class="line">[  1%] Running C++/Python protocol buffer compiler on /media/hdd/work/<span class="built_in">local</span>/caffe/src/caffe/proto/caffe.proto</span><br><span class="line">Scanning dependencies of target caffeproto</span><br><span class="line">[  1%] Building CXX object src/caffe/CMakeFiles/caffeproto.dir/__/__/include/caffe/proto/caffe.pb.cc.o</span><br><span class="line">[  1%] Linking CXX static library ../../lib/libcaffeproto.a</span><br><span class="line">[  1%] Built target caffeproto</span><br><span class="line">[  1%] Building NVCC (Device) object src/caffe/CMakeFiles/cuda_compile_1.dir/util/cuda_compile_1_generated_math_functions.cu.o</span><br><span class="line">In file included from /usr/include/host_config.h:50:0,</span><br><span class="line">                 from /usr/include/cuda_runtime.h:78,</span><br><span class="line">                 from :0:</span><br><span class="line">/usr/include/crt/host_config.h:121:2: error: <span class="comment">#error -- unsupported GNU version! gcc versions later than 6 are not supported!</span></span><br><span class="line"> <span class="comment">#error -- unsupported GNU version! gcc versions later than 6 are not supported!</span></span><br><span class="line">  ^~~~~</span><br><span class="line">CMake Error at cuda_compile_1_generated_math_functions.cu.o.Release.cmake:219 (message):</span><br><span class="line">  Error generating</span><br><span class="line">  /media/hdd/work/<span class="built_in">local</span>/caffe/build/src/caffe/CMakeFiles/cuda_compile_1.dir/util/./cuda_compile_1_generated_math_functions.cu.o</span><br><span class="line"></span><br><span class="line">src/caffe/CMakeFiles/caffe.dir/build.make:497: recipe <span class="keyword">for</span> target <span class="string">&#x27;src/caffe/CMakeFiles/cuda_compile_1.dir/util/cuda_compile_1_generated_math_functions.cu.o&#x27;</span> failed</span><br><span class="line">make[2]: *** [src/caffe/CMakeFiles/cuda_compile_1.dir/util/cuda_compile_1_generated_math_functions.cu.o] Error 1</span><br><span class="line">CMakeFiles/Makefile2:235: recipe <span class="keyword">for</span> target <span class="string">&#x27;src/caffe/CMakeFiles/caffe.dir/all&#x27;</span> failed</span><br><span class="line">make[1]: *** [src/caffe/CMakeFiles/caffe.dir/all] Error 2</span><br><span class="line">Makefile:129: recipe <span class="keyword">for</span> target <span class="string">&#x27;all&#x27;</span> failed</span><br><span class="line">make: *** [all] Error 2</span><br></pre></td></tr></table></figure><p>とにかくこの対処方法。</p><h1 id="How-to"><a href="#How-to" class="headerlink" title="How to"></a>How to</h1><p>対処として、古いgccをインストールしてそっちに切り替える方法もありますが、面倒なのでこれはパス。<br>なので、CUDA側のgccバージョンチェックを無効化する方法を採用します。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi /usr/include/crt/host\_config.h</span><br></pre></td></tr></table></figure><p>で設定ファイルを開き、下記チェック個所をコメントアウトします。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- #error -- unsupported GNU version! gcc versions later than 6 are not supported!</span></span><br><span class="line"><span class="addition">+ //#error -- unsupported GNU version! gcc versions later than 6 are not supported!</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> %e3%83%87%e3%82%a3%e3%83%bc%e3%83%97%e3%83%a9%e3%83%bc%e3%83%8b%e3%83%b3%e3%82%b0 </category>
          
          <category> Caffe </category>
          
          <category> gpupu </category>
          
          <category> ディープラーニング </category>
          
          <category> Ubuntu </category>
          
          <category> CUDA </category>
          
          <category> GPUPU </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その162 Ubuntu 18.04でVINOをコマンドラインから有効化する</title>
      <link href="2019/01/02/3938/"/>
      <url>2019/01/02/3938/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>備忘録。<br><strong>Ubuntu 16</strong>なら<strong>x11vnc</strong>一択なんですけど、<strong>Gnome</strong>に変わったため、18ではこれができない。</p><h1 id="How-to"><a href="#How-to" class="headerlink" title="How to"></a>How to</h1><p>18からはネットワークに対して<strong>Vino</strong>の設定をON/OFFする仕組みに変わった模様。<br>Vinoインストール後、ネットワークマネージャーで接続一覧を表示、取得し、<strong>dconf</strong>で設定を有効化します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install vino</span><br><span class="line">$ nmcli connection show</span><br><span class="line">NAME        UUID                                  TYPE      DEVICE</span><br><span class="line">有線接続 1  ba688a1f-889f-30a0-b947-ed395181dc52  ethernet  enp5s0</span><br><span class="line">$ dconf write /org/gnome/settings-daemon/plugins/sharing/vino-server/enabled-connections <span class="string">&quot;[&#x27;ba688a1f-889f-30a0-b947-ed395181dc52&#x27;]&quot;</span></span><br><span class="line">$ dconf <span class="built_in">read</span>  /org/gnome/settings-daemon/plugins/sharing/vino-server/enabled-connections</span><br><span class="line">[<span class="string">&#x27;ba688a1f-889f-30a0-b947-ed395181dc52&#x27;</span>]</span><br><span class="line">$ ss -lnt | grep 5900</span><br><span class="line">LISTEN   0         5                   0.0.0.0:5900             0.0.0.0:*</span><br><span class="line">LISTEN   0         5                      [::]:5900                [::]:*</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> %e3%83%aa%e3%83%a2%e3%83%bc%e3%83%88%e3%83%87%e3%82%b9%e3%82%af%e3%83%88%e3%83%83%e3%83%97 </category>
          
          <category> Ubuntu </category>
          
          <category> VNC </category>
          
          <category> リモートデスクトップ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その161 UbuntuでOpenPoseを動かす</title>
      <link href="2018/12/19/3933/"/>
      <url>2018/12/19/3933/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>かなりはまったのでメモ。</p><h1 id="How-to"><a href="#How-to" class="headerlink" title="How to"></a>How to</h1><p>ビルドするだけなら簡単なのだが、動かすとどうしても動かない。<br>例えば下記のようなエラーが出る。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ ./pose_1_extract_from_image.bin</span><br><span class="line">Starting OpenPose demo...</span><br><span class="line">F1219 20:52:30.150040 24594 upgrade_proto.cpp:97] Check failed: ReadProtoFromBinaryFile(param_file, param) Failed to parse NetParameter file: models/pose/body_25/pose_iter_584000.caffemodel</span><br><span class="line">*** Check failure stack trace: ***</span><br><span class="line">    @     0x7f91236e55cd  google::LogMessage::Fail()</span><br><span class="line">    @     0x7f91236e7433  google::LogMessage::SendToLog()</span><br><span class="line">    @     0x7f91236e515b  google::LogMessage::Flush()</span><br><span class="line">    @     0x7f91236e7e1e  google::LogMessageFatal::~LogMessageFatal()</span><br><span class="line">    @     0x7f91230ac311  caffe::ReadNetParamsFromBinaryFileOrDie()</span><br><span class="line">    @     0x7f912322351a  caffe::Net&lt;&gt;::CopyTrainedLayersFromBinaryProto()</span><br><span class="line">    @     0x7f912501ae17  op::NetCaffe::initializationOnThread()</span><br><span class="line">    @     0x7f912503b48e  op::addCaffeNetOnThread()</span><br><span class="line">    @     0x7f912503bf7a  op::PoseExtractorCaffe::netInitializationOnThread()</span><br><span class="line">    @     0x7f9125040b80  op::PoseExtractorNet::initializationOnThread()</span><br><span class="line">    @           0x404320  tutorialDeveloperPose1()</span><br><span class="line">    @           0x403613  main</span><br><span class="line">    @     0x7f9123f52830  __libc_start_main</span><br><span class="line">    @           0x403649  _start</span><br><span class="line">    @              (nil)  (unknown)</span><br><span class="line">Aborted (core dumped)</span><br></pre></td></tr></table></figure><p>この現象はissueとして登録されている。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/CMU-Perceptual-Computing-Lab/openpose/issues/787" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://repository-images.githubusercontent.com/89247811/4a021a80-cc07-11e9-9a7b-5f22f82f360b"></img></div><div class="hbc-text"><div class="hbc-title">example runtime error:message_lite.cc:123 Can&#39;t parse message of type &quot;caffe.NetParameter&quot; · Issue #787 · CMU-Perceptual-Computing-Lab/openpose</div><div class="hbc-url">https://github.com/CMU-Perceptual-Computing-Lab/openpose/issues/787</div><div class="hbc-description">Executed Command (if any) cd /path/to/openpose/build/examples/openpose/ ./openpose.bin --face --logging_level 0 OpenPose Output (if any) /pa…</div></div></div></div></a></div></div><p>ただし、一部のUbuntuで発生しているようで、作者の環境では再現できていない模様。<br>解決策は、</p><ul><li>OpenPoseに含まれているCaffeを使わずシステムに登録されているCaffeを使う</li><li>OpenPoseに含まれているCaffeのリビジョンを変更する</li></ul><p>となる。<br>後者の解決策は </p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/CMU-Perceptual-Computing-Lab/openpose/issues/787#issuecomment-415476837" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://repository-images.githubusercontent.com/89247811/4a021a80-cc07-11e9-9a7b-5f22f82f360b"></img></div><div class="hbc-text"><div class="hbc-title">example runtime error:message_lite.cc:123 Can&#39;t parse message of type &quot;caffe.NetParameter&quot; · Issue #787 · CMU-Perceptual-Computing-Lab/openpose</div><div class="hbc-url">https://github.com/CMU-Perceptual-Computing-Lab/openpose/issues/787#issuecomment-415476837</div><div class="hbc-description">Executed Command (if any) cd /path/to/openpose/build/examples/openpose/ ./openpose.bin --face --logging_level 0 OpenPose Output (if any) /pa…</div></div></div></div></a></div></div><p>で提示されていた。<br>まず</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi openpose/CMakeLists.txt</span><br></pre></td></tr></table></figure><p>でファイルを開く。次に、caffeのソースを取得する箇所を修正する。<br>具体的な行数はリビジョンによって変わるため、下記の行番号は参考であるが、下記の記述はソース中に2つあるため、探せば必ず見つかる。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">       # Build Process</span><br><span class="line">       set(CAFFE_CPU_ONLY OFF)</span><br><span class="line">       if ($&#123;GPU_MODE&#125; MATCHES &quot;CUDA&quot;)</span><br><span class="line"><span class="deletion">-        execute_process(COMMAND git checkout master WORKING_DIRECTORY $&#123;CMAKE_SOURCE_DIR&#125;/3rdparty/caffe)</span></span><br><span class="line"><span class="addition">+        execute_process(COMMAND git checkout f019d0dfe86f49d1140961f8c7dec22130c83154 WORKING_DIRECTORY $&#123;CMAKE_SOURCE_DIR&#125;/3rdparty/caffe)</span></span><br><span class="line">       elseif ($&#123;GPU_MODE&#125; MATCHES &quot;CPU_ONLY&quot;)</span><br><span class="line">         if (USE_MKL)</span><br><span class="line">           #execute_process(COMMAND git checkout intel WORKING_DIRECTORY $&#123;CMAKE_SOURCE_DIR&#125;/3rdparty/caffe)</span><br><span class="line">@@ -682,7 +682,7 @@ if (UNIX OR APPLE)</span><br><span class="line">             &quot;$&#123;CMAKE_BINARY_DIR&#125;/caffe/lib/libmkldnn.so&quot;</span><br><span class="line">             )</span><br><span class="line">         else (USE_MKL)</span><br><span class="line"><span class="deletion">-          execute_process(COMMAND git checkout master WORKING_DIRECTORY $&#123;CMAKE_SOURCE_DIR&#125;/3rdparty/caffe)</span></span><br><span class="line"><span class="addition">+          execute_process(COMMAND git checkout f019d0dfe86f49d1140961f8c7dec22130c83154 WORKING_DIRECTORY $&#123;CMAKE_SOURCE_DIR&#125;/3rdparty/caffe)</span></span><br><span class="line">         endif (USE_MKL)</span><br><span class="line">         set(CAFFE_CPU_ONLY ON)</span><br><span class="line">         set(USE_CUDNN OFF)</span><br></pre></td></tr></table></figure><p>この修正を完了後、</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install -y cmake libopencv-dev</span><br><span class="line">$ sudo apt install -y libgflags-dev libgoogle-glog-dev libprotobuf-dev protobuf-compiler libhdf5-serial-dev</span><br><span class="line">$ sudo apt install -y libatlas-base-dev</span><br><span class="line">$ sudo apt install -y --no-install-recommends libboost-all-dev</span><br><span class="line">$ mkdir build</span><br><span class="line">$ <span class="built_in">cd</span> build</span><br><span class="line">$ cmake ..</span><br><span class="line">$ cmake --build . --config Release</span><br></pre></td></tr></table></figure><p>でビルドが可能になる。</p><p>また、利用するCUDAは9.2未満にすること。<br>これは、caffeが<strong>libcublas_device.a</strong>を参照しているが、<strong>CUDA 9.2</strong>で削除されてためである。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://devtalk.nvidia.com/default/topic/1043972/jetson-agx-xavier/where-can-i-find-libcublas_device-so-or-libcublas_device-a-/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=devtalk.nvidia.com"></img><div class="hbc-site-name">NVIDIA Developer Forums</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://aws1.discourse-cdn.com/nvidia/original/2X/8/8f17cc8f1a724d6ecea8a197a267ec8a05ef1490.png"></img></div><div class="hbc-text"><div class="hbc-title">Where can I find libcublas_device.so or libcublas_device.a?</div><div class="hbc-url">https://devtalk.nvidia.com/default/topic/1043972/jetson-agx-xavier/where-can-i-find-libcublas_device-so-or-libcublas_device-a-/</div><div class="hbc-description">I am trying to compile a library which is looking for libcublas_device.so and/or libcublas_device.a.  Does this library exist for the Jetson…</div></div></div></div></a></div></div>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> 画像処理 </category>
          
          <category> gpupu </category>
          
          <category> Ubuntu </category>
          
          <category> CUDA </category>
          
          <category> GPUPU </category>
          
          <category> 姿勢推定 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その160 Ubuntu 18にCUDA 10とcuDNNをインストール</title>
      <link href="2018/12/18/3923/"/>
      <url>2018/12/18/3923/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Windowsみたいにインストーラがないのでメモ。ちなみにMacはインストーラがある。</p><h1 id="How-to"><a href="#How-to" class="headerlink" title="How to"></a>How to</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; wget https://developer.nvidia.com/compute/cuda/10.0/Prod/local_installers/cuda-repo-ubuntu1804-10-0-local-10.0.130-410.48_1.0-1_amd64</span><br><span class="line">&gt; sudo dpkg -i cuda-repo-ubuntu1804-10-0-local-10.0.130-410.48_1.0-1_amd64.deb</span><br><span class="line">(データベースを読み込んでいます ... 現在 218372 個のファイルとディレクトリがインストールされています。)</span><br><span class="line">cuda-repo-ubuntu1804-10-0-local-10.0.130-410.48_1.0-1_amd64.deb を展開する準備をしています ...</span><br><span class="line">cuda-repo-ubuntu1804-10-0-local-10.0.130-410.48 (1.0-1) を展開しています...</span><br><span class="line"></span><br><span class="line">cuda-repo-ubuntu1804-10-0-local-10.0.130-410.48 (1.0-1) を設定しています ...</span><br><span class="line"></span><br><span class="line">The public CUDA GPG key does not appear to be installed.</span><br><span class="line">To install the key, run this <span class="built_in">command</span>:</span><br><span class="line">sudo apt-key add /var/cuda-repo-10-0-local-10.0.130-410.48/7fa2af80.pub</span><br><span class="line">&gt; sudo apt-key add /var/cuda-repo-10-0-local-10.0.130-410.48/7fa2af80.pub</span><br><span class="line">OK</span><br><span class="line">&gt; sudo apt-get update</span><br><span class="line">&gt; sudo apt-get install cuda-10-0</span><br></pre></td></tr></table></figure><p>終わったら再起動が必須です。</p><p>続いてcuDNN。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo dpkg -i libcudnn7_7.4.1.5-1+cuda10.0_amd64.deb</span><br><span class="line">$ sudo dpkg -i libcudnn7-dev_7.4.1.5-1+cuda10.0_amd64.deb</span><br><span class="line">$ sudo dpkg -i libcudnn7-doc_7.4.1.5-1+cuda10.0_amd64.deb</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> gpupu </category>
          
          <category> Ubuntu </category>
          
          <category> CUDA </category>
          
          <category> GPUPU </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その159 ChainerCVでSSDのメモ</title>
      <link href="2018/11/22/3912/"/>
      <url>2018/11/22/3912/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>備忘録。基本中の基本だけど数学苦手で理論も苦手な自分用のメモ。<br>基本、<strong>train.py</strong>についての解説。</p><h1 id="What-is-problem"><a href="#What-is-problem" class="headerlink" title="What is problem?"></a>What is problem?</h1><h2 id="配列の次元の意味"><a href="#配列の次元の意味" class="headerlink" title="配列の次元の意味"></a>配列の次元の意味</h2><p><strong>ChainerCV</strong>におけるサンプルのSSDの実装は、<strong>MultiboxTrainChain</strong>クラスが中心。<br>で、ネットワークに画像(正確にはバッチ数分)を入力した際の出力について。</p><p>下記画像における、<strong>mb_locs</strong>、<strong>mb_confs</strong>。</p><p><a href="../../../../public/2018/11/1-6.png"><img src="../../../../public/2018/11/1-6.png"></a></p><ul><li>mb_locs<ul><li>multibox locations、つまり位置の損失</li><li>次元は、バッチ数、8732、4(x,y,w,h)</li></ul></li><li>mb_confs<ul><li>multibox confidences、つまり確信度の損失</li><li>次元は、バッチ数、8732、カテゴリ数+1</li></ul></li></ul><p>となる。<br>カテゴリ数にプラス1しているのは、どのカテゴリにも合致しない、というカテゴリを用意するため。<br>SSDのサンプルはVOC2007のため、カテゴリ数は20なので、21になる。<br>8732はデフォルトボックス、つまり画像全体を分割する矩形の個数。</p><p>なので、mb_confsの場合、カテゴリ毎に8732の矩形それぞれに損失が格納されていることを意味する。<br>(正確には、画像毎に対して、カテゴリ8732個が割り当てられ、その1つ1つにカテゴリ21個の損失が格納されている。) 損失はラベルに合致した場合は正、合致しない場合は負になる。</p><h2 id="可視化"><a href="#可視化" class="headerlink" title="可視化"></a>可視化</h2><p>学習や推論に使用される変数を可視化するといろいろわかる。</p><h3 id="データセット"><a href="#データセット" class="headerlink" title="データセット"></a>データセット</h3><p>学習を始める前に、利用される教師データがどのようなものかを可視化する。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> chainercv.visualizations <span class="keyword">import</span> vis_bbox</span><br><span class="line"></span><br><span class="line">vocTrain = VOCBboxDataset(year=<span class="string">&#x27;2007&#x27;</span>, split=<span class="string">&#x27;trainval&#x27;</span>)</span><br><span class="line">img, bbox, label = vocTrain[<span class="number">0</span>]</span><br><span class="line">vis_bbox(img, bbox, label)</span><br></pre></td></tr></table></figure><p><a href="../../../../public/2018/11/3-4.png"><img src="../../../../public/2018/11/3-4.png"></a></p><h3 id="imgs"><a href="#imgs" class="headerlink" title="imgs"></a>imgs</h3><p><strong>MultiboxTrainChain</strong>の**<strong>call**</strong>に渡ってくる引数を確認することでいろいろな情報が確認できる。<br><strong>imgs</strong>は</p><ol><li><strong>cupy.core.core.ndarray</strong>なので、<strong>Numpy.ndarray</strong>に変換</li><li>チャネル数、高さ、幅の順の次元を<strong>Numpy.transpose</strong>で、高さ、幅、チャネル数に変換</li><li>uint8に変換</li><li><strong>RGB</strong>形式として画像に変換し、ファイル出力</li></ol><p>という手順で可視化ができる。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">Image.fromarray(np.uint8(np.transpose(chainer.cuda.to_cpu(imgs[<span class="number">0</span>]), (<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>))),<span class="string">&quot;RGB&quot;</span>).save(<span class="string">&quot;test.png&quot;</span>)</span><br></pre></td></tr></table></figure><p>この段階で来る画像は、学習用に水増しされている画像に変換されているので注意。</p>]]></content>
      
      
      <categories>
          
          <category> %e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%e8%a8%80%e8%aa%9e </category>
          
          <category> Python </category>
          
          <category> %e3%83%87%e3%82%a3%e3%83%bc%e3%83%97%e3%83%a9%e3%83%bc%e3%83%8b%e3%83%b3%e3%82%b0 </category>
          
          <category> Chainer </category>
          
          <category> ディープラーニング </category>
          
          <category> 機械学習 </category>
          
          <category> ChainerCV </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その158 ChainerCVでSSDを動かす</title>
      <link href="2018/11/20/3887/"/>
      <url>2018/11/20/3887/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>ChainerCV</strong>で <strong>SSD (Single Shot Multibox Detector)</strong> を遊んでみます。</p><h1 id="How-to"><a href="#How-to" class="headerlink" title="How to?"></a>How to?</h1><p>CUDA、cuDNNのチェック、仮想環境作成、仮想環境のアクティベートまでの手順は下記です。</p><h2 id="パッケージのインストール"><a href="#パッケージのインストール" class="headerlink" title="パッケージのインストール"></a>パッケージのインストール</h2><p><strong>cupy</strong>、<strong>cupy-cuda</strong>、<strong>chainer</strong>のバージョンは一致させます。<br>cupy-cudaの末尾の数値は、先ほど確認したCUDAのバージョンに合わせます。<br>また、Chainerは4.5.0を使うため、ChainerCVは0.10.0になります。<br>(0.11.0はChainer 5.0.0になるため) また、下記の順番を守ってインストールします。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; python -m pip install --upgrade pip</span><br><span class="line">&gt; python -m pip install cupy==<span class="number">4</span>.<span class="number">5</span>.<span class="number">0</span></span><br><span class="line">&gt; python -m pip install cupy-cuda92==<span class="number">4</span>.<span class="number">5</span>.<span class="number">0</span></span><br><span class="line">&gt; python -m pip install chainer==<span class="number">4</span>.<span class="number">5</span>.<span class="number">0</span></span><br><span class="line">&gt; python -m pip install chainercv==<span class="number">0</span>.<span class="number">10</span>.<span class="number">0</span></span><br><span class="line">&gt; python -m pip install opencv-python</span><br></pre></td></tr></table></figure><h2 id="最終確認"><a href="#最終確認" class="headerlink" title="最終確認"></a>最終確認</h2><p>Chainer、ChainerCVがインストールされたこと、ChainerがCUDA、cuDNNを認識していることを確認します。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&gt; python -c &quot;import chainer; chainer.print_runtime_info()&quot;</span><br><span class="line"><span class="function">Platform: <span class="title">Windows</span>-10-10.0.17134-<span class="title">SP0</span></span></span><br><span class="line"><span class="function"><span class="title">Chainer</span>: 4.5.0</span></span><br><span class="line"><span class="function"><span class="title">NumPy</span>: 1.15.4</span></span><br><span class="line"><span class="function"><span class="title">CuPy</span>:</span></span><br><span class="line"><span class="function">  <span class="title">CuPy</span> <span class="title">Version</span>          : 4.5.0</span></span><br><span class="line"><span class="function">  <span class="title">CUDA</span> <span class="title">Root</span>             : <span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">NVIDIA</span> <span class="title">GPU</span> <span class="title">Computing</span> <span class="title">Toolkit</span>\<span class="title">CUDA</span>\<span class="title">v9</span>.2</span></span><br><span class="line"><span class="function">  <span class="title">CUDA</span> <span class="title">Build</span> <span class="title">Version</span>    : 9020</span></span><br><span class="line"><span class="function">  <span class="title">CUDA</span> <span class="title">Driver</span> <span class="title">Version</span>   : 9020</span></span><br><span class="line"><span class="function">  <span class="title">CUDA</span> <span class="title">Runtime</span> <span class="title">Version</span>  : 9020</span></span><br><span class="line"><span class="function">  <span class="title">cuDNN</span> <span class="title">Build</span> <span class="title">Version</span>   : 7104</span></span><br><span class="line"><span class="function">  <span class="title">cuDNN</span> <span class="title">Version</span>         : 7104</span></span><br><span class="line"><span class="function">  <span class="title">NCCL</span> <span class="title">Build</span> <span class="title">Version</span>    : <span class="title">None</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&gt; <span class="title">python</span> -<span class="title">m</span> <span class="title">pip</span> <span class="title">freeze</span></span></span><br><span class="line"><span class="function"><span class="title">chainer</span>==4.5.0</span></span><br><span class="line"><span class="function"><span class="title">chainercv</span>==0.10.0</span></span><br><span class="line"><span class="function"><span class="title">cupy</span>==4.5.0</span></span><br><span class="line"><span class="function"><span class="title">cupy</span>-<span class="title">cuda92</span>==4.5.0</span></span><br><span class="line"><span class="function"><span class="title">fastrlock</span>==0.4</span></span><br><span class="line"><span class="function"><span class="title">filelock</span>==3.0.10</span></span><br><span class="line"><span class="function"><span class="title">numpy</span>==1.15.4</span></span><br><span class="line"><span class="function"><span class="title">opencv</span>-<span class="title">python</span>==3.4.3.18</span></span><br><span class="line"><span class="function"><span class="title">Pillow</span>==5.3.0</span></span><br><span class="line"><span class="function"><span class="title">protobuf</span>==3.6.1</span></span><br><span class="line"><span class="function"><span class="title">six</span>==1.11.0</span></span><br></pre></td></tr></table></figure><h2 id="デモ-学習"><a href="#デモ-学習" class="headerlink" title="デモ (学習)"></a>デモ (学習)</h2><p>ChainerCVのリポジトリにサンプルが含まれているのでブランチを指定してクローンします。<br>クローンしたらサンプルを実行します。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; git clone -b v0.<span class="number">10</span>.<span class="number">0</span> https://www.github.com/chainer/chainercv</span><br><span class="line">&gt; <span class="built_in">cd</span> chainercv/examples/ssd</span><br><span class="line">&gt; python train.py --model ssd300 --batchsize <span class="number">32</span> --gpu <span class="number">0</span></span><br></pre></td></tr></table></figure><p>データセットは<strong>VOC2007</strong>のようです。<br><strong>GeForce GTX 1080</strong>を利用した場合、約30時間かかりました。また、バッチサイズを増やそうとしたらメモリが足りなくなりました。</p><p>下記は学習後の損失の推移グラフです。<br>上から、全体の損失、カテゴリの損失、位置の損失です。</p><p><a href="../../../../public/2018/11/chainercv_examles_ssd_demo_20181120221605.png"><img src="../../../../public/2018/11/chainercv_examles_ssd_demo_20181120221605.png"></a></p><h2 id="デモ-推論"><a href="#デモ-推論" class="headerlink" title="デモ (推論)"></a>デモ (推論)</h2><p>前項での学習した結果、モデルが<strong>result\model_iter_120000</strong>として保存されていますのでそれを活用します。<br>学習に使った<strong>VOC2007</strong>のカテゴリは下記のとおりです。</p><ul><li>Aeroplanes</li><li>Bicycles</li><li>Birds</li><li>Boats</li><li>Bottles</li><li>Buses</li><li>Cars</li><li>Cats</li><li>Chairs</li><li>Cows</li><li>Dining tables</li><li>Dogs</li><li>Horses</li><li>Motorbikes</li><li>People</li><li>Potted plants</li><li>Sheep</li><li>Sofas</li><li>Trains</li><li>TV/Monitors</li></ul><p>試しにWikipediaにある羊の画像(<a href="https://upload.wikimedia.org/wikipedia/commons/thumb/c/c4/Lleyn_sheep.jpg/800px-Lleyn_sheep.jpg">Lleyn sheep.jpg</a>)を認識させてみます。<br>なお、推論のデモには追加でモジュールが必要であるためインストールします。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; pip install matplotlib</span><br></pre></td></tr></table></figure><p>実行は下記のように行います。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; python demo.py --gpu <span class="number">0</span> --pretrained-model result\model_iter_120000 <span class="number">800</span>px-Lleyn_sheep.jpg</span><br></pre></td></tr></table></figure><p><a href="../../../../public/2018/11/1-5.png"><img src="../../../../public/2018/11/1-5.png"></a><br> 良い感じです。</p>]]></content>
      
      
      <categories>
          
          <category> %e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%e8%a8%80%e8%aa%9e </category>
          
          <category> Python </category>
          
          <category> %e3%83%87%e3%82%a3%e3%83%bc%e3%83%97%e3%83%a9%e3%83%bc%e3%83%8b%e3%83%b3%e3%82%b0 </category>
          
          <category> Chainer </category>
          
          <category> ディープラーニング </category>
          
          <category> 機械学習 </category>
          
          <category> ChainerCV </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その157 Gitlab on Docker in Synology NASのLet&#39;s Encryptを更新する</title>
      <link href="2018/11/19/3879/"/>
      <url>2018/11/19/3879/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>一応シェルを作っているので、コマンド一発でできる状態ですが、メモとして残す。</p><h1 id="How-to"><a href="#How-to" class="headerlink" title="How to?"></a>How to?</h1><p>元々、自宅NAS上のGitLab on DockerへのSSL証明書の適用は下記のサイトを参考にして行っていました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://steemit.com/security/@the-tech-guy/let-s-encrypt-ssl-certificate-for-gitlab-with-docker-on-synology" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=steemit.com"></img><div class="hbc-site-name">Steemit</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://forum.gitlab.com/uploads/default/original/1X/277d9badcbd723e913b3a41e64e8d2f3d2c80598.png"></img></div><div class="hbc-text"><div class="hbc-title">Let&#39;s Encrypt SSL certificate for GitLab with Docker on Synology — Steemit</div><div class="hbc-url">https://steemit.com/security/@the-tech-guy/let-s-encrypt-ssl-certificate-for-gitlab-with-docker-on-synology</div><div class="hbc-description">source    If you use DSM 6.1 on a Synology NAS, then requesting an SSL certificate from Let&#39;s Encrypt is very easy.… by the-tech-guy</div></div></div></div></a></div></div><p>なので、既にGitLabはhttpsを通じて公開されています。</p><p>そして本題。<br>下記が更新に使用するシェルスクリプトです。<br><strong>update_gitlab_cert.sh</strong>として保存します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /volume1/docker/gitlab/gitlab/certs</span><br><span class="line"><span class="comment"># List up files in certs</span></span><br><span class="line">ls -la</span><br><span class="line"><span class="comment"># Confirm expiration date</span></span><br><span class="line">sudo openssl x509 -noout -dates -<span class="keyword">in</span>  /usr/syno/etc/certificate/system/default/cert.pem</span><br><span class="line"><span class="comment"># Copy latest cert files to current directory</span></span><br><span class="line">sudo cp /usr/syno/etc/certificate/system/default/cert.pem ./gitlab.crt</span><br><span class="line">sudo cp /usr/syno/etc/certificate/system/default/privkey.pem ./gitlab.key</span><br><span class="line"><span class="comment"># Update</span></span><br><span class="line">openssl dhparam -out dhparam.pem 4096</span><br></pre></td></tr></table></figure><p>実行前にGitLabを停止します。<br>下記が実行結果です。非常に時間がかかります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ./update_gitlab_cert.sh</span><br><span class="line">total 12</span><br><span class="line">drwxr-xr-x 1 root root   62 May 27 10:16 .</span><br><span class="line">drwxr-xr-x 1 1000 1000  106 May 26 23:54 ..</span><br><span class="line">-rwxr-xr-x 1 root root  769 Aug 26 02:06 dhparam.pem</span><br><span class="line">-rwxr-xr-x 1 root root 2171 Nov 19 00:23 gitlab.crt</span><br><span class="line">-rwxr-xr-x 1 root root 1675 Nov 19 00:23 gitlab.key</span><br><span class="line">notBefore=Oct  6 04:12:36 2018 GMT</span><br><span class="line">notAfter=Jan  4 04:12:36 2019 GMT</span><br><span class="line">Generating DH parameters, 4096 bit long safe prime, generator 2</span><br><span class="line">This is going to take a long time</span><br></pre></td></tr></table></figure><p>終わったらGitLabを再起動します。<br>ただ、最後の<strong>openssl</strong>コマンドは一度実行したら実行する必要はないかもしれません。</p>]]></content>
      
      
      <categories>
          
          <category> NAS </category>
          
          <category> Synology </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その156 Visual Studio CodeでPythonのデバッグ</title>
      <link href="2018/11/18/3891/"/>
      <url>2018/11/18/3891/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>以前、Visual Studio CodeでPython仮想環境を指定しました。</p><p>その続きで、デバッグを行います。</p><h1 id="How-to"><a href="#How-to" class="headerlink" title="How to?"></a>How to?</h1><p>まずデバッグしたいPythonのソースを開きます。<br>次に、画面左のデバッグアイコンをクリックし、歯車アイコンの左にあるコンボボックスを展開します。<br>そして<strong>構成の追加</strong>をクリックします。</p><p><a href="../../../../public/2018/11/1-4.png"><img src="../../../../public/2018/11/1-4.png"></a></p><p>続いて、仮想環境を選択します。<br>すると、画面右下で<strong>pylint</strong>のインストールを促されますので、<strong>Install</strong>を選択します。<br>拡張機能とありますが、これは仮想環境にインストールされるパッケージになります。</p><p><a href="../../../../public/2018/11/2-3.png"><img src="../../../../public/2018/11/2-3.png"></a></p><p>準備ができましたので、ブレークポイントを設定し、デバッグ開始アイコンをクリックすることで任意の個所で停止できるようになります。</p><p><a href="../../../../public/2018/11/3-3.png"><img src="../../../../public/2018/11/3-3-1024x286.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> %e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%e8%a8%80%e8%aa%9e </category>
          
          <category> Python </category>
          
          <category> Visual Studio Code </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その155 Visual Studio CodeでPython仮想環境を指定する</title>
      <link href="2018/11/17/3872/"/>
      <url>2018/11/17/3872/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>備忘録。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><h2 id="拡張機能のインストール"><a href="#拡張機能のインストール" class="headerlink" title="拡張機能のインストール"></a>拡張機能のインストール</h2><p><strong>Microsoft</strong>の<strong>Python</strong>をインストールします。<br>インストール後はVisual Studio Codeを再起動します。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://marketplace.visualstudio.com/items?itemName=ms-python.python" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=marketplace.visualstudio.com"></img><div class="hbc-site-name">marketplace.visualstudio.com</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://ms-python.gallerycdn.vsassets.io/extensions/ms-python/python/2020.11.371526539/1605818180684/Microsoft.VisualStudio.Services.Icons.Default"></img></div><div class="hbc-text"><div class="hbc-title">Python - Visual Studio Marketplace</div><div class="hbc-url">https://marketplace.visualstudio.com/items?itemName=ms-python.python</div><div class="hbc-description">Extension for Visual Studio Code - Linting, Debugging (multi-threaded, remote), Intellisense, Jupyter Notebooks, code formatting, refactorin…</div></div></div></div></a></div></div><h2 id="ユーザ設定の変更"><a href="#ユーザ設定の変更" class="headerlink" title="ユーザ設定の変更"></a>ユーザ設定の変更</h2><p>ここは人の好みによりますが、自分のように特定のディレクトリに仮想環境を集めている場合について説明。<br>まず、画面左下の歯車アイコンから<strong>設定</strong>を選択。</p><p><a href="../../../../public/2018/11/1-3.png"><img src="../../../../public/2018/11/1-3.png"></a></p><p>次に、<strong>Settings</strong>が表示されるので、検索バーに<strong>venvPath</strong>と入力し、仮想環境を集めているディレクトリを指定します。<br>この際、パス区切り文字列はバックスラッシュのままでかまいません。</p><p><a href="../../../../public/2018/11/2-2.png"><img src="../../../../public/2018/11/2-2-300x115.png"></a></p><p>設定後はVisual Studio Codeを再起動します。</p><h2 id="仮想環境を選択"><a href="#仮想環境を選択" class="headerlink" title="仮想環境を選択"></a>仮想環境を選択</h2><p>Visual Studio Codeが起動したら、<strong>Ctrl+Shift+P</strong>でコマンドパレットを表示させ、<strong>Python</strong>と入力し、その中から<strong>Python: インタープリターを選択</strong>を選択します。</p><p><a href="../../../../public/2018/11/3-2.png"><img src="../../../../public/2018/11/3-2-300x187.png"></a></p><p>少しすると、システムにインストールしてある、Pythonと仮想環境に加え、先ほど指定したフォルダの配下にある仮想環境が一覧に表示されます。</p><p><a href="../../../../public/2018/11/4-2.png"><img src="../../../../public/2018/11/4-2-300x127.png"></a></p><p>Visual Studio Codeを起動したばかりの時だと、仮想環境の一覧が表示されないことがあります。<br>その時は、コマンドパレットからもう一度選択すれば表示されます。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> %e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%e8%a8%80%e8%aa%9e </category>
          
          <category> Python </category>
          
          <category> Visual Studio Code </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その154 Chainer with CUDA for Windowsを使う</title>
      <link href="2018/11/17/3865/"/>
      <url>2018/11/17/3865/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>以前、CUDAを含むChainerのインストール手法を書きましたが、もう少しわかりやすく整理しました。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><h2 id="CUDA-PATHの確認"><a href="#CUDA-PATHの確認" class="headerlink" title="CUDA_PATHの確認"></a>CUDA_PATHの確認</h2><p>Chainerで利用するCUDAを確認します。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">set</span> CUDA_PATH</span><br><span class="line">CUDA_PATH=C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.<span class="number">2</span></span><br><span class="line">CUDA_PATH_V9_0=C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.<span class="number">0</span></span><br><span class="line">CUDA_PATH_V9_1=C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.<span class="number">1</span></span><br><span class="line">CUDA_PATH_V9_2=C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.<span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="cuDNNの確認"><a href="#cuDNNの確認" class="headerlink" title="cuDNNの確認"></a>cuDNNの確認</h2><p>cuDNNが適切に展開されていることを確認します。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">dir</span> /B /D &quot;<span class="variable">%CUDA_PATH%</span>\bin\cudnn64_7.dll&quot;</span><br><span class="line">cudnn64_7.dll</span><br><span class="line"></span><br><span class="line">&gt; <span class="built_in">dir</span> /B &quot;<span class="variable">%CUDA_PATH%</span>\include\cudnn.h&quot;</span><br><span class="line">cudnn.h</span><br><span class="line"></span><br><span class="line">&gt; <span class="built_in">dir</span> /B &quot;<span class="variable">%CUDA_PATH%</span>\include\cudnn.h&quot;</span><br><span class="line">cudnn.h</span><br></pre></td></tr></table></figure><h2 id="仮想環境の作成"><a href="#仮想環境の作成" class="headerlink" title="仮想環境の作成"></a>仮想環境の作成</h2><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">cd</span> &lt;仮想環境の管理ディレクトリ&gt;</span><br><span class="line">&gt; python -m venv &lt;仮想環境名&gt;</span><br><span class="line">&gt; <span class="built_in">cd</span> &lt;仮想環境名&gt;</span><br></pre></td></tr></table></figure><h2 id="仮想環境のアクティベート"><a href="#仮想環境のアクティベート" class="headerlink" title="仮想環境のアクティベート"></a>仮想環境のアクティベート</h2><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">cd</span> &lt;仮想環境名&gt;</span><br><span class="line">&gt; Scripts\activate.bat</span><br></pre></td></tr></table></figure><h2 id="パッケージのインストール"><a href="#パッケージのインストール" class="headerlink" title="パッケージのインストール"></a>パッケージのインストール</h2><p><strong>cupy</strong>、<strong>cupy-cuda</strong>、<strong>chainer</strong>のバージョンは一致させます。<br>cupy-cudaの末尾の数値は、先ほど確認したCUDAのバージョンに合わせます。</p><p>また、下記の順番を守ってインストールします。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; python -m pip install --upgrade pip</span><br><span class="line">&gt; python -m pip install cupy==<span class="number">4</span>.<span class="number">5</span>.<span class="number">0</span></span><br><span class="line">&gt; python -m pip install cupy-cuda92==<span class="number">4</span>.<span class="number">5</span>.<span class="number">0</span></span><br><span class="line">&gt; python -m pip install chainer==<span class="number">4</span>.<span class="number">5</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="最終確認"><a href="#最終確認" class="headerlink" title="最終確認"></a>最終確認</h2><p>Chainerがインストールされたこと、ChainerがCUDA、cuDNNを認識していることを確認します。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; python -c &quot;import chainer; chainer.print_runtime_info()&quot;</span><br><span class="line"><span class="function">Platform: <span class="title">Windows</span>-10-10.0.17134-<span class="title">SP0</span></span></span><br><span class="line"><span class="function"><span class="title">Chainer</span>: 4.5.0</span></span><br><span class="line"><span class="function"><span class="title">NumPy</span>: 1.15.4</span></span><br><span class="line"><span class="function"><span class="title">CuPy</span>:</span></span><br><span class="line"><span class="function">  <span class="title">CuPy</span> <span class="title">Version</span>          : 4.5.0</span></span><br><span class="line"><span class="function">  <span class="title">CUDA</span> <span class="title">Root</span>             : <span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">NVIDIA</span> <span class="title">GPU</span> <span class="title">Computing</span> <span class="title">Toolkit</span>\<span class="title">CUDA</span>\<span class="title">v9</span>.2</span></span><br><span class="line"><span class="function">  <span class="title">CUDA</span> <span class="title">Build</span> <span class="title">Version</span>    : 9020</span></span><br><span class="line"><span class="function">  <span class="title">CUDA</span> <span class="title">Driver</span> <span class="title">Version</span>   : 9020</span></span><br><span class="line"><span class="function">  <span class="title">CUDA</span> <span class="title">Runtime</span> <span class="title">Version</span>  : 9020</span></span><br><span class="line"><span class="function">  <span class="title">cuDNN</span> <span class="title">Build</span> <span class="title">Version</span>   : 7104</span></span><br><span class="line"><span class="function">  <span class="title">cuDNN</span> <span class="title">Version</span>         : 7104</span></span><br><span class="line"><span class="function">  <span class="title">NCCL</span> <span class="title">Build</span> <span class="title">Version</span>    : <span class="title">None</span> </span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> %e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%e8%a8%80%e8%aa%9e </category>
          
          <category> Python </category>
          
          <category> %e3%83%87%e3%82%a3%e3%83%bc%e3%83%97%e3%83%a9%e3%83%bc%e3%83%8b%e3%83%b3%e3%82%b0 </category>
          
          <category> gpupu </category>
          
          <category> Chainer </category>
          
          <category> ディープラーニング </category>
          
          <category> CUDA </category>
          
          <category> GPUPU </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その153 Visual Studio CodeのMarkdown機能を強化 その3</title>
      <link href="2018/11/13/3860/"/>
      <url>2018/11/13/3860/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>前回の続き。</p><p>仕事で前回書いたことを適用して、まだ改善できるな、と思い調べてみました。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><h2 id="フォント変更-コードハイライトのブロック含む"><a href="#フォント変更-コードハイライトのブロック含む" class="headerlink" title="フォント変更 (コードハイライトのブロック含む)"></a>フォント変更 (コードハイライトのブロック含む)</h2><p>箇条書き、コードハイライト、シーケンス図のActor(mermaid)に対応させます。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">.markdown-preview.markdown-preview &#123;</span><br><span class="line">  // modify your style here</span><br><span class="line">  // eg: background-color: blue;</span><br><span class="line"></span><br><span class="line"><span class="deletion">-  h1, h2, h3, h4, h5, h6, p &#123;</span></span><br><span class="line"><span class="deletion">-    font-family: &#x27;ヒラギノ丸ゴ ProN W4&#x27;, &#x27;游ゴシック体&#x27;, &#x27;Yu Gothic&#x27;, &#x27;YuGothic&#x27;, &#x27;ヒラギノ角ゴシック Pro&#x27;, &#x27;Hiragino Kaku Gothic Pro&#x27;, &#x27;ＭＳ　Ｐゴシック&#x27;, &#x27;MS PGothic&#x27;, sans-serif;</span></span><br><span class="line"><span class="deletion">-  &#125;</span></span><br><span class="line"><span class="addition">+  h1,</span></span><br><span class="line"><span class="addition">+  h2,</span></span><br><span class="line"><span class="addition">+  h3,</span></span><br><span class="line"><span class="addition">+  h4,</span></span><br><span class="line"><span class="addition">+  h5,</span></span><br><span class="line"><span class="addition">+  h6,</span></span><br><span class="line"><span class="addition">+  p,</span></span><br><span class="line"><span class="addition">+  pre,</span></span><br><span class="line"><span class="addition">+  li,</span></span><br><span class="line"><span class="addition">+  text.messageText,</span></span><br><span class="line"><span class="addition">+  tspan &#123;</span></span><br><span class="line"><span class="addition">+    font-family: &#x27;ヒラギノ丸ゴ ProN W4&#x27;, &#x27;游ゴシック体&#x27;, &#x27;Yu Gothic&#x27;, &#x27;YuGothic&#x27;, &#x27;ヒラギノ角ゴシック Pro&#x27;, &#x27;Hiragino Kaku Gothic Pro&#x27;, &#x27;ＭＳ　Ｐゴシック&#x27;, &#x27;MS PGothic&#x27;, sans-serif;</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="コードハイライトのブロックを折り返す"><a href="#コードハイライトのブロックを折り返す" class="headerlink" title="コードハイライトのブロックを折り返す"></a>コードハイライトのブロックを折り返す</h2><p>CSSをカスタマイズします。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.markdown-preview.markdown-preview &#123;</span><br><span class="line">  // modify your style here</span><br><span class="line">  // eg: background-color: blue;</span><br><span class="line"><span class="addition">+  pre &#123;</span></span><br><span class="line"><span class="addition">+    overflow-x: auto;</span></span><br><span class="line"><span class="addition">+    white-space: pre-wrap;</span></span><br><span class="line"><span class="addition">+    word-wrap: break-word;</span></span><br><span class="line"><span class="addition">+    overflow-wrap: break-word;</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> Visual Studio Code </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その152 Visual Studio CodeのMarkdown機能を強化 その2</title>
      <link href="2018/11/13/3836/"/>
      <url>2018/11/13/3836/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>前回の続き。</p><p>どうも<strong>Markdown Preview Enhanced</strong>でもヘッダー、フッターの調節ができる模様。<br>よく考えたら、<strong>markdown-pdf</strong>と同じ<strong>puppeteer</strong>を使っているのだから当然と言えば当然なのかな?</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><h2 id="Puppeteerのインストール"><a href="#Puppeteerのインストール" class="headerlink" title="Puppeteerのインストール"></a>Puppeteerのインストール</h2><p>前回は省略したので。<br><strong>Chocolately</strong>が入っているとインストールが簡単です。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://chocolatey.org/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=chocolatey.org"></img><div class="hbc-site-name">Chocolatey</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://chocolatey.org/content/images/icon_slogan.png"></img></div><div class="hbc-text"><div class="hbc-title">Chocolatey - The package manager for Windows</div><div class="hbc-url">https://chocolatey.org/</div><div class="hbc-description">Chocolatey is software management automation for Windows that wraps installers, executables, zips, and scripts into compiled packages. Choco…</div></div></div></div></a></div></div><p>管理者でコンソールを起動します。</p><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="variable">$</span> choco install nodejs /y</span><br><span class="line">Chocolatey v0.<span class="number">10.10</span></span><br><span class="line">Installing the following packages:</span><br><span class="line">nodejs</span><br><span class="line">By installing you accept licenses <span class="keyword">for</span> the packages.</span><br><span class="line">Progress: Downloading nodejs <span class="number">10.13</span>.<span class="number">0</span>... <span class="number">100</span>%</span><br><span class="line"></span><br><span class="line">nodejs.install v10.<span class="number">13.0</span> [<span class="type">Approved</span>]</span><br><span class="line">nodejs.install package files install completed. Performing other installation steps.</span><br><span class="line">Installing <span class="number">64</span> bit version</span><br><span class="line">Installing nodejs.install...</span><br><span class="line">nodejs.install has been installed.</span><br><span class="line">  nodejs.install may be able to be automatically uninstalled.</span><br><span class="line">Environment Vars (like PATH) have changed. Close/reopen your shell to</span><br><span class="line"> see the changes (or <span class="keyword">in</span> powershell/cmd.exe just <span class="built_in">type</span> `refreshenv`).</span><br><span class="line"> The install of nodejs.install was successful.</span><br><span class="line">  Software installed as <span class="string">&#x27;msi&#x27;</span>, install location is likely default.</span><br><span class="line"></span><br><span class="line">nodejs v10.<span class="number">13.0</span> [<span class="type">Approved</span>]</span><br><span class="line">nodejs package files install completed. Performing other installation steps.</span><br><span class="line"> The install of nodejs was successful.</span><br><span class="line">  Software install location not explicitly <span class="built_in">set</span>, could be <span class="keyword">in</span> package or</span><br><span class="line">  default install location <span class="keyword">if</span> installer.</span><br><span class="line"></span><br><span class="line">Chocolatey installed <span class="number">2</span>/<span class="number">2</span> packages.</span><br><span class="line"> See the log <span class="keyword">for</span> details (C:\ProgramData\chocolatey\logs\chocolatey.log).</span><br></pre></td></tr></table></figure><p>続いて<strong>Node.js command prompt</strong>を起動します。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm install -g puppeteer</span><br><span class="line"></span><br><span class="line">&gt; puppeteer@<span class="number">1</span>.<span class="number">10</span>.<span class="number">0</span> install C:\Users\TAKUYA\AppData\Roaming\npm\node_modules\puppeteer</span><br><span class="line">&gt; node install.js</span><br><span class="line"></span><br><span class="line">Downloading Chromium r599821 - <span class="number">135</span>.<span class="number">9</span> Mb [====================] <span class="number">99</span>% <span class="number">0</span>.<span class="number">0</span>s</span><br><span class="line">Chromium downloaded to C:\Users\TAKUYA\AppData\Roaming\npm\node_modules\puppeteer\.local-chromium\win64-<span class="number">599821</span></span><br><span class="line">+ puppeteer@<span class="number">1</span>.<span class="number">10</span>.<span class="number">0</span></span><br><span class="line">added <span class="number">42</span> packages from <span class="number">22</span> contributors <span class="keyword">in</span> <span class="number">17</span>.<span class="number">873</span>s</span><br></pre></td></tr></table></figure><p><strong>-g</strong>オプション必須です。<br>起動中の<strong>Visual Studio Code</strong>は再起動します。でないとpuppeteerが反映されません。</p><h2 id="ヘッダー・フッターを付与する"><a href="#ヘッダー・フッターを付与する" class="headerlink" title="ヘッダー・フッターを付与する"></a>ヘッダー・フッターを付与する</h2><p>Markdownファイルの先頭に下記のような記述を追記。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">puppeteer:</span><br><span class="line">  displayHeaderFooter: true</span><br><span class="line">  headerTemplate: &quot;<span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span>This is header<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>&quot;</span><br><span class="line">  footerTemplate: &quot;<span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span>This is footer<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>ただし、デフォルトだと出力文字がすごく小さい。<br>この領域は、タグが使える。なので下記のようにフォントを使って調整可能。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">puppeteer:</span><br><span class="line">  displayHeaderFooter: true</span><br><span class="line">  headerTemplate: &quot;<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">\</span>&quot;<span class="attr">font-size:</span> <span class="attr">9px</span>; <span class="attr">margin-left:</span> <span class="attr">1cm</span>;\&quot;&gt;</span></span> <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span>This is header<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>&quot;</span><br><span class="line">  footerTemplate: &quot;<span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span>This is footer<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>ヘッダー・フッターにはテンプレートが使える。</p><table><thead><tr><th align="left">定義</th><th align="left">意味</th><th align="left">使用例</th></tr></thead><tbody><tr><td align="left">date</td><td align="left">日付</td><td align="left"><code>&lt;span class=&#39;date&#39;&gt;&lt;/span&gt;</code></td></tr><tr><td align="left">title</td><td align="left">ファイル名</td><td align="left"><code>&lt;span class=&#39;title&#39;&gt;&lt;/span&gt;</code></td></tr><tr><td align="left">url</td><td align="left">フルパスファイル名</td><td align="left"><code>&lt;span class=&#39;url&#39;&gt;&lt;/span&gt;</code></td></tr><tr><td align="left">pageNumber</td><td align="left">現在のページ番号</td><td align="left"><code>&lt;span class=&#39;pageNumber&#39;&gt;&lt;/span&gt;</code></td></tr><tr><td align="left">totalPages</td><td align="left">ドキュメントの総ページ数</td><td align="left"><code>&lt;span class=&#39;totalPages&#39;&gt;&lt;/span&gt;</code></td></tr></tbody></table><h2 id="背景を印刷する"><a href="#背景を印刷する" class="headerlink" title="背景を印刷する"></a>背景を印刷する</h2><p>前回言及したコードハイライトのブロックの背景が白くなる問題の解決。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">puppeteer:</span><br><span class="line">  printBackground : true</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="日本語が文字化け"><a href="#日本語が文字化け" class="headerlink" title="日本語が文字化け"></a>日本語が文字化け</h2><p>フォントの問題と思われる。</p><p><a href="../../../../public/2018/11/1-2.png"><img src="../../../../public/2018/11/1-2-300x277.png"></a><br> プレビュー</p><p><a href="../../../../public/2018/11/2-1.png"><img src="../../../../public/2018/11/2-1-236x300.png"></a><br> PDF出力</p><p>中国語フォントっぽいなぁ… ただ、puppeteerのバージョンの問題という情報が。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://uyamazak.hatenablog.com/entry/2018/11/09/131009" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=uyamazak.hatenablog.com"></img><div class="hbc-site-name">GAミント至上主義</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/u/uyamazak/20181109/20181109130551.png"></img></div><div class="hbc-text"><div class="hbc-title">【解決】puppeteerを1.10にするとPDFの日本語が文字化けする問題 - GAミント至上主義</div><div class="hbc-url">https://uyamazak.hatenablog.com/entry/2018/11/09/131009</div><div class="hbc-description">2018/11/13 追記 結論 Chromium 72.0.3606.0(Developer Build)を使ったところ直ったので、次のバージョン（1.11）では直るはず。 そのため1.10をスキップするだけで問題は解決しそう。追記ここまで yagish履歴書のHTML→PDF…</div></div></div></div></a></div></div><p>1.10.0が問題とのことなので1.9.0に戻してみる。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm install -g puppeteer@<span class="number">1</span>.<span class="number">9</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure><p>直りました。</p><p><a href="../../../../public/2018/11/3-1.png"><img src="../../../../public/2018/11/3-1-236x300.png"></a></p><h2 id="フォント変更"><a href="#フォント変更" class="headerlink" title="フォント変更"></a>フォント変更</h2><p>前回との同じくCSSをカスタマイズします。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.markdown-preview.markdown-preview &#123;</span><br><span class="line">  &#x2F;&#x2F; modify your style here</span><br><span class="line">  &#x2F;&#x2F; eg: background-color: blue;</span><br><span class="line"></span><br><span class="line">  h1, h2, h3, h4, h5, h6, p &#123;</span><br><span class="line">    font-family: &#39;ヒラギノ丸ゴ ProN W4&#39;, &#39;游ゴシック体&#39;, &#39;Yu Gothic&#39;, &#39;YuGothic&#39;, &#39;ヒラギノ角ゴシック Pro&#39;, &#39;Hiragino Kaku Gothic Pro&#39;, &#39;ＭＳ　Ｐゴシック&#39;, &#39;MS PGothic&#39;, sans-serif;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="../../../../public/2018/11/4-1.png"><img src="../../../../public/2018/11/4-1-236x300.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> Visual Studio Code </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その151 Visual Studio CodeのMarkdown機能を強化</title>
      <link href="2018/11/12/3825/"/>
      <url>2018/11/12/3825/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>仕事では<strong>Visual Studio Code</strong>を使ってMarkdownを書いています。拡張機能の<strong>markdown-pdf</strong>にはお世話になっております。</p><p>最近、<strong>mermaid</strong>というガントチャートやフローチャートをテキストで記述できるライブラリが気になっており、これがVisual Studio Codeで使えると聞いて興奮しています。<br>しかし、markdown-pdfがこれに対応していません。</p><p>では、これに対応しているpdf変換というと、<strong>Markdown Preview Enhanced</strong>という<strong>Atom</strong>でも有名な拡張になります。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://shd101wyy.github.io/markdown-preview-enhanced/#/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=shd101wyy.github.io"></img><div class="hbc-site-name">shd101wyy.github.io</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">Markdown Preview Enhanced</div><div class="hbc-url">https://shd101wyy.github.io/markdown-preview-enhanced/#/</div><div class="hbc-description">Description</div></div></div></div></a></div></div><p>しかし、これはこれで結構癖があります。<br>PDF出力に5種類の方法がありますが、これがまぁ微妙。</p><ul><li>Chrome (Puppetter)<ul><li>一番まとも。ただし、<strong>Nodejs</strong>のインストールが必要。結果はHTML化してChromeからPDF化したのと変わらない感じ。</li></ul></li><li>phantomjs<ul><li>開発が終了している。出力結果はそこそこ。</li></ul></li><li>prince<ul><li>商用利用不可。また結果は微妙。有償の価値はない。</li></ul></li><li>eBook<ul><li>ためしてない</li></ul></li><li>pandoc<ul><li>cssを指定しても微妙。mermaidの結果は解釈できていない。</li></ul></li></ul><p>あと、</p><ul><li><strong>Alt text</strong>の解釈がおかしい</li><li><strong>h1</strong>タグの直下に水平線が表示されない</li><li>コードハイライトの背景が白くなる<ul><li>これは印刷オプションで背景を印刷しない、にしていることが要因</li></ul></li><li>コードハイライトのブロックに境界線がない</li><li>表の形式が古くさい<ul><li>ただ、Githubも表の4隅の境界線がある。違いは1行おきに背景色が変化するところ。</li></ul></li></ul><p>が気になった問題。</p><p>良い点として、</p><ul><li>見出しのフォントが適度に太字</li><li>mermaidが使える</li><li>改行するのに末尾に空白が不要</li></ul><p>があります。</p><p>何はともあれ、気になった点を改善していきます。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><h2 id="Alt-text-の解釈"><a href="#Alt-text-の解釈" class="headerlink" title="Alt text の解釈"></a>Alt text の解釈</h2><p>諦める。使わなければ良い。仕事で使ったことはないからOK。</p><h2 id="h1に水平線が表示されない"><a href="#h1に水平線が表示されない" class="headerlink" title="h1に水平線が表示されない"></a>h1に水平線が表示されない</h2><p>これはMarkdown Preview Enahancedのcssを修正することで対応。<br><strong>Ctrl + Shift + P</strong>を押下し、<strong>Markdown Preview Enhanced: Customize Css</strong>を開きます。<br>そして下記のように修正を行います。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.markdown-preview.markdown-preview &#123;</span><br><span class="line">  // modify your style here</span><br><span class="line">  // eg: background-color: blue;</span><br><span class="line"></span><br><span class="line"><span class="addition">+  h1 &#123;</span></span><br><span class="line"><span class="addition">+   padding-bottom: 0.3em;</span></span><br><span class="line"><span class="addition">+   line-height: 1.2;</span></span><br><span class="line"><span class="addition">+   border-bottom-width: 1px;</span></span><br><span class="line"><span class="addition">+   border-bottom-style: solid;</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="コードハイライトの背景が白くなる"><a href="#コードハイライトの背景が白くなる" class="headerlink" title="コードハイライトの背景が白くなる"></a>コードハイライトの背景が白くなる</h2><p>前述の通り、印刷設定で背景が描画されないのが問題である。<br>対処として、PDFに出力するのではなく、htmlに出力し、ChromeでPDFに出力する際、背景を出力するようにすればOK</p><h2 id="コードハイライトのブロックに境界線がない"><a href="#コードハイライトのブロックに境界線がない" class="headerlink" title="コードハイライトのブロックに境界線がない"></a>コードハイライトのブロックに境界線がない</h2><p>これもMarkdown Preview Enahancedのcssを修正することで対応。<br><strong>Ctrl + Shift + P</strong>を押下し、<strong>Markdown Preview Enhanced: Customize Css</strong>を開きます。<br>そして下記のように修正を行います。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.markdown-preview.markdown-preview &#123;</span><br><span class="line">  // modify your style here</span><br><span class="line">  // eg: background-color: blue;</span><br><span class="line"></span><br><span class="line">  h1 &#123;</span><br><span class="line">    padding-bottom: 0.3em;</span><br><span class="line">    line-height: 1.2;</span><br><span class="line">    border-bottom-width: 1px;</span><br><span class="line">    border-bottom-style: solid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+    pre[class*=&quot;language-&quot;] &#123;</span></span><br><span class="line"><span class="addition">+     border: 1px solid #ddd;</span></span><br><span class="line"><span class="addition">+    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>片方だけを使うというのは駄目かな。しばらくは両方使っていきます。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> Visual Studio Code </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その150 ローカルNugetServer on Docker</title>
      <link href="2018/11/11/3818/"/>
      <url>2018/11/11/3818/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>自分でローカルに<strong>Nuget</strong>のサーバーを運用していたのは前からだったんだけど、dockerをきちんと使い始める前の「なんとなく」で使っていたため今いちわかっていなかった。<br>そのため、今一度最初から復習してみる。</p><p>何故自分でローカルのNugetサーバーを作るか、というのは</p><ol><li>本家Nugetに公開する前の確認</li><li>本家Nugetには公開できない社内製ライブラリ用</li></ol><p>だと思います。私は前者です。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p>dockerで簡単に動作するPHP製のNugetサーバーを使います。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/sunsided/docker-nuget" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars1.githubusercontent.com/u/495335?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">sunsided/docker-nuget</div><div class="hbc-url">https://github.com/sunsided/docker-nuget</div><div class="hbc-description">A simple NuGet feed using docker. Contribute to sunsided/docker-nuget development by creating an account on GitHub.</div></div></div></div></a></div></div><h2 id="コンテナ作成"><a href="#コンテナ作成" class="headerlink" title="コンテナ作成"></a>コンテナ作成</h2><script src="https://gist.github.com/takuya-takeuchi/c57ab7b608834dad13afa78ee33c48a9.js"></script><h3 id="例"><a href="#例" class="headerlink" title="例"></a>例</h3><script src="https://gist.github.com/takuya-takeuchi/5836161c2b63aaf975608fd2925b9824.js"></script><h2 id="パッケージの追加"><a href="#パッケージの追加" class="headerlink" title="パッケージの追加"></a>パッケージの追加</h2><script src="https://gist.github.com/takuya-takeuchi/43909d7c58490d0ab806f52cb94617b6.js"></script><p>下記は <strong>NuGet Package Explorer</strong> でローカルのNugetサーバーの一覧を表示してみた例。<br>追加されたパッケージが見えます。</p><p><a href="../../../../public/2018/11/1-1.png"><img src="../../../../public/2018/11/1-1-1024x549.png"></a></p><h2 id="パッケージの削除"><a href="#パッケージの削除" class="headerlink" title="パッケージの削除"></a>パッケージの削除</h2><script src="https://gist.github.com/takuya-takeuchi/685003c93e6820e729d6892fa6f78114.js"></script>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> NuGet </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その149 Dockerで固定IP</title>
      <link href="2018/11/11/3815/"/>
      <url>2018/11/11/3815/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>備忘録。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p>そのものずばりな記事がこちら。すごく丁寧。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://qiita.com/paihu/items/17aa47906dd2bf935a25" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=qiita.com"></img><div class="hbc-site-name">Qiita</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.qiita.com%2Fassets%2Fpublic%2Farticle-ogp-background-1150d8b18a7c15795b701a55ae908f94.png?ixlib=rb-1.2.2&w=1200&mark=https%3A%2F%2Fqiita-user-contents.imgix.net%2F~text%3Fixlib%3Drb-1.2.2%26w%3D840%26h%3D380%26txt%3DDocker%25E3%2581%25A7%25E5%259B%25BA%25E5%25AE%259AIP%25E3%2582%25A2%25E3%2583%2589%25E3%2583%25AC%25E3%2582%25B9%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%25E3%2580%2582%26txt-color%3D%2523333%26txt-font%3DHiragino%2520Sans%2520W6%26txt-size%3D54%26txt-clip%3Dellipsis%26txt-align%3Dcenter%252Cmiddle%26s%3De8f5bbbb89c591e47c389c075db8ea29&mark-align=center%2Cmiddle&blend=https%3A%2F%2Fqiita-user-contents.imgix.net%2F~text%3Fixlib%3Drb-1.2.2%26w%3D840%26h%3D500%26txt%3D%2540paihu%26txt-color%3D%2523333%26txt-font%3DHiragino%2520Sans%2520W6%26txt-size%3D45%26txt-align%3Dright%252Cbottom%26s%3D60a4c3d166e64aeb2fe611c890584789&blend-align=center%2Cmiddle&blend-mode=normal&s=156047a1ecb435ac5cfbf4398e8dc00e"></img></div><div class="hbc-text"><div class="hbc-title">Dockerで固定IPアドレスを使う。 - Qiita</div><div class="hbc-url">https://qiita.com/paihu/items/17aa47906dd2bf935a25</div><div class="hbc-description">Dockerで固定IPアドレスを使う。最近のDockerでは固定IPアドレスが普通に使えるようになっていたのでメモ。試した環境はCentOS7です。新しいバージョンのDockerをインストールする。現在、CentO...</div></div></div></div></a></div></div><h2 id="ネットワークを作成"><a href="#ネットワークを作成" class="headerlink" title="ネットワークを作成"></a>ネットワークを作成</h2><p>ここが大事。<br>既定のネットワークである<strong>Bridge</strong>では固定IPが使えない。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker network create --subnet=&lt;ネットワークアドレス&gt;/&lt;サブネットマスク&gt; &lt;新しいネットワーク名&gt; </span><br></pre></td></tr></table></figure><h4 id="例"><a href="#例" class="headerlink" title="例"></a>例</h4><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker network create --subnet=<span class="number">172</span>.<span class="number">16</span>.<span class="number">0</span>.<span class="number">0</span>/<span class="number">16</span> mynet</span><br></pre></td></tr></table></figure><p>作成したネットワークは下記で確認。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">$ docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">a4a7dc12da84        bridge              bridge              local</span><br><span class="line">b2e97ac5fc42        host                host                local</span><br><span class="line">ecaf2a1b55d3        mynet               bridge              local</span><br><span class="line">c6d5386a2054        none                null                local</span><br><span class="line"></span><br><span class="line">$ docker network inspect mynet</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;mynet&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;ecaf2a1b55d3be072f58c5629e0a0b5081af0769a43fb40824f032e5361f9355&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;<span class="number">2018</span>-<span class="number">11</span>-<span class="number">10</span>T13:<span class="number">28</span>:<span class="number">59</span>.<span class="number">340134</span>Z&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;<span class="number">172</span>.<span class="number">16</span>.<span class="number">0</span>.<span class="number">0</span>/<span class="number">16</span>&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="ネットワークに追加"><a href="#ネットワークに追加" class="headerlink" title="ネットワークに追加"></a>ネットワークに追加</h2><p>コンテナ実行時にネットワークを指定してIPも指定します。<br>当然、IPはネットワークで指定したネットワークアドレスの範囲内であること。</p><p>例えば下記のように指定します。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name mysql ^</span><br><span class="line">             -e MYSQL_ROOT_PASSWORD=password ^</span><br><span class="line">             -d ^</span><br><span class="line">             -v /d/virtualMachines/docker/volume/mysql:/var/lib/mysql ^</span><br><span class="line">             -p <span class="number">3306</span>:<span class="number">3306</span> ^</span><br><span class="line">             --<span class="built_in">net</span>=mynet ^</span><br><span class="line">             --ip=<span class="number">172</span>.<span class="number">16</span>.<span class="number">0</span>.<span class="number">2</span> ^</span><br><span class="line"><span class="function">             mysql:5.7</span></span><br></pre></td></tr></table></figure><p><strong>–net</strong>を省略すると、下記のように怒られます。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">docker: <span class="title">Error</span> <span class="title">response</span> <span class="title">from</span> <span class="title">daemon</span>: <span class="title">user</span> <span class="title">specified</span> <span class="title">IP</span> <span class="title">address</span> <span class="title">is</span> <span class="title">supported</span> <span class="title">on</span> <span class="title">user</span> <span class="title">defined</span> <span class="title">networks</span> <span class="title">only</span>. </span></span><br></pre></td></tr></table></figure><h2 id="ネットワークの確認"><a href="#ネットワークの確認" class="headerlink" title="ネットワークの確認"></a>ネットワークの確認</h2><p>コンテナの中に入って確認してみます。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ docker exec -it mysql /bin/bash</span><br><span class="line"># cat /etc/hosts</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>       localhost</span><br><span class="line">::<span class="number">1</span>     localhost ip6-localhost ip6-loopback</span><br><span class="line"><span class="function">fe00::0 <span class="title">ip6</span>-<span class="title">localnet</span></span></span><br><span class="line"><span class="function"><span class="title">ff00</span>::0 <span class="title">ip6</span>-<span class="title">mcastprefix</span></span></span><br><span class="line"><span class="function"><span class="title">ff02</span>::1 <span class="title">ip6</span>-<span class="title">allnodes</span></span></span><br><span class="line"><span class="function"><span class="title">ff02</span>::2 <span class="title">ip6</span>-<span class="title">allrouters</span></span></span><br><span class="line"><span class="function">172.16.0.2      4055<span class="title">c6c61419</span></span></span><br></pre></td></tr></table></figure><p>dockerコンテナの既定のIPアドレスは<strong>172.17.0.0/16</strong>なので、きちんと変わっていますね。</p><h2 id="疎通確認"><a href="#疎通確認" class="headerlink" title="疎通確認"></a>疎通確認</h2><p>コンテナ起動時にポート転送設定(<em>-p オプション</em>)がしてあるなら、ホストOSからでもつながります。<br>逆に設定がしていないなら、同一のdockerネットワークを経由しないとつながらなくなります。</p>]]></content>
      
      
      <categories>
          
          <category> 仮想化 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その148 Metabase on DockerをMySQLで動かす</title>
      <link href="2018/11/10/3792/"/>
      <url>2018/11/10/3792/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>会社で<strong>Chainer</strong>によるディープラーニングの案件がきました。<br>データ解析が必要なためデータの可視化が必要なのですが、諸事情で<strong>ChainerUI</strong>が使えません。<br>なので、出力結果をデータベースに格納して解析します。</p><p>そのために、<strong>BI (Business Intelligence)**ツールである</strong>Metabase**を導入することにしました。<br>また勉強もかねてDockerでも動かします。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p>MySQLは別コンテナで稼働中であるとする。<br>作成方法は下記。</p><p>また、Metabaseそのもののデータベースはホストに永続化するものとする。</p><h2 id="Metabaseの作成"><a href="#Metabaseの作成" class="headerlink" title="Metabaseの作成"></a>Metabaseの作成</h2><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull metabase/metabase:latest</span><br><span class="line">$ docker run --name &lt;コンテナの名前&gt; ^</span><br><span class="line">             -d ^</span><br><span class="line">             -v /c/Users/&#123;ユーザディレクトリ&#125;/Documents/workspace:/tmp ^</span><br><span class="line">             -e &quot;MB_DB_FILE=/tmp/metabase.db&quot; ^</span><br><span class="line">             -p &lt;ホストのポート&gt;:<span class="number">3000</span> ^</span><br><span class="line">             metabase/metabase:latest</span><br></pre></td></tr></table></figure><h2 id="データベースの作成"><a href="#データベースの作成" class="headerlink" title="データベースの作成"></a>データベースの作成</h2><p>MySQL側でデータベースを作成しておく。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> &lt;データベース名&gt;;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> &lt;データベース名&gt;.* <span class="keyword">to</span> &lt;ユーザ名&gt;@localhost;</span><br><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span>;</span><br></pre></td></tr></table></figure><h2 id="起動"><a href="#起動" class="headerlink" title="起動"></a>起動</h2><p>コンテナ作成時に指定したポートにブラウザでアクセスしましょう。</p><p><a href="../../../../public/2018/11/1.png"><img src="../../../../public/2018/11/1-1024x720.png"></a></p><h2 id="ユーザ作成"><a href="#ユーザ作成" class="headerlink" title="ユーザ作成"></a>ユーザ作成</h2><p>ユーザを作成します。<br>ちょっと日本語が怪しいです。気にしない。<br>余談ですが、パスワードは数字が必須ですが、アルファベットは必須ではないです。<br>どういうルールなのでしょうか。</p><p><a href="../../../../public/2018/11/2.png"><img src="../../../../public/2018/11/2-1016x1024.png"></a></p><h2 id="データベースマネージメントシステムの指定"><a href="#データベースマネージメントシステムの指定" class="headerlink" title="データベースマネージメントシステムの指定"></a>データベースマネージメントシステムの指定</h2><p>解析データを含むデータベースマネージメントシステムを指定します。<br>後から追加もできます。</p><p>|フィールド|概要|<br>|:—|:—|:—|<br>|<strong>名前</strong>|データベースマネージメントシステムを識別する名前。自由に決めることができます。|<br>|<strong>Host</strong>|データベースマネージメントシステムのIPアドレス。<br>localhostはDockerコンテナのアドレスになるので注意。|<br>|<strong>Port</strong>|データベースマネージメントシステムの待ち受けポート。Hostによって変わります。|<br>|<strong>Database name</strong>|データベースマネージメントシステム内に含まれる、解析対象のデータベースの名前。|<br>|<strong>Database username</strong>|データベースマネージメントシステムへの接続ユーザ名|<br>|<strong>Database password</strong>|ユーザのパスワード|<br>|<strong>Additional JDBC connection string options</strong>|JDBCに渡すオプション文字列。必須ではありません。|</p><p><a href="../../../../public/2018/11/3.png"><img src="../../../../public/2018/11/3-655x1024.png"></a></p><h2 id="データ収集への同意"><a href="#データ収集への同意" class="headerlink" title="データ収集への同意"></a>データ収集への同意</h2><p>ちょっと日本語が怪しいです。気にしない。</p><p><a href="../../../../public/2018/11/4.png"><img src="../../../../public/2018/11/4-1024x837.png"></a></p><h2 id="ニュースレター購読確認"><a href="#ニュースレター購読確認" class="headerlink" title="ニュースレター購読確認"></a>ニュースレター購読確認</h2><p>必要ないなら、<strong>Metabaseを使い始める</strong>を押下するだけ。</p><p><a href="../../../../public/2018/11/5.png"><img src="../../../../public/2018/11/5-1024x951.png"></a></p><h2 id="I’m-Ready"><a href="#I’m-Ready" class="headerlink" title="I’m Ready!!"></a>I’m Ready!!</h2><p><a href="../../../../public/2018/11/6.png"><img src="../../../../public/2018/11/6-1024x730.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> 仮想化 </category>
          
          <category> Docker </category>
          
          <category> Business Intelligence </category>
          
          <category> business-intelligence </category>
          
          <category> Metabase </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その147 MySQLをDockerで動かす</title>
      <link href="2018/11/09/3782/"/>
      <url>2018/11/09/3782/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>起動するだけなら何でもないのだが、コンテナ内のデーモンに繋がらない。<br>これで時間を無駄にした。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><h2 id="構文"><a href="#構文" class="headerlink" title="構文"></a>構文</h2><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull mysql</span><br><span class="line">$ docker run --name &lt;コンテナの名前&gt; ^</span><br><span class="line">             -e MYSQL_ROOT_PASSWORD=&lt;ROOTユーザーのパスワード&gt; ^</span><br><span class="line">             -d ^</span><br><span class="line">             -v /c/Users/&#123;ユーザディレクトリ&#125;/Documents/workspace:/var/lib/mysql ^</span><br><span class="line">             -p &lt;ホストのポート&gt;:&lt;コンテナのポート&gt; ^</span><br><span class="line">             mysql</span><br><span class="line">$ mysql --user=root --password=&lt;ROOTユーザーのパスワード&gt; -h localhost --port=&lt;ホストのポート&gt;</span><br></pre></td></tr></table></figure><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull mysql:<span class="number">5</span>.<span class="number">7</span></span><br><span class="line">$ docker run --name mysql ^</span><br><span class="line">             -e MYSQL_ROOT_PASSWORD=password ^</span><br><span class="line">             -d ^</span><br><span class="line">             -v /d/works/mysql:/var/lib/mysql ^</span><br><span class="line">             -p <span class="number">53306</span>:<span class="number">3306</span> ^</span><br><span class="line"><span class="function">             mysql:5.7</span></span><br><span class="line"><span class="function">$ <span class="title">mysql</span> --<span class="title">user</span>=<span class="title">root</span> --<span class="title">password</span>=<span class="title">password</span> -<span class="title">h</span> <span class="title">localhost</span> --<span class="title">port</span>=53306</span></span><br><span class="line"><span class="function"><span class="title">mysql</span>: [<span class="title">Warning</span>] <span class="title">Using</span> <span class="title">a</span> <span class="title">password</span> <span class="title">on</span> <span class="title">the</span> <span class="title">command</span> <span class="title">line</span> <span class="title">interface</span> <span class="title">can</span> <span class="title">be</span> <span class="title">insecure</span>.</span></span><br><span class="line"><span class="function"><span class="title">Welcome</span> <span class="title">to</span> <span class="title">the</span> <span class="title">MySQL</span> <span class="title">monitor</span>.  <span class="title">Commands</span> <span class="title">end</span> <span class="title">with</span> ; <span class="title">or</span> \<span class="title">g</span>.</span></span><br><span class="line"><span class="function"><span class="title">Your</span> <span class="title">MySQL</span> <span class="title">connection</span> <span class="title">id</span> <span class="title">is</span> 19</span></span><br><span class="line"><span class="function"><span class="title">Server</span> <span class="title">version</span>: 5.7.24 <span class="title">MySQL</span> <span class="title">Community</span> <span class="title">Server</span> (<span class="title">GPL</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Copyright</span> (<span class="title">c</span>) 2000, 2018, <span class="title">Oracle</span> <span class="title">and</span>/<span class="title">or</span> <span class="title">its</span> <span class="title">affiliates</span>. <span class="title">All</span> <span class="title">rights</span> <span class="title">reserved</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Oracle</span> <span class="title">is</span> <span class="title">a</span> <span class="title">registered</span> <span class="title">trademark</span> <span class="title">of</span> <span class="title">Oracle</span> <span class="title">Corporation</span> <span class="title">and</span>/<span class="title">or</span> <span class="title">its</span></span></span><br><span class="line"><span class="function"><span class="title">affiliates</span>. <span class="title">Other</span> <span class="title">names</span> <span class="title">may</span> <span class="title">be</span> <span class="title">trademarks</span> <span class="title">of</span> <span class="title">their</span> <span class="title">respective</span></span></span><br><span class="line"><span class="function"><span class="title">owners</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Type</span> &#x27;<span class="title">help</span>;&#x27; <span class="title">or</span> &#x27;\<span class="title">h</span>&#x27; <span class="title">for</span> <span class="title">help</span>. <span class="title">Type</span> &#x27;\<span class="title">c</span>&#x27; <span class="title">to</span> <span class="title">clear</span> <span class="title">the</span> <span class="title">current</span> <span class="title">input</span> <span class="title">statement</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">mysql</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h1><p>躓いたのは<strong>mysql</strong>で接続する際の<strong>パスワード指定</strong>。<br>普通、対話形式でパスワードを聞かれるから指定しなくてもいいかな?と思う。<br>現にパスワードをコマンドラインで指定すると、</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">mysql: [<span class="title">Warning</span>] <span class="title">Using</span> <span class="title">a</span> <span class="title">password</span> <span class="title">on</span> <span class="title">the</span> <span class="title">command</span> <span class="title">line</span> <span class="title">interface</span> <span class="title">can</span> <span class="title">be</span> <span class="title">insecure</span>.</span></span><br></pre></td></tr></table></figure><p>というありがたい警告。<br>パスワードを聞かれるようにするには</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mysql --user=root --password -h localhost --port=<span class="number">53306</span></span><br><span class="line">Enter password:</span><br></pre></td></tr></table></figure><p>というようにする。</p>]]></content>
      
      
      <categories>
          
          <category> 仮想化 </category>
          
          <category> Docker </category>
          
          <category> rdms </category>
          
          <category> MySQL </category>
          
          <category> データベース </category>
          
          <category> RDMS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その146 Windows10 1709以降でNASにアクセスできない</title>
      <link href="2018/11/08/3778/"/>
      <url>2018/11/08/3778/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>備忘録。<br>前提として、<strong>SMB 1.0</strong>が原因ではない。<br>アクセスするNASのルートがゲストで誰でも表示できて、その配下のディレクトリがユーザ毎にアクセス制限されているパターンです。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p>状況はこう。<br>NASのIPは<strong>AAA.BBB.CCC.DDD</strong>。</p><ul><li>\AAA.BBB.CCC.DDD<ul><li>誰でも見える。配下のフォルダが見える</li></ul></li><li>\AAA.BBB.CCC.DDD\HOGE<ul><li>アクセス制御あり</li></ul></li></ul><p>上の状況で、HOGEに対するアクセス制御として認証ダイアログが出て欲しいものだがそうは問屋が卸さない。<br>原因として、 </p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://support.microsoft.com/ja-jp/help/4046019/guest-access-in-smb2-disabled-by-default-in-windows-10-and-windows-ser" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=support.microsoft.com"></img><div class="hbc-site-name">support.microsoft.com</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png"></img></div><div class="hbc-text"><div class="hbc-title">SMB2 でのゲストアクセスが無効になっている - Windows Server</div><div class="hbc-url">https://support.microsoft.com/ja-jp/help/4046019/guest-access-in-smb2-disabled-by-default-in-windows-10-and-windows-ser</div><div class="hbc-description">Windows 10、Windows Server 2019 および2016では、SMB2 のゲストアクセスは既定で無効になっています。</div></div></div></div></a></div></div><p>匿名認証によるNASへのアクセスが無効になったためである。<br>つまり、HOGEにアクセスする前に、ルートでの匿名認証に引っかかってしまったのである。</p><p>このあたりの情報は散々出尽くしているので語らないが、<strong>SMB 1.0</strong>が無効化されたこととは何の関係もない。<br>だから、Windows10を1709以降にして、NASにアクセスできなくなったからといって、<strong>プログラムの追加と削除</strong>から<strong>Windowsの機能の有効化または無効化</strong>をたどり、<strong>SMB 1.0/CIFS ファイル共有のサポート</strong>を有効化しても意味がありません。<br>これを有効にして動かなかったからほかの対策と組み合わせて動いてしまい、あたかも<strong>SMB 1.0</strong>の有効化も必須だと思ってはいけません。<br>対策は、</p><ol><li>NASの設定を変更して匿名アクセスを無効にする</li><li>レジストリの<strong>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\LanmanWorkstation\Parameters\AllowInsecureGuestAuth</strong>を<strong>1</strong>に変更する。存在しない場合は作成。</li></ol><p>となる。<br>確かに1が正しいと思うけど、匿名認証でアクセスできる場所の配下が見られても困らない、あるいはその配下がアクセス権制御されているなら、そこまで困らないと思うんですがどうでしょう。<br>いや、見られることによりどんな情報があるのか、という情報を与えてしまうのは良くないとはわかっていますが。</p><p>あとは、知らないうちに制御を奪われて匿名認証の場所にアクセスされたら困る..とか?</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> Windows </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その145 Linux on Hyper-Vの解像度を変更する</title>
      <link href="2018/11/03/3229/"/>
      <url>2018/11/03/3229/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>備忘録。絶対忘れるやつだし、これ。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p>Hyper-VにおけるゲストLinuxの既定の解像度サイズは<strong>1152x864</strong>の模様。</p><h2 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h2><p>16.04.5で確認。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi /etc/default/grub</span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet splash&quot;</span></span><br><span class="line"><span class="addition">+ GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet splash video=hyperv_fb:1600x1200&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo update-grub</span><br><span class="line">$ sudo reboot</span><br></pre></td></tr></table></figure><h2 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h2><p>7.5で確認。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ grubby --update-kernel=ALL --args=<span class="string">&quot;video=hyperv_fb:1600x1200&quot;</span></span><br><span class="line">$ reboot</span><br></pre></td></tr></table></figure><h2 id="Fedora"><a href="#Fedora" class="headerlink" title="Fedora"></a>Fedora</h2><p>28で確認。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ grubby --update-kernel=ALL --args=<span class="string">&quot;video=hyperv_fb:1600x1200&quot;</span></span><br><span class="line">$ reboot</span><br></pre></td></tr></table></figure><h2 id="Red-Hat-Enterprise-Linux"><a href="#Red-Hat-Enterprise-Linux" class="headerlink" title="Red Hat Enterprise Linux"></a>Red Hat Enterprise Linux</h2><p>7.6で確認。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ grubby --update-kernel=ALL --args=<span class="string">&quot;video=hyperv_fb:1600x1200&quot;</span></span><br><span class="line">$ reboot</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> Hyper-V </category>
          
          <category> CentOS </category>
          
          <category> Fedora </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その144 Chainer DCGANのサンプル</title>
      <link href="2018/11/03/3621/"/>
      <url>2018/11/03/3621/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>Chainer</strong>の<strong>DCGAN</strong>サンプルを実行してみた。<br>何も指定しないと自動で<strong>CIFAR-10</strong>のデータセットをダウンロードして学習と評価を行ってくれます。便利。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p>ついでに<strong>Chainer UI</strong>で可視化もしてみました。<br>gitソースからサンプルを実行する際は、インストールしたchainerとgitソースのブランチを合わせておきましょう。</p><p>実行のコマンドは下記。規定では1000Epochで100iter/Epochになります。<br>ちなみにとてつもないサイズのファイルが大量に出力されるので空き容量には注意。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python -i train_dcgan.py -g <span class="number">0</span></span><br></pre></td></tr></table></figure><p>可視化した結果。</p><p><a href="../../../../public/2018/11/screencapture-localhost-5000-projects-1-2018-11-03-00_40_36.png"><img src="../../../../public/2018/11/screencapture-localhost-5000-projects-1-2018-11-03-00_40_36-1024x763.png"></a></p><ul><li>明るい赤 (Generator/Loss)</li><li>暗い赤 (Discriminator/Loss)</li></ul><p>になります。<br><strong>Generator/Loss</strong>が<strong>Discriminator/Loss</strong>より一貫して高いの良い、という認識でOK? </p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://cedro3.com/ai/dcgan-vector-control/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=cedro3.com"></img><div class="hbc-site-name">cedro-blog</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="http://cedro3.com/wp-content/uploads/2018/05/キャプチャ-1.jpg"></img></div><div class="hbc-text"><div class="hbc-title">NNabla DCGAN 生成される顔画像を入力ベクトルでコントロールする（前編） | cedro-blog</div><div class="hbc-url">http://cedro3.com/ai/dcgan-vector-control/</div><div class="hbc-description">今回は、DCGANの推論実行時に、入力ベクトルを操作することによって、生成画像のカテゴリーをコントロールしてみます。「前編」は顔画像生成器の作成までやってみます。</div></div></div></div></a></div></div><p>下記は出力画像を連続したビデオにしてみたものです。</p><p><video src="../../../../public/2018/11/dcgan.mp4" width="480" height="360" controls></video></p>]]></content>
      
      
      <categories>
          
          <category> %e3%83%87%e3%82%a3%e3%83%bc%e3%83%97%e3%83%a9%e3%83%bc%e3%83%8b%e3%83%b3%e3%82%b0 </category>
          
          <category> Chainer </category>
          
          <category> ディープラーニング </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その143 Pythonの仮想環境を正しく使う</title>
      <link href="2018/11/01/3613/"/>
      <url>2018/11/01/3613/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>以前こんな記事を書きました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://taktak.jp/2018/07/21/3094" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=taktak.jp"></img><div class="hbc-site-name">taktak.jp</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">開発メモ その127 Anaconda navigatorの仮想環境のディレクトリを変更する – A certain engineer &quot;COMPLEX&quot;</div><div class="hbc-url">https://taktak.jp/2018/07/21/3094</div></div></div></div></a></div></div><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://taktak.jp/2018/10/20/3218" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=taktak.jp"></img><div class="hbc-site-name">taktak.jp</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">開発メモ その137 Chainer with CUDA on Anaconda3 for Windowsを使う – A certain engineer &quot;COMPLEX&quot;</div><div class="hbc-url">https://taktak.jp/2018/10/20/3218</div></div></div></div></a></div></div><p>が、仮想環境の使い方としてはよろしくないので、正しく使う方法を。<br>前提として、<strong>Python 3.3以上</strong> が対象です。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><h2 id="仮想環境の作成"><a href="#仮想環境の作成" class="headerlink" title="仮想環境の作成"></a>仮想環境の作成</h2><p>まず、仮想環境を管理するディレクトリ(以下管理ディレクトリ)を用意します。どこでも良いです。<br>1カ所で管理するほうが綺麗です。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> &lt;管理ディレクトリ&gt;</span><br><span class="line">$ python -m venv &lt;仮想環境名&gt;</span><br></pre></td></tr></table></figure><p>正確には、</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python -m venv &lt;仮想環境の作成先ディレクトのパス&gt;</span><br></pre></td></tr></table></figure><p>になります。</p><h2 id="仮想環境の実行"><a href="#仮想環境の実行" class="headerlink" title="仮想環境の実行"></a>仮想環境の実行</h2><h3 id="Windowsの場合"><a href="#Windowsの場合" class="headerlink" title="Windowsの場合"></a>Windowsの場合</h3><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> &lt;仮想環境の作成先ディレクトのパス&gt;</span><br><span class="line">$ Scripts\\activate.bat</span><br></pre></td></tr></table></figure><h3 id="Linuxの場合"><a href="#Linuxの場合" class="headerlink" title="Linuxの場合"></a>Linuxの場合</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> &lt;仮想環境の作成先ディレクトのパス&gt;</span><br><span class="line">$ <span class="built_in">source</span> bin/activate</span><br></pre></td></tr></table></figure><h2 id="パッケージの確認"><a href="#パッケージの確認" class="headerlink" title="パッケージの確認"></a>パッケージの確認</h2><p>pipが最初から入っているはずです。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python -m pip freeze</span><br></pre></td></tr></table></figure><p>なにも表示されないです。きちんとパッケージがほかの環境と独立していることがわかります。</p><h2 id="仮想環境の削除"><a href="#仮想環境の削除" class="headerlink" title="仮想環境の削除"></a>仮想環境の削除</h2><p>仮想環境のフォルダを削除するだけです。</p>]]></content>
      
      
      <categories>
          
          <category> %e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%e8%a8%80%e8%aa%9e </category>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その142 Cockpitを使う for Ubuntu and Fedora</title>
      <link href="2018/10/28/3606/"/>
      <url>2018/10/28/3606/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>備忘録。リソース管理をしたいときがある。<br>また、Dockerコンテナの管理、systemdのサービス管理も魅力的。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><h2 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h2><h3 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install cockpit</span><br></pre></td></tr></table></figure><h3 id="自動起動と開始"><a href="#自動起動と開始" class="headerlink" title="自動起動と開始"></a>自動起動と開始</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl <span class="built_in">enable</span> cockpit</span><br><span class="line">$ sudo systemctl start cockpit</span><br></pre></td></tr></table></figure><h3 id="アクセス"><a href="#アクセス" class="headerlink" title="アクセス"></a>アクセス</h3><p>ブラウザから <strong>https://&lt;端末のIP&gt;:9090</strong>でアクセス<br><a href="../../../../public/2018/10/01-2.png"><img src="../../../../public/2018/10/01-2-1024x560.png"></a></p><h2 id="Fedora"><a href="#Fedora" class="headerlink" title="Fedora"></a>Fedora</h2><p><strong>Server</strong>の場合はデフォルトでインストールされている模様。<br>ここでは<strong>Workstation</strong>の場合です。</p><h3 id="インストール-1"><a href="#インストール-1" class="headerlink" title="インストール"></a>インストール</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install cockpit</span><br></pre></td></tr></table></figure><h3 id="自動起動と開始-1"><a href="#自動起動と開始-1" class="headerlink" title="自動起動と開始"></a>自動起動と開始</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl <span class="built_in">enable</span> cockpit.socket</span><br><span class="line">$ sudo systemctl start cockpit</span><br></pre></td></tr></table></figure><h3 id="Firewallへの許可"><a href="#Firewallへの許可" class="headerlink" title="Firewallへの許可"></a>Firewallへの許可</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo firewall-cmd --add-service=cockpit</span><br></pre></td></tr></table></figure><h3 id="アクセス-1"><a href="#アクセス-1" class="headerlink" title="アクセス"></a>アクセス</h3><p>ブラウザから <strong>https://&lt;端末のIP&gt;:9090</strong>でアクセス<br><a href="../../../../public/2018/10/02-2.png"><img src="../../../../public/2018/10/02-2-1024x606.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> その他 </category>
          
          <category> linux </category>
          
          <category> Fedora </category>
          
          <category> Cockpit </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その141 x11vncを使う for Ubuntu and Fedora</title>
      <link href="2018/10/28/3579/"/>
      <url>2018/10/28/3579/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>会社の<strong>Ubuntu 16.04.5</strong>で<strong>x11vnc</strong>を使うようになりました。<br><strong>vino</strong>と異なり、ログインしなくても、きちんとログイン画面が表示されて使うことができるのがすごく良いです。<br>設定も簡単です。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p>手順は簡単です。</p><h2 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h2><h3 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install x11vnc</span><br></pre></td></tr></table></figure><h3 id="パスワード設定"><a href="#パスワード設定" class="headerlink" title="パスワード設定"></a>パスワード設定</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ x11vnc -storepasswd</span><br><span class="line">Enter VNC password:</span><br><span class="line">Verify password:</span><br><span class="line">Write password to /home/XXXXXX/.vnc/passwd?  [y]/n y</span><br><span class="line">Password written to: /home/XXXXXX/.vnc/passwd</span><br></pre></td></tr></table></figure><h3 id="自動起動設定"><a href="#自動起動設定" class="headerlink" title="自動起動設定"></a>自動起動設定</h3><p>新規で <strong>/etc/systemd/system/x11vnc.service</strong> を作成します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi /etc/systemd/system/x11vnc.service</span><br></pre></td></tr></table></figure><p>下記を保存します。<br>解像度を変えたい場合は、<strong>1024x768</strong>を任意の値に変えます。<br>また同時接続を無効化したいなら <strong>-shared</strong> を削除します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;Start x11vnc at startup.</span><br><span class="line">After&#x3D;multi-user.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;simple</span><br><span class="line">ExecStart&#x3D;&#x2F;bin&#x2F;sh -c &#39;&#x2F;usr&#x2F;bin&#x2F;x11vnc -auth guess -display :0 -geometry 1024x768 -rfbport 5900 -noxrecord -noxfixes -noxdamage -reopen -repeat -forever -shared&#39;</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure><h3 id="システムへの登録と起動"><a href="#システムへの登録と起動" class="headerlink" title="システムへの登録と起動"></a>システムへの登録と起動</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> x11vnc</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/x11vnc.serviceto /etc/systemd/system/x11vnc.service.</span><br><span class="line">$ sudo systemctl start x11vnc</span><br></pre></td></tr></table></figure><h2 id="Fedora"><a href="#Fedora" class="headerlink" title="Fedora"></a>Fedora</h2><h3 id="ディスプレイマネージャーの変更"><a href="#ディスプレイマネージャーの変更" class="headerlink" title="ディスプレイマネージャーの変更"></a>ディスプレイマネージャーの変更</h3><p>x11vncは<strong>lightdm</strong>でしか使えない模様。<br>lightdmのログイン画面はちょっとダサいですが我慢。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install lightdm-gtk</span><br><span class="line">$ sudo systemctl <span class="built_in">disable</span> gdm.service</span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> lightdm</span><br><span class="line">$ reoot</span><br></pre></td></tr></table></figure><h3 id="インストール-1"><a href="#インストール-1" class="headerlink" title="インストール"></a>インストール</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install x11vnc</span><br></pre></td></tr></table></figure><h3 id="パスワード設定-1"><a href="#パスワード設定-1" class="headerlink" title="パスワード設定"></a>パスワード設定</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ x11vnc -storepasswd</span><br><span class="line">Enter VNC password:</span><br><span class="line">Verify password:</span><br><span class="line">Write password to /root/.vnc/passwd?  [y]/n y</span><br><span class="line">Password written to: /root/.vnc/passwd</span><br></pre></td></tr></table></figure><h3 id="自動起動設定-1"><a href="#自動起動設定-1" class="headerlink" title="自動起動設定"></a>自動起動設定</h3><p>新規で <strong>/etc/systemd/system/x11vnc.service</strong> を作成します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi /etc/systemd/system/x11vnc.service</span><br></pre></td></tr></table></figure><p>下記を保存します。<br>解像度を変えたい場合は、<strong>1024x768</strong>を任意の値に変えます。<br>また同時接続を無効化したいなら <strong>-shared</strong> を削除します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;Start x11vnc at startup.</span><br><span class="line">After&#x3D;multi-user.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;simple</span><br><span class="line">ExecStart&#x3D;&#x2F;bin&#x2F;sh -c &#39;&#x2F;usr&#x2F;bin&#x2F;x11vnc -auth guess -display :0 -geometry 1024x768 -rfbport 5900 -noxrecord -noxfixes -noxdamage -reopen -repeat -forever -shared&#39;</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure><h3 id="システムへの登録と起動-1"><a href="#システムへの登録と起動-1" class="headerlink" title="システムへの登録と起動"></a>システムへの登録と起動</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> x11vnc</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/x11vnc.serviceto /etc/systemd/system/x11vnc.service.</span><br><span class="line">$ sudo systemctl start x11vnc</span><br></pre></td></tr></table></figure><h3 id="Firewallへの許可"><a href="#Firewallへの許可" class="headerlink" title="Firewallへの許可"></a>Firewallへの許可</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo firewall-cmd --add-service=vnc-server</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> Fedora </category>
          
          <category> %e3%83%aa%e3%83%a2%e3%83%bc%e3%83%88%e3%83%87%e3%82%b9%e3%82%af%e3%83%88%e3%83%83%e3%83%97 </category>
          
          <category> VNC </category>
          
          <category> Ubuntu </category>
          
          <category> リモートデスクトップ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その140 Fedora 28がHyper-Vにインストールできない</title>
      <link href="2018/10/28/3563/"/>
      <url>2018/10/28/3563/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>セキュアブートは無効にして、ブートメニューは表示されるが先に進めません。下記のメッセージが表示されて停止します。</p><p><a href="../../../../public/2018/10/02-1.png"><img src="../../../../public/2018/10/02-1-1024x859.png"></a><br> A start job is running for Hold until boot process finishes up</p><p>ちなみに<strong>Fedora 27</strong>は普通にインストールできます。<br>環境は<strong>Windows 10 1803</strong>のHyper-Vです。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p>カーネル引数を弄るとGUI画面が表示できることに気づきました。<br>まずメニュー画面を表示します。</p><p><a href="../../../../public/2018/10/01-1.png"><img src="../../../../public/2018/10/01-1-1024x870.png"></a></p><p><strong>e</strong>を押下してカーネル引数の編集画面に移動します。</p><p><a href="../../../../public/2018/10/03-1.png"><img src="../../../../public/2018/10/03-1-1024x870.png"></a></p><p><strong>rd.live.image</strong> の部分を削除します。<br>削除後、<strong>Ctrl+X</strong>で起動を再開します。</p><p><a href="../../../../public/2018/10/04-1.png"><img src="../../../../public/2018/10/04-1-1024x870.png"></a></p><p>ようこそ画面が表示されます。</p><p><a href="../../../../public/2018/10/05-1.png"><img src="../../../../public/2018/10/05-1-1024x851.png"></a></p><p>Privacy設定画面が表示されます。</p><p><a href="../../../../public/2018/10/06-1.png"><img src="../../../../public/2018/10/06-1-1024x859.png"></a></p><p>オンラインアカウントの設定画面が表示されます。</p><p><a href="../../../../public/2018/10/07.png"><img src="../../../../public/2018/10/07-1024x859.png"></a></p><p>アカウントの設定画面が表示されます。<br>ここで設定するアカウントは適当で良いです。<br>ハードディスクへのインストール時に再度決めることになるので。</p><p><a href="../../../../public/2018/10/08.png"><img src="../../../../public/2018/10/08-1024x859.png"></a></p><p>パスワードの設定画面が表示されます。<br>このパスワードもハードディスクへのインストール時に再度決めることになるので上書きされますが、この後rootになる必要があるため覚えておく必要があります。</p><p><a href="../../../../public/2018/10/09.png"><img src="../../../../public/2018/10/09-1024x859.png"></a></p><p>設定完了です。<br><strong>Start Using Fedora</strong>でダイアログを閉じます。</p><p><a href="../../../../public/2018/10/10.png"><img src="../../../../public/2018/10/10-1024x859.png"></a></p><p>少しの間コンソール画面に戻ります。</p><p><a href="../../../../public/2018/10/11.png"><img src="../../../../public/2018/10/11-1024x859.png"></a></p><p>再開するとヘルプが表示されます。さっさと閉じます。</p><p><a href="../../../../public/2018/10/12.png"><img src="../../../../public/2018/10/12-1024x859.png"></a> デスクトップは表示されましたが、<strong>Welcome to Fedora</strong>のダイアログが出ないためインストールができません。<br>そこで、ターミナルを起動します。<strong>Activities</strong>から<strong>Terminal</strong>と入力すれば起動できます。<br><a href="../../../../public/2018/10/13.png"><img src="../../../../public/2018/10/13-1024x859.png"></a></p><p>下記コマンドを入力します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ su</span><br><span class="line">$ /bin/bash /usr/sbin/liveinst</span><br></pre></td></tr></table></figure><p>しばらくするとインストール画面が起動します。<br>後は普通にインストールです。</p><p><a href="../../../../public/2018/10/14.png"><img src="../../../../public/2018/10/14-1024x859.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> Fedora </category>
          
          <category> Hyper-V </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その139 Hyper-Vの詳細な解析ログを取得する</title>
      <link href="2018/10/28/3343/"/>
      <url>2018/10/28/3343/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>Fedora 28</strong>をHyper-Vにインストールしようとするもインストール画面が起動しない問題に遭遇。<br>解決はできていないが、有用なログを取得する手順を見つけたのでメモ。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p>下記の<strong>Microsoft Technet</strong>の掲示板から。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://social.technet.microsoft.com/Forums/windows/en-US/5c4166d6-db27-4650-9f8f-5f3cc7e57d7f/client-hyperv-quotcannot-connect-to-virtual-machinequot?forum=w8itprovirt" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=social.technet.microsoft.com"></img><div class="hbc-site-name">social.technet.microsoft.com</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">    Client Hyper-V &quot;Cannot Connect to Virtual Machine&quot;</div><div class="hbc-url">https://social.technet.microsoft.com/Forums/windows/en-US/5c4166d6-db27-4650-9f8f-5f3cc7e57d7f/client-hyperv-quotcannot-connect-to-virtual-machinequot?forum=w8itprovirt</div></div></div></div></a></div></div><p>手順は、</p><ol><li>実行中の仮想マシンを停止</li><li>Hyper-V Managerをすべて閉じる</li><li>VMMSサービス (Hyper-V Virtual Machine Management サービス)を停止 (net stop vmms)</li><li>VMMSとWorkerの解析ログを有効</li><li>Hyper-V ManagerとVMConnectのUIトレーシングを有効化</li><li>VMMSサービス (Hyper-V Virtual Machine Management サービス)を開始 (net start vmms)</li><li>Hyper-V Managerを開く</li><li>仮想マシンを起動</li><li>仮想マシンに接続</li><li>ログを収集</li><li>ログ収集を中止</li></ol><p>各手順における詳細なステップは次。</p><h3 id="VMMSとWorkerの解析ログを有効"><a href="#VMMSとWorkerの解析ログを有効" class="headerlink" title="VMMSとWorkerの解析ログを有効"></a>VMMSとWorkerの解析ログを有効</h3><p>イベントビューアを開いて、メニューの <strong>表示(V)</strong> から <strong>分析及びデバッグ ログの表示(S)</strong> を有効にします。</p><p><a href="../../../../public/2018/10/1.png"><img src="../../../../public/2018/10/1.png"></a><br> 次に、<strong>アプリケーションとサービスログ</strong>、<strong>Microsoft</strong>、<strong>Windows</strong>、<strong>Hyper-V-VMMS</strong>と進みます。<br>すると、<strong>Analytic</strong>が追加されています。</p><p><a href="../../../../public/2018/10/2.png"><img src="../../../../public/2018/10/2.png"></a></p><p>有効化前</p><p><a href="../../../../public/2018/10/3.png"><img src="../../../../public/2018/10/3.png"></a></p><p>有効化後</p><p>Analyticを右クリックし、<strong>ログの有効化</strong>をクリック。</p><p><a href="../../../../public/2018/10/4.png"><img src="../../../../public/2018/10/4.png"></a></p><p>警告が出ますが気にせずOK。</p><p><a href="../../../../public/2018/10/5.png"><img src="../../../../public/2018/10/5.png"></a></p><p>同じことを<strong>Hyper-V-Worker</strong>にも行います。</p><h3 id="Hyper-V-ManagerとVMConnectのUIトレーシングを有効化"><a href="#Hyper-V-ManagerとVMConnectのUIトレーシングを有効化" class="headerlink" title="Hyper-V ManagerとVMConnectのUIトレーシングを有効化"></a>Hyper-V ManagerとVMConnectのUIトレーシングを有効化</h3><p><strong>%appdata%\Microsoft\Windows\Hyper-V\Client\1.0\</strong> を開きます。<br><strong>VMClientTrace.config</strong> というファイルを作成し、下記の内容を保存します。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Microsoft.Virtualization.Client.TraceConfigurationOptions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;TraceTagFormat&quot;</span> <span class="attr">type</span>=<span class="string">&quot;System.Int32&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">setting</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;BrowserTraceLevel&quot;</span> <span class="attr">type</span>=<span class="string">&quot;System.Int32&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>71<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">setting</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;VMConnectTraceLevel&quot;</span> <span class="attr">type</span>=<span class="string">&quot;System.Int32&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>71<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">setting</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Microsoft.Virtualization.Client.TraceConfigurationOptions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ログを収集"><a href="#ログを収集" class="headerlink" title="ログを収集"></a>ログを収集</h3><p><strong>Hyper-V-VMMS</strong>と<strong>Hyper-V-VMMS</strong>の<strong>Analytic</strong>のログはそのままイベントビューアに表示されます。<br>UIトレーシングのログは、**%TEMP%** に収集されます。<br>下記のようなログが出力されます。</p><ul><li>VMConnect_Trace_20181028123045.log</li><li>VMBrowser_Trace_20181028120328.log</li></ul><h3 id="ログ収集を中止"><a href="#ログ収集を中止" class="headerlink" title="ログ収集を中止"></a>ログ収集を中止</h3><p>イベントビューアで、<strong>Hyper-V-VMMS</strong>と<strong>Hyper-V-VMMS</strong>の<strong>Analytic</strong>に対して、<strong>ログの無効化</strong>を行います。<br>UIトレーシングのログ収集の停止は、作成した<strong>VMClientTrace.config</strong>を削除することで停止できます。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> Hyper-V </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ディープラーニング CNTK その6 指紋紋様分類</title>
      <link href="2018/10/24/1427/"/>
      <url>2018/10/24/1427/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/03/06/889">前回</a>は評価を可視化してみました。</p><a id="more"></a><h1 id="CNTKが進化している"><a href="#CNTKが進化している" class="headerlink" title="CNTKが進化している"></a>CNTKが進化している</h1><p>MicrosoftがフォークさせたCaffeは完成度は高いのですが、2016年5月からメンテナンスが止まっています。</p><p>かたや、CNTKは現在進行形でソースが成長してます。</p><p>どちらもいい面悪い面があるのですが、CNTKの方がMicrosoftの本命でしょう。<br>なので、前回実施した指紋紋様分類をCNTKで実践してみます。<br>最近のCNTKの進化に追随しなければなりません。</p><h1 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h1><h2 id="設定ファイル"><a href="#設定ファイル" class="headerlink" title="設定ファイル"></a>設定ファイル</h2><p>CNTKファイルです。</p><p>をベースに構築します。<br>まず、作業ディレクトリを作ります。ここでは、<strong>ROOT</strong>フォルダとします。<br>ROOTフォルダの下に、一つフォルダを作り、その中に、<strong>AddTop5Layer.mel</strong>, <strong>AlexNet.cntk</strong>, <strong>AlexNet.ndl</strong>, <strong>Macros.ndl</strong> を任意のフォルダに展開します。<br>このフォルダを<strong>Config</strong>フォルダとします。</p><p>次に、AlexNet.cntkを開き、下記の箇所を変更します。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- ConfigDir = &quot;$RootDir$&quot; </span></span><br><span class="line"><span class="addition">+ ConfigDir = &quot;$RootDir$/Config&quot; </span></span><br></pre></td></tr></table></figure><p>2カ所ある </p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- minibatchSize=128</span></span><br><span class="line"><span class="addition">+ minibatchSize=32 </span></span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- cropType=&quot;Random&quot; </span></span><br><span class="line"><span class="addition">+ cropType=&quot;Center&quot; </span></span><br></pre></td></tr></table></figure><p>2カ所ある </p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- width=224</span></span><br><span class="line"><span class="deletion">- height=224</span></span><br><span class="line"><span class="deletion">- channels=3</span></span><br><span class="line"><span class="addition">+ width=224</span></span><br><span class="line"><span class="addition">+ height=224</span></span><br><span class="line"><span class="addition">+ channels=3 </span></span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- cropRatio=0.875</span></span><br><span class="line"><span class="addition">+ cropRatio=0.875 </span></span><br></pre></td></tr></table></figure><p>2カ所ある </p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- meanFile=&quot;$ConfigDir$/ImageNet1K\_mean.xml&quot;</span></span><br><span class="line"><span class="addition">+ meanFile=&quot;$ConfigDir$/ImageNet1K\_mean.xml&quot; </span></span><br></pre></td></tr></table></figure><p>2カ所ある </p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- labels=[</span></span><br><span class="line"><span class="deletion">-  labelDim=1000</span></span><br><span class="line"><span class="deletion">- ] </span></span><br><span class="line"><span class="addition">+ labels=[</span></span><br><span class="line"><span class="addition">+  labelDim=1000</span></span><br><span class="line"><span class="addition">+ ] </span></span><br></pre></td></tr></table></figure><p>に変更します。</p><h2 id="画像ファイルリスト"><a href="#画像ファイルリスト" class="headerlink" title="画像ファイルリスト"></a>画像ファイルリスト</h2><p>Caffeの画像ファイルリストの記述方法は</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;カレントディレクトリからの相対パス&gt;&lt;半角スペース&gt;&lt;0オリジンのラベル番号&gt; </span><br></pre></td></tr></table></figure><p>でした。<br>一方、CNTKで、2016年5月に対応した、ファイルリストをサポートするImageReaderの入力形式は</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;画像のフルパス&gt;&lt;タブ&gt;&lt;0オリジンのラベル番号&gt; </span><br></pre></td></tr></table></figure><p>になります。<br>前回のファイルリストを少し加工して流用できるはずです。<br>また、これらのファイルリストを <strong>val_map.txt</strong> , <strong>train_map.txt</strong> という名前に変更し、Configフォルダにコピーします。</p><p>個人的にはフルパスの方が好感が持てます。<br>画像そのものは、システム中に一つだけであって、作業ディレクトリからのパスで変化するようでは、使い勝手が悪すぎるので…</p><p>ImageReaderについての使い方は </p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/Microsoft/CNTK/wiki/Image-reader" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars2.githubusercontent.com/u/6154722?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">microsoft/CNTK</div><div class="hbc-url">https://github.com/Microsoft/CNTK/wiki/Image-reader</div><div class="hbc-description">Microsoft Cognitive Toolkit (CNTK), an open source deep-learning toolkit - microsoft/CNTK</div></div></div></div></a></div></div><p>を参考にしてください。<br>クロップ機能などが独特ですが…</p><p>指紋といえば、ごく一部の人間を覗いて全ての人間が手にもっている隆線によって形成される紋様です。<br>指紋を持っていない人間もごく一部に存在しますが…</p><p><strong>iPhone</strong>の<strong>TouchID</strong>で急激に認知度が向上した気がします。<br>特に日本では、指紋の採取というのは、人権団体とかの声とかプライバシー云々でいまいち悪のレッテルを貼られている感が否めません。</p><p>さて、指紋は古くから使われており、個人を識別する徴として、日本では拇印としてよく知られています。<br>個人を識別するだけなら、指紋以外に、虹彩、静脈、顔が有名です。<br>他にも掌紋、足紋もあります。</p><h3 id="生体認証"><a href="#生体認証" class="headerlink" title="生体認証"></a>生体認証</h3><p>この手の生物に備わる生体の特徴に基づいた認証を<strong>生体認証 (Biometrics)</strong> と呼びます。<br>指掌紋技術では、たくさんの企業が競争していますが、<strong>3M Cogent (アメリカ)**、</strong>Morpho (フランス)<strong>、</strong>NEC (日本)** が三強です。<br>ここでいう三強とは、司法機関、入国管理など、大規模システムでの納入実績が大きい企業を指します。<br>(例えば、ロサンゼルス国際空港では、Morphoの指紋採取機器が入国管理ゲートにありますし、成田空港にはNECの指紋採取機器があります。)<br>iPhoneの場合、<strong>Apple</strong>は<strong>AuthenTec社</strong>を買収して、TouchIDを開発したようですが、これは指紋を読み取る機器の買収がメインだったと思われます。<br>指紋の採取の場合、光学センサーで読み取るのが主流ですが、AuthenTec社の場合は周波数で読み取るセンサーだったようで、それがiPhoneでの採用に繋がったのでしょう。</p><p>ですので、三強にAppleがない、というのは別に悪意があるわけではなく、この三強は、大規模システム、たとえば、数千万の指紋データから瞬時に個人を特定するなどの総合的な技術を持っています。TouchIDの場合、iPhoneに含まれる指紋データは一人のデータでかつ最大10本の指データです。大して大規模システムでは、入力指紋、つまり識別したい指紋1に対して候補となる指紋データは数千万にも上ることもあります。<br>事実、アメリカ国立標準技術研究所 (National Institute of Standards and Technology, NIST) の指掌紋技術コンテストでは、計測する内容にもよりますが、上位はこの三強が常です。</p><p><a href="http://jpn.nec.com/press/201408/20140821_02.html">NEC、米国国立標準技術研究所(NIST)の指紋認証技術のベンチマークテストにおいて第1位の評価を獲得</a> <a href="http://www.morpho.com/en/media/20141119_morpho-places-first-nist-2014-minex-fingerprint-benchmark">Morpho places first in NIST 2014 MINEX fingerprint benchmark</a></p><p>さらに、犯罪現場に残った指紋、いわゆる遺留指紋とデータベースに載っている人間から直接採取した指紋 (押捺指紋) との照合、また他の犯罪現場で採取した別の遺留指紋との照合など、指紋照合と言ってもいろんなパターンがあるわけです。<br>特に遺留指紋は現場に指全体がきれいに残っているなんてあまりなくて、別の指紋と重なっている、一部しか残っていないとかよくある話です。<br>これらの問題を解決する技術をトータルで持っているのが上位三強です。</p><p>とはいっても、ニッチな技術で攻めるのは間違っていなくて、AuthenTec社はそれが幸いしてAppleに評価してもらえたわけです。</p><h3 id="特徴データ"><a href="#特徴データ" class="headerlink" title="特徴データ"></a>特徴データ</h3><p>さて、指紋、掌紋、足紋でも、他でもそうですが、採取した生体情報から、その生体情報を特徴付ける情報のみを抽出してデータ化します。<br>これを特徴データと呼んでいますが、指紋の場合、そのなかに特徴点 (Minutia) と呼ばれるものがあります。<br>特徴点が12個一致すれば、照合上、同一指紋とみなすことができます。<br>また、指紋においては、隆線 (芯線:Skeleton)も大事なデータですが、指紋の紋様自体も重要です。</p><h3 id="紋様"><a href="#紋様" class="headerlink" title="紋様"></a>紋様</h3><p>紋様には様々な種類がありますが、人種によって、紋様毎の発現率が異なります。下記はその一例です。実際はもっと種類があります。<br>[table id=23 /]<br><a href="../../../../public/2016/04/Patterns.png"><img src="../../../../public/2016/04/Patterns-1024x229.png"></a></p><p>紋様の一例</p><p>前置きが長くなりましたが、これらの紋様をディープラーニングで分類してみましょう。</p><h1 id="準備1"><a href="#準備1" class="headerlink" title="準備1"></a>準備1</h1><p>今回、DeepLearningのために、<strong>GeForce GTX 750 Ti</strong>を入手しました。<br>というわけで、Caffeのビルド設定を変更します。<br>Pythonは有効にし、<strong>CpuOnlyBuild</strong>をfalse、<strong>UseCuDNN</strong>をtrueにします。<br>特に重要なのが、<strong>CudaArchitecture</strong>です。<br>GTX 750 TiのCompute Capabilityは5.0なので、<strong>compute_50,sm_50</strong>を設定します。<br>以上で、ソリューションをリビルドします。</p><h1 id="準備2"><a href="#準備2" class="headerlink" title="準備2"></a>準備2</h1><p>次にデータですが、NISTが指紋データを教師情報と一緒に公開しています。<br>こんなの日本じゃありえません。素晴らしい。<br>下記からダウンロードできます。ただし、接続の調子が悪いのかタイムアウトすることが多々あります。<br><a href="http://www.nist.gov/srd/nistsd4.cfm">Special Database 4 - NIST 8-bit Gray Scale Images of Fingerprint Image Groups.</a> <a href="http://www.nist.gov/srd/nistsd9.cfm">Special Database 9 - NIST 8-bit Gray Scale Images of Mated Fingerprint Card Pairs.</a> <a href="http://www.nist.gov/srd/nistsd14.cfm">NIST Mated Fingerprint Card Pairs 2. Has 2,700 ten-print card pairs of rolled fingerprints (no plain impressions).</a> 今回は、Special Database4を使います。4,9,14は無料ですが、他は有料だったりします。</p><p>入手したファイルを解凍すると、下記のような構成になっています。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NISTSpecialDatabase4GrayScaleImagesofFIGS\\sd04\\png\_txt\\figs\_0 NISTSpecialDatabase4GrayScaleImagesofFIGS\\sd04\\png\_txt\\figs\_1 NISTSpecialDatabase4GrayScaleImagesofFIGS\\sd04\\png\_txt\\figs\_2 NISTSpecialDatabase4GrayScaleImagesofFIGS\\sd04\\png\_txt\\figs\_3 NISTSpecialDatabase4GrayScaleImagesofFIGS\\sd04\\png\_txt\\figs\_4 NISTSpecialDatabase4GrayScaleImagesofFIGS\\sd04\\png\_txt\\figs\_5 NISTSpecialDatabase4GrayScaleImagesofFIGS\\sd04\\png\_txt\\figs\_6 NISTSpecialDatabase4GrayScaleImagesofFIGS\\sd04\\png\_txt\\figs\_7 </span><br></pre></td></tr></table></figure><p>各フォルダ内にpngとtxtファイルが500個ずつ含まれています。<br>学習にはfigs_0からfigs_6の3500枚の画像を使います。テストにはfigs_7を使います。<br>さて、データを見ていると指紋画像のサイズが512x512であることに気がつくと思います。<br>指紋認証の世界では512x512の500ppi (pixel per inch) が常識です。1000ppiもあります。<br>txtには、性別、紋様種別が含まれています。<br>このデータ群の紋様種別は、Whorls、Arch、Loops、Tented Arch、Right Loopの5種です。<br>これらを使って、画像のデータベース作成、学習、テスト、分類を実行します。<br>これら一連の流れを自動化したバッチを用意しました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/takuya-takeuchi/Demo/tree/master/Caffe1" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/6241854?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">takuya-takeuchi/Demo</div><div class="hbc-url">https://github.com/takuya-takeuchi/Demo/tree/master/Caffe1</div><div class="hbc-description">Sample source code for Demonstration, Experiment and Test - takuya-takeuchi/Demo</div></div></div></div></a></div></div><p>これらを、png_txtフォルダ直下に展開し、下記の2点を修正します。</p><h2 id="0-SetEnv-bat"><a href="#0-SetEnv-bat" class="headerlink" title="0.SetEnv.bat"></a>0.SetEnv.bat</h2><p><strong>CAFFE_ROOT</strong>、<strong>MINICONDA</strong>、<strong>ROOTFOLDER</strong>を環境に応じて変更します。</p><h2 id="io-py"><a href="#io-py" class="headerlink" title="io.py"></a>io.py</h2><p>今回の実験では、入力画像を8bitにして扱うことでメモリ消費量を削減しているのですが、PythonのCaffeモジュールが8bit画像として、画像を入力できないため、ネットワークと入力データの整合性がとれません。<br>そのため、<strong>7.Classify.bat</strong>を使うときだけ、**&lt;Miniconda2_root&gt;\Lib\site-packages\caffe\io.py**を修正します。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- def load_image(filename, color=True):</span></span><br><span class="line"><span class="addition">+ def load_image(filename, color=True):</span></span><br></pre></td></tr></table></figure><p>と直します。<br>これで準備完了です。</p><h1 id="実験"><a href="#実験" class="headerlink" title="実験"></a>実験</h1><p>バッチを1から順に実行します。GPUを使えるなら、 </p><p>1.CreateListFile.ps1<br>2.CreateDatabase.bat<br>3.MeanDatabase.bat<br>4.Train_GPU.bat<br>7.Classify.bat</p><p>とコマンドプロンプトまたはPowerShellで順番に実行します。<br>ただし、<strong>7.Classify.bat</strong>は引数に画像ファイルを指定します。<br>例えば、 </p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span>.Classify.bat &quot;D:\\Works\\NISTSpecialDatabase4GrayScaleImagesofFIGS\\sd04\\png\_txt\\figs\_7\\f1752\_04.png&quot; </span><br></pre></td></tr></table></figure><p>のような感じです。<br><strong>4.Train_GPU.bat</strong>を実行することで、学習とテストを同時に実行します。<br>その結果、精度を表すAccuracyが10%弱が、最終的に約80%まで向上していることがわかります。3500回の学習で10分くらいでした。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">I0623 <span class="number">00</span>:<span class="number">35</span>:<span class="number">05</span>.<span class="number">288350</span>  <span class="number">6908</span> solver.cpp:<span class="number">337</span>] Iteration <span class="number">0</span>, Testing <span class="built_in">net</span> (#<span class="number">0</span>)</span><br><span class="line">I0623 <span class="number">00</span>:<span class="number">35</span>:<span class="number">07</span>.<span class="number">777075</span>  <span class="number">6908</span> blocking_queue.cpp:<span class="number">50</span>] Data layer prefetch queue empty</span><br><span class="line">I0623 <span class="number">00</span>:<span class="number">35</span>:<span class="number">09</span>.<span class="number">379405</span>  <span class="number">6908</span> solver.cpp:<span class="number">404</span>]     Test <span class="built_in">net</span> output #<span class="number">0</span>: accuracy = <span class="number">0</span>.<span class="number">148</span></span><br><span class="line">I0623 <span class="number">00</span>:<span class="number">35</span>:<span class="number">09</span>.<span class="number">382393</span>  <span class="number">6908</span> solver.cpp:<span class="number">404</span>]     Test <span class="built_in">net</span> output #<span class="number">1</span>: loss = <span class="number">1</span>.<span class="number">61361</span> (* <span class="number">1</span> = <span class="number">1</span>.<span class="number">61361</span> loss)</span><br></pre></td></tr></table></figure><p>が </p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">I0623 <span class="number">00</span>:<span class="number">49</span>:<span class="number">38</span>.<span class="number">984040</span>  <span class="number">6908</span> solver.cpp:<span class="number">317</span>] Iteration <span class="number">3500</span>, loss = <span class="number">0</span>.<span class="number">304031</span></span><br><span class="line">I0623 <span class="number">00</span>:<span class="number">49</span>:<span class="number">38</span>.<span class="number">986039</span>  <span class="number">6908</span> solver.cpp:<span class="number">337</span>] Iteration <span class="number">3500</span>, Testing <span class="built_in">net</span> (#<span class="number">0</span>)</span><br><span class="line">I0623 <span class="number">00</span>:<span class="number">49</span>:<span class="number">42</span>.<span class="number">858041</span>  <span class="number">6908</span> solver.cpp:<span class="number">404</span>]     Test <span class="built_in">net</span> output #<span class="number">0</span>: accuracy = <span class="number">0</span>.<span class="number">788</span></span><br><span class="line">I0623 <span class="number">00</span>:<span class="number">49</span>:<span class="number">42</span>.<span class="number">860039</span>  <span class="number">6908</span> solver.cpp:<span class="number">404</span>]     Test <span class="built_in">net</span> output #<span class="number">1</span>: loss = <span class="number">0</span>.<span class="number">465629</span> (* <span class="number">1</span> = <span class="number">0</span>.<span class="number">465629</span> loss)</span><br><span class="line">I0623 <span class="number">00</span>:<span class="number">49</span>:<span class="number">42</span>.<span class="number">864039</span>  <span class="number">6908</span> solver.cpp:<span class="number">322</span>] Optimization Done.</span><br><span class="line">I0623 <span class="number">00</span>:<span class="number">49</span>:<span class="number">42</span>.<span class="number">869042</span>  <span class="number">6908</span> caffe.cpp:<span class="number">223</span>] Optimization Done.</span><br></pre></td></tr></table></figure><p>になります。<br>しかし、これでは、本当に正しく学習できるいるのかいまいちわからないため、<strong>7.Classify.bat</strong>に学習に使った画像以外 (今回はfigs_7) から一枚を選んで、引数として渡して実行します。<br>結果として、f1751_08.pngの場合、 </p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Loading file: D:\Works\NISTSpecialDatabase4GrayScaleImagesofFIGS\sd04\png_txt\figs_7\f1751_08.png</span><br><span class="line">Classifying <span class="number">1</span> inputs.</span><br><span class="line">Done <span class="keyword">in</span> <span class="number">0</span>.<span class="number">22</span> s.</span><br><span class="line">Saving results into output.npy</span><br><span class="line">#<span class="number">1</span> | <span class="number">3</span> T | <span class="number">84</span>.<span class="number">0</span>%</span><br><span class="line">#<span class="number">2</span> | <span class="number">2</span> R | <span class="number">11</span>.<span class="number">8</span>%</span><br><span class="line">#<span class="number">3</span> | <span class="number">0</span> A |  <span class="number">2</span>.<span class="number">1</span>%</span><br></pre></td></tr></table></figure><p>T (Tented Arch) が一番高い確率を出力してます。画像に対応するテキストファイル Gender: M Class: T History: f1751_08.pct TA a2618.pct と見比べると、一致していることがわかります。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>DeepLearningのネタは結構転がっていますが、指紋を使った実験はweb上では無いと思います。<br>既に論文でDeepLearningでの紋様分類は存在しましたが、外国の論文でした。<br>日本語としての記事としてはなかなかレアではないでしょうか？</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/Caffe1">https://github.com/takuya-takeuchi/Demo/tree/master/Caffe1</a></p>]]></content>
      
      
      <categories>
          
          <category> 未分類 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その138 ChainerでDCGANのサンプル実行中に遭遇したエラー</title>
      <link href="2018/10/22/3221/"/>
      <url>2018/10/22/3221/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>chainer</strong>に付属している <strong>DCGAN(Deep Convolution Generative Adversarial Networks)</strong> のサンプルを動かした際のエラーについての対応メモ。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><h3 id="backend-がない"><a href="#backend-がない" class="headerlink" title="backend がない"></a>backend がない</h3><p>下記のエラーが出る。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; python -i train_dcgan.py</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> last):</span><br><span class="line">  File &quot;train_dcgan.py&quot;, line <span class="number">9</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    from <span class="built_in">net</span> import Discriminator</span><br><span class="line">  File &quot;D:\Works\Python\Envs\chainer\chainer\examples\dcgan\<span class="built_in">net</span>.py&quot;, line <span class="number">5</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    from chainer import backend</span><br><span class="line"><span class="function">ImportError: <span class="title">cannot</span> <span class="title">import</span> <span class="title">name</span> &#x27;<span class="title">backend</span>&#x27;</span></span><br></pre></td></tr></table></figure><p>理由としては、現時点(2018/10/21)でのgithubのリポジトリがChainerの<strong>v5.0</strong>へ移行し始めている。<br>その過程でI/Fに下記の変更がはいった模様。</p><p>要するに、 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> chainer <span class="keyword">import</span> backends </span><br></pre></td></tr></table></figure><p>が </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> chainer <span class="keyword">import</span> backend </span><br></pre></td></tr></table></figure><p>こうなったと。<br>で、<strong>pip</strong>からインストールしたchainerは </p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; python -m pip freeze chainer</span><br><span class="line">certifi==<span class="number">2018</span>.<span class="number">10</span>.<span class="number">15</span></span><br><span class="line">chainer==<span class="number">4</span>.<span class="number">5</span>.<span class="number">0</span></span><br><span class="line">colorama==<span class="number">0</span>.<span class="number">3</span>.<span class="number">9</span></span><br><span class="line">cupy==<span class="number">4</span>.<span class="number">5</span>.<span class="number">0</span></span><br><span class="line">fastrlock==<span class="number">0</span>.<span class="number">4</span></span><br><span class="line">filelock==<span class="number">3</span>.<span class="number">0</span>.<span class="number">9</span></span><br><span class="line">isort==<span class="number">4</span>.<span class="number">3</span>.<span class="number">4</span></span><br><span class="line">lazy-object-proxy==<span class="number">1</span>.<span class="number">3</span>.<span class="number">1</span></span><br><span class="line">mccabe==<span class="number">0</span>.<span class="number">6</span>.<span class="number">1</span></span><br><span class="line">numpy==<span class="number">1</span>.<span class="number">15</span>.<span class="number">2</span></span><br><span class="line">protobuf==<span class="number">3</span>.<span class="number">6</span>.<span class="number">1</span></span><br><span class="line">six==<span class="number">1</span>.<span class="number">11</span>.<span class="number">0</span></span><br><span class="line">typed-ast==<span class="number">1</span>.<span class="number">1</span>.<span class="number">0</span></span><br><span class="line">wincertstore==<span class="number">0</span>.<span class="number">2</span></span><br></pre></td></tr></table></figure><p>となっており、ずれている、というわけです。<br>なので、githubのブランチを<strong>v4</strong>に変更して実行するのが正解。</p><h3 id="PIL-がない"><a href="#PIL-がない" class="headerlink" title="PIL がない"></a>PIL がない</h3><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; python -i train_dcgan.py</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> last):</span><br><span class="line">  File &quot;train_dcgan.py&quot;, line <span class="number">14</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    from visualize import out_generated_image</span><br><span class="line">  File &quot;D:\Works\Python\Envs\chainer\chainer\examples\dcgan\visualize.py&quot;, line <span class="number">6</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    from PIL import Image</span><br><span class="line"><span class="function">ModuleNotFoundError: <span class="title">No</span> <span class="title">module</span> <span class="title">named</span> &#x27;<span class="title">PIL</span></span></span><br></pre></td></tr></table></figure><p>なので、<strong>Pillow</strong>をインストール。<br>いつも、<strong>PIL</strong>をインストールしようとするけど、そういう名前のパッケージはないのね。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; python -m pip install Pillow</span><br><span class="line">Collecting Pillow</span><br><span class="line">  Downloading https://files.pythonhosted.org/packages/bd/<span class="number">39</span>/c76eaf781343162bdb1cf4854cb3bd5947a87ee44363e5acd6c48d69c4a1/Pillow-<span class="number">5</span>.<span class="number">3</span>.<span class="number">0</span>-cp36-cp36m-win_amd64.whl (<span class="number">1</span>.<span class="number">6</span>MB)</span><br><span class="line">    <span class="number">100</span>% |████████████████████████████████| <span class="number">1</span>.<span class="number">6</span>MB <span class="number">975</span>kB/s</span><br><span class="line">Installing collected packages: Pillow</span><br><span class="line">Successfully installed Pillow-<span class="number">5</span>.<span class="number">3</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="CUDAが使えない"><a href="#CUDAが使えない" class="headerlink" title="CUDAが使えない"></a>CUDAが使えない</h3><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; python -i train_dcgan.py -g <span class="number">0</span></span><br><span class="line"><span class="function">GPU: 0</span></span><br><span class="line"><span class="function"># <span class="title">Minibatch</span>-<span class="title">size</span>: 50</span></span><br><span class="line"><span class="function"># <span class="title">n_hidden</span>: 100</span></span><br><span class="line"><span class="function"># <span class="title">epoch</span>: 1000</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">Works</span>\<span class="title">Python</span>\<span class="title">Envs</span>\<span class="title">chainer</span>\<span class="title">lib</span>\<span class="title">site</span>-<span class="title">packages</span>\<span class="title">chainer</span>\<span class="title">backends</span>\<span class="title">cuda.py</span>:95: <span class="title">UserWarning</span>: <span class="title">cuDNN</span> <span class="title">is</span> <span class="title">not</span> <span class="title">enabled</span>.</span></span><br><span class="line"><span class="function"><span class="title">Please</span> <span class="title">reinstall</span> <span class="title">CuPy</span> <span class="title">after</span> <span class="title">you</span> <span class="title">install</span> <span class="title">cudnn</span></span></span><br><span class="line"><span class="function">(<span class="title">see</span> <span class="title">https</span>://<span class="title">docs</span>-<span class="title">cupy.chainer.org</span>/<span class="title">en</span>/<span class="title">stable</span>/<span class="title">install.html</span>#<span class="title">install</span>-<span class="title">cupy</span>-<span class="title">with</span>-<span class="title">cudnn</span>-<span class="title">and</span>-<span class="title">nccl</span>).</span></span><br><span class="line"><span class="function">  &#x27;<span class="title">cuDNN</span> <span class="title">is</span> <span class="title">not</span> <span class="title">enabled</span>.\<span class="title">n</span>&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>cuDNN</strong>をインストールして、<strong>CuPy</strong>を再インストールしろ、ってエラーです。<br>自分の環境にインストールされているcuDNNを調べて適切なCuPyをインストールします。<br>普通の<strong>CuPy</strong>は削除しなくてもOKでした。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; python -m pip install cupy-cuda92</span><br><span class="line">Collecting cupy-cuda92</span><br><span class="line">  Downloading https://files.pythonhosted.org/packages/<span class="number">1</span>a/<span class="number">23</span>/<span class="number">0</span>a8f34c97486ff7e18c5db9bcd76f62605adcf9b63f6fc247229e5df24b4/cupy_cuda92-<span class="number">4</span>.<span class="number">5</span>.<span class="number">0</span>-cp36-cp36m-win_amd64.whl (<span class="number">231</span>.<span class="number">7</span>MB)</span><br><span class="line">    <span class="number">100</span>% |████████████████████████████████| <span class="number">231</span>.<span class="number">7</span>MB <span class="number">92</span>kB/s</span><br><span class="line">Requirement already satisfied: numpy&gt;=<span class="number">1</span>.<span class="number">9</span>.<span class="number">0</span> <span class="keyword">in</span> d:\works\python\envs\chainer\lib\site-packages (from cupy-cuda92) (<span class="number">1</span>.<span class="number">15</span>.<span class="number">2</span>)</span><br><span class="line">Requirement already satisfied: six&gt;=<span class="number">1</span>.<span class="number">9</span>.<span class="number">0</span> <span class="keyword">in</span> c:\users\takuya\appdata\roaming\python\python36\site-packages (from cupy-cuda92) (<span class="number">1</span>.<span class="number">11</span>.<span class="number">0</span>)</span><br><span class="line">Requirement already satisfied: fastrlock&gt;=<span class="number">0</span>.<span class="number">3</span> <span class="keyword">in</span> d:\works\python\envs\chainer\lib\site-packages (from cupy-cuda92) (<span class="number">0</span>.<span class="number">4</span>)</span><br><span class="line">Installing collected packages: cupy-cuda92</span><br><span class="line">Successfully installed cupy-cuda92-<span class="number">4</span>.<span class="number">5</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure><p>cuDNNは<strong>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\vX.X</strong>に適切に展開されている必要があります。</p>]]></content>
      
      
      <categories>
          
          <category> %e3%83%87%e3%82%a3%e3%83%bc%e3%83%97%e3%83%a9%e3%83%bc%e3%83%8b%e3%83%b3%e3%82%b0 </category>
          
          <category> Chainer </category>
          
          <category> ディープラーニング </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その137 Chainer with CUDA on Anaconda3 for Windowsを使う</title>
      <link href="2018/10/20/3218/"/>
      <url>2018/10/20/3218/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>会社で<strong>Chainer</strong>を使う案件が来ました。まずは環境構築から実施。</p><p><font color="red">2018/11/01 更新<br>仮想環境はcondaを使わない方が良いです。condaの仮想環境ではpipでインストールしたパッケージを全ての環境で共有してしまうからです。<br>正しい仮想環境の作成は<a href="https://taktak.jp/2018/11/01/3613">開発メモ その143 Pythonの仮想環境を正しく使う</a>を参考にして下さい。</font></p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p><strong>Anaconda</strong> はインストール済みであるとします。<br>また、condaの仮想環境は作成済みとします。<br>下記のような感じで作成し、仮想環境に入ります。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda create -n chainer python=<span class="number">3</span>.<span class="number">6</span></span><br><span class="line">conda activate chainer</span><br></pre></td></tr></table></figure><p>仮想環境に入ったら下記のようにして<strong>CuPy</strong>と<strong>Chainer</strong>をインストールします。<br>最後に、GPUとの接続を確認しています。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">(D:\Works\Python\Envs\chainer) C:\Users\TAKUYA&gt;pip install cupy</span><br><span class="line">Collecting cupy</span><br><span class="line">  Downloading https://files.pythonhosted.org/packages/ab/fc/<span class="number">7</span>aee3fe0c2aa7e57de873f35f275b8afb434c091f9b555582418b18a238c/cupy-<span class="number">4</span>.<span class="number">5</span>.<span class="number">0</span>.tar.gz (<span class="number">2</span>.<span class="number">1</span>MB)</span><br><span class="line">    <span class="number">100</span>% |████████████████████████████████| <span class="number">2</span>.<span class="number">1</span>MB <span class="number">2</span>.<span class="number">2</span>MB/s</span><br><span class="line">Requirement already satisfied: numpy&gt;=<span class="number">1</span>.<span class="number">9</span>.<span class="number">0</span> <span class="keyword">in</span> d:\works\python\envs\chainer\lib\site-packages (from cupy) (<span class="number">1</span>.<span class="number">15</span>.<span class="number">2</span>)</span><br><span class="line">Requirement already satisfied: six&gt;=<span class="number">1</span>.<span class="number">9</span>.<span class="number">0</span> <span class="keyword">in</span> c:\users\takuya\appdata\roaming\python\python36\site-packages (from cupy) (<span class="number">1</span>.<span class="number">11</span>.<span class="number">0</span>)</span><br><span class="line">Collecting fastrlock&gt;=<span class="number">0</span>.<span class="number">3</span> (from cupy)</span><br><span class="line">  Downloading https://files.pythonhosted.org/packages/<span class="number">8</span>f/ff/<span class="number">6777</span>b85fdbc6efd572a2b713e044c29f5f01ca8b1c74f8d94b427bac60c3/fastrlock-<span class="number">0</span>.<span class="number">4</span>.tar.gz (<span class="number">47</span>kB)</span><br><span class="line">    <span class="number">100</span>% |████████████████████████████████| <span class="number">51</span>kB <span class="number">2</span>.<span class="number">2</span>MB/s</span><br><span class="line">Building wheels <span class="keyword">for</span> collected packages: cupy, fastrlock</span><br><span class="line">  Running setup.py bdist_wheel <span class="keyword">for</span> cupy ... done</span><br><span class="line">  Stored <span class="keyword">in</span> directory: C:\Users\TAKUYA\AppData\Local\pip\Cache\wheels\<span class="number">28</span>\<span class="number">7</span>e\d8\c2c115fd4d5377490c8679258673630e53df1de49a6aa522ad</span><br><span class="line">  Running setup.py bdist_wheel <span class="keyword">for</span> fastrlock ... done</span><br><span class="line">  Stored <span class="keyword">in</span> directory: C:\Users\TAKUYA\AppData\Local\pip\Cache\wheels\<span class="number">73</span>\<span class="number">2</span>b\fe\<span class="number">8</span>bdf21b8ebdc58dfafa3a0935767d2ae9c8f68e49d04c5a190</span><br><span class="line">Successfully built cupy fastrlock</span><br><span class="line">Installing collected packages: fastrlock, cupy</span><br><span class="line">Successfully installed cupy-<span class="number">4</span>.<span class="number">5</span>.<span class="number">0</span> fastrlock-<span class="number">0</span>.<span class="number">4</span></span><br><span class="line"></span><br><span class="line">(D:\Works\Python\Envs\chainer) C:\Users\TAKUYA&gt;pip install chainer</span><br><span class="line">Collecting chainer</span><br><span class="line">  Downloading https://files.pythonhosted.org/packages/fc/ae/<span class="number">5</span>b08a1717187ef98127b5d68ec700009b9c8a918b40319813e3e89f2254f/chainer-<span class="number">4</span>.<span class="number">5</span>.<span class="number">0</span>.tar.gz (<span class="number">402</span>kB)</span><br><span class="line">    <span class="number">100</span>% |████████████████████████████████| <span class="number">409</span>kB <span class="number">8</span>.<span class="number">5</span>MB/s</span><br><span class="line">Collecting filelock (from chainer)</span><br><span class="line">  Downloading https://files.pythonhosted.org/packages/b4/fe/<span class="number">5</span>ca16d167849b980925d3bd706cda266c7435dcf21675c546374da207654/filelock-<span class="number">3</span>.<span class="number">0</span>.<span class="number">9</span>-py3-none-any.whl</span><br><span class="line">Requirement already satisfied: numpy&gt;=<span class="number">1</span>.<span class="number">9</span>.<span class="number">0</span> <span class="keyword">in</span> d:\works\python\envs\chainer\lib\site-packages (from chainer) (<span class="number">1</span>.<span class="number">15</span>.<span class="number">2</span>)</span><br><span class="line">Collecting protobuf&gt;=<span class="number">3</span>.<span class="number">0</span>.<span class="number">0</span> (from chainer)</span><br><span class="line">  Downloading https://files.pythonhosted.org/packages/e8/df/d606d07cff0fc8d22abcc54006c0247002d11a7f2d218eb008d48e76851d/protobuf-<span class="number">3</span>.<span class="number">6</span>.<span class="number">1</span>-cp36-cp36m-win_amd64.whl (<span class="number">1</span>.<span class="number">1</span>MB)</span><br><span class="line">    <span class="number">100</span>% |████████████████████████████████| <span class="number">1</span>.<span class="number">1</span>MB <span class="number">1</span>.<span class="number">9</span>MB/s</span><br><span class="line">Requirement already satisfied: six&gt;=<span class="number">1</span>.<span class="number">9</span>.<span class="number">0</span> <span class="keyword">in</span> c:\users\takuya\appdata\roaming\python\python36\site-packages (from chainer) (<span class="number">1</span>.<span class="number">11</span>.<span class="number">0</span>)</span><br><span class="line">Requirement already satisfied: cupy&lt;<span class="number">5</span>.<span class="number">0</span>.<span class="number">0</span>,&gt;=<span class="number">4</span>.<span class="number">4</span>.<span class="number">0</span> <span class="keyword">in</span> d:\works\python\envs\chainer\lib\site-packages (from chainer) (<span class="number">4</span>.<span class="number">5</span>.<span class="number">0</span>)</span><br><span class="line">Requirement already satisfied: setuptools <span class="keyword">in</span> d:\works\python\envs\chainer\lib\site-packages (from protobuf&gt;=<span class="number">3</span>.<span class="number">0</span>.<span class="number">0</span>-&gt;chainer) (<span class="number">40</span>.<span class="number">4</span>.<span class="number">3</span>)</span><br><span class="line">Requirement already satisfied: fastrlock&gt;=<span class="number">0</span>.<span class="number">3</span> <span class="keyword">in</span> d:\works\python\envs\chainer\lib\site-packages (from cupy&lt;<span class="number">5</span>.<span class="number">0</span>.<span class="number">0</span>,&gt;=<span class="number">4</span>.<span class="number">4</span>.<span class="number">0</span>-&gt;chainer) (<span class="number">0</span>.<span class="number">4</span>)</span><br><span class="line">Building wheels <span class="keyword">for</span> collected packages: chainer</span><br><span class="line">  Running setup.py bdist_wheel <span class="keyword">for</span> chainer ... done</span><br><span class="line">  Stored <span class="keyword">in</span> directory: C:\Users\TAKUYA\AppData\Local\pip\Cache\wheels\<span class="number">4</span>f\a5\e6\b0cbcc4cc1daeaab566096480d5b9aed9106de601daf1006f8</span><br><span class="line">Successfully built chainer</span><br><span class="line">Installing collected packages: filelock, protobuf, chainer</span><br><span class="line">Successfully installed chainer-<span class="number">4</span>.<span class="number">5</span>.<span class="number">0</span> filelock-<span class="number">3</span>.<span class="number">0</span>.<span class="number">9</span> protobuf-<span class="number">3</span>.<span class="number">6</span>.<span class="number">1</span></span><br><span class="line"></span><br><span class="line">(D:\Works\Python\Envs\chainer) C:\Users\TAKUYA&gt;python -c &quot;import chainer; <span class="built_in">print</span>(chainer.cuda.available)&quot;</span><br><span class="line">True</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> %e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%e8%a8%80%e8%aa%9e </category>
          
          <category> Python </category>
          
          <category> %e3%83%87%e3%82%a3%e3%83%bc%e3%83%97%e3%83%a9%e3%83%bc%e3%83%8b%e3%83%b3%e3%82%b0 </category>
          
          <category> gpupu </category>
          
          <category> python-2 </category>
          
          <category> Chainer </category>
          
          <category> ディープラーニング </category>
          
          <category> CUDA </category>
          
          <category> Anaconda </category>
          
          <category> GPUPU </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その136 Windows 10 Ver1803で起動しなくなったCentOS on Hyper-Vを復旧する</title>
      <link href="2018/10/13/3201/"/>
      <url>2018/10/13/3201/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>Windows 10 April 2018 Update (Ver.1803)</strong> のマシンにおいて、Hyper-V上のLinux仮想マシンが起動しない現象が発生した。<br>こんな感じになります。</p><p><a href="../../../../public/2018/10/01.png"><img src="../../../../public/2018/10/01-1024x859.png"></a><br> 具体的に起動しないマシンは、</p><ol><li>1803で新規に作成したマシン (世代1で作成)</li><li>1803より前の環境で作成し、1803にVHDをコピーして再作成したマシン (世代1で作成)</li></ol><p>という条件である。<br>要するに世代1で作成するのが不味かったのだが、既存の資産が動いているレガシーなLinuxだとそうも言っていられない。</p><p>これが会社のマシンで起こり、自宅の環境でも再現してしまったので、解決策を模索した。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p>Google先生に聞いても、この現象に遭遇している人がいなかった。<br>なので、自分で探すこと1週間。解決のきっかけに気づいたのは、イベントビューアを見ていたときである。</p><p><a href="../../../../public/2018/10/00.png"><img src="../../../../public/2018/10/00-1024x763.png"></a> <strong>Microsoft-Windows-Hyper-V-Worker-Admin</strong> に奇妙なログが記載されていた。</p><blockquote><p>仮想マシン %1 でデバイス %3 を読み込むことができません。相互にサポートされているプロトコル バージョンがありません。サーバー バージョンは %4 で、クライアント バージョンは %5 です (仮想マシン ID %2)。</p></blockquote><p>どうも、問題のマシンを立ち上げた時に記録されている模様。<br>これを見て思ったのは、グラフィック系統のデバイスが正しく読み込まれていないから、起動時におかしな画面に陥るのでは?と推測。<br>だから、起動時にグラフィック表示をなくせば起動できるのでは?と予想。</p><p>試したところ、ビンゴでした。<br>下記のOSは <strong>CentOS 6.10</strong> ですが、手順はどのOSでも似たようなものかと。</p><h3 id="1-起動"><a href="#1-起動" class="headerlink" title="1. 起動"></a>1. 起動</h3><p>下記の画面でキーを押下して、メニューに入ります。</p><p><a href="../../../../public/2018/10/02.png"><img src="../../../../public/2018/10/02.png"></a></p><h3 id="2-GRUB"><a href="#2-GRUB" class="headerlink" title="2. GRUB"></a>2. GRUB</h3><p>下記のメニューが表示されたら <strong>a</strong> を押下して、カーネルの引数を編集する画面に入ります。</p><p><a href="../../../../public/2018/10/04.png"><img src="../../../../public/2018/10/04.png"></a></p><h3 id="3-カーネル引数の編集"><a href="#3-カーネル引数の編集" class="headerlink" title="3. カーネル引数の編集"></a>3. カーネル引数の編集</h3><p>OSの状態によって評される文字列が異なります。<br>例えば、下記はOSをインストールした直後になります。</p><p><a href="../../../../public/2018/10/05.png"><img src="../../../../public/2018/10/05.png"></a></p><p>下記はOSをインストールして、初期ユーザの設定が終わった以降になります。</p><p><a href="../../../../public/2018/10/05-2.png"><img src="../../../../public/2018/10/05-2.png"></a></p><p>どちらでも共通に存在する <strong>rhgb quiet</strong> を削除し、Enterキーを押下し、ブートを再開します。</p><p><a href="../../../../public/2018/10/06.png"><img src="../../../../public/2018/10/06.png"></a></p><h3 id="4-無事に起動"><a href="#4-無事に起動" class="headerlink" title="4. 無事に起動"></a>4. 無事に起動</h3><p>一瞬、画面が乱れた問題になった画面が表示されますが、少し待つとブートが継続されます。</p><p><a href="../../../../public/2018/10/99.png"><img src="../../../../public/2018/10/99-1024x844.png"></a></p><h3 id="5-永続化"><a href="#5-永続化" class="headerlink" title="5. 永続化"></a>5. 永続化</h3><p>ここまでの方法はその場限りで再起動すれば戻ってしまいます。<br>なので、GRUBの設定ファイルを編集することで設定を永続化します。<br>無事にログインしたら、シェルから設定ファイルを編集します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi /etc/grub.conf</span><br></pre></td></tr></table></figure><p>編集ファイルを開くと下記のような状態です。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># grub.conf generated by anaconda</span><br><span class="line">#</span><br><span class="line"># Note that you do not have to rerun grub after making changes to this file</span><br><span class="line"># NOTICE:  You have a &#x2F;boot partition.  This means that</span><br><span class="line">#          all kernel and initrd paths are relative to &#x2F;boot&#x2F;, eg.</span><br><span class="line">#          root (hd0,0)</span><br><span class="line">#          kernel &#x2F;vmlinuz-version ro root&#x3D;&#x2F;dev&#x2F;mapper&#x2F;VolGroup-lv_root</span><br><span class="line">#          initrd &#x2F;initrd-[generic-]version.img</span><br><span class="line">#boot&#x3D;&#x2F;dev&#x2F;sda</span><br><span class="line">default&#x3D;0</span><br><span class="line">timeout&#x3D;5</span><br><span class="line">splashimage&#x3D;(hd0,0)&#x2F;grub&#x2F;splash.xpm.gz</span><br><span class="line">hiddenmenu</span><br><span class="line">title CentOS 6 (2.6.32-754.el6.x86_64)</span><br><span class="line">        root (hd0,0)</span><br><span class="line">        kernel &#x2F;vmlinuz-2.6.32-754.el6.x86_64 ro root&#x3D;&#x2F;dev&#x2F;mapper&#x2F;VolGroup-lv_root rd_NO_LUKS LANG&#x3D;en_US.UTF-8 rd_NO_MD rd_LVM_LV&#x3D;VolGroup&#x2F;lv_swap SYSFONT&#x3D;latarcyrheb-sun16 rd_LVM_LV&#x3D;VolGroup&#x2F;lv_root  KEYBOARDTYPE&#x3D;pc KEYTABLE&#x3D;us rd_NO_DM rhgb quiet</span><br><span class="line">        initrd &#x2F;initramfs-2.6.32-754.el6.x86_64.img</span><br></pre></td></tr></table></figure><p>これを下記のように編集します。<br>わかりにくいですが、先述のように、<strong>rhgb quiet</strong>を削除するだけです。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># grub.conf generated by anaconda</span><br><span class="line">#</span><br><span class="line"># Note that you do not have to rerun grub after making changes to this file</span><br><span class="line"># NOTICE:  You have a /boot partition.  This means that</span><br><span class="line">#          all kernel and initrd paths are relative to /boot/, eg.</span><br><span class="line">#          root (hd0,0)</span><br><span class="line">#          kernel /vmlinuz-version ro root=/dev/mapper/VolGroup-lv_root</span><br><span class="line">#          initrd /initrd-[generic-]version.img</span><br><span class="line">#boot=/dev/sda</span><br><span class="line">default=0</span><br><span class="line">timeout=5</span><br><span class="line">splashimage=(hd0,0)/grub/splash.xpm.gz</span><br><span class="line">hiddenmenu</span><br><span class="line">title CentOS 6 (2.6.32-754.el6.x86_64)</span><br><span class="line">        root (hd0,0)</span><br><span class="line"><span class="deletion">-        kernel /vmlinuz-2.6.32-754.el6.x86_64 ro root=/dev/mapper/VolGroup-lv_root rd_NO_LUKS LANG=en_US.UTF-8 rd_NO_MD rd_LVM_LV=VolGroup/lv_swap SYSFONT=latarcyrheb-sun16 rd_LVM_LV=VolGroup/lv_root  KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM rhgb quiet</span></span><br><span class="line"><span class="addition">+        kernel /vmlinuz-2.6.32-754.el6.x86_64 ro root=/dev/mapper/VolGroup-lv_root rd_NO_LUKS LANG=en_US.UTF-8 rd_NO_MD rd_LVM_LV=VolGroup/lv_swap SYSFONT=latarcyrheb-sun16 rd_LVM_LV=VolGroup/lv_root  KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM</span></span><br><span class="line">        initrd /initramfs-2.6.32-754.el6.x86_64.img</span><br></pre></td></tr></table></figure><p>これで設定が永続化されます。</p><p>ただし、これらを行っても、たまに起動に失敗することがあります。<br>その時はリセットボタンで再度ブートをやり直します。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> Linux </category>
          
          <category> Hyper-V </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その135 OpenCVに組み込んだlibjpeg-turbo 1.5.3と2.0.0を比較</title>
      <link href="2018/09/09/3172/"/>
      <url>2018/09/09/3172/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>前回の続き。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://taktak.jp/2018/09/09/3159" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=taktak.jp"></img><div class="hbc-site-name">taktak.jp</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">開発メモ その134 OpenCVにlibjpeg-turboをリンクして性能比較 – A certain engineer &quot;COMPLEX&quot;</div><div class="hbc-url">https://taktak.jp/2018/09/09/3159</div></div></div></div></a></div></div><p><strong>libjpeg-turbo</strong>に2.0.0が登場しているため、1.5.3との性能を比較します。</p><h1 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h1><p>条件は前回とほとんど変わりません。<br>違うのはリンクするlibjpeg-turboが2.0.0になっただけです。</p><ol><li>Intel Cire i7-8700 (3.20GHz)</li><li>32.0GB</li><li>Visual Studio 2017 Update 7 (15.7)</li><li>OpenCV 3.2.0 (動的リンク、world形式でビルド。IPP、CUDAは除外)</li><li>libjpeg-turbo 2.0.0</li><li>libjpeg-turbo.libをリンク</li></ol><h1 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h1><p>実験も前回と同様、3種の画像、エンコードとデコードを計測します。<br>計測対象は下記。</p><ol><li>libjpeg-turbo 2.0.0 自家製ビルドOpenCV</li><li>libjpeg-turbo 1.5.3 自家製ビルドOpenCV</li></ol><p>また、実験ソースも前回と変わりません。<br>生成された<strong>opencv_world320.dll</strong>を差し替えるだけです。</p><h1 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h1><p>実験結果は下記になります。<br>速度はいずれも平均速度です。</p><h3 id="Decode"><a href="#Decode" class="headerlink" title="Decode"></a>Decode</h3><table><thead><tr><th></th><th>640x360</th><th>1280x720</th><th>2560x1440</th></tr></thead><tbody><tr><td>2.0.0</td><td>1.05651 ms</td><td>4.67864 ms</td><td>25.9939 ms</td></tr><tr><td>1.5.3</td><td>1.16508 ms</td><td>5.11916 ms</td><td>28.0259 ms</td></tr><tr><td>Improvement</td><td>+10%</td><td>+9%</td><td>+7%</td></tr></tbody></table><h3 id="Encode"><a href="#Encode" class="headerlink" title="Encode"></a>Encode</h3><table><thead><tr><th></th><th>640x360</th><th>1280x720</th><th>2560x1440</th></tr></thead><tbody><tr><td>2.0.0</td><td>1.15707 ms</td><td>4.3723 ms</td><td>17.9123 ms</td></tr><tr><td>1.5.3</td><td>1.37863 ms</td><td>5.03018 ms</td><td>20.6569 ms</td></tr><tr><td>Improvement</td><td>+19%</td><td>+15%</td><td>+15%</td></tr></tbody></table><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>劇的な改善はありませんが、着実に性能が向上しています。</p>]]></content>
      
      
      <categories>
          
          <category> マルチメディア </category>
          
          <category> OpenCV </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>libjpeg-turbo-encode-2.0.0</title>
      <link href="2018/09/09/3174/"/>
      <url>2018/09/09/3174/</url>
      
        <content type="html"><![CDATA[<p>[[“”,”640x360”,”1280x720”,”2560x1440”],[“2.0.0”,”1.15707 ms”,”4.3723 ms”,”17.9123 ms”],[“1.5.3”,”1.37863 ms”,”5.03018 ms”,”20.6569 ms”],[“Improvement”,”+19%”,”+15%”,”+15%”]]</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>libjpeg-turbo-decode-2.0.0</title>
      <link href="2018/09/09/3173/"/>
      <url>2018/09/09/3173/</url>
      
        <content type="html"><![CDATA[<p>[[“”,”640x360”,”1280x720”,”2560x1440”],[“2.0.0”,”1.05651 ms”,”4.67864 ms”,”25.9939 ms”],[“1.5.3”,”1.16508 ms”,”5.11916 ms”,”28.0259 ms”],[“Improvement”,”+10%”,”+9%”,”+7%”]]</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その134 OpenCVにlibjpeg-turboをリンクして性能比較</title>
      <link href="2018/09/09/3159/"/>
      <url>2018/09/09/3159/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>掲題そのまま。<br>結構、このネタはそこら辺に転がっているんだけど、</p><ol><li>計測していない</li><li>エンコードだけ計測</li></ol><p>みたいなネタでげんなりしたので自分で実施してみました。</p><p>実験ソースは下記になります </p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/takuya-takeuchi/Demo/tree/master/libjpeg-turbo-decode" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/6241854?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">takuya-takeuchi/Demo</div><div class="hbc-url">https://github.com/takuya-takeuchi/Demo/tree/master/libjpeg-turbo-decode</div><div class="hbc-description">Sample source code for Demonstration, Experiment and Test - takuya-takeuchi/Demo</div></div></div></div></a></div></div><h1 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h1><p>条件は下記になります。</p><ol><li>Intel Cire i7-8700 (3.20GHz)</li><li>32.0GB</li><li>Visual Studio 2017 Update 7 (15.7)</li><li>OpenCV 3.2.0 (動的リンク、world形式でビルド。IPP、CUDAは除外)</li><li>libjpeg-turbo 1.5.3</li><li>libjpeg-turbo.libをリンク</li></ol><p>になります。<br>また、<strong>libjpeg.lib</strong>と<strong>libjpeg-turbo.lib</strong>のどちらをリンクするかで意見が割れていますが、ここでは<strong>libjpeg-turbo.lib</strong>をリンクしました。</p><p>OpenCVのビルドのためのCMakeのコマンドは下記のようになります。</p><h3 id="libjpeg-turbo-有効"><a href="#libjpeg-turbo-有効" class="headerlink" title="libjpeg-turbo 有効"></a>libjpeg-turbo 有効</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ cmake -G &quot;Visual Studio <span class="number">15</span> <span class="number">2017</span> Win64&quot; ^</span><br><span class="line">        -D CMAKE_BUILD_TYPE=Release ^</span><br><span class="line">        -D BUILD_SHARED_LIBS=ON ^</span><br><span class="line">        -D BUILD_opencv_world=ON ^</span><br><span class="line">        -D WITH_CUDA=OFF ^</span><br><span class="line">        -D WITH_IPP=OFF ^</span><br><span class="line">        -D WITH_JPEG=ON ^</span><br><span class="line">        -D BUILD_JPEG=OFF ^</span><br><span class="line">        -D JPEG_INCLUDE_DIR=&quot;&lt;libjpeg-turboのディレクトリ&gt;&quot; ^</span><br><span class="line">        -D JPEG_LIBRARY=&quot;&lt;libjpeg-turbo.libのフルパス&quot; ^</span><br><span class="line">        ..</span><br></pre></td></tr></table></figure><h3 id="libjpeg-turbo-無効"><a href="#libjpeg-turbo-無効" class="headerlink" title="libjpeg-turbo 無効"></a>libjpeg-turbo 無効</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cmake -G &quot;Visual Studio <span class="number">15</span> <span class="number">2017</span> Win64&quot; ^</span><br><span class="line">        -D CMAKE_BUILD_TYPE=Release ^</span><br><span class="line">        -D BUILD_SHARED_LIBS=ON ^</span><br><span class="line">        -D BUILD_opencv_world=ON ^</span><br><span class="line">        -D WITH_CUDA=OFF ^</span><br><span class="line">        -D WITH_IPP=OFF ^</span><br><span class="line">        ..</span><br></pre></td></tr></table></figure><h1 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h1><p>実験は、</p><ol><li>libjpeg-turbo有効の自家製ビルドOpenCV</li><li>libjpeg-turbo無効の自家製ビルドOpenCV</li><li>公式のOpenCVバイナリ</li></ol><p>に対して比較します。<br>また、画像は、</p><ol><li>640x360</li><li>1280x720</li><li>2560x1440</li></ol><p>の3種類を用意し、それぞれのデータのデコードとエンコードを1000回繰り返します。<br>実験ソースは下記です。<br>ベースとして、下記のページを参考にさせていただきました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://unanancyowen.com/opencv-with-libjpeg-turbo/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=unanancyowen.com"></img><div class="hbc-site-name">Summary?Blog</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="http://unanancyowen.com/wp-content/uploads/opencv_logo.png"></img></div><div class="hbc-text"><div class="hbc-title">Speed-Up JPEG Encode/Decode Processing for OpenCV using libjpeg-turbo |</div><div class="hbc-url">http://unanancyowen.com/opencv-with-libjpeg-turbo/</div></div></div></div></a></div></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// libjpeg-turbo-decode.cpp : アプリケーションのエントリ ポイントを定義します。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEST_COUNT 1000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Build Information</span></span><br><span class="line">    <span class="comment">//std::cout &lt;&lt; cv::getBuildInformation() &lt;&lt; std::endl;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">std</span>::ifstream <span class="title">f</span><span class="params">(argv[<span class="number">1</span>], <span class="built_in">std</span>::ios::binary)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!f.is_open())</span><br><span class="line">        <span class="keyword">return</span>  <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    f.seekg(<span class="number">0</span>, <span class="built_in">std</span>::ios::end);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> length = f.tellg();</span><br><span class="line">    f.seekg(<span class="number">0</span>, <span class="built_in">std</span>::ios::beg);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">auto</span> buffer = <span class="keyword">new</span> <span class="keyword">char</span>[length];</span><br><span class="line">    f.read(buffer, length);</span><br><span class="line">    f.close();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">auto</span> data = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;(buffer, buffer + length);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Test</span></span><br><span class="line">    int64 start = <span class="number">0</span>;</span><br><span class="line">    int64 end = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> avg = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    start = cv::getTickCount();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i = <span class="number">0</span>; i &lt; TEST_COUNT; i++)</span><br><span class="line">        <span class="keyword">auto</span> ret = cv::imdecode(data, cv::IMREAD_UNCHANGED);</span><br><span class="line">    end = cv::getTickCount();</span><br><span class="line"></span><br><span class="line">    total = (end - start) * <span class="number">1000</span> / cv::getTickFrequency();</span><br><span class="line">    avg = total / TEST_COUNT;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;[Decode]&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\tTotal = &quot;</span> &lt;&lt; total &lt;&lt; <span class="string">&quot;[ms], Avg = &quot;</span> &lt;&lt; avg &lt;&lt; <span class="string">&quot;[ms]&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">auto</span> img = cv::imdecode(data, cv::IMREAD_UNCHANGED);</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;uchar&gt; <span class="title">buf</span><span class="params">( img.rows * img.cols )</span></span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; params = &#123; cv::IMWRITE_JPEG_QUALITY, <span class="number">95</span> &#125;;</span><br><span class="line"></span><br><span class="line">    start = cv::getTickCount();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i = <span class="number">0</span>; i &lt; TEST_COUNT; i++)</span><br><span class="line">        cv::imencode(<span class="string">&quot;.jpg&quot;</span>, img, buf, params);</span><br><span class="line">    end = cv::getTickCount();</span><br><span class="line"></span><br><span class="line">    total = (end - start) * <span class="number">1000</span> / cv::getTickFrequency();</span><br><span class="line">    avg = total / TEST_COUNT;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;[Encode]&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\tTotal = &quot;</span> &lt;&lt; total &lt;&lt; <span class="string">&quot;[ms], Avg = &quot;</span> &lt;&lt; avg &lt;&lt; <span class="string">&quot;[ms]&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h1><p>実験結果は下記になります。<br>速度はいずれも平均速度です。</p><h3 id="Decode"><a href="#Decode" class="headerlink" title="Decode"></a>Decode</h3><table><thead><tr><th></th><th>640x360</th><th>1280x720</th><th>2560x1440</th></tr></thead><tbody><tr><td>Enable libjpeg-turbo</td><td>1.16508 ms</td><td>5.11916 ms</td><td>28.0259 ms</td></tr><tr><td>Disable libjpeg-turbo</td><td>2.15667 ms</td><td>9.02238 ms</td><td>40.7576 ms</td></tr><tr><td>original binary</td><td>2.44517 ms</td><td>10.1288 ms</td><td>46.2685 ms</td></tr></tbody></table><h3 id="Encode"><a href="#Encode" class="headerlink" title="Encode"></a>Encode</h3><table><thead><tr><th></th><th>640x360</th><th>1280x720</th><th>2560x1440</th></tr></thead><tbody><tr><td>Enable libjpeg-turbo</td><td>1.37863 ms</td><td>5.03018 ms</td><td>20.6569 ms</td></tr><tr><td>Disable libjpeg-turbo</td><td>5.18752 ms</td><td>19.4827 ms</td><td>83.4678 ms</td></tr><tr><td>original binary</td><td>5.69063 ms</td><td>21.4501 ms</td><td>91.6039 ms</td></tr></tbody></table><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>エンコード性能は著しい改善を見せており、3.5-4.0倍の速度をたたき出しています。<br>デコードも、1.6-2.2倍の速度と良い感じです。</p><p>高々数十msの違いかもしれませんが、OpenCVのVideoCapture等でWebカメラをキャプチャした際、MotionJPEG形式ならデコード処理がそのままfpsに跳ね返ってきます。<br>1280X720で従来20ms要していたということは、30fpsのカメラでも事実上、1フレームに33ms+20msの53ms、つまり20fps程度しか性能が出なかったことになります。<br>これが5msになれば、33ms+5msの38msなら26fpsと改善できます。</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/libjpeg-turbo-decode">https://github.com/takuya-takeuchi/Demo/tree/master/libjpeg-turbo-decode</a></p>]]></content>
      
      
      <categories>
          
          <category> マルチメディア </category>
          
          <category> OpenCV </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>libjpeg-turbo-encode</title>
      <link href="2018/09/09/3165/"/>
      <url>2018/09/09/3165/</url>
      
        <content type="html"><![CDATA[<p>[[“”,”640x360”,”1280x720”,”2560x1440”],[“Enable libjpeg-turbo”,”1.37863 ms”,”5.03018 ms”,”20.6569 ms”],[“Disable libjpeg-turbo”,”5.18752 ms”,”19.4827 ms”,”83.4678 ms”],[“original binary”,”5.69063 ms”,”21.4501 ms”,”91.6039 ms”]]</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>libjpeg-turbo-decode</title>
      <link href="2018/09/09/3163/"/>
      <url>2018/09/09/3163/</url>
      
        <content type="html"><![CDATA[<p>[[“”,”640x360”,”1280x720”,”2560x1440”],[“Enable libjpeg-turbo”,”1.16508 ms”,”5.11916 ms”,”28.0259 ms”],[“Disable libjpeg-turbo”,”2.15667 ms”,”9.02238 ms”,”40.7576 ms”],[“original binary”,”2.44517 ms”,”10.1288 ms”,”46.2685 ms”]]</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その133 Ubuntu 16.04.4でdconf Editorが見つかない</title>
      <link href="2018/09/08/3149/"/>
      <url>2018/09/08/3149/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>何故か<strong>donf Editor</strong>が<strong>Ubuntu Software</strong>から検索しても見つからない件。</p><p><a href="../../../../public/2018/09/notfound.png"><img src="../../../../public/2018/09/notfound.png"></a></p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p>普通に<strong>apt-get</strong>でインストールするだけでした。何時からこうなったの?</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install dconf-editor</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その132 Visual Studio 2017 15.7 に CUDA 9.2 をインストールする</title>
      <link href="2018/09/01/3141/"/>
      <url>2018/09/01/3141/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>CUDA Toolkit</strong>には、Visual Studioと統合される<strong>Visual Studio Integration</strong>が含まれています。<br>しかしながら、このツール、Visual Studioのバージョンをチェックしているのか、2018/09/01現在、最新のCUDA Toolkit、<strong>cuda_9.2.148_win10.exe</strong>でもインストールに失敗します。<br>というのも公式にも対応しているのは、<strong>Visual Studio 2017 15.6</strong>となっており対応していないことがうかがえます。<br>既に、15.8の登場が控えている状況でこれは非常にまずいです。</p><p>ということでその対応。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p>公式のフォーラムでもこの問題は話題になっています。<br>Nvidiaの対応に不満の声が。<br>そんな中、下記のスレッドの**installing CUDA 9.2 with VS2017 integration worked for me this way:**と言う投稿で対応策が提示されました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://devtalk.nvidia.com/default/topic/1035535/cuda-setup-and-installation/cuda-9-2-does-not-work-with-visual-studio-2017-15-7-1/2" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=devtalk.nvidia.com"></img><div class="hbc-site-name">NVIDIA Developer Forums</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://aws1.discourse-cdn.com/nvidia/original/2X/8/8f17cc8f1a724d6ecea8a197a267ec8a05ef1490.png"></img></div><div class="hbc-text"><div class="hbc-title">Cuda 9.2 does NOT work with Visual Studio 2017 15.7.1</div><div class="hbc-url">https://devtalk.nvidia.com/default/topic/1035535/cuda-setup-and-installation/cuda-9-2-does-not-work-with-visual-studio-2017-15-7-1/2</div><div class="hbc-description">When trying to compile CUDA samples the following error occurs:  c:\program files\nvidia gpu computing toolkit\cuda\v9.2\include\crt/host_co…</div></div></div></div></a></div></div><p>要点は、</p><ol><li>cuda_9.2.88_win10.exeをWinRARとかで展開</li><li>CUDAVisualStudioIntegration\CUDAVisualStudioIntegration.nviを書き換える</li><li>setup.exeを実行</li><li>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.2\include\crt\host_config.hを書き換える</li></ol><p>です。<br>私の試した手順だと、</p><ol><li>cuda_9.2.88_win10.exeを実行し、インストーラを起動して最初の画面で待機</li><li>CUDAVisualStudioIntegration.nviを書き換える</li><li>インストール続行</li><li>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.2\include\crt\host_config.hを書き換える</li></ol><p>でOKでした。<br>少し具体的に書くと、</p><h2 id="CUDAVisualStudioIntegration-nvi-を書き換える"><a href="#CUDAVisualStudioIntegration-nvi-を書き換える" class="headerlink" title="CUDAVisualStudioIntegration.nvi を書き換える"></a>CUDAVisualStudioIntegration.nvi を書き換える</h2><p>インストーラを起動してから書き換える場合は、**”%TEMP%\CUDA\CUDAVisualStudioIntegration\CUDAVisualStudioIntegration.nvi**が書き換える対象です。<br>そして、テキストエディタでCUDAVisualStudioIntegration.nviを開き、下記の箇所を削除します。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">custom</span> <span class="attr">phase</span>=<span class="string">&quot;handleExistingNsight&quot;</span> <span class="attr">action</span>=<span class="string">&quot;HandleExistingNsight&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">custom</span> <span class="attr">phase</span>=<span class="string">&quot;detectDisableCallHome&quot;</span> <span class="attr">action</span>=<span class="string">&quot;DetectDisableCallHome&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">msi</span> <span class="attr">platform</span>=<span class="string">&quot;x86&quot;</span> <span class="attr">phase</span>=<span class="string">&quot;NsightMSINoTraffic&quot;</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;&#123;NsightMSI&#125;&#125;&quot;</span> <span class="attr">condition</span>=<span class="string">&quot;NsightMSIActionActiveAndNoTraffic&quot;</span> <span class="attr">installText</span>=<span class="string">&quot;Installing Nsight Visual Studio Edition&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;CUDAINSTALLER&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;DISABLE_NV_CH&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">msi</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">msi</span> <span class="attr">platform</span>=<span class="string">&quot;x86&quot;</span> <span class="attr">phase</span>=<span class="string">&quot;NsightMSITraffic&quot;</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;&#123;NsightMSI&#125;&#125;&quot;</span> <span class="attr">condition</span>=<span class="string">&quot;NsightMSIActionActiveAndTraffic&quot;</span> <span class="attr">installText</span>=<span class="string">&quot;Installing Nsight Visual Studio Edition&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;CUDAINSTALLER&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;DISABLE_NV_CH&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">msi</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">confirm</span> <span class="attr">phase</span>=<span class="string">&quot;Confirm-install&quot;</span> <span class="attr">when</span>=<span class="string">&quot;install&quot;</span> <span class="attr">condition</span>=<span class="string">&quot;NsightMSIActionActive&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileExists</span> <span class="attr">target</span>=<span class="string">&quot;$&#123;&#123;CommonAppData&#125;&#125;\NVIDIA Corporation\Nsight\Nsight_$&#123;&#123;nsightVersion&#125;&#125;_InstallSummary.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">confirm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">standard</span> <span class="attr">phase</span>=<span class="string">&quot;copytemp&quot;</span> <span class="attr">condition</span>=<span class="string">&quot;NsightMSIActionActive&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">copyFile</span> <span class="attr">source</span>=<span class="string">&quot;NVIDIA_Nsight_Visual_Studio_Edition_Win64_5.6.0.18099.msi&quot;</span> <span class="attr">target</span>=<span class="string">&quot;$&#123;&#123;CommonAppData&#125;&#125;\NVIDIA Corporation\Nsight\NVIDIA_Nsight_Visual_Studio_Edition_Win64_5.6.0.18099.msi&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">standard</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">standard</span> <span class="attr">phase</span>=<span class="string">&quot;createStartMenuStortcuts&quot;</span> <span class="attr">condition</span>=<span class="string">&quot;NsightMSIActionActive&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">createShortcutGroup</span> <span class="attr">location</span>=<span class="string">&quot;startMenu&quot;</span> <span class="attr">linkGroup</span>=<span class="string">&quot;$&#123;&#123;NsightProgramGroup&#125;&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">createShortcutLink</span> <span class="attr">location</span>=<span class="string">&quot;startMenu&quot;</span> <span class="attr">targetPath</span>=<span class="string">&quot;$&#123;&#123;CommonAppData&#125;&#125;\NVIDIA Corporation\Nsight\NVIDIA_Nsight_Visual_Studio_Edition_Win64_5.6.0.18099.msi&quot;</span> <span class="attr">linkGroup</span>=<span class="string">&quot;$&#123;&#123;NsightProgramGroup&#125;&#125;&quot;</span> <span class="attr">linkName</span>=<span class="string">&quot;Nsight Redistributable&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">standard</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">custom</span> <span class="attr">phase</span>=<span class="string">&quot;ParseWarningPage&quot;</span> <span class="attr">action</span>=<span class="string">&quot;ReadWarningPage&quot;</span> <span class="attr">condition</span>=<span class="string">&quot;NsightMSIActionActive&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">msi</span> <span class="attr">platform</span>=<span class="string">&quot;x86&quot;</span> <span class="attr">phase</span>=<span class="string">&quot;NVTXMSI&quot;</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;&#123;NVTXMSI&#125;&#125;&quot;</span> <span class="attr">installText</span>=<span class="string">&quot;Installing NVTX&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="host-config-h-を書き換える"><a href="#host-config-h-を書き換える" class="headerlink" title="host_config.h を書き換える"></a>host_config.h を書き換える</h2><p>インストール完了後、<strong>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.2\include\crt\host_config.h</strong>を書き換えます。<br>これを書き換えないと、CUDAを使ってコンパイルする際にエラーが出てコンパイルが停止します。<br>130行目付近の</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> _MSC_VER <span class="meta-string">&lt; 1600 || _MSC_VER &gt; 1913</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">error</span> -- unsupported Microsoft Visual Studio version! Only the versions 2012, 2013, 2015 and 2017 are supported!</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> _MSC_VER == 1600 <span class="comment">/* _MSC_VERION == 1600 */</span></span></span><br></pre></td></tr></table></figure><p>を、下記のようにします。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*#if _MSC_VER &lt; 1600 || _MSC_VER &gt; 1913*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> _MSC_VER &lt; 1600</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">error</span> -- unsupported Microsoft Visual Studio version! Only the versions 2012, 2013, 2015 and 2017 are supported!</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> _MSC_VER == 1600 <span class="comment">/* _MSC_VERION == 1600 */</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> Visual Studio </category>
          
          <category> gpupu </category>
          
          <category> CUDA </category>
          
          <category> GPUPU </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その131 CSliderCtrlの背景色が変更されない</title>
      <link href="2018/08/30/3137/"/>
      <url>2018/08/30/3137/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>MFC</strong>なんかレガシーもいいところですが、仕事である以上使わざるを得ません。<br>そんな中、<strong>CSliderCtrl</strong>の背景色を<strong>CDialog::OnCtlColor</strong>経由で変更したところ、背景色が変わらない問題が発生。</p><p><strong>CWnd::UpdateWindow</strong>や<strong>CWnd::InvalidateRect</strong>を駆使しても効果が無い。<br>なぜ?とネットを彷徨った際の備忘録(今後使う可能性は低いが) ソースは下記になります</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/takuya-takeuchi/Demo/tree/master/MFC1" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/6241854?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">takuya-takeuchi/Demo</div><div class="hbc-url">https://github.com/takuya-takeuchi/Demo/tree/master/MFC1</div><div class="hbc-description">Sample source code for Demonstration, Experiment and Test - takuya-takeuchi/Demo</div></div></div></div></a></div></div><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p><strong>CSliderCtrl</strong>は下記の、少し奇妙な関数を持っています。</p><ul><li><strong>CSliderCtrl::ClearSel</strong></li><li><strong>CSliderCtrl::ClearTics</strong></li><li><strong>CSliderCtrl::SetRange</strong></li><li><strong>CSliderCtrl::SetRangeMax</strong></li><li><strong>CSliderCtrl::SetRangeMin</strong></li></ul><p>これらの関数は最後の引数に <strong>BOOL bRedraw = FALSE</strong> をとります。<br>これらの関数にTRUEを渡すことで背景の更新が可能になります。</p><p><strong>Spy</strong>で確認したのですが、これらの関数は内部で <strong>WM_PAINT</strong>を使っているようです。<br>そのため <strong>CWnd::UpdateWindow</strong> を使って同じ状況を作り出したにもかかわらず、<strong>CWnd::UpdateWindow</strong> は効果が無い。</p><p>この現象に言及した唯一の記事が下記。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://stackoverflow.com/questions/12800581/update-mfcs-csliderctrl" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=stackoverflow.com"></img><div class="hbc-site-name">Stack Overflow</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded"></img></div><div class="hbc-text"><div class="hbc-title">Update MFC&#39;s CSliderCtrl</div><div class="hbc-url">https://stackoverflow.com/questions/12800581/update-mfcs-csliderctrl</div><div class="hbc-description">I am working on a C++ MFC project and bumping in the following. I have a CSliderCtrl on my form which I call MFC_scKINECTANGLE. To make it t…</div></div></div></div></a></div></div><p>上記の関数以外にも、<strong>CWnd::EnableWindow</strong>でも更新が可能だと言っています。<br>しかし、この関数を使う場合は、一度現在のEnable/Disableと反対の値を設定する必要があるため、著しくちらつく欠点があります。</p><p>ですので、最初に紹介した関数を使うことで、ちらつきを押さえて背景色を更新できます。<br>つまり、現在の設定と同じ値を使って更新するのです。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CSliderSampleDlg::OnBnClickedButtonRedraw</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">auto</span> max = <span class="keyword">this</span>-&gt;m_slider.GetRangeMax();</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">auto</span> min = <span class="keyword">this</span>-&gt;m_slider.GetRangeMin();</span><br><span class="line">    <span class="comment">// Set same value to redraw</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;m_slider.SetRange(min, max, TRUE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>後は、SliderをGUIで操作して値を変更することでも背景が更新されますが、コードから変更しないと意味が無いので却下。<br>サンプルは下記のような感じです。</p><p><a href="../../../../public/2018/08/Sample.gif"><img src="../../../../public/2018/08/Sample.gif"></a></p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/MFC1">https://github.com/takuya-takeuchi/Demo/tree/master/MFC1</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> Microsoft Foundation Class </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その130 Windows IoT Core にリモートデバッグ</title>
      <link href="2018/08/16/3126/"/>
      <url>2018/08/16/3126/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>備忘録です。<br>たいしたことないのですが、<strong>Windows IoT Core</strong> 上にデプロイしたアプリをリモートデバッグしようと思い、 <strong>Windows Device Portal</strong> から <strong>Visual Studio Remote Debugger</strong> を立ち上げようとしたら </p><p><a href="../../../../public/2018/08/pi1.png"><img src="../../../../public/2018/08/pi1-1024x495.png"></a></p><p>というエラーが。<br>確かに、デスクトップのWindowsの場合はVisual Studio Remote Debuggerをインストールする必要がありますが、Windows IoT core用のものなぞどこにも見つからず。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p>偶然気づいたのですが、</p><p><strong>「Visual Studioから直接デプロイandデバッグできるんじゃね?」</strong></p><p>と思ったらこれが正解。</p><p>プロジェクトのデバッグ設定から </p><p><a href="../../../../public/2018/08/pi2.png"><img src="../../../../public/2018/08/pi2-1024x624.png"></a></p><p>接続先のアドレスと認証モードを <strong>ユニバーサル (暗号化されていないプロトコル)</strong> に指定してデバッグを開始。<br>時間はかかりますが、これでデバッグが開始されます。</p><p>で、ここでさらに、</p><p><strong>「今のでリモートデバッガーも展開されたんじゃね?」</strong></p><p>と推測し、再度Windows Device Portalに移動しVisual Studio Remote Debuggerを起動すると</p><p> <a href="../../../../public/2018/08/pi3.png"><img src="../../../../public/2018/08/pi3-1024x495.png"></a></p><p>無事に起動。</p><p>これはわかりにくい</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET </category>
          
          <category> IoT </category>
          
          <category> net </category>
          
          <category> Windows IoT </category>
          
          <category> .NET Core </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その129 Raspberry Pi3に.NET Coreをインストール</title>
      <link href="2018/08/06/3122/"/>
      <url>2018/08/06/3122/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>備忘録です。<br><strong>Debian with Raspberry Pi Desktop</strong>にインストールには、リポジトリにはARMのバイナリが用意されていないため<strong>apt-get</strong>が使えません。</p><h1 id="How-to"><a href="#How-to" class="headerlink" title="How to"></a>How to</h1><p><strong>.NET Core 2.1.0 SDK</strong>ですが、下記から<strong>Linux ARM</strong>の<strong>SDK Binaries</strong>をダウンロードします。<br>ARMなので32bitをダウンロードします。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/dotnet/core/blob/master/release-notes/download-archives/2.1.0-download.md" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/9141961?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">dotnet/core</div><div class="hbc-url">https://github.com/dotnet/core/blob/master/release-notes/download-archives/2.1.0-download.md</div><div class="hbc-description">Home repository for .NET Core. Contribute to dotnet/core development by creating an account on GitHub.</div></div></div></div></a></div></div><p>下記のコマンドでダウンロードインストールを行います。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://download.microsoft.com/download/8/8/5/88544F33-836A-49A5-8B67-451C24709A8F/dotnet-sdk-2.1.300-linux-arm.tar.gz</span><br><span class="line">$ mkdir -p <span class="variable">$HOME</span>/dotnet</span><br><span class="line">$ tar zxf dotnet-sdk-2.1.300-linux-arm.tar.gz -C <span class="variable">$HOME</span>/dotnet</span><br><span class="line">$ <span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/dotnet</span><br></pre></td></tr></table></figure><p> インストール後、下記によってインストールができたことを確認できます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet --version</span><br><span class="line">2.1.300</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET </category>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> IoT </category>
          
          <category> net </category>
          
          <category> iot </category>
          
          <category> .NET Core </category>
          
          <category> Raspbian </category>
          
          <category> Raspberry Pi </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その128 子プロセスに対してWM_CLOSEを送る</title>
      <link href="2018/07/22/3109/"/>
      <url>2018/07/22/3109/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>備忘録。<br>C++/C#の連携で、C++アプリから起動したC#アプリを、C++アプリから正常終了させる方法。<br>基本は、</p><ol><li>CreateProcessの戻りのプロセスIDを保持</li><li>終了させる際、プロセスIDからウィンドウハンドルを取得</li><li>PostMessageでWM_CLOSEを送る</li></ol><p>です。</p><p>ソースは下記になります</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/takuya-takeuchi/Demo/tree/master/KillProcessSafetyByHWND" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/6241854?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">takuya-takeuchi/Demo</div><div class="hbc-url">https://github.com/takuya-takeuchi/Demo/tree/master/KillProcessSafetyByHWND</div><div class="hbc-description">Sample source code for Demonstration, Experiment and Test - takuya-takeuchi/Demo</div></div></div></div></a></div></div><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">HWND <span class="title">GetWindowHandle</span><span class="params">(<span class="keyword">const</span> DWORD target_id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> hWnd = GetTopWindow(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (GetWindowLong(hWnd, GWLP_HWNDPARENT) != <span class="number">0</span> || !IsWindowVisible(hWnd))</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        DWORD process_id;</span><br><span class="line">        GetWindowThreadProcessId(hWnd, &amp;process_id);</span><br><span class="line">        <span class="keyword">if</span> (target_id == process_id)</span><br><span class="line">            <span class="keyword">return</span> hWnd;</span><br><span class="line">    &#125; <span class="keyword">while</span> ((hWnd = GetNextWindow(hWnd, GW_HWNDNEXT)) != <span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Launch application</span></span><br><span class="line">    STARTUPINFO si;</span><br><span class="line">    PROCESS_INFORMATION pi;</span><br><span class="line">    ::ZeroMemory(&amp;si, <span class="keyword">sizeof</span>(STARTUPINFO));</span><br><span class="line">    si.cb = <span class="keyword">sizeof</span>(STARTUPINFO);</span><br><span class="line">    si.dwFlags = STARTF_USESHOWWINDOW;</span><br><span class="line">    si.wShowWindow = SW_SHOWNORMAL;</span><br><span class="line">    ::CreateProcessW(<span class="string">L&quot;Wpf.exe&quot;</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>, FALSE, <span class="number">0</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>, &amp;si, &amp;pi);</span><br><span class="line"></span><br><span class="line">    _tprintf(_T(<span class="string">&quot;Terminate application: %d\n&quot;</span>), pi.dwProcessId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Wait until application completely starts to create window handle</span></span><br><span class="line">    Sleep(<span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">auto</span> handle = GetWindowHandle(pi.dwProcessId);</span><br><span class="line">    ::PostMessage(handle, WM_CLOSE, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Terminate forcibly if application does not quit in 5sec.</span></span><br><span class="line">    <span class="keyword">if</span> (::WaitForSingleObject(pi.hProcess, <span class="number">5000</span>) == WAIT_TIMEOUT)</span><br><span class="line">    &#123;</span><br><span class="line">        _tprintf(_T(<span class="string">&quot;Terminate forcibly&quot;</span>));</span><br><span class="line">        TerminateProcess(pi.hProcess, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ::CloseHandle(pi.hThread);</span><br><span class="line">    ::CloseHandle(pi.hProcess);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>GetWindowHandle</strong>で、プロセスIDからウィンドウハンドルを探し出しているのが肝です。<br>そして、このサンプルではプロセス起動後、<strong>Sleep</strong>で少し待機しています。<br>そうしないと、ウィンドウハンドルが取れないので…<br>コメントにも書いたように、おそらくウィンドウハンドルが生成され切っていないのかと。</p><h2 id="C-1"><a href="#C-1" class="headerlink" title="C#"></a>C#</h2><p>WPFのサンプルです。<br>コードビハインドですが、気にしません。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Windows;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Interop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Wpf</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> MainWindow.xaml の相互作用ロジック</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">MainWindow</span> : <span class="title">Window</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MainWindow</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">            <span class="keyword">this</span>.Loaded += <span class="keyword">this</span>.WindowLoaded;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">WindowLoaded</span>(<span class="params"><span class="keyword">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> source = HwndSource.FromHwnd(<span class="keyword">new</span> WindowInteropHelper(<span class="keyword">this</span>).Handle);</span><br><span class="line">            source?.AddHook(WndProc);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> IntPtr <span class="title">WndProc</span>(<span class="params">IntPtr hwnd, <span class="keyword">int</span> msg, IntPtr wParam, IntPtr lParam, <span class="keyword">ref</span> <span class="keyword">bool</span> handled</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">int</span> WM_CLOSE = <span class="number">0x0010</span>;</span><br><span class="line">            <span class="keyword">if</span> (msg == WM_CLOSE)</span><br><span class="line">            &#123;</span><br><span class="line">                MessageBox.Show(<span class="string">&quot;Get WM_CLOSE&quot;</span>);</span><br><span class="line">                <span class="comment">//handled = true;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> IntPtr.Zero;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/KillProcessSafetyByHWND">https://github.com/takuya-takeuchi/Demo/tree/master/KillProcessSafetyByHWND</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET </category>
          
          <category> C/C++ </category>
          
          <category> .NET Framework </category>
          
          <category> C# </category>
          
          <category> Windows Presentation Foundation </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その127 Anaconda navigatorの仮想環境のディレクトリを変更する</title>
      <link href="2018/07/21/3094/"/>
      <url>2018/07/21/3094/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>備忘録。<br>デフォルトだと <strong>%LocalAppData%</strong> に作成しにいくので辛い。<br>また最近のAnaconda navigatorは<strong>初回</strong>に保存先を聞いてくるようですが、それをスキップするとGUIから変更する手段がないのも辛い。</p><p><font color="Red">2018/11/01 更新 仮想環境はcondaを使わない方が良いです。condaの仮想環境ではpipでインストールしたパッケージを全ての環境で共有してしまうからです。<br>正しい仮想環境の作成は<a href="https://taktak.jp/2018/11/01/3613">開発メモ その143 Pythonの仮想環境を正しく使う</a>を参考にして下さい。</font></p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p>解決策はこちら。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://stackoverflow.com/questions/35280479/can-i-choose-where-my-conda-environment-is-stored" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=stackoverflow.com"></img><div class="hbc-site-name">Stack Overflow</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded"></img></div><div class="hbc-text"><div class="hbc-title">Can I choose where my conda environment is stored?</div><div class="hbc-url">https://stackoverflow.com/questions/35280479/can-i-choose-where-my-conda-environment-is-stored</div><div class="hbc-description">Can I change the path /Users/nolan/miniconda/envs/ to another one when creating a virtual environment ? I&#39;d like it to be specific to my pro…</div></div></div></div></a></div></div><p>やはり<strong>Stackoverflow</strong>はしゅごい(小並感) 手順は、</p><h4 id="1-condarc-を開く"><a href="#1-condarc-を開く" class="headerlink" title="1. .condarc を開く"></a>1. <strong>.condarc</strong> を開く</h4><p>私の環境では**%userprofile%**にありました。</p><h4 id="2-下記の記述を追記"><a href="#2-下記の記述を追記" class="headerlink" title="2. 下記の記述を追記"></a>2. 下記の記述を追記</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">envs_dirs:</span><br><span class="line">  - &#x2F;Users&#x2F;nolan&#x2F;newpath</span><br></pre></td></tr></table></figure><p>ディレクトリ部分は好きなように変えましょう。<br>ここでは<strong>D:\Works\Python\Envs</strong>に変更します。パスの区切りはバックスラッシュでOK。<br>つまり</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">envs_dirs:</span><br><span class="line">  - D:\Works\Python\Envs</span><br></pre></td></tr></table></figure><p>です。</p><h4 id="3-既存の環境を移動"><a href="#3-既存の環境を移動" class="headerlink" title="3. 既存の環境を移動"></a>3. 既存の環境を移動</h4><p>次に既に作成されたいる仮想環境を移動します。<br>規定では、**%LocalAppData%\conda\conda\envs**に作成されている模様。<br>コマンドで、</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ conda info -e</span><br><span class="line"><span class="comment"># conda environments:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">base                  *  C:\Program Files (x86)\Microsoft Visual Studio\Shared\Anaconda3_64</span><br><span class="line">face_regognition         C:\Users\XXXXXXX\AppData\Local\conda\conda\envs\face_regognition</span><br></pre></td></tr></table></figure><p>という確認も可能。<br>(どうでもいいけどスペル間違えてる….) 場所がわかったら、そこの配下を<strong>D:\Works\Python\Envs</strong>に<strong>コピー</strong>します。<br>移動すると壊れた場合に戻せないので。</p><h4 id="4-古い環境を削除"><a href="#4-古い環境を削除" class="headerlink" title="4. 古い環境を削除"></a>4. 古い環境を削除</h4><p>この状態で、先ほどのコマンドを打っても</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ conda info -e</span><br><span class="line"><span class="comment"># conda environments:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">base                  *  C:\Program Files (x86)\Microsoft Visual Studio\Shared\Anaconda3_64</span><br><span class="line">face_regognition         C:\Users\XXXXXXX\AppData\Local\conda\conda\envs\face_regognition</span><br></pre></td></tr></table></figure><p>コピーを認識していませんが… Anaconda Navigatorは認識しています。</p><p><a href="../../../../public/2018/07/36e7d7a2646cb1158d26cc0e2f2d8b49.png"><img src="../../../../public/2018/07/36e7d7a2646cb1158d26cc0e2f2d8b49-1024x615.png"></a></p><p>おそらく名前が重複している場合は、先に見つかった方を優先しているのでしょう。<br>ですので、ここから古い方を削除します。</p><p><a href="../../../../public/2018/07/f906fd6e36e4fcba4aecc5186231e0cf.png"><img src="../../../../public/2018/07/f906fd6e36e4fcba4aecc5186231e0cf.png"></a></p><p>削除後、</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ conda info -e</span><br><span class="line"><span class="comment"># conda environments:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">base                  *  C:\Program Files (x86)\Microsoft Visual Studio\Shared\Anaconda3_64</span><br><span class="line">face_regognition         D:\Works\Python\Envs\face_regognition</span><br></pre></td></tr></table></figure><p>きちんとコピーを認識してくれました。<br>無事に完了です。</p>]]></content>
      
      
      <categories>
          
          <category> %e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%e8%a8%80%e8%aa%9e </category>
          
          <category> Python </category>
          
          <category> python-2 </category>
          
          <category> Anaconda </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その126 Anaconda navigatorのアップデートが始まらない</title>
      <link href="2018/07/21/3091/"/>
      <url>2018/07/21/3091/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>備忘録。<br>Visual Studio 2017に付属していた<strong>Anaconda navigator</strong>がアップデートするか？と聞いてきたので、はいと答えるも待てど暮らせどアップデートが始まらない状況に陥ったのでメモ。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p>解決策はこちら。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://teratail.com/questions/105414" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=teratail.com"></img><div class="hbc-site-name">teratail[テラテイル]</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://teratail.com/img/imgFacebookShare.png"></img></div><div class="hbc-text"><div class="hbc-title">Anaconda NavigatorとAnaconda promptが機能しなくなった｜teratail</div><div class="hbc-url">https://teratail.com/questions/105414</div><div class="hbc-description">作業中にAnaconda NavigatorとAnaconda promptが起動したらエラーを吐いて起動しなくなりました。  環境はwindows10 HomeAnaconda3-5.0.1です。  エラーの内容はAnaconda Navigator  Na</div></div></div></div></a></div></div><p>上の問題と今回の問題は直接関係していませんが、解決方法は同一。<br><strong>管理者権限</strong>をつけて<strong>Anaconda Prompt</strong>を起動します。<br>次に下記のコマンドを実行。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ conda update anaconda-navigator</span><br><span class="line">Fetching package metadata .............</span><br><span class="line">Solving package specifications: .</span><br><span class="line"></span><br><span class="line">Package plan <span class="keyword">for</span> installation <span class="keyword">in</span> environment C:\Program Files (x86)\Microsoft Visual Studio\Shared\Anaconda3_64:</span><br><span class="line"></span><br><span class="line">The following packages will be UPDATED:</span><br><span class="line"></span><br><span class="line">    anaconda:           5.0.0-py36hea9b2fc_0  --&gt; custom-py36h363777c_0</span><br><span class="line">    anaconda-client:    1.6.5-py36hd36550c_0  --&gt; 1.6.14-py36_0</span><br><span class="line">    anaconda-navigator: 1.6.8-py36h4b7dd57_0  --&gt; 1.8.7-py36_0</span><br><span class="line">    conda:              4.3.27-py36hcbae3bd_0 --&gt; 4.5.8-py36_0</span><br><span class="line">    pycosat:            0.6.2-py36hf17546d_1  --&gt; 0.6.3-py36h413d8a4_0</span><br><span class="line">    qtpy:               1.3.1-py36hb8717c5_0  --&gt; 1.4.2-py36_0</span><br><span class="line">    vc:                 14-h2379b0c_1         --&gt; 14.1-h0510ff6_3</span><br><span class="line">    vs2015_runtime:     14.0.25123-hd4c4e62_1 --&gt; 15.5.2-3</span><br><span class="line"></span><br><span class="line">Proceed ([y]/n)? y</span><br><span class="line"></span><br><span class="line">anaconda-custo 100% |<span class="comment">###############################| Time: 0:00:00   1.81 MB/s</span></span><br><span class="line">qtpy-1.4.2-py3 100% |<span class="comment">###############################| Time: 0:00:00   2.22 MB/s</span></span><br><span class="line">anaconda-clien 100% |<span class="comment">###############################| Time: 0:00:00   5.25 MB/s</span></span><br><span class="line">conda-4.5.8-py 100% |<span class="comment">###############################| Time: 0:00:00   2.55 MB/s</span></span><br><span class="line">anaconda-navig 100% |<span class="comment">###############################| Time: 0:00:02   1.93 MB/s</span></span><br><span class="line">DEBUG menuinst_win32:__init__(185): Menu: name: <span class="string">&#x27;Anaconda$&#123;PY_VER&#125; $&#123;PLATFORM&#125;&#x27;</span>, prefix: <span class="string">&#x27;C:\Program Files (x86)\Microsoft Visual Studio\Shared\Anaconda3_64&#x27;</span>, env_name: <span class="string">&#x27;None&#x27;</span>, mode: <span class="string">&#x27;None&#x27;</span>, used_mode: <span class="string">&#x27;system&#x27;</span></span><br><span class="line">DEBUG menuinst_win32:__init__(185): Menu: name: <span class="string">&#x27;Anaconda$&#123;PY_VER&#125; $&#123;PLATFORM&#125;&#x27;</span>, prefix: <span class="string">&#x27;C:\Program Files (x86)\Microsoft Visual Studio\Shared\Anaconda3_64&#x27;</span>, env_name: <span class="string">&#x27;None&#x27;</span>, mode: <span class="string">&#x27;None&#x27;</span>, used_mode: <span class="string">&#x27;system&#x27;</span></span><br></pre></td></tr></table></figure><p>こんな感じで更新が終わります。<br>ついでにアップデータも更新します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">$ conda update navigator-updater</span><br><span class="line">Solving environment: <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Package Plan ##</span></span><br><span class="line"></span><br><span class="line">  environment location: C:\Program Files (x86)\Microsoft Visual Studio\Shared\Anaconda3_64</span><br><span class="line"></span><br><span class="line">  added / updated specs:</span><br><span class="line">    - navigator-updater</span><br><span class="line"></span><br><span class="line">The following packages will be downloaded:</span><br><span class="line"></span><br><span class="line">    package                    |            build</span><br><span class="line">    ---------------------------|-----------------</span><br><span class="line">    openssl-1.0.2o             |       h8ea7d77_0         5.4 MB</span><br><span class="line">    navigator-updater-0.2.1    |           py36_0         1.3 MB</span><br><span class="line">    ca-certificates-2018.03.07 |                0         155 KB</span><br><span class="line">    ------------------------------------------------------------</span><br><span class="line">                                           Total:         6.8 MB</span><br><span class="line"></span><br><span class="line">The following packages will be UPDATED:</span><br><span class="line">    ca-certificates:   2017.08.26-h94faf87_0      --&gt; 2018.03.07-0</span><br><span class="line">    certifi:           2017.7.27.1-py36h043bc9e_0 --&gt; 2018.4.16-py36_0</span><br><span class="line">    navigator-updater: 0.1.0-py36h8a7b86b_0       --&gt; 0.2.1-py36_0</span><br><span class="line">    openssl:           1.0.2l-vc14hcac20b0_2      --&gt; 1.0.2o-h8ea7d77_0</span><br><span class="line"></span><br><span class="line">Proceed ([y]/n)? y</span><br><span class="line"></span><br><span class="line">Downloading and Extracting Packages</span><br><span class="line">openssl-1.0.2o       |  5.4 MB | <span class="comment">############################################################################## | 100%</span></span><br><span class="line">navigator-updater-0. |  1.3 MB | <span class="comment">############################################################################## | 100%</span></span><br><span class="line">ca-certificates-2018 |  155 KB | <span class="comment">############################################################################## | 100%</span></span><br><span class="line">Preparing transaction: <span class="keyword">done</span></span><br><span class="line">Verifying transaction: <span class="keyword">done</span></span><br><span class="line">Executing transaction: <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>無事に完了です。</p>]]></content>
      
      
      <categories>
          
          <category> %e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%e8%a8%80%e8%aa%9e </category>
          
          <category> Python </category>
          
          <category> python-2 </category>
          
          <category> Anaconda </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その125 Android NDKをWindowsで使ってみる</title>
      <link href="2018/05/20/3079/"/>
      <url>2018/05/20/3079/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>Xamarin</strong>を再び勉強しはじめています。<br>Nativeのライブラリを使いたいので、試行錯誤中です。</p><h1 id="Get-Started"><a href="#Get-Started" class="headerlink" title="Get Started!!"></a>Get Started!!</h1><p>Androidで動作するNativeライブラリを作成するには、<strong>Android NDK (Native Development Kit)</strong> が必要です。<br>最初自分は <strong>g++</strong> でできると思い込んで、それをAndroidのEmulatorに配置していたのですが、それは間違っていました(白目) なので、NDKの使い方から。</p><h2 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h2><p>公式の<a href="https://developer.android.com/ndk/downloads/">Download</a>から入手します。<br>Windows、Mac、Linux用が提供されています。今回はWindows版を。</p><p>ダウンロードしたら、適当な場所に展開し、パスを通しておきます。<br>が、パスに空白が入ると<strong>動かない</strong>ので注意。</p><p>パスを通したら</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">WINDOWS</span>\<span class="title">system32</span>&gt;<span class="title">ndk</span>-<span class="title">build</span></span></span><br><span class="line"><span class="function"><span class="title">Android</span> <span class="title">NDK</span>: <span class="title">Could</span> <span class="title">not</span> <span class="title">find</span> <span class="title">application</span> <span class="title">project</span> <span class="title">directory</span> !</span></span><br><span class="line"><span class="function"><span class="title">Android</span> <span class="title">NDK</span>: <span class="title">Please</span> <span class="title">define</span> <span class="title">the</span> <span class="title">NDK_PROJECT_PATH</span> <span class="title">variable</span> <span class="title">to</span> <span class="title">point</span> <span class="title">to</span> <span class="title">it</span>.</span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Android</span>\<span class="title">NDK</span>\<span class="title">build</span>\\..\<span class="title">build</span>\<span class="title">core</span>\<span class="title">build</span>-<span class="title">local.mk</span>:151: *** <span class="title">Android</span> <span class="title">NDK</span>: <span class="title">Aborting</span> </span></span><br></pre></td></tr></table></figure><p>のように表示されれあば準備完了です。</p><h2 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h2><p>コンパイル環境ができましたので、ビルドを行います。<br>ビルドについては、 </p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://kokufu.blogspot.jp/2013/09/android-ndk-jni.html" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=kokufu.blogspot.jp"></img><div class="hbc-site-name">kokufu.blogspot.jp</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://3.bp.blogspot.com/-O4NBRuDalko/WKOXCNak51I/AAAAAAAAAwo/8qFdJuP078Ia1h5nK-8h3_byGgCcvKifQCLcB/s1600/ic_keyboard.jpg"></img></div><div class="hbc-text"><div class="hbc-title">Android NDK でデフォルトディレクトリを jni 以外にする方法 | 穀風</div><div class="hbc-url">https://kokufu.blogspot.jp/2013/09/android-ndk-jni.html</div></div></div></div></a></div></div><p>が非常に参考になりました。<br>ソースは下記です。<br><strong>calc.cpp</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;calc.h&quot;</span></span></span><br></pre></td></tr></table></figure><p><strong>calc.h</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _CPP_CALC_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CPP_CALC_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;export.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">DLLEXPORT <span class="keyword">int</span> <span class="title">calc_add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><strong>export.h</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _WINDOWS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DLLEXPORT extern <span class="meta-string">&quot;C&quot;</span> __declspec(dllexport)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DLLEXPORT extern <span class="meta-string">&quot;C&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>次にビルドする際は、<strong>CMakeLists.txt</strong>のようなビルドの手順を示した</p><ul><li>Android.mk</li><li>Application.mk</li></ul><p>ファイルを用意します。</p><p><strong>Application.mk</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">APP_PROJECT_PATH :&#x3D; $(NDK_PROJECT_PATH) APP_BUILD_SCRIPT :&#x3D; $(APP_PROJECT_PATH)&#x2F;src&#x2F;Android.mk</span><br></pre></td></tr></table></figure><p><strong>Android.mk</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH :&#x3D; $(call my-dir)</span><br><span class="line"></span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line">LOCAL_MODULE    :&#x3D; PInvokeApp.Native</span><br><span class="line">LOCAL_SRC_FILES :&#x3D; calc.cpp</span><br><span class="line"></span><br><span class="line">include $(BUILD_SHARED_LIBRARY)</span><br></pre></td></tr></table></figure><p>これらを下記のような構成で展開します。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">│  Application.mk</span><br><span class="line">│</span><br><span class="line">└─src</span><br><span class="line">        Android.mk</span><br><span class="line">        calc.cpp</span><br><span class="line">        calc.h</span><br><span class="line">        export.h</span><br></pre></td></tr></table></figure><p>ここで、<strong>Application.mk</strong>にカレントディレクトリを移動して、下記のコマンドを実行することで、ライブラリが生成されます。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ ndk-build NDK_PROJECT_PATH=<span class="variable">%cd%</span> NDK_APPLICATION_MK=Application.mk</span><br><span class="line">Android NDK: APP_PLATFORM <span class="keyword">not</span> <span class="built_in">set</span>. Defaulting to minimum supported version android-<span class="number">14</span>.</span><br><span class="line">[arm64-v8a] Compile++      : PInvokeApp.Native &lt;= calc.cpp</span><br><span class="line">[arm64-v8a] SharedLibrary  : libPInvokeApp.Native.so</span><br><span class="line">[arm64-v8a] Install        : libPInvokeApp.Native.so =&gt; libs/arm64-v8a/libPInvokeApp.Native.so</span><br><span class="line">[armeabi-v7a] Compile++ thumb: PInvokeApp.Native &lt;= calc.cpp</span><br><span class="line">[armeabi-v7a] SharedLibrary  : libPInvokeApp.Native.so</span><br><span class="line">[armeabi-v7a] Install        : libPInvokeApp.Native.so =&gt; libs/armeabi-v7a/libPInvokeApp.Native.so</span><br><span class="line">[x86] Compile++      : PInvokeApp.Native &lt;= calc.cpp</span><br><span class="line">[x86] SharedLibrary  : libPInvokeApp.Native.so</span><br><span class="line">[x86] Install        : libPInvokeApp.Native.so =&gt; libs/x86/libPInvokeApp.Native.so</span><br><span class="line">[x86_64] Compile++      : PInvokeApp.Native &lt;= calc.cpp</span><br><span class="line">[x86_64] SharedLibrary  : libPInvokeApp.Native.so</span><br><span class="line">[x86_64] Install        : libPInvokeApp.Native.so =&gt; libs/x86_64/libPInvokeApp.Native.so</span><br></pre></td></tr></table></figure><p>libsフォルダにアーキテクチャ毎にライブラリが生成されます。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> android </category>
          
          <category> NDK </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その124 64bitのRHELで32bitでソースをビルドする</title>
      <link href="2018/05/20/3074/"/>
      <url>2018/05/20/3074/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>備忘録。<br>簡単にできると思ったんですが、手こずったので….</p><p>何をやっても</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ld: crti.o が見つかりません: No such file or directory</span><br><span class="line">/usr/bin/ld: 互換性のないを /usr/lib/gcc/x86_64-redhat-linux/7/libstdc++.so スキップしました (-lstdc++ を探索している時)/usr/bin/ld: -lstdc++ が見つかりません</span><br><span class="line">/usr/bin/ld: -lm が見つかりません</span><br><span class="line">/usr/bin/ld: -lc が見つかりません</span><br><span class="line">/usr/bin/ld: crtn.o が見つかりません: No such file or directory</span><br><span class="line">collect2: エラー: ld はステータス 1 で終了しました</span><br></pre></td></tr></table></figure><p>こんな感じで、お手上げでした。</p><h1 id="How"><a href="#How" class="headerlink" title="How?"></a>How?</h1><p>下の記事に答えが書いてありました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://a4dosanddos.hatenablog.com/entry/2015/09/19/131052" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=a4dosanddos.hatenablog.com"></img><div class="hbc-site-name">プログラム日記</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://ogimage.blog.st-hatena.com/12704830469096426815/6653458415121891862/1442635852"></img></div><div class="hbc-text"><div class="hbc-title">「C」64bit のGCC で 32bit アプリケーションを作成する環境構築 ( CentOS 6.4 ) - プログラム日記</div><div class="hbc-url">http://a4dosanddos.hatenablog.com/entry/2015/09/19/131052</div><div class="hbc-description">64bit のGCC で 32bit アプリケーションを作成する環境構築のメモです。まぁ、やることとしては、以下のページに記載の通りに glibc-devel.i686 glibc-devel libstdc++-devel.i686 パッケージを yum でインストールするだけ…</div></div></div></div></a></div></div><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y install glibc-devel.i686 glibc-devel libstdc++-devel.i686</span><br></pre></td></tr></table></figure><p>で良かったです。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> Red Hat Enterprise Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その123 macOS 10.13 High Sierra にアップデートしたらxcrun: error: invalid active developer pathエラー</title>
      <link href="2018/05/19/3061/"/>
      <url>2018/05/19/3061/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>掲題の通り。ただの備忘録です。<br>何でアップデートしただけで既存のコマンドが動かないんですかねぇ(白目)<br><a href="../../../../public/2018/05/mac.png"><img src="../../../../public/2018/05/mac.png"></a></p><h1 id="How-to-resolve"><a href="#How-to-resolve" class="headerlink" title="How to resolve"></a>How to resolve</h1><p><strong>StackExchange</strong>に回答がありました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://apple.stackexchange.com/questions/254380/macos-sierra-invalid-active-developer-path" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=apple.stackexchange.com"></img><div class="hbc-site-name">Ask Different</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://cdn.sstatic.net/Sites/apple/Img/apple-touch-icon@2.png?v=b514451ec60c"></img></div><div class="hbc-text"><div class="hbc-title">Why am I getting an “invalid active developer path” when attempting to use Git after upgrading to macOS Catalina?</div><div class="hbc-url">https://apple.stackexchange.com/questions/254380/macos-sierra-invalid-active-developer-path</div><div class="hbc-description">After upgrading to macOS Catalina, I tried to run git from Terminal but it kept giving me the following error:xcrun: error: invalid active…</div></div></div></div></a></div></div><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ xcode-select --install</span><br></pre></td></tr></table></figure><p>下記のダイアログが表示されるので<strong>インストール</strong>を選択。</p><p><a href="../../../../public/2018/05/mac-1.png"><img src="../../../../public/2018/05/mac-1.png"></a></p><p><strong>同意する</strong>を選択。</p><p><a href="../../../../public/2018/05/mac-2.png"><img src="../../../../public/2018/05/mac-2.png"></a></p><p>ダウンロードが始まります。</p><p><a href="../../../../public/2018/05/mac-3.png"><img src="../../../../public/2018/05/mac-3.png"></a></p><p>インストールが完了。</p><p><a href="../../../../public/2018/05/mac-4.png"><img src="../../../../public/2018/05/mac-4.png"></a></p><p>これで既存のコマンドが動くようになります。</p><p><a href="../../../../public/2018/05/mac-5.png"><img src="../../../../public/2018/05/mac-5.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> Apple </category>
          
          <category> Mac </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その122 TensorFlowをCUDA 9.1 + CuDNN 7 on Windowsでビルドする</title>
      <link href="2018/05/13/3028/"/>
      <url>2018/05/13/3028/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>公式バイナリでもよいのですが、自分でビルドしたのでメモです。<br><strong>CMake</strong>でビルドします。<br>なお、<strong>Visual Studio 2015</strong>が必要です。2017では<strong>ビルドできませんでした。</strong> あと、ビルドにすごい時間がかかります。</p><h1 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h1><p>まず必要なものをダウンロードして、インストールまたは展開します。</p><h2 id="CMake"><a href="#CMake" class="headerlink" title="CMake"></a>CMake</h2><p>PATHを通しておきます。</p><h2 id="CUDA-9-1"><a href="#CUDA-9-1" class="headerlink" title="CUDA 9.1"></a>CUDA 9.1</h2><p><a href="https://developer.nvidia.com/cuda-toolkit">CUDA Toolkit</a>から環境に適応したインストーラをダウンロードします。</p><h2 id="CuDNN-7"><a href="#CuDNN-7" class="headerlink" title="CuDNN 7"></a>CuDNN 7</h2><p><a href="https://developer.nvidia.com/cudnn">NVIDIA cuDNN</a>から環境に適応したバイナリをダウンロードします。<br>なおダウンロードには登録が必要です。<br>また、<strong>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.1</strong>に展開する必要はありません。<br>自由にディレクトリに展開しておくことができます。</p><h2 id="Python-3-6"><a href="#Python-3-6" class="headerlink" title="Python 3.6"></a>Python 3.6</h2><p>自分の環境では、<strong>Visual Studio 2017</strong>でインストールした<strong>Anaconda</strong>が入っていますので、これでPythonに対応します。</p><h2 id="SWIGWIN"><a href="#SWIGWIN" class="headerlink" title="SWIGWIN"></a>SWIGWIN</h2><p><a href="http://www.swig.org/">公式ページ</a>のDownloadから入手します。</p><p>SWIGとSWIGWINがあるので間違いないように。</p><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p>これもPATHが通っている必要があります。</p><p><a href="https://gitforwindows.org/">Git for Windows</a>をインストールしておくのが無難です。</p><h1 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h1><p>まず、<strong><em>tensorflow\contrib\cmake\CMakeLists.txt</em></strong> を開きます。</p><p>40行目を</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- set(tensorflow_CUDA_VERSION &quot;9.0&quot; CACHE STRING &quot;CUDA version to build against&quot;)</span></span><br><span class="line"><span class="addition">+ set(tensorflow_CUDA_VERSION &quot;9.1&quot; CACHE STRING &quot;CUDA version to build against&quot;)</span></span><br></pre></td></tr></table></figure><p>このように変更します。<br>これで準備は完了です。<br>あとは、<strong><em>tensorflow\contrib\cmake</em></strong> に移動してCMakeをたたくだけです。<br>少しコマンドが長いですが…</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># \ は / に変更しておく</span><br><span class="line">$ <span class="built_in">set</span> SWIG_EXE=&quot;D:/Works/Lib/SWIG/Windows/<span class="number">3</span>.<span class="number">0</span>.<span class="number">12</span>/swig.exe&quot;</span><br><span class="line">$ <span class="built_in">set</span> PYTHON_EXECUTABLE_64=&quot;C:/Program Files (x86)/Microsoft Visual Studio/Shared/Python36_64/python.exe&quot;</span><br><span class="line">$ <span class="built_in">set</span> PYTHON_LIBRARIES_64=&quot;C:/Program Files (x86)/Microsoft Visual Studio/Shared/Python36_64/libs/python36.lib&quot;</span><br><span class="line">$ <span class="built_in">set</span> NUMPY_INCLUDE_DIR=&quot;C:/Program Files (x86)/Microsoft Visual Studio/Shared/Anaconda3_64/Lib/site-packages/numpy/core/include&quot;</span><br><span class="line">$ <span class="built_in">set</span> CUDNN_HOME=&quot;D:/Works/Lib/NVIDIA/cuDNN/<span class="number">9</span>.<span class="number">1</span>/<span class="number">7</span>.<span class="number">0</span>/Win10&quot;</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> tensorflow\contrib\cmake</span><br><span class="line">$ <span class="built_in">mkdir</span> build</span><br><span class="line">$ <span class="built_in">cd</span> build</span><br><span class="line">$ cmake -G &quot;Visual Studio <span class="number">14</span> <span class="number">2015</span> Win64&quot; ^</span><br><span class="line">        -D tensorflow_CUDA_VERSION=<span class="number">9</span>.<span class="number">1</span> ^</span><br><span class="line">        -D tensorflow_WIN_CPU_SIMD_OPTIONS=/arch:AVX2 ^</span><br><span class="line">        -D SWIG_EXECUTABLE=<span class="variable">%SWIG_EXE%</span> ^</span><br><span class="line">        -D PYTHON_EXECUTABLE=&quot;<span class="variable">%PYTHON_EXECUTABLE_64%</span>&quot; ^</span><br><span class="line">        -D PYTHON_LIBRARIES=&quot;<span class="variable">%PYTHON_LIBRARIES_64%</span>&quot; ^</span><br><span class="line">        -D NUMPY_INCLUDE_DIR=&quot;<span class="variable">%NUMPY_INCLUDE_DIR%</span>&quot; ^</span><br><span class="line">        -D tensorflow_ENABLE_GPU=ON ^</span><br><span class="line">        -D tensorflow_BUILD_SHARED_LIB=ON ^</span><br><span class="line">        -D CUDNN_HOME=&quot;<span class="variable">%CUDNN_HOME%</span>&quot; ^</span><br><span class="line">        ..</span><br></pre></td></tr></table></figure><p>ここでビルド前に生成されるプロジェクトファイルに手を加えます。<br>具体的には、ビルド中に生成されるlibファイルをリンクしているプロジェクトがあるのですが、そのリンクパスが間違っているため、ビルドが途中で停止します。<br>下記に情報がありました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://qiita.com/soyiharu/items/098056897d6206da48b7" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=qiita.com"></img><div class="hbc-site-name">Qiita</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.qiita.com%2Fassets%2Fpublic%2Farticle-ogp-background-1150d8b18a7c15795b701a55ae908f94.png?ixlib=rb-1.2.2&w=1200&mark=https%3A%2F%2Fqiita-user-contents.imgix.net%2F~text%3Fixlib%3Drb-1.2.2%26w%3D840%26h%3D380%26txt%3D%25E3%2580%2590windows%25E3%2580%2591AVX2%25E3%2582%2592%25E6%259C%2589%25E5%258A%25B9%25E3%2581%25AB%25E3%2581%2597%25E3%2581%25A6Tensorflow%25E3%2582%2592%25E3%2583%2593%25E3%2583%25AB%25E3%2583%2589%25E3%2581%2599%25E3%2582%258B%2528GPU%25E3%2581%25AA%25E3%2581%2597%2529%26txt-color%3D%2523333%26txt-font%3DHiragino%2520Sans%2520W6%26txt-size%3D54%26txt-clip%3Dellipsis%26txt-align%3Dcenter%252Cmiddle%26s%3Db7b6639ee6bf9b10aca3951241b539de&mark-align=center%2Cmiddle&blend=https%3A%2F%2Fqiita-user-contents.imgix.net%2F~text%3Fixlib%3Drb-1.2.2%26w%3D840%26h%3D500%26txt%3D%2540soyiharu%26txt-color%3D%2523333%26txt-font%3DHiragino%2520Sans%2520W6%26txt-size%3D45%26txt-align%3Dright%252Cbottom%26s%3Df8f5be9cc72877a69ca3a24d9458ac96&blend-align=center%2Cmiddle&blend-mode=normal&s=2598d6f9fca7c72345ca1f562908d09c"></img></div><div class="hbc-text"><div class="hbc-title">【windows】AVX2を有効にしてTensorflowをビルドする(GPUなし) - Qiita</div><div class="hbc-url">https://qiita.com/soyiharu/items/098056897d6206da48b7</div><div class="hbc-description">概要タイトルの通りです。widnows環境でcmakeの方でtensorflowをビルドします。その時にいろいろと小技が必要だったので、その内容を備忘録的に書いておきます。注意点公式バイナリでもSSEやAVX...</div></div></div></div></a></div></div><p>修正対象は下記のプロジェクトファイル。</p><ul><li>_beam_search_ops.vcxproj</li><li>_gru_ops.vcxproj</li><li>_lstm_ops.vcxproj</li><li>_nearest_neighbor_ops.vcxproj</li><li>_periodic_resample_op.vcxproj</li></ul><p>修正内容は、</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- &lt;AdditionalDependencies&gt;\pywrap_tensorflow_internal.lib</span></span><br><span class="line"><span class="addition">+ &lt;AdditionalDependencies&gt;Release\pywrap_tensorflow_internal.lib</span></span><br></pre></td></tr></table></figure><p>になります。</p><p>修正後は下記のコマンドでビルドを開始します。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cmake --build . --config Release</span><br></pre></td></tr></table></figure><p>これでビルドが通ります。<br>が、前にも書いたように、すごく時間がかかります。<br><strong>i7 8700K</strong>、<strong>32GB</strong>の環境でも、2時間から3時間もビルドに時間がかかりました… 上記の設定でビルドすると、<strong>Release</strong>フォルダに、</p><ul><li>tensorflow.dll</li><li>tensorflow.lib</li><li>tensorflow_static.lib</li></ul><p>を含む大量のバイナリが生成されます。</p><h2 id="Why-using-Visual-Studio-2015"><a href="#Why-using-Visual-Studio-2015" class="headerlink" title="Why using Visual Studio 2015?"></a>Why using Visual Studio 2015?</h2><p>2017を使うと下記のエラーが出てビルドがうまくいきませんでした。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Found CUDA: C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.<span class="number">1</span></span><br><span class="line">(found suitable exact version &quot;<span class="number">9</span>.<span class="number">1</span>&quot;)</span><br><span class="line">CMake Error <span class="built_in">at</span> CMakeLists.txt:<span class="number">322</span> (message):</span><br><span class="line">  Selected compiler (or version) is <span class="keyword">not</span> supported <span class="keyword">for</span> CUDA</span><br></pre></td></tr></table></figure><p>調べたところ、下記の記事を見つけました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/tensorflow/tensorflow/issues/16939" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars2.githubusercontent.com/u/15658638?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">tensorflow 1.3,1.4,1.5,1.6 DLL load failed with CUDA 9.1, CUDnn-7.05, Windows 10 · Issue #16939 · tensorflow/tensorflow</div><div class="hbc-url">https://github.com/tensorflow/tensorflow/issues/16939</div><div class="hbc-description">import tensorflow strack trace &amp;gt; py lib\_learn\tensorflow\versions\versiontest.py Traceback (most recent call last): File &amp;quot;lib/tenso…</div></div></div></div></a></div></div><p>この中で、 </p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://devtalk.nvidia.com/default/topic/1027299/cuda-setup-and-installation/cuda-9-failed-to-support-the-latest-visual-studio-2017-version-15-5/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=devtalk.nvidia.com"></img><div class="hbc-site-name">NVIDIA Developer Forums</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://aws1.discourse-cdn.com/nvidia/original/2X/8/8f17cc8f1a724d6ecea8a197a267ec8a05ef1490.png"></img></div><div class="hbc-text"><div class="hbc-title">CUDA 9 failed to support the latest Visual Studio 2017 version 15.5</div><div class="hbc-url">https://devtalk.nvidia.com/default/topic/1027299/cuda-setup-and-installation/cuda-9-failed-to-support-the-latest-visual-studio-2017-version-15-5/</div><div class="hbc-description">Once I upgraded by Visual Studio 2017 to version 15.5 (https://www.visualstudio.com/en-us/news/releasenotes/vs2017-relnotes) CUDA stops work…</div></div></div></div></a></div></div><p>というVisual Studio 2017 15.5でCUDAが停止する、というNvidiaのコミュニティへのリンクがあります。<br>詳細は続報待ちですが、2015に変えたら動いたのでそういうものだと捉えておきます。</p><h2 id="Why-specify-Numpy-dir"><a href="#Why-specify-Numpy-dir" class="headerlink" title="Why specify Numpy dir?"></a>Why specify Numpy dir?</h2><p>下記のエラーが出てビルドがうまくいきませんでした。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cannot get NumPy include directory: Is NumPy installed?</span><br></pre></td></tr></table></figure><p><strong>CMakeList.txt</strong>を解析していくと、<strong>NUMPY_INCLUDE_DIR</strong>変数を参照していたので、CMakeの引数で指定することで明示的に指定したわけです。</p>]]></content>
      
      
      <categories>
          
          <category> %e3%83%87%e3%82%a3%e3%83%bc%e3%83%97%e3%83%a9%e3%83%bc%e3%83%8b%e3%83%b3%e3%82%b0 </category>
          
          <category> gpupu </category>
          
          <category> ディープラーニング </category>
          
          <category> CUDA </category>
          
          <category> GPUPU </category>
          
          <category> TensorFlow </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その121 OSSの資産管理WebアプリSnipe-ITをDockerで使う</title>
      <link href="2018/05/13/3039/"/>
      <url>2018/05/13/3039/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>IT会社にいると、大なり小なり資産の管理作業が発生します。<br>自分のグループだけでもかなりの資産がありますが、それをExcelで管理していて辛い状況です。<br>そんな中、資産管理のWebアプリでよさげなアプリが、OSSかつDockerで提供していたの導入してみました。<br>ちなみに、Windows 10での<strong>Docker for Windows</strong>環境です。</p><h1 id="Get-started"><a href="#Get-started" class="headerlink" title="Get started!!"></a>Get started!!</h1><p>インストール手順は下記に書いてありますが、ちょっと分かりにくいです。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://snipe-it.readme.io/docs/docker" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=snipe-it.readme.io"></img><div class="hbc-site-name">Snipe-IT Documentation</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">Docker</div><div class="hbc-url">https://snipe-it.readme.io/docs/docker</div><div class="hbc-description">Note very loudly that additional Docker options should be set in the env file, and they require a restart!</div></div></div></div></a></div></div><h2 id="1-設定ファイルの用意"><a href="#1-設定ファイルの用意" class="headerlink" title="1. 設定ファイルの用意"></a>1. 設定ファイルの用意</h2><p>下記のようなテキストファイルを用意します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># Mysql Parameters</span><br><span class="line">MYSQL_ROOT_PASSWORD&#x3D;password</span><br><span class="line">MYSQL_DATABASE&#x3D;snipeit</span><br><span class="line">MYSQL_USER&#x3D;snipeit</span><br><span class="line">MYSQL_PASSWORD&#x3D;password</span><br><span class="line"></span><br><span class="line"># Email Parameters</span><br><span class="line"># - the hostname&#x2F;IP address of your mailserver</span><br><span class="line">MAIL_PORT_587_TCP_ADDR&#x3D;smtp.whatever.com</span><br><span class="line">#the port for the mailserver (probably 587, could be another)</span><br><span class="line">MAIL_PORT_587_TCP_PORT&#x3D;587</span><br><span class="line"># the default from address, and from name for emails</span><br><span class="line">MAIL_ENV_FROM_ADDR&#x3D;youremail@yourdomain.com</span><br><span class="line">MAIL_ENV_FROM_NAME&#x3D;John Doe</span><br><span class="line"># - pick &#39;tls&#39; for SMTP-over-SSL, &#39;tcp&#39; for unencrypted</span><br><span class="line">MAIL_ENV_ENCRYPTION&#x3D;tcp</span><br><span class="line"># SMTP username and password</span><br><span class="line">MAIL_ENV_USERNAME&#x3D;your_email_username</span><br><span class="line">MAIL_ENV_PASSWORD&#x3D;your_email_password</span><br><span class="line"></span><br><span class="line"># Snipe-IT Settings</span><br><span class="line">APP_ENV&#x3D;production</span><br><span class="line">APP_DEBUG&#x3D;false</span><br><span class="line">APP_KEY&#x3D;★後から設定★</span><br><span class="line">APP_URL&#x3D;http:&#x2F;&#x2F;127.0.0.1:80</span><br><span class="line">APP_TIMEZONE&#x3D;&#39;Asia&#x2F;Tokyo&#39;</span><br><span class="line">APP_LOCALE&#x3D;ja</span><br></pre></td></tr></table></figure><p>このファイルのパスを、ここでは<strong>D:\VirtualMachines\Docker\volume\snipe-it\env.txt</strong>として保存します。任意の場所でよいです。</p><h2 id="2-データベースコンテナの用意"><a href="#2-データベースコンテナの用意" class="headerlink" title="2. データベースコンテナの用意"></a>2. データベースコンテナの用意</h2><p>次に、データの保存先であるデータベースのコンテナを用意します。<br>データベースのファイルはホスト側に保存しますので、ディレクトリをあらかじめ用意しておきます。<br>ここでは、<strong>D:\VirtualMachines\Docker\volume\snipe-it\mysql</strong>がデータベースファイルの格納先とします。<br>下記がデータベース用のコンテナです。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --privileged --name snipe-mysql --env-file=D:/VirtualMachines/Docker/volume/snipe-it/env.txt -v D:/VirtualMachines/Docker/volume/snipe-it/mysql/:/var/lib/mysql -d -P mysql:<span class="number">5</span>.<span class="number">6</span></span><br></pre></td></tr></table></figure><h2 id="3-APP-KEYの取得"><a href="#3-APP-KEYの取得" class="headerlink" title="3. APP_KEYの取得"></a>3. APP_KEYの取得</h2><p>先のテキストファイルに<strong>★後から設定★</strong>と書かれていた値を取得します。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --rm snipe/snipe-it:latest</span><br><span class="line">Please re-run this container with an environment variable $APP_KEY</span><br><span class="line">An example APP_KEY you could use is:</span><br><span class="line"><span class="function">base64:<span class="title">kzzSXbSsFtAtbvhGYrp9M3H0WeJGHrw3385xy5PAXP4</span>=</span></span><br></pre></td></tr></table></figure><p>この<strong>base64:xxxxxxxxxxxxxxxxxxxxxxxxxxxxx</strong>という部分を先のテキストファイルに貼り付けます。<br>つまり下記のようになります。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">APP_KEY&#x3D;base64:kzzSXbSsFtAtbvhGYrp9M3H0WeJGHrw3385xy5PAXP4&#x3D;</span><br></pre></td></tr></table></figure><h2 id="4-Snipe-ITの起動"><a href="#4-Snipe-ITの起動" class="headerlink" title="4.Snipe-ITの起動"></a>4.Snipe-ITの起動</h2><p>最後にSnipe-ITそのもののコンテナを作成します。<br>ここでも設定などをホスト側に作成するので、ディレクトリをあらかじめ用意しておきます。<br>ここでは、<strong>D:\VirtualMachines\Docker\volume\snipe-it</strong>とします。<br>下記がコンテナ作成のコマンドです。<br>ホスト側のポート番号9001は自由に変えてもらって結構です。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p <span class="number">9001</span>:<span class="number">80</span> --privileged --name=&quot;snipe-it&quot; --link snipe-mysql:mysql --env-file=D:/VirtualMachines/Docker/volume/snipe-it/env.txt -v D:/VirtualMachines/Docker/volume/snipe-it/:/var/lib/snipeit snipe/snipe-it:latest</span><br></pre></td></tr></table></figure><p>これでWebからアクセスできますが、このままだと動きません。<br>情報が見当たらなかったのですが、必要なフォルダとファイルが作られていないため、データベースを作る際にエラーになってしまうので、下記のコマンドで回避します。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker exec -it snipe-it /bin/bash</span><br><span class="line"># <span class="built_in">mkdir</span> /var/lib/snipeit/keys</span><br><span class="line"># <span class="built_in">echo</span> -n &gt; /var/lib/snipeit/keys/oauth-private.key</span><br><span class="line"># <span class="built_in">echo</span> -n &gt; /var/lib/snipeit/keys/oauth-public.key</span><br></pre></td></tr></table></figure><h2 id="5-セットアップ"><a href="#5-セットアップ" class="headerlink" title="5.セットアップ"></a>5.セットアップ</h2><p><a href="../../../../public/2018/05/1.png"><img src="../../../../public/2018/05/1.png"></a> <strong>Next: Create Database Tables</strong> をクリック <a href="../../../../public/2018/05/2.png"><img src="../../../../public/2018/05/2.png"></a> <strong>Next: Create User</strong> をクリック <a href="../../../../public/2018/05/3.png"><img src="../../../../public/2018/05/3-901x1024.png"></a> 必要な情報を入力して、<strong>Next: Save User</strong> をクリック <a href="../../../../public/2018/05/4.png"><img src="../../../../public/2018/05/4.png"></a><br> セットアップ終了!!</p>]]></content>
      
      
      <categories>
          
          <category> 仮想化 </category>
          
          <category> Docker </category>
          
          <category> IT資産管理 </category>
          
          <category> it%e8%b3%87%e7%94%a3%e7%ae%a1%e7%90%86 </category>
          
          <category> Snipe-IT </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その120 TensorFlowをnvidia docker on Ubuntu 18.04にインストールする</title>
      <link href="2018/05/06/3006/"/>
      <url>2018/05/06/3006/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>darknet</strong>に引き続き<strong>TensorFlow</strong>もインストールしてみます。<br>いつも思うのですが、フレームワークを知っているのと、インストールして試しに使ってみるだけでも大分違うと思います。<br>インストールした後に+αで何かできたらもっとよいですが。</p><h1 id="Get-Started"><a href="#Get-Started" class="headerlink" title="Get Started"></a>Get Started</h1><p>公式ページにすべて手順が書いてあります。<br>Pythonにインストールするよ、ってことで特に難しいことはないと思います。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://www.tensorflow.org/install/install_linux" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=www.tensorflow.org"></img><div class="hbc-site-name">TensorFlow</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://www.tensorflow.org/images/tf_logo_social.png"></img></div><div class="hbc-text"><div class="hbc-title">Install TensorFlow 2</div><div class="hbc-url">https://www.tensorflow.org/install/install_linux</div><div class="hbc-description">Learn how to install TensorFlow on your system. Download a pip package, run in a Docker container, or build from source. Enable the GPU on s…</div></div></div></div></a></div></div><p>ただ、Pythonを使うといっても、インストール先は</p><ul><li>Virtualenv</li><li>“native” pip</li><li>Docker</li><li>Anaconda</li></ul><p>と複数用意されています。<br>今回は<strong>Docker</strong>を使います。</p><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>気をつけることもないですが、<strong>DockerHub</strong>の<a href="https://hub.docker.com/r/tensorflow/tensorflow/tags/">TensorFlowイメージ</a>はタグを含めてたくさんあります。<br>タグは主に</p><ul><li>(version)-devel-gpu-py3<ul><li>ビルドに必要なソースコートや依存バイナリ付きのPython3用GPU対応版</li></ul></li><li>(version)-devel-gpu<ul><li>ビルドに必要なソースコートや依存バイナリ付きのPython2用GPU対応版</li></ul></li><li>(version)-devel-py3<ul><li>ビルドに必要なソースコートや依存バイナリ付きのPython3用CPU対応版</li></ul></li><li>(version)-devel<ul><li>ビルドに必要なソースコートや依存バイナリ付きのPython2用CPU対応版</li></ul></li><li>(version)-gpu-py3<ul><li>Python3用GPU対応版</li></ul></li><li>(version)-gpu<ul><li>Python2用GPU対応版</li></ul></li><li>(version)-py3<ul><li>Python3用CPU対応版</li></ul></li><li>(version)<ul><li>Python2用CPU対応版</li></ul></li></ul><p>の8種類があります。<br>**(version)** は、<strong>latest</strong>、<strong>nightly</strong>、バージョン番号があります。<br>個人的には、latestを選ぶと、このバージョンいくつだっけ?っことになってわからなくなるのであまり好きではありません。<br>2018/05/05時点の最新のTensorFlowは1.8です。<br>なので、1.8を使います。<br>下記コマンドで、イメージをpullし、コンテナに入ります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo nvidia-docker run --rm -it tensorflow/tensorflow:1.8.0-gpu-py3 /bin/bash</span><br></pre></td></tr></table></figure><p>コンテナに入った後です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python -m pip freeze | grep tensor</span><br><span class="line">$ tensorboard==1.8.0</span><br><span class="line">$ tensorflow-gpu==1.8.0</span><br></pre></td></tr></table></figure><p>TensorFlowのGPU版と<strong>TensorBoard</strong>がインストールされているのがわかります。<br><strong>TensorBoard</strong>は深層学習の状況などを可視化できるWebコンソールです。<br>これを確認するには、コンテナのポートを開く必要があります。<br>ですので、下記のようにコンテナを再実行し、TensorBoardを起動します。ホスト側のポート番号は自由ですが、コンテナ側は6006にします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo nvidia-docker run --rm -p 6006:6006 -it tensorflow/tensorflow:1.8.0-gpu-py3 /bin/bash</span><br></pre></td></tr></table></figure><h2 id="Test-MNIST"><a href="#Test-MNIST" class="headerlink" title="Test MNIST"></a>Test MNIST</h2><p>おなじみのMNISTのサンプルがgithubにありますのでありがたく使わせてもらいます。</p><p>このサンプルは、mnistの学習結果をTensorBoardで確認できるように出力してくれます。<br>使い方は下記です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># wget はインストールされていないのでインストール</span></span><br><span class="line">$ apt-get update</span><br><span class="line">$ apt-get install wget</span><br><span class="line">$ wget https://raw.githubusercontent.com/tensorflow/tensorflow/master/tensorflow/examples/tutorials/mnist/mnist_with_summaries.py</span><br><span class="line">$ mkdir /var/<span class="built_in">log</span>/tensorflow</span><br><span class="line">$ python mnist_with_summaries.py --log_dir=/var/<span class="built_in">log</span>/tensorflow</span><br></pre></td></tr></table></figure><p>実行後、別のコンソールから学習中のコンテナに接続し、下記コマンドを実行します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker ps | grep tensor</span><br><span class="line"><span class="comment"># コンテナIDを確認</span></span><br><span class="line">073300c20aec        tensorflow/tensorflow:1.8.0-gpu-py3   <span class="string">&quot;/bin/bash&quot;</span>         20 minutes ago      Up 20 minutes       0.0.0.0:6006-&gt;6006/tcp, 8888/tcp   reverent_spence</span><br><span class="line"><span class="comment"># sudo docker attach だと既に動いている学習中のセッションにつながるため exec で繋ぐ</span></span><br><span class="line">$ sudo docker <span class="built_in">exec</span> -it 073300c20aec /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># コンテナの中</span></span><br><span class="line"><span class="comment"># 前段で実行した python に渡した引数と同じ場所を指定</span></span><br><span class="line">$ tensorboard --logdir /var/<span class="built_in">log</span>/tensorflow</span><br></pre></td></tr></table></figure><p>TensorBoardが起動するので、ブラウザからホストOSのポートにアクセスします。<br><strong>学習初期</strong><br><a href="../../../../public/2018/05/screencapture-192-168-11-21-6006-2018-05-05-23_22_36.png"><img src="../../../../public/2018/05/screencapture-192-168-11-21-6006-2018-05-05-23_22_36-1024x564.png"></a> <strong>学習終了</strong> <a href="../../../../public/2018/05/screencapture-192-168-11-21-6006-2018-05-05-23_10_47.png"><img src="../../../../public/2018/05/screencapture-192-168-11-21-6006-2018-05-05-23_10_47-1024x564.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> %e3%83%87%e3%82%a3%e3%83%bc%e3%83%97%e3%83%a9%e3%83%bc%e3%83%8b%e3%83%b3%e3%82%b0 </category>
          
          <category> gpupu </category>
          
          <category> ディープラーニング </category>
          
          <category> Ubuntu </category>
          
          <category> CUDA </category>
          
          <category> GPUPU </category>
          
          <category> TensorFlow </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その119 YOLOv3をnvidia docker on Ubuntu 18.04で動かす</title>
      <link href="2018/05/05/3007/"/>
      <url>2018/05/05/3007/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>nvidia docker</strong>を使えるようになったので、Ubuntuでも<strong>YOLOv3</strong>を試してみます。</p><h1 id="Get-Started"><a href="#Get-Started" class="headerlink" title="Get Started"></a>Get Started</h1><p>今回は、自分で<strong>DockerHub</strong>にイメージをpushしてみました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://hub.docker.com/[object Object]olo-darknet/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=hub.docker.com"></img><div class="hbc-site-name">hub.docker.com</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">Docker Hub</div><div class="hbc-url">https://hub.docker.com/[object Object]olo-darknet/</div></div></div></div></a></div></div><p><strong>dockerfile</strong>もgithubに登録してあります。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/takuya-takeuchi/Demo/blob/master/Dockerfiles/yolo-darknet/9.1-cudnn7-devel-ubuntu16.04/Dockerfile" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/6241854?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">takuya-takeuchi/Demo</div><div class="hbc-url">https://github.com/takuya-takeuchi/Demo/blob/master/Dockerfiles/yolo-darknet/9.1-cudnn7-devel-ubuntu16.04/Dockerfile</div><div class="hbc-description">Sample source code for Demonstration, Experiment and Test - takuya-takeuchi/Demo</div></div></div></div></a></div></div><p>dockerfileの中身はシンプルに</p><ol><li>apt-getで必要なバイナリ収集</li><li>OpenCVをビルドしてインストール</li><li>darknetのビルド</li></ol><p>を行っています。<br>下記のコマンドで、イメージをpullし、コンテナに入れます。<br>実行後は、コンテナは破棄されます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo nvidia-docker run --rm -i -t takuyatakeuchi/yolo-darknet:9.1-cudnn7-devel-ubuntu16.04 /bin/bash</span><br></pre></td></tr></table></figure><p>コンテナに入ったら、weightファイルを拾ってきて、実行します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /tmp/darknet</span><br><span class="line">$ wget wget https://pjreddie.com/media/files/yolov3.weights</span><br><span class="line">$ /darknet detect cfg/yolov3.cfg yolov3.weights data/dog.jpg</span><br><span class="line">layer     filters    size              input                output</span><br><span class="line">    0 conv     32  3 x 3 / 1   416 x 416 x   3   -&gt;   416 x 416 x  32  0.299 BFLOPs</span><br><span class="line">    1 conv     64  3 x 3 / 2   416 x 416 x  32   -&gt;   208 x 208 x  64  1.595 BFLOPs</span><br><span class="line">    2 conv     32  1 x 1 / 1   208 x 208 x  64   -&gt;   208 x 208 x  32  0.177 BFLOPs</span><br><span class="line">    3 conv     64  3 x 3 / 1   208 x 208 x  32   -&gt;   208 x 208 x  64  1.595 BFLOPs</span><br><span class="line">    4 res    1                 208 x 208 x  64   -&gt;   208 x 208 x  64</span><br><span class="line">    5 conv    128  3 x 3 / 2   208 x 208 x  64   -&gt;   104 x 104 x 128  1.595 BFLOPs</span><br><span class="line">    6 conv     64  1 x 1 / 1   104 x 104 x 128   -&gt;   104 x 104 x  64  0.177 BFLOPs</span><br><span class="line">    7 conv    128  3 x 3 / 1   104 x 104 x  64   -&gt;   104 x 104 x 128  1.595 BFLOPs</span><br><span class="line">    8 res    5                 104 x 104 x 128   -&gt;   104 x 104 x 128</span><br><span class="line">    9 conv     64  1 x 1 / 1   104 x 104 x 128   -&gt;   104 x 104 x  64  0.177 BFLOPs</span><br><span class="line">   10 conv    128  3 x 3 / 1   104 x 104 x  64   -&gt;   104 x 104 x 128  1.595 BFLOPs</span><br><span class="line">   11 res    8                 104 x 104 x 128   -&gt;   104 x 104 x 128</span><br><span class="line">   12 conv    256  3 x 3 / 2   104 x 104 x 128   -&gt;    52 x  52 x 256  1.595 BFLOPs</span><br><span class="line">   13 conv    128  1 x 1 / 1    52 x  52 x 256   -&gt;    52 x  52 x 128  0.177 BFLOPs</span><br><span class="line">   14 conv    256  3 x 3 / 1    52 x  52 x 128   -&gt;    52 x  52 x 256  1.595 BFLOPs</span><br><span class="line">   15 res   12                  52 x  52 x 256   -&gt;    52 x  52 x 256</span><br><span class="line">   16 conv    128  1 x 1 / 1    52 x  52 x 256   -&gt;    52 x  52 x 128  0.177 BFLOPs</span><br><span class="line">   17 conv    256  3 x 3 / 1    52 x  52 x 128   -&gt;    52 x  52 x 256  1.595 BFLOPs</span><br><span class="line">   18 res   15                  52 x  52 x 256   -&gt;    52 x  52 x 256</span><br><span class="line">   19 conv    128  1 x 1 / 1    52 x  52 x 256   -&gt;    52 x  52 x 128  0.177 BFLOPs</span><br><span class="line">   20 conv    256  3 x 3 / 1    52 x  52 x 128   -&gt;    52 x  52 x 256  1.595 BFLOPs</span><br><span class="line">   21 res   18                  52 x  52 x 256   -&gt;    52 x  52 x 256</span><br><span class="line">   22 conv    128  1 x 1 / 1    52 x  52 x 256   -&gt;    52 x  52 x 128  0.177 BFLOPs</span><br><span class="line">   23 conv    256  3 x 3 / 1    52 x  52 x 128   -&gt;    52 x  52 x 256  1.595 BFLOPs</span><br><span class="line">   24 res   21                  52 x  52 x 256   -&gt;    52 x  52 x 256</span><br><span class="line">   25 conv    128  1 x 1 / 1    52 x  52 x 256   -&gt;    52 x  52 x 128  0.177 BFLOPs</span><br><span class="line">   26 conv    256  3 x 3 / 1    52 x  52 x 128   -&gt;    52 x  52 x 256  1.595 BFLOPs</span><br><span class="line">   27 res   24                  52 x  52 x 256   -&gt;    52 x  52 x 256</span><br><span class="line">   28 conv    128  1 x 1 / 1    52 x  52 x 256   -&gt;    52 x  52 x 128  0.177 BFLOPs</span><br><span class="line">   29 conv    256  3 x 3 / 1    52 x  52 x 128   -&gt;    52 x  52 x 256  1.595 BFLOPs</span><br><span class="line">   30 res   27                  52 x  52 x 256   -&gt;    52 x  52 x 256</span><br><span class="line">   31 conv    128  1 x 1 / 1    52 x  52 x 256   -&gt;    52 x  52 x 128  0.177 BFLOPs</span><br><span class="line">   32 conv    256  3 x 3 / 1    52 x  52 x 128   -&gt;    52 x  52 x 256  1.595 BFLOPs</span><br><span class="line">   33 res   30                  52 x  52 x 256   -&gt;    52 x  52 x 256</span><br><span class="line">   34 conv    128  1 x 1 / 1    52 x  52 x 256   -&gt;    52 x  52 x 128  0.177 BFLOPs</span><br><span class="line">   35 conv    256  3 x 3 / 1    52 x  52 x 128   -&gt;    52 x  52 x 256  1.595 BFLOPs</span><br><span class="line">   36 res   33                  52 x  52 x 256   -&gt;    52 x  52 x 256</span><br><span class="line">   37 conv    512  3 x 3 / 2    52 x  52 x 256   -&gt;    26 x  26 x 512  1.595 BFLOPs</span><br><span class="line">   38 conv    256  1 x 1 / 1    26 x  26 x 512   -&gt;    26 x  26 x 256  0.177 BFLOPs</span><br><span class="line">   39 conv    512  3 x 3 / 1    26 x  26 x 256   -&gt;    26 x  26 x 512  1.595 BFLOPs</span><br><span class="line">   40 res   37                  26 x  26 x 512   -&gt;    26 x  26 x 512</span><br><span class="line">   41 conv    256  1 x 1 / 1    26 x  26 x 512   -&gt;    26 x  26 x 256  0.177 BFLOPs</span><br><span class="line">   42 conv    512  3 x 3 / 1    26 x  26 x 256   -&gt;    26 x  26 x 512  1.595 BFLOPs</span><br><span class="line">   43 res   40                  26 x  26 x 512   -&gt;    26 x  26 x 512</span><br><span class="line">   44 conv    256  1 x 1 / 1    26 x  26 x 512   -&gt;    26 x  26 x 256  0.177 BFLOPs</span><br><span class="line">   45 conv    512  3 x 3 / 1    26 x  26 x 256   -&gt;    26 x  26 x 512  1.595 BFLOPs</span><br><span class="line">   46 res   43                  26 x  26 x 512   -&gt;    26 x  26 x 512</span><br><span class="line">   47 conv    256  1 x 1 / 1    26 x  26 x 512   -&gt;    26 x  26 x 256  0.177 BFLOPs</span><br><span class="line">   48 conv    512  3 x 3 / 1    26 x  26 x 256   -&gt;    26 x  26 x 512  1.595 BFLOPs</span><br><span class="line">   49 res   46                  26 x  26 x 512   -&gt;    26 x  26 x 512</span><br><span class="line">   50 conv    256  1 x 1 / 1    26 x  26 x 512   -&gt;    26 x  26 x 256  0.177 BFLOPs</span><br><span class="line">   51 conv    512  3 x 3 / 1    26 x  26 x 256   -&gt;    26 x  26 x 512  1.595 BFLOPs</span><br><span class="line">   52 res   49                  26 x  26 x 512   -&gt;    26 x  26 x 512</span><br><span class="line">   53 conv    256  1 x 1 / 1    26 x  26 x 512   -&gt;    26 x  26 x 256  0.177 BFLOPs</span><br><span class="line">   54 conv    512  3 x 3 / 1    26 x  26 x 256   -&gt;    26 x  26 x 512  1.595 BFLOPs</span><br><span class="line">   55 res   52                  26 x  26 x 512   -&gt;    26 x  26 x 512</span><br><span class="line">   56 conv    256  1 x 1 / 1    26 x  26 x 512   -&gt;    26 x  26 x 256  0.177 BFLOPs</span><br><span class="line">   57 conv    512  3 x 3 / 1    26 x  26 x 256   -&gt;    26 x  26 x 512  1.595 BFLOPs</span><br><span class="line">   58 res   55                  26 x  26 x 512   -&gt;    26 x  26 x 512</span><br><span class="line">   59 conv    256  1 x 1 / 1    26 x  26 x 512   -&gt;    26 x  26 x 256  0.177 BFLOPs</span><br><span class="line">   60 conv    512  3 x 3 / 1    26 x  26 x 256   -&gt;    26 x  26 x 512  1.595 BFLOPs</span><br><span class="line">   61 res   58                  26 x  26 x 512   -&gt;    26 x  26 x 512</span><br><span class="line">   62 conv   1024  3 x 3 / 2    26 x  26 x 512   -&gt;    13 x  13 x1024  1.595 BFLOPs</span><br><span class="line">   63 conv    512  1 x 1 / 1    13 x  13 x1024   -&gt;    13 x  13 x 512  0.177 BFLOPs</span><br><span class="line">   64 conv   1024  3 x 3 / 1    13 x  13 x 512   -&gt;    13 x  13 x1024  1.595 BFLOPs</span><br><span class="line">   65 res   62                  13 x  13 x1024   -&gt;    13 x  13 x1024</span><br><span class="line">   66 conv    512  1 x 1 / 1    13 x  13 x1024   -&gt;    13 x  13 x 512  0.177 BFLOPs</span><br><span class="line">   67 conv   1024  3 x 3 / 1    13 x  13 x 512   -&gt;    13 x  13 x1024  1.595 BFLOPs</span><br><span class="line">   68 res   65                  13 x  13 x1024   -&gt;    13 x  13 x1024</span><br><span class="line">   69 conv    512  1 x 1 / 1    13 x  13 x1024   -&gt;    13 x  13 x 512  0.177 BFLOPs</span><br><span class="line">   70 conv   1024  3 x 3 / 1    13 x  13 x 512   -&gt;    13 x  13 x1024  1.595 BFLOPs</span><br><span class="line">   71 res   68                  13 x  13 x1024   -&gt;    13 x  13 x1024</span><br><span class="line">   72 conv    512  1 x 1 / 1    13 x  13 x1024   -&gt;    13 x  13 x 512  0.177 BFLOPs</span><br><span class="line">   73 conv   1024  3 x 3 / 1    13 x  13 x 512   -&gt;    13 x  13 x1024  1.595 BFLOPs</span><br><span class="line">   74 res   71                  13 x  13 x1024   -&gt;    13 x  13 x1024</span><br><span class="line">   75 conv    512  1 x 1 / 1    13 x  13 x1024   -&gt;    13 x  13 x 512  0.177 BFLOPs</span><br><span class="line">   76 conv   1024  3 x 3 / 1    13 x  13 x 512   -&gt;    13 x  13 x1024  1.595 BFLOPs</span><br><span class="line">   77 conv    512  1 x 1 / 1    13 x  13 x1024   -&gt;    13 x  13 x 512  0.177 BFLOPs</span><br><span class="line">   78 conv   1024  3 x 3 / 1    13 x  13 x 512   -&gt;    13 x  13 x1024  1.595 BFLOPs</span><br><span class="line">   79 conv    512  1 x 1 / 1    13 x  13 x1024   -&gt;    13 x  13 x 512  0.177 BFLOPs</span><br><span class="line">   80 conv   1024  3 x 3 / 1    13 x  13 x 512   -&gt;    13 x  13 x1024  1.595 BFLOPs</span><br><span class="line">   81 conv    255  1 x 1 / 1    13 x  13 x1024   -&gt;    13 x  13 x 255  0.088 BFLOPs</span><br><span class="line">   82 detection</span><br><span class="line">   83 route  79</span><br><span class="line">   84 conv    256  1 x 1 / 1    13 x  13 x 512   -&gt;    13 x  13 x 256  0.044 BFLOPs</span><br><span class="line">   85 upsample            2x    13 x  13 x 256   -&gt;    26 x  26 x 256</span><br><span class="line">   86 route  85 61</span><br><span class="line">   87 conv    256  1 x 1 / 1    26 x  26 x 768   -&gt;    26 x  26 x 256  0.266 BFLOPs</span><br><span class="line">   88 conv    512  3 x 3 / 1    26 x  26 x 256   -&gt;    26 x  26 x 512  1.595 BFLOPs</span><br><span class="line">   89 conv    256  1 x 1 / 1    26 x  26 x 512   -&gt;    26 x  26 x 256  0.177 BFLOPs</span><br><span class="line">   90 conv    512  3 x 3 / 1    26 x  26 x 256   -&gt;    26 x  26 x 512  1.595 BFLOPs</span><br><span class="line">   91 conv    256  1 x 1 / 1    26 x  26 x 512   -&gt;    26 x  26 x 256  0.177 BFLOPs</span><br><span class="line">   92 conv    512  3 x 3 / 1    26 x  26 x 256   -&gt;    26 x  26 x 512  1.595 BFLOPs</span><br><span class="line">   93 conv    255  1 x 1 / 1    26 x  26 x 512   -&gt;    26 x  26 x 255  0.177 BFLOPs</span><br><span class="line">   94 detection</span><br><span class="line">   95 route  91</span><br><span class="line">   96 conv    128  1 x 1 / 1    26 x  26 x 256   -&gt;    26 x  26 x 128  0.044 BFLOPs</span><br><span class="line">   97 upsample            2x    26 x  26 x 128   -&gt;    52 x  52 x 128</span><br><span class="line">   98 route  97 36</span><br><span class="line">   99 conv    128  1 x 1 / 1    52 x  52 x 384   -&gt;    52 x  52 x 128  0.266 BFLOPs</span><br><span class="line">  100 conv    256  3 x 3 / 1    52 x  52 x 128   -&gt;    52 x  52 x 256  1.595 BFLOPs</span><br><span class="line">  101 conv    128  1 x 1 / 1    52 x  52 x 256   -&gt;    52 x  52 x 128  0.177 BFLOPs</span><br><span class="line">  102 conv    256  3 x 3 / 1    52 x  52 x 128   -&gt;    52 x  52 x 256  1.595 BFLOPs</span><br><span class="line">  103 conv    128  1 x 1 / 1    52 x  52 x 256   -&gt;    52 x  52 x 128  0.177 BFLOPs</span><br><span class="line">  104 conv    256  3 x 3 / 1    52 x  52 x 128   -&gt;    52 x  52 x 256  1.595 BFLOPs</span><br><span class="line">  105 conv    255  1 x 1 / 1    52 x  52 x 256   -&gt;    52 x  52 x 255  0.353 BFLOPs</span><br><span class="line">  106 detection</span><br><span class="line">Loading weights from yolov3.weights...Done!</span><br><span class="line">data/dog.jpg: Predicted <span class="keyword">in</span> 0.028881 seconds.</span><br><span class="line">dog: 99%</span><br><span class="line">truck: 93%</span><br><span class="line">bicycle: 99%</span><br><span class="line"></span><br><span class="line">(predictions:21): Gtk-WARNING **: cannot open display:</span><br></pre></td></tr></table></figure><p>Windows版と遜色ない性能です。<br>Docker経由でも性能は変わりません。<br>CUIでの実行なので、本来はOpenCV経由で画像が画面に表示されますが、それはエラーになっています。<br>ただし、出力結果はディスクに<strong>predictions.jpg</strong>として出力されていますので確認できます。<br><strong>scp</strong>コマンドで画像ファイルを転送するなりして確認します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp ./predictions.jpg XXXX@:~</span><br></pre></td></tr></table></figure><p><a href="../../../../public/2018/05/predictions.jpg"><img src="../../../../public/2018/05/predictions.jpg"></a></p>]]></content>
      
      
      <categories>
          
          <category> 仮想化 </category>
          
          <category> Docker </category>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> %e3%83%87%e3%82%a3%e3%83%bc%e3%83%97%e3%83%a9%e3%83%bc%e3%83%8b%e3%83%b3%e3%82%b0 </category>
          
          <category> gpupu </category>
          
          <category> ディープラーニング </category>
          
          <category> Ubuntu </category>
          
          <category> CUDA </category>
          
          <category> GPUPU </category>
          
          <category> Darknet </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETで機械学習を試してみる LibLinear.Net編 第1回</title>
      <link href="2018/05/04/3000/"/>
      <url>2018/05/04/3000/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>以前、<strong>LIBSVM</strong>という台湾生まれのSVMライブラリのC#ラッパーを作成しました。<br>今回、同じ台湾生まれの<strong>LIVLINEAR</strong>のC#ラッパー<strong>LibLinear.Net</strong>を作成しました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/takuya-takeuchi/LibLinearDotNet" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/6241854?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">takuya-takeuchi/LibLinearDotNet</div><div class="hbc-url">https://github.com/takuya-takeuchi/LibLinearDotNet</div><div class="hbc-description">.NET wrapper for LIBLINEAR written in C#. Contribute to takuya-takeuchi/LibLinearDotNet development by creating an account on GitHub.</div></div></div></div></a></div></div><p>LIVLINEARのライブラリも.NETラッパーは少ない感じです。</p><ul><li><a href="https://github.com/aardvark-platform/aardvark.semantictextonforests">libsvm.clr</a><ul><li>C++/CLIでLIBLINEARを再ビルドして.NETから呼べるようにしています。</li></ul></li></ul><p>めぼしいのはこれ位でした。<br>LibSvm.Netと同じく、</p><ul><li>XMLコメントほぼ全て英語と日本語で実装していますので、IntelliSenseがバリバリ</li><li>100%C#の.NETStandard準拠</li><li>Linuxで動く</li></ul><p>そして、前回と同じサンプルをLibLinear.Netで実装したものを持ってきました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/takuya-takeuchi/LibLinearDotNet/tree/master/example/Pendigits" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/6241854?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">takuya-takeuchi/LibLinearDotNet</div><div class="hbc-url">https://github.com/takuya-takeuchi/LibLinearDotNet/tree/master/example/Pendigits</div><div class="hbc-description">.NET wrapper for LIBLINEAR written in C#. Contribute to takuya-takeuchi/LibLinearDotNet development by creating an account on GitHub.</div></div></div></div></a></div></div><h1 id="Get-Started"><a href="#Get-Started" class="headerlink" title="Get Started"></a>Get Started</h1><p>LibSvm.Netを使うには下記の作業が必要です。</p><ol><li>NugetからLibLinear.Netのインストール</li><li>LIBLINEARのソースをダウンロード</li><li>LIBLINEARのソースをビルド</li></ol><p>ちょっと面倒ですが、どれも手順はしっかりしています。<br>LIBLINEARのビルド手順はLibLinear.Netの<a href="https://github.com/takuya-takeuchi/LibLinearDotNet/wiki/Tutorial-for-Windows">Wikiでも説明しています</a>ので参考にしてください。</p><h1 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> LibLinearDotNet;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.CommandLineUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Pendigits</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> app = <span class="keyword">new</span> CommandLineApplication(<span class="literal">false</span>);</span><br><span class="line">            app.Name = <span class="keyword">nameof</span>(Pendigits);</span><br><span class="line">            app.Description = <span class="string">&quot;The exsample program for pendigits&quot;</span>;</span><br><span class="line">            app.HelpOption(<span class="string">&quot;-h|--help&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> quietArgument = app.Argument(<span class="string">&quot;quiet&quot;</span>, <span class="string">&quot;Suppress output of LIBLINEAR&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> outputOption = app.Option(<span class="string">&quot;-o|--output&quot;</span>, <span class="string">&quot;output path for trained model&quot;</span>, CommandOptionType.SingleValue);</span><br><span class="line">            <span class="keyword">var</span> solverOption = app.Option(<span class="string">&quot;-s|--solver&quot;</span>, <span class="string">&quot;solver&quot;</span>, CommandOptionType.SingleValue);</span><br><span class="line">            <span class="keyword">var</span> biasOption = app.Option(<span class="string">&quot;-b|--bias&quot;</span>, <span class="string">&quot;bias&quot;</span>, CommandOptionType.SingleValue);</span><br><span class="line"></span><br><span class="line">            app.OnExecute(() =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (quietArgument.Value != <span class="literal">null</span>)</span><br><span class="line">                    LibLinear.SetPrintFunction(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> biasStr = <span class="string">&quot;-1&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span> (biasOption.HasValue())</span><br><span class="line">                    biasStr = biasOption.Value();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!<span class="keyword">double</span>.TryParse(biasStr, <span class="keyword">out</span> <span class="keyword">var</span> bias))</span><br><span class="line">                &#123;</span><br><span class="line">                    app.ShowHelp();</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> solverStr = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span> (solverOption.HasValue())</span><br><span class="line">                    solverStr = solverOption.Value();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!<span class="keyword">int</span>.TryParse(solverStr, <span class="keyword">out</span> <span class="keyword">var</span> solver))</span><br><span class="line">                &#123;</span><br><span class="line">                    app.ShowHelp();</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (Enum.GetValues(<span class="keyword">typeof</span>(SolverType)).Cast&lt;<span class="keyword">int</span>&gt;().All(s =&gt; s != solver))</span><br><span class="line">                &#123;</span><br><span class="line">                    app.ShowHelp();</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> sol = (SolverType)solver;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">double</span> eps = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">switch</span> (sol)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">case</span> SolverType.L2RegularizedLogisticRegression:</span><br><span class="line">                    <span class="keyword">case</span> SolverType.L2RegularizedL2LossSupportVectorClassification:</span><br><span class="line">                        eps = <span class="number">0.01</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> SolverType.L2RegularizedL2LossSupportVectorRegression:</span><br><span class="line">                        eps = <span class="number">0.001</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> SolverType.L2RegularizedL2LossSupportVectorClassificationDual:</span><br><span class="line">                    <span class="keyword">case</span> SolverType.L2RegularizedL1LossSupportVectorClassificationDual:</span><br><span class="line">                    <span class="keyword">case</span> SolverType.MulticlassSupportVectorMachineCrammerSinger:</span><br><span class="line">                    <span class="keyword">case</span> SolverType.L2RegularizedLogisticRegressionDual:</span><br><span class="line">                        eps = <span class="number">0.1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> SolverType.L1RegularizedL2LossSupportVectorClassification:</span><br><span class="line">                    <span class="keyword">case</span> SolverType.L1RegularizedLogisticRegression:</span><br><span class="line">                        eps = <span class="number">0.01</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> SolverType.L2RegularizedL2LossSupportVectorRegressionDual:</span><br><span class="line">                    <span class="keyword">case</span> SolverType.L2RegularizedL1LossSupportVectorRegressionDual:</span><br><span class="line">                        eps = <span class="number">0.1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> output = outputOption.Value();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Load training data and test data set</span></span><br><span class="line">                <span class="keyword">using</span> (<span class="keyword">var</span> train = Problem.FromFile(<span class="string">&quot;pendigits&quot;</span>, bias))</span><br><span class="line">                <span class="keyword">using</span> (<span class="keyword">var</span> test = Problem.FromFile(<span class="string">&quot;pendigits.t&quot;</span>, bias))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// Configure parameter</span></span><br><span class="line">                    <span class="keyword">var</span> param = <span class="keyword">new</span> Parameter</span><br><span class="line">                    &#123;</span><br><span class="line">                        SolverType = sol,</span><br><span class="line">                        C = <span class="number">1</span>d,</span><br><span class="line">                        Epsilon = eps,</span><br><span class="line">                        P = <span class="number">0.1</span>,</span><br><span class="line">                        WeightLabel = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>],</span><br><span class="line">                        Weight = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">0</span>]</span><br><span class="line">                    &#125;;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">var</span> message = LibLinear.CheckParameter(train, param);</span><br><span class="line">                    <span class="keyword">if</span> (!<span class="keyword">string</span>.IsNullOrWhiteSpace(message))</span><br><span class="line">                    &#123;</span><br><span class="line">                        Console.WriteLine(<span class="string">$&quot;Error: <span class="subst">&#123;message&#125;</span> for train problem&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Train training data</span></span><br><span class="line">                    <span class="keyword">var</span> sw = <span class="keyword">new</span> Stopwatch();</span><br><span class="line">                    sw.Start();</span><br><span class="line">                    <span class="keyword">using</span> (<span class="keyword">var</span> model = LibLinear.Train(train, param))</span><br><span class="line">                    &#123;</span><br><span class="line">                        sw.Stop();</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (!<span class="keyword">string</span>.IsNullOrWhiteSpace(output))</span><br><span class="line">                            Model.Save(output, model);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">var</span> correct = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">var</span> total = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">var</span> x = test.X;</span><br><span class="line">                        <span class="keyword">var</span> y = test.Y;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">double</span> error = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">double</span> sump = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">double</span> sumt = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">double</span> sumpp = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">double</span> sumtt = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">double</span> sumpt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; test.Length; i++)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="comment">// Get vector from test data</span></span><br><span class="line">                            <span class="keyword">var</span> array = x[i];</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// Get classification result (returns label)</span></span><br><span class="line">                            <span class="keyword">var</span> target = y[i];</span><br><span class="line">                            <span class="keyword">var</span> predict = LibLinear.Predict(model, array);</span><br><span class="line">                            <span class="keyword">if</span> (Math.Abs(predict - target) &lt; <span class="keyword">double</span>.Epsilon)</span><br><span class="line">                                correct++;</span><br><span class="line"></span><br><span class="line">                            error += (predict - target) * (predict - target);</span><br><span class="line">                            sump += predict;</span><br><span class="line">                            sumt += target;</span><br><span class="line">                            sumpp += predict * predict;</span><br><span class="line">                            sumtt += target * target;</span><br><span class="line">                            sumpt += predict * target;</span><br><span class="line"></span><br><span class="line">                            total++;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (model.IsRegressionModel)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">var</span> mse = error / total;</span><br><span class="line">                            <span class="keyword">var</span> scc = (total * sumpt - sump * sumt) * (total * sumpt - sump * sumt) /</span><br><span class="line">                                      ((total * sumpp - sump * sump) * (total * sumtt - sumt * sumt));</span><br><span class="line">                            Console.WriteLine(<span class="string">$&quot;Mean squared error: <span class="subst">&#123;mse:f5&#125;</span>%, Squared correlation coefficient: <span class="subst">&#123;scc:f6&#125;</span>, Elapsed: <span class="subst">&#123;sw.ElapsedMilliseconds&#125;</span>ms&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">var</span> accuracy = correct / (<span class="keyword">double</span>)total * <span class="number">100</span>;</span><br><span class="line">                            Console.WriteLine(<span class="string">$&quot;Accuracy: <span class="subst">&#123;accuracy:f4&#125;</span>% (<span class="subst">&#123;correct&#125;</span>/<span class="subst">&#123;total&#125;</span>), Elapsed: <span class="subst">&#123;sw.ElapsedMilliseconds&#125;</span>ms&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            app.Execute(args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このサンプルは、訓練データとテストデータの分類または回帰を実行します。<br>実行のために、</p><ul><li><a href="https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/multiclass/pendigits">https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/multiclass/pendigits</a></li><li><a href="https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/multiclass/pendigits.t">https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/multiclass/pendigits.t</a></li></ul><p>をダウンロードします。<br>これは手書き数字のデータセットです。MNISTと似ているのかな? 引数として、</p><ul><li>ソルバー (オプション)<ul><li>例: -s=4</li></ul></li><li>バイアス (オプション)<ul><li>例: -b=3</li></ul></li><li>学習済みファイルの出力先 (オプション)<ul><li>例: -o=trained.model</li></ul></li></ul><p>を指定できます。<br>分類と回帰によって実行結果が異なります。</p><h2 id="分類"><a href="#分類" class="headerlink" title="分類"></a>分類</h2><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\\<span class="title">Works</span>\\<span class="title">OpenSource</span>\\<span class="title">LibSvmDotNet</span>\\<span class="title">example</span>\\<span class="title">Pendigits</span>&gt; <span class="title">dotnet</span> <span class="title">run</span> -<span class="title">c</span> <span class="title">Release</span> <span class="title">optimization</span> <span class="title">finished</span>, #<span class="title">iter</span> = 1000  </span></span><br><span class="line"><span class="function"><span class="title">WARNING</span>: <span class="title">reaching</span> <span class="title">max</span> <span class="title">number</span> <span class="title">of</span> <span class="title">iterations</span> <span class="title">Using</span> -<span class="title">s</span> 2 <span class="title">may</span> <span class="title">be</span> <span class="title">faster</span> (<span class="title">also</span> <span class="title">see</span> <span class="title">FAQ</span>)  </span></span><br><span class="line"><span class="function"><span class="title">Objective</span> <span class="title">value</span> = -10.592368 <span class="title">nSV</span> = 1404 \* . . . <span class="title">WARNING</span>: <span class="title">reaching</span> <span class="title">max</span> <span class="title">number</span> <span class="title">of</span> <span class="title">iterations</span> <span class="title">Using</span> -<span class="title">s</span> 2 <span class="title">may</span> <span class="title">be</span> <span class="title">faster</span> (<span class="title">also</span> <span class="title">see</span> <span class="title">FAQ</span>)  </span></span><br><span class="line"><span class="function"><span class="title">Objective</span> <span class="title">value</span> = -3.640437 <span class="title">nSV</span> = 592 <span class="title">Accuracy</span>: 79.7027% (2788/3498), <span class="title">Elapsed</span>: 1737<span class="title">ms</span></span></span><br></pre></td></tr></table></figure><h2 id="回帰"><a href="#回帰" class="headerlink" title="回帰"></a>回帰</h2><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">Works</span>\<span class="title">OpenSource</span>\<span class="title">LibSvmDotNet</span>\<span class="title">example</span>\<span class="title">Pendigits</span>&gt; <span class="title">dotnet</span> <span class="title">run</span> -<span class="title">c</span> <span class="title">Release</span> &quot;-<span class="title">s</span>=11&quot;</span></span><br><span class="line"><span class="function"><span class="title">iter</span>  1 <span class="title">act</span> 1.445<span class="title">e</span>+05 <span class="title">pre</span> 1.623<span class="title">e</span>+05 <span class="title">delta</span> 1.690<span class="title">e</span>+01 <span class="title">f</span> 2.026<span class="title">e</span>+05 |<span class="title">g</span>| 1.405<span class="title">e</span>+07 <span class="title">CG</span>   1</span></span><br><span class="line"><span class="function"><span class="title">cg</span> <span class="title">reaches</span> <span class="title">trust</span> <span class="title">region</span> <span class="title">boundary</span></span></span><br><span class="line"><span class="function"><span class="title">iter</span>  2 <span class="title">act</span> 1.430<span class="title">e</span>+04 <span class="title">pre</span> 1.418<span class="title">e</span>+04 <span class="title">delta</span> 6.758<span class="title">e</span>+01 <span class="title">f</span> 5.808<span class="title">e</span>+04 |<span class="title">g</span>| 1.746<span class="title">e</span>+06 <span class="title">CG</span>   2</span></span><br><span class="line"><span class="function"><span class="title">iter</span>  3 <span class="title">act</span> 5.313<span class="title">e</span>+03 <span class="title">pre</span> 5.281<span class="title">e</span>+03 <span class="title">delta</span> 6.758<span class="title">e</span>+01 <span class="title">f</span> 4.378<span class="title">e</span>+04 |<span class="title">g</span>| 2.849<span class="title">e</span>+05 <span class="title">CG</span>   9</span></span><br><span class="line"><span class="function"><span class="title">iter</span>  4 <span class="title">act</span> 6.203<span class="title">e</span>+01 <span class="title">pre</span> 6.202<span class="title">e</span>+01 <span class="title">delta</span> 6.758<span class="title">e</span>+01 <span class="title">f</span> 3.847<span class="title">e</span>+04 |<span class="title">g</span>| 2.140<span class="title">e</span>+04 <span class="title">CG</span>  11</span></span><br><span class="line"><span class="function"><span class="title">Mean</span> <span class="title">squared</span> <span class="title">error</span>: 6.60231%, <span class="title">Squared</span> <span class="title">correlation</span> <span class="title">coefficient</span>: 0.215259, <span class="title">Elapsed</span>: 13<span class="title">ms</span></span></span><br></pre></td></tr></table></figure><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>またも、正直車輪の再発明な気がしないでもないですが… LibLinearのメリットは、大規模データに対してLibSvmよりも高速に実行できるところがウリのようです。<br>このあたりの高速性も紹介していきたいです。</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/LibLinearDotNet/tree/master/example/Pendigits">https://github.com/takuya-takeuchi/LibLinearDotNet/tree/master/example/Pendigits</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET </category>
          
          <category> net-framework </category>
          
          <category> .NET Framework </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> net </category>
          
          <category> .NET Core </category>
          
          <category> 機械学習 </category>
          
          <category> .NETで機械学習を試してみる LibLinear.Net編 </category>
          
          <category> LibLinear.Net </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その118 Dockerのビルド時間 (主にapt-getやyum) を短縮する</title>
      <link href="2018/05/03/2995/"/>
      <url>2018/05/03/2995/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>備忘録。<br>Dockerで毎回buildまたはrunするとき、apt-getやyumが含まれると構築に時間がかかります。<br>ネットで調べてみると透過型Proxyとか色々対応策がありましたが、上手くいきませんでした。</p><p>そんな中、DockerHubから取得したイメージそのものを更新する、という手法を見つけました。</p><h1 id="How-to"><a href="#How-to" class="headerlink" title="How to?"></a>How to?</h1><p>素晴らしいアイデアはこちら。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://qiita.com/mojatter/items/1525ac40e61ff124543e" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=qiita.com"></img><div class="hbc-site-name">Qiita</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.qiita.com%2Fassets%2Fpublic%2Farticle-ogp-background-1150d8b18a7c15795b701a55ae908f94.png?ixlib=rb-1.2.2&w=1200&mark=https%3A%2F%2Fqiita-user-contents.imgix.net%2F~text%3Fixlib%3Drb-1.2.2%26w%3D840%26h%3D380%26txt%3DDockerfile%2520%25E3%2583%2593%25E3%2583%25AB%25E3%2583%2589%25E6%2599%2582%25E9%2596%2593%25E7%259F%25AD%25E7%25B8%25AE%2520tips%26txt-color%3D%2523333%26txt-font%3DHiragino%2520Sans%2520W6%26txt-size%3D54%26txt-clip%3Dellipsis%26txt-align%3Dcenter%252Cmiddle%26s%3D5346295cb9507b8c6de57facc6d3932f&mark-align=center%2Cmiddle&blend=https%3A%2F%2Fqiita-user-contents.imgix.net%2F~text%3Fixlib%3Drb-1.2.2%26w%3D840%26h%3D500%26txt%3D%2540mojatter%26txt-color%3D%2523333%26txt-font%3DHiragino%2520Sans%2520W6%26txt-size%3D45%26txt-align%3Dright%252Cbottom%26s%3De248b77b051eefa6f83b0d3d1981c51f&blend-align=center%2Cmiddle&blend-mode=normal&s=53f861de3f3f914523389b16ddb1bbd4"></img></div><div class="hbc-text"><div class="hbc-title">Dockerfile ビルド時間短縮 tips - Qiita</div><div class="hbc-url">https://qiita.com/mojatter/items/1525ac40e61ff124543e</div><div class="hbc-description">ubuntu や centos などの dockerhub イメージを使って Dockerfile を書くとき、大抵の場合 apt-get update や yum update を先頭に書きます。FROM ubuntu:late...</div></div></div></div></a></div></div><p>手順は下記</p><h2 id="1-ホストOS上"><a href="#1-ホストOS上" class="headerlink" title="1. ホストOS上"></a>1. ホストOS上</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &lt;base_image&gt; から &lt;temp_containe_name&gt; というコンテナを実行</span></span><br><span class="line">$ docker run -it --name &lt;temp_containe_name&gt; &lt;base_image&gt; </span><br></pre></td></tr></table></figure><h2 id="2-コンテナ内"><a href="#2-コンテナ内" class="headerlink" title="2. コンテナ内"></a>2. コンテナ内</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 取得したいパッケージのインストール</span></span><br><span class="line">$ apt-get update &amp;&amp; apt-get -y upgrade &amp;&amp; apt-get clean</span><br><span class="line">$ <span class="built_in">exit</span> </span><br></pre></td></tr></table></figure><h2 id="3-ホストOS上"><a href="#3-ホストOS上" class="headerlink" title="3. ホストOS上"></a>3. ホストOS上</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &lt;base_image&gt; を上書き</span></span><br><span class="line">$ docker commit &lt;temp_containe_name&gt; &lt;base_image&gt; <span class="comment"># 仮コンテナを削除</span></span><br><span class="line">$ docker rm &lt;temp_containe_name&gt; </span><br></pre></td></tr></table></figure><p>実際は、元となるイメージは複製しておくと、より安心ですね。<br>最終のビルドテスト時に、<strong>FROM</strong>をオリジナルに戻せば事足りそうです。</p>]]></content>
      
      
      <categories>
          
          <category> 仮想化 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その117 UbuntuでDokcerイメージの置き場所を変更する</title>
      <link href="2018/05/01/2984/"/>
      <url>2018/05/01/2984/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><font color="red">2018/05/01 更新 NTFSのパーティションを置き場所として指定しましたが、dockerではNTFSは未サポートとのこと。<br>詳細は、<a href="https://github.com/moby/moby/issues/23930#issuecomment-349333857">how to solve it? docker: error creating overlay mount to invalid argument #23930</a> </font></p><p>備忘録。<br>USBメモリに格納したUbuntuでdockerを動かしているが、dockerは何かとディスクの容量を食うのと、書き込みが多いとUSBの耐久性が心配なので、イメージの場所を変えてみることにした。</p><h1 id="How-to"><a href="#How-to" class="headerlink" title="How to?"></a>How to?</h1><p>もぉそのままズバリな記事を書いてくださっている方が。ありがとうございます。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://qiita.com/RyoMa_0923/items/e1174b2951411ddd1d08" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=qiita.com"></img><div class="hbc-site-name">Qiita</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.qiita.com%2Fassets%2Fpublic%2Farticle-ogp-background-1150d8b18a7c15795b701a55ae908f94.png?ixlib=rb-1.2.2&w=1200&mark=https%3A%2F%2Fqiita-user-contents.imgix.net%2F~text%3Fixlib%3Drb-1.2.2%26w%3D840%26h%3D380%26txt%3DDocker%25E3%2582%25A4%25E3%2583%25A1%25E3%2583%25BC%25E3%2582%25B8%25E3%2581%25AE%25E6%25A0%25BC%25E7%25B4%258D%25E5%2585%2588%25E5%25A4%2589%25E6%259B%25B4%26txt-color%3D%2523333%26txt-font%3DHiragino%2520Sans%2520W6%26txt-size%3D54%26txt-clip%3Dellipsis%26txt-align%3Dcenter%252Cmiddle%26s%3Dbd5b83ad7eeb07d88e92e3f7b9b333a6&mark-align=center%2Cmiddle&blend=https%3A%2F%2Fqiita-user-contents.imgix.net%2F~text%3Fixlib%3Drb-1.2.2%26w%3D840%26h%3D500%26txt%3D%2540RyoMa_0923%26txt-color%3D%2523333%26txt-font%3DHiragino%2520Sans%2520W6%26txt-size%3D45%26txt-align%3Dright%252Cbottom%26s%3D4b8a4a6350f29db6b80ba317537cf6b7&blend-align=center%2Cmiddle&blend-mode=normal&s=00fa16597097bc2ebb282ce935a5ce77"></img></div><div class="hbc-text"><div class="hbc-title">Dockerイメージの格納先変更 - Qiita</div><div class="hbc-url">https://qiita.com/RyoMa_0923/items/e1174b2951411ddd1d08</div><div class="hbc-description">Ubuntuでインストールしたdockerはデフォルトでは/var/lib/docker配下にイメージを格納します。とは言うでも/var/lib/dockerを含んだボリュームのサイズがそんなに大きくないよ!なんてことあると...</div></div></div></div></a></div></div><p>要するに、**/lib/systemd/system/docker.service**の中身を変更しなさい、ってことでした。<br>上の先人様は、docker.serviceを今後は編集したくない、ということで環境変数経由で設定を変更するという目から鱗な方法で対応されています。<br>私もそれを真似ます。</p><h2 id="docker-service-の修正"><a href="#docker-service-の修正" class="headerlink" title="docker.service の修正"></a>docker.service の修正</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi /lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure><p><strong>編集前</strong> </p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExecStart=/usr/bin/dockerd -H fd://</span><br></pre></td></tr></table></figure><p><strong>編集後</strong> </p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#ExecStart=/usr/bin/dockerd -H fd://</span><br><span class="line">EnvironmentFile=/<span class="keyword">opt</span>/config/docker</span><br><span class="line">ExecStart=/usr/bin/dockerd $OPTIONS</span><br></pre></td></tr></table></figure><h2 id="opt-config-docker-の作成"><a href="#opt-config-docker-の作成" class="headerlink" title="/opt/config/docker の作成"></a>/opt/config/docker の作成</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mkdir /opt/config</span><br><span class="line">$ sudo vi /opt/config/docker</span><br></pre></td></tr></table></figure><p><strong>追加</strong> </p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OPTIONS=<span class="string">&quot;-H fd:// -g /home/XXXXX/media/hdd/windows/VirtualMachines/docker/Ubuntu/&quot;</span></span><br></pre></td></tr></table></figure><h2 id="編集の反映と確認"><a href="#編集の反映と確認" class="headerlink" title="編集の反映と確認"></a>編集の反映と確認</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line">$ sudo systemctl restart docker</span><br><span class="line"></span><br><span class="line">$ ps -ef | grep docker</span><br><span class="line">root      3593     1  4 21:37 ?        00:01:07 /usr/bin/dockerd -H fd:// -g /home/XXXXX/media/hdd/windows/VirtualMachines/docker/Ubuntu/</span><br><span class="line">root      3622  3593  0 21:37 ?        00:00:02 docker-containerd --config /var/run/docker/containerd/containerd.toml</span><br><span class="line">takuya    4018  3865  0 21:59 pts/1    00:00:00 grep --color=auto docker</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 仮想化 </category>
          
          <category> Docker </category>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その116 /etc/fstabでホームディレクトリを認識しない</title>
      <link href="2018/05/01/2981/"/>
      <url>2018/05/01/2981/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>備忘録。<br>**/etc/fstab** に下記のように書いてもマウントできなかった。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UUID=68ACE6B0ACE677C8 ~/media/hdd/windows ntfs default 0 0</span><br></pre></td></tr></table></figure><h1 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h1><p>まぁお察しの通り、ホームディレクトリを表すチルダ(~)は、fstabがロードされる時点では、どのユーザに対応づけられているかわからないためでした。<br>同じ事を聞いている人がいました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://ubuntuforums.org/showthread.php?t=1005309" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=ubuntuforums.org"></img><div class="hbc-site-name">ubuntuforums.org</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">[all variants] mount a partition to ~/&lt;dir&gt;</div><div class="hbc-url">https://ubuntuforums.org/showthread.php?t=1005309</div><div class="hbc-description">How do I do this? I have a partition that is used just to store music files and I would like to mount it on the mount point ~/music for each…</div></div></div></div></a></div></div><p>きちんとフルパスで書きましょう。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その115 nvidia-dockerをUbuntu 18.04にインストールする</title>
      <link href="2018/05/01/2967/"/>
      <url>2018/05/01/2967/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>USBメモリに<strong>Ubuntu 18.04</strong>をインストールしたため、Windowsが入っているディスクを汚さずにUbuntuを使えるようになりました。</p><p>で、2018年4月26日にリリースされた<strong>Ubuntu 18.04 LTS</strong>をインストールしました。<br>が、情報が少ないせいか、dockerがインストールできない!!とか色々…</p><p>最初は、<strong>docker-ce</strong>がいるのか!!とか思ってapt-getだ、githubだ、ソースビルドだ、って頑張ったけど、そんなものはいらないことがわかりましした。</p><h1 id="Try-out"><a href="#Try-out" class="headerlink" title="Try out!!"></a>Try out!!</h1><p>手順はここに書いてあるとおり。事前にNvidia Driverは入れておきましょう。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/NVIDIA/nvidia-docker" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/1728152?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">NVIDIA/nvidia-docker</div><div class="hbc-url">https://github.com/NVIDIA/nvidia-docker</div><div class="hbc-description">Build and run Docker containers leveraging NVIDIA GPUs - NVIDIA/nvidia-docker</div></div></div></div></a></div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># リポジトリを追加</span><br><span class="line">$ curl -s -L https:&#x2F;&#x2F;nvidia.github.io&#x2F;nvidia-docker&#x2F;gpgkey | sudo apt-key add -</span><br><span class="line">$ distribution&#x3D;$(. &#x2F;etc&#x2F;os-release;echo $ID$VERSION_ID)</span><br><span class="line">$ curl -s -L https:&#x2F;&#x2F;nvidia.github.io&#x2F;nvidia-docker&#x2F;$distribution&#x2F;nvidia-docker.list | \</span><br><span class="line">  sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;nvidia-docker.list</span><br><span class="line">$ sudo apt-get update</span><br><span class="line"> </span><br><span class="line"># nvidia-docker2をインストール</span><br><span class="line">$ sudo apt-get install -y nvidia-docker2</span><br><span class="line"># dockerのデーモンを設定して再読込</span><br><span class="line">$ sudo pkill -SIGHUP dockerd</span><br><span class="line"> </span><br><span class="line"># nvidia-smiをコンテナ上で動かす</span><br><span class="line">$ docker run --runtime&#x3D;nvidia --rm nvidia&#x2F;cuda nvidia-smi</span><br></pre></td></tr></table></figure><p>これだけです。<br>最後のコマンドを動かすと、グラフィックボードの状態が出力されます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --runtime=nvidia --rm nvidia/cuda nvidia-smi</span><br><span class="line">Tue May  1 10:58:19 2018</span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| NVIDIA-SMI 390.48                 Driver Version: 390.48                    |</span><br><span class="line">|-------------------------------+----------------------+----------------------+</span><br><span class="line">| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |</span><br><span class="line">| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |</span><br><span class="line">|===============================+======================+======================|</span><br><span class="line">|   0  GeForce GTX 1080    Off  | 00000000:01:00.0  On |                  N/A |</span><br><span class="line">| 27%   33C    P8     7W / 180W |    282MiB /  8117MiB |      0%      Default |</span><br><span class="line">+-------------------------------+----------------------+----------------------+</span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| Processes:                                                       GPU Memory |</span><br><span class="line">|  GPU       PID   Type   Process name                             Usage      |</span><br><span class="line">|=============================================================================|</span><br><span class="line">+-----------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure><p>ちなみに、docker-ceの17.12が動いています。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ docker version</span><br><span class="line">Client:</span><br><span class="line"> Version:       17.12.1-ce</span><br><span class="line"> API version:   1.35</span><br><span class="line"> Go version:    go1.10.1</span><br><span class="line"> Git commit:    7390fc6</span><br><span class="line"> Built: Wed Apr 18 01:23:11 2018</span><br><span class="line"> OS/Arch:       linux/amd64</span><br><span class="line"> </span><br><span class="line">$ apt-cache depends nvidia-docker2</span><br><span class="line">nvidia-docker2</span><br><span class="line">  依存: nvidia-container-runtime</span><br><span class="line">  依存: docker.io</span><br><span class="line">  破壊: </span><br><span class="line">  置換: </span><br></pre></td></tr></table></figure><p>このことは、<a href="https://github.com/NVIDIA/nvidia-docker/issues/643">Can not install nvidia-docker2 with docker 17.12.0-ce installed #607</a>にも書いてありました。</p><blockquote><p>Packages released for ubuntu 18.04 today. It depends on docker.io, since docker-ce doesn’t have packages for 18.04 yet. Ubuntu 18.04 向けのパッケージが今日リリースされたよ。docker-ceは18.04向けのパッケージをまだ持っていないから、dockr.ioに依存しているよ。</p></blockquote><p>でもまぁ。nvidia-dockerが動くようになったので、遠慮無くcudaで遊べます。CUDAのバージョンとか気にしなくて良いので。</p>]]></content>
      
      
      <categories>
          
          <category> 仮想化 </category>
          
          <category> Docker </category>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その114 Ubuntu 18.04でNvidia Driverをインストールする</title>
      <link href="2018/05/01/2974/"/>
      <url>2018/05/01/2974/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Ubuntu 16.04であれだけ苦汁をなめさせられたNvidia Driverのインストールが拍子抜けするくらい簡単になりました。<br>Unityを捨ててGNOMEに戻ってきたからですかねぇ?</p><h1 id="How-to"><a href="#How-to" class="headerlink" title="How to?"></a>How to?</h1><p>下記のページが参考になりました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://linuxconfig.org/how-to-install-the-nvidia-drivers-on-ubuntu-18-04-bionic-beaver-linux" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=linuxconfig.org"></img><div class="hbc-site-name">linuxconfig.org</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">How to install the NVIDIA drivers on Ubuntu 18.04 Bionic Beaver Linux - LinuxConfig.org</div><div class="hbc-url">https://linuxconfig.org/how-to-install-the-nvidia-drivers-on-ubuntu-18-04-bionic-beaver-linux</div><div class="hbc-description">How to install the NVIDIA drivers on Ubuntu 18.04 Bionic Beaver Linux </div></div></div></div></a></div></div><p>手順は下記。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># デバイスの認識を確認</span></span><br><span class="line">$ ubuntu-drivers devices</span><br><span class="line">== /sys/devices/pci0000:00/0000:00:01.0/0000:01:00.0 ==</span><br><span class="line">modalias : pci:v000010DEd00001B80sv00001028sd00003366bc03sc00i00</span><br><span class="line">vendor   : NVIDIA Corporation</span><br><span class="line">model    : GP104 [GeForce GTX 1080]</span><br><span class="line">driver   : nvidia-driver-390 - distro non-free recommended</span><br><span class="line">driver   : xserver-xorg-video-nouveau - distro free <span class="built_in">builtin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自動でインストール</span></span><br><span class="line">$ sudo ubuntu-drivers autoinstall</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再起動</span></span><br><span class="line">$ sudo reboot</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挙動確認</span></span><br><span class="line">$ nvidia-smi</span><br><span class="line">Mon Apr 30 19:13:18 2018</span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| NVIDIA-SMI 390.48                 Driver Version: 390.48                    |</span><br><span class="line">|-------------------------------+----------------------+----------------------+</span><br><span class="line">| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |</span><br><span class="line">| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |</span><br><span class="line">|===============================+======================+======================|</span><br><span class="line">|   0  GeForce GTX 1080    Off  | 00000000:01:00.0  On |                  N/A |</span><br><span class="line">| 27%   41C    P0    41W / 180W |     85MiB /  8117MiB |      0%      Default |</span><br><span class="line">+-------------------------------+----------------------+----------------------+</span><br><span class="line"></span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| Processes:                                                       GPU Memory |</span><br><span class="line">|  GPU       PID   Type   Process name                             Usage      |</span><br><span class="line">|=============================================================================|</span><br><span class="line">|    0      1145      G   /usr/lib/xorg/Xorg                            33MiB |</span><br><span class="line">|    0      1195      G   /usr/bin/gnome-shell                          48MiB |</span><br><span class="line">+-----------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure><p>以上!!</p><p>しかもきちんとデスクトップ画面も表示されます。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> gpupu </category>
          
          <category> Ubuntu </category>
          
          <category> CUDA </category>
          
          <category> GPUPU </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その113 Ubuntu 18.04でRAMディスクを使う</title>
      <link href="2018/05/01/2968/"/>
      <url>2018/05/01/2968/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>防備録。<br>Ubuntuが入っているマシンがメモリ32GBなのとUSBメモリにインストールされているのもあって、不要な書き込みは避けたいのでRAMディスクを使うことにしました。<br>Windowsも標準で対応しませんかねぇ?</p><h1 id="How-to"><a href="#How-to" class="headerlink" title="How to?"></a>How to?</h1><p>下記のページが参考になりました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://itemy.net/?p=501" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=itemy.net"></img><div class="hbc-site-name">Logfile</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="http://itemy.net/blog/wp-content/themes/simplicity2/images/og-image.jpg"></img></div><div class="hbc-text"><div class="hbc-title">UbuntuでRAMDISKにテンポラリやログを移す</div><div class="hbc-url">http://itemy.net/?p=501</div><div class="hbc-description">SDカードにUbuntuをインストールしてテスト用のサーバーを作ったけど、SDカードの寿命を考えて少しでもアクセスを減らすためにテンポラリやログファイルをRAMDISKに移す方法。ちょっとしたテスト用だから遡ってログファイルなんて見ないし保</div></div></div></div></a></div></div><p>上のページだと、<strong>nano</strong>を使ってエディタ編集していました。最初、nanoって何だっけ?って思いました。</p><p>手順は下記。</p><h2 id="RAMディスクの割り当て"><a href="#RAMディスクの割り当て" class="headerlink" title="RAMディスクの割り当て"></a>RAMディスクの割り当て</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi /etc/fstab</span><br></pre></td></tr></table></figure><p>下記の記述を追加。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tmpfs /var/<span class="built_in">log</span> tmpfs defaults,noatime,size=128m 0 0</span><br><span class="line">tmpfs /var/tmp tmpfs defaults,noatime,size=512m 0 0</span><br><span class="line">tmpfs /tmp tmpfs defaults,noatime,size=512m 0 0</span><br></pre></td></tr></table></figure><h2 id="ディレクトリの作成"><a href="#ディレクトリの作成" class="headerlink" title="ディレクトリの作成"></a>ディレクトリの作成</h2><p>起動時に上で割り当てたRAMディスクのマウント先を作成するようにします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi /etc/rc.local</span><br></pre></td></tr></table></figure><p>下記の記述を追加。<br>アプリでエラーが出たら都度追加します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /var/<span class="built_in">log</span>/apt</span><br><span class="line">mkdir -p /var/<span class="built_in">log</span>/fsck</span><br><span class="line"></span><br><span class="line">touch /var/<span class="built_in">log</span>/lastlog</span><br><span class="line">touch /var/<span class="built_in">log</span>/wtmp</span><br><span class="line">touch /var/<span class="built_in">log</span>/btmp</span><br><span class="line">chown root.utmp /var/<span class="built_in">log</span>/lastlog</span><br><span class="line">chown root.utmp /var/<span class="built_in">log</span>/wtmp</span><br><span class="line">chown root.utmp /var/<span class="built_in">log</span>/btmp</span><br></pre></td></tr></table></figure><h2 id="確認"><a href="#確認" class="headerlink" title="確認"></a>確認</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo reboot</span><br></pre></td></tr></table></figure><p>再起動してディレクトリが作成されることを確認。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ df -h</span><br><span class="line">tmpfs           128M  404K  128M   1% /var/<span class="built_in">log</span></span><br><span class="line">tmpfs           512M  8.0K  512M   1% /tmp</span><br><span class="line">tmpfs           512M     0  512M   0% /var/tmp</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その112 YOLOv3をWindowsで試す</title>
      <link href="2018/04/30/2956/"/>
      <url>2018/04/30/2956/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>先月初めくらいに仕事で <strong>YOLOv2 (You Only Look Once v2)</strong> の検証をしていた矢先、突如現れた <strong>YOLOv3</strong>。<br>検証したくとも忙しいのと、自宅は<strong>750 Ti</strong>、会社で自由に使えるGPUマシンも<strong>750 Ti</strong>と検証するには、いささか物足りない状態でした。<br>が、今月頭に自宅の開発機を一新。</p><ul><li>Intel i7-8700 3.20GHz</li><li>32GB RAM</li><li>Nvidia GeForce GTX 1080</li></ul><p>を搭載し、一気に環境がグレードアップ。<br>GWに入ってもモチベーションが維持できていたため検証してみました。</p><h1 id="Try-out"><a href="#Try-out" class="headerlink" title="Try out!!"></a>Try out!!</h1><p>と言っても、GPUが乗っているマシンはWindows。別にUbuntu入れても良いんですが、デュアルブートにしたいので放置。<br>なので、YOLOを実装している深層学習フレームワーク <strong>Darknet</strong> のWindows版を試すことに。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/AlexeyAB/darknet" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars1.githubusercontent.com/u/4096485?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">AlexeyAB/darknet</div><div class="hbc-url">https://github.com/AlexeyAB/darknet</div><div class="hbc-description">YOLOv4v / Scaled-YOLOv4 - Neural Networks for Object Detection (Windows and Linux version of Darknet ) - AlexeyAB/darknet</div></div></div></div></a></div></div><p>仕事でも上のリポジトリにはお世話になりました。<br>今回もこれを使います。<br>使い方は上に書いてあるとおり。</p><ul><li>OpenCV 3.4.0</li><li>cuDNN 7.0</li><li>CUDA 9.1</li></ul><p>を用意して、環境変数追加、C++のプロジェクトファイルの書き換えだけです。<br>なので省略!! 肝心の比較。<br>テスト画像はお馴染みの自転車と犬と車 (768x576)。<br>ちなみに公式ページと結果が異なるのは、Windows版であるからだとおもいますが、劇的に違うわけでは無いので無視。</p><h2 id="YOLOV2"><a href="#YOLOV2" class="headerlink" title="YOLOV2"></a>YOLOV2</h2><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">D:\Works\Local\darknet\build\darknet\x64&gt; .\darknet.exe detect cfg\yolov2.cfg yolov2.weights data\dog.jpg</span><br><span class="line">layer     filters    size              input                output</span><br><span class="line">    <span class="number">0</span> conv     <span class="number">32</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>   <span class="number">416</span> x <span class="number">416</span> x   <span class="number">3</span>   -&gt;   <span class="number">416</span> x <span class="number">416</span> x  <span class="number">32</span></span><br><span class="line">    <span class="number">1</span> max          <span class="number">2</span> x <span class="number">2</span> / <span class="number">2</span>   <span class="number">416</span> x <span class="number">416</span> x  <span class="number">32</span>   -&gt;   <span class="number">208</span> x <span class="number">208</span> x  <span class="number">32</span></span><br><span class="line">    <span class="number">2</span> conv     <span class="number">64</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>   <span class="number">208</span> x <span class="number">208</span> x  <span class="number">32</span>   -&gt;   <span class="number">208</span> x <span class="number">208</span> x  <span class="number">64</span></span><br><span class="line">    <span class="number">3</span> max          <span class="number">2</span> x <span class="number">2</span> / <span class="number">2</span>   <span class="number">208</span> x <span class="number">208</span> x  <span class="number">64</span>   -&gt;   <span class="number">104</span> x <span class="number">104</span> x  <span class="number">64</span></span><br><span class="line">    <span class="number">4</span> conv    <span class="number">128</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>   <span class="number">104</span> x <span class="number">104</span> x  <span class="number">64</span>   -&gt;   <span class="number">104</span> x <span class="number">104</span> x <span class="number">128</span></span><br><span class="line">    <span class="number">5</span> conv     <span class="number">64</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>   <span class="number">104</span> x <span class="number">104</span> x <span class="number">128</span>   -&gt;   <span class="number">104</span> x <span class="number">104</span> x  <span class="number">64</span></span><br><span class="line">    <span class="number">6</span> conv    <span class="number">128</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>   <span class="number">104</span> x <span class="number">104</span> x  <span class="number">64</span>   -&gt;   <span class="number">104</span> x <span class="number">104</span> x <span class="number">128</span></span><br><span class="line">    <span class="number">7</span> max          <span class="number">2</span> x <span class="number">2</span> / <span class="number">2</span>   <span class="number">104</span> x <span class="number">104</span> x <span class="number">128</span>   -&gt;    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">128</span></span><br><span class="line">    <span class="number">8</span> conv    <span class="number">256</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">128</span>   -&gt;    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">256</span></span><br><span class="line">    <span class="number">9</span> conv    <span class="number">128</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">256</span>   -&gt;    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">128</span></span><br><span class="line">   <span class="number">10</span> conv    <span class="number">256</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">128</span>   -&gt;    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">256</span></span><br><span class="line">   <span class="number">11</span> max          <span class="number">2</span> x <span class="number">2</span> / <span class="number">2</span>    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">256</span>   -&gt;    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">256</span></span><br><span class="line">   <span class="number">12</span> conv    <span class="number">512</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">256</span>   -&gt;    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">512</span></span><br><span class="line">   <span class="number">13</span> conv    <span class="number">256</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">512</span>   -&gt;    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">256</span></span><br><span class="line">   <span class="number">14</span> conv    <span class="number">512</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">256</span>   -&gt;    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">512</span></span><br><span class="line">   <span class="number">15</span> conv    <span class="number">256</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">512</span>   -&gt;    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">256</span></span><br><span class="line">   <span class="number">16</span> conv    <span class="number">512</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">256</span>   -&gt;    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">512</span></span><br><span class="line">   <span class="number">17</span> max          <span class="number">2</span> x <span class="number">2</span> / <span class="number">2</span>    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">512</span>   -&gt;    <span class="number">13</span> x  <span class="number">13</span> x <span class="number">512</span></span><br><span class="line">   <span class="number">18</span> conv   <span class="number">1024</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">13</span> x  <span class="number">13</span> x <span class="number">512</span>   -&gt;    <span class="number">13</span> x  <span class="number">13</span> x1024</span><br><span class="line">   <span class="number">19</span> conv    <span class="number">512</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>    <span class="number">13</span> x  <span class="number">13</span> x1024   -&gt;    <span class="number">13</span> x  <span class="number">13</span> x <span class="number">512</span></span><br><span class="line">   <span class="number">20</span> conv   <span class="number">1024</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">13</span> x  <span class="number">13</span> x <span class="number">512</span>   -&gt;    <span class="number">13</span> x  <span class="number">13</span> x1024</span><br><span class="line">   <span class="number">21</span> conv    <span class="number">512</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>    <span class="number">13</span> x  <span class="number">13</span> x1024   -&gt;    <span class="number">13</span> x  <span class="number">13</span> x <span class="number">512</span></span><br><span class="line">   <span class="number">22</span> conv   <span class="number">1024</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">13</span> x  <span class="number">13</span> x <span class="number">512</span>   -&gt;    <span class="number">13</span> x  <span class="number">13</span> x1024</span><br><span class="line">   <span class="number">23</span> conv   <span class="number">1024</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">13</span> x  <span class="number">13</span> x1024   -&gt;    <span class="number">13</span> x  <span class="number">13</span> x1024</span><br><span class="line">   <span class="number">24</span> conv   <span class="number">1024</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">13</span> x  <span class="number">13</span> x1024   -&gt;    <span class="number">13</span> x  <span class="number">13</span> x1024</span><br><span class="line">   <span class="number">25</span> route  <span class="number">16</span></span><br><span class="line">   <span class="number">26</span> conv     <span class="number">64</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">512</span>   -&gt;    <span class="number">26</span> x  <span class="number">26</span> x  <span class="number">64</span></span><br><span class="line">   <span class="number">27</span> reorg              / <span class="number">2</span>    <span class="number">26</span> x  <span class="number">26</span> x  <span class="number">64</span>   -&gt;    <span class="number">13</span> x  <span class="number">13</span> x <span class="number">256</span></span><br><span class="line">   <span class="number">28</span> route  <span class="number">27</span> <span class="number">24</span></span><br><span class="line">   <span class="number">29</span> conv   <span class="number">1024</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">13</span> x  <span class="number">13</span> x1280   -&gt;    <span class="number">13</span> x  <span class="number">13</span> x1024</span><br><span class="line">   <span class="number">30</span> conv    <span class="number">425</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>    <span class="number">13</span> x  <span class="number">13</span> x1024   -&gt;    <span class="number">13</span> x  <span class="number">13</span> x <span class="number">425</span></span><br><span class="line">   <span class="number">31</span> detection</span><br><span class="line">mask_scale: <span class="keyword">Using</span> default <span class="string">&#x27;1.000000&#x27;</span></span><br><span class="line">Loading weights from yolov2.weights...</span><br><span class="line"> seen <span class="number">32</span></span><br><span class="line">Done!</span><br><span class="line">data\dog.jpg: Predicted <span class="keyword">in</span> <span class="number">0.012998</span> seconds.</span><br><span class="line">pottedplant: <span class="number">24</span>%</span><br><span class="line">bicycle: <span class="number">25</span>%</span><br><span class="line">dog: <span class="number">82</span>%</span><br><span class="line">bicycle: <span class="number">82</span>%</span><br><span class="line">truck: <span class="number">74</span>%</span><br></pre></td></tr></table></figure><h2 id="YOLOV3"><a href="#YOLOV3" class="headerlink" title="YOLOV3"></a>YOLOV3</h2><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> D:\Works\Local\darknet\build\darknet\x64&gt; .\darknet.exe detect cfg\yolov3.cfg yolov3.weights data\dog.jpg</span><br><span class="line">layer     filters    size              input                output</span><br><span class="line">    <span class="number">0</span> conv     <span class="number">32</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>   <span class="number">416</span> x <span class="number">416</span> x   <span class="number">3</span>   -&gt;   <span class="number">416</span> x <span class="number">416</span> x  <span class="number">32</span></span><br><span class="line">    <span class="number">1</span> conv     <span class="number">64</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">2</span>   <span class="number">416</span> x <span class="number">416</span> x  <span class="number">32</span>   -&gt;   <span class="number">208</span> x <span class="number">208</span> x  <span class="number">64</span></span><br><span class="line">    <span class="number">2</span> conv     <span class="number">32</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>   <span class="number">208</span> x <span class="number">208</span> x  <span class="number">64</span>   -&gt;   <span class="number">208</span> x <span class="number">208</span> x  <span class="number">32</span></span><br><span class="line">    <span class="number">3</span> conv     <span class="number">64</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>   <span class="number">208</span> x <span class="number">208</span> x  <span class="number">32</span>   -&gt;   <span class="number">208</span> x <span class="number">208</span> x  <span class="number">64</span></span><br><span class="line">    <span class="number">4</span> Shortcut Layer: <span class="number">1</span></span><br><span class="line">    <span class="number">5</span> conv    <span class="number">128</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">2</span>   <span class="number">208</span> x <span class="number">208</span> x  <span class="number">64</span>   -&gt;   <span class="number">104</span> x <span class="number">104</span> x <span class="number">128</span></span><br><span class="line">    <span class="number">6</span> conv     <span class="number">64</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>   <span class="number">104</span> x <span class="number">104</span> x <span class="number">128</span>   -&gt;   <span class="number">104</span> x <span class="number">104</span> x  <span class="number">64</span></span><br><span class="line">    <span class="number">7</span> conv    <span class="number">128</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>   <span class="number">104</span> x <span class="number">104</span> x  <span class="number">64</span>   -&gt;   <span class="number">104</span> x <span class="number">104</span> x <span class="number">128</span></span><br><span class="line">    <span class="number">8</span> Shortcut Layer: <span class="number">5</span></span><br><span class="line">    <span class="number">9</span> conv     <span class="number">64</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>   <span class="number">104</span> x <span class="number">104</span> x <span class="number">128</span>   -&gt;   <span class="number">104</span> x <span class="number">104</span> x  <span class="number">64</span></span><br><span class="line">   <span class="number">10</span> conv    <span class="number">128</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>   <span class="number">104</span> x <span class="number">104</span> x  <span class="number">64</span>   -&gt;   <span class="number">104</span> x <span class="number">104</span> x <span class="number">128</span></span><br><span class="line">   <span class="number">11</span> Shortcut Layer: <span class="number">8</span></span><br><span class="line">   <span class="number">12</span> conv    <span class="number">256</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">2</span>   <span class="number">104</span> x <span class="number">104</span> x <span class="number">128</span>   -&gt;    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">256</span></span><br><span class="line">   <span class="number">13</span> conv    <span class="number">128</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">256</span>   -&gt;    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">128</span></span><br><span class="line">   <span class="number">14</span> conv    <span class="number">256</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">128</span>   -&gt;    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">256</span></span><br><span class="line">   <span class="number">15</span> Shortcut Layer: <span class="number">12</span></span><br><span class="line">   <span class="number">16</span> conv    <span class="number">128</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">256</span>   -&gt;    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">128</span></span><br><span class="line">   <span class="number">17</span> conv    <span class="number">256</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">128</span>   -&gt;    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">256</span></span><br><span class="line">   <span class="number">18</span> Shortcut Layer: <span class="number">15</span></span><br><span class="line">   <span class="number">19</span> conv    <span class="number">128</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">256</span>   -&gt;    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">128</span></span><br><span class="line">   <span class="number">20</span> conv    <span class="number">256</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">128</span>   -&gt;    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">256</span></span><br><span class="line">   <span class="number">21</span> Shortcut Layer: <span class="number">18</span></span><br><span class="line">   <span class="number">22</span> conv    <span class="number">128</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">256</span>   -&gt;    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">128</span></span><br><span class="line">   <span class="number">23</span> conv    <span class="number">256</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">128</span>   -&gt;    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">256</span></span><br><span class="line">   <span class="number">24</span> Shortcut Layer: <span class="number">21</span></span><br><span class="line">   <span class="number">25</span> conv    <span class="number">128</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">256</span>   -&gt;    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">128</span></span><br><span class="line">   <span class="number">26</span> conv    <span class="number">256</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">128</span>   -&gt;    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">256</span></span><br><span class="line">   <span class="number">27</span> Shortcut Layer: <span class="number">24</span></span><br><span class="line">   <span class="number">28</span> conv    <span class="number">128</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">256</span>   -&gt;    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">128</span></span><br><span class="line">   <span class="number">29</span> conv    <span class="number">256</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">128</span>   -&gt;    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">256</span></span><br><span class="line">   <span class="number">30</span> Shortcut Layer: <span class="number">27</span></span><br><span class="line">   <span class="number">31</span> conv    <span class="number">128</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">256</span>   -&gt;    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">128</span></span><br><span class="line">   <span class="number">32</span> conv    <span class="number">256</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">128</span>   -&gt;    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">256</span></span><br><span class="line">   <span class="number">33</span> Shortcut Layer: <span class="number">30</span></span><br><span class="line">   <span class="number">34</span> conv    <span class="number">128</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">256</span>   -&gt;    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">128</span></span><br><span class="line">   <span class="number">35</span> conv    <span class="number">256</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">128</span>   -&gt;    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">256</span></span><br><span class="line">   <span class="number">36</span> Shortcut Layer: <span class="number">33</span></span><br><span class="line">   <span class="number">37</span> conv    <span class="number">512</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">2</span>    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">256</span>   -&gt;    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">512</span></span><br><span class="line">   <span class="number">38</span> conv    <span class="number">256</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">512</span>   -&gt;    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">256</span></span><br><span class="line">   <span class="number">39</span> conv    <span class="number">512</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">256</span>   -&gt;    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">512</span></span><br><span class="line">   <span class="number">40</span> Shortcut Layer: <span class="number">37</span></span><br><span class="line">   <span class="number">41</span> conv    <span class="number">256</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">512</span>   -&gt;    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">256</span></span><br><span class="line">   <span class="number">42</span> conv    <span class="number">512</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">256</span>   -&gt;    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">512</span></span><br><span class="line">   <span class="number">43</span> Shortcut Layer: <span class="number">40</span></span><br><span class="line">   <span class="number">44</span> conv    <span class="number">256</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">512</span>   -&gt;    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">256</span></span><br><span class="line">   <span class="number">45</span> conv    <span class="number">512</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">256</span>   -&gt;    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">512</span></span><br><span class="line">   <span class="number">46</span> Shortcut Layer: <span class="number">43</span></span><br><span class="line">   <span class="number">47</span> conv    <span class="number">256</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">512</span>   -&gt;    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">256</span></span><br><span class="line">   <span class="number">48</span> conv    <span class="number">512</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">256</span>   -&gt;    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">512</span></span><br><span class="line">   <span class="number">49</span> Shortcut Layer: <span class="number">46</span></span><br><span class="line">   <span class="number">50</span> conv    <span class="number">256</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">512</span>   -&gt;    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">256</span></span><br><span class="line">   <span class="number">51</span> conv    <span class="number">512</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">256</span>   -&gt;    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">512</span></span><br><span class="line">   <span class="number">52</span> Shortcut Layer: <span class="number">49</span></span><br><span class="line">   <span class="number">53</span> conv    <span class="number">256</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">512</span>   -&gt;    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">256</span></span><br><span class="line">   <span class="number">54</span> conv    <span class="number">512</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">256</span>   -&gt;    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">512</span></span><br><span class="line">   <span class="number">55</span> Shortcut Layer: <span class="number">52</span></span><br><span class="line">   <span class="number">56</span> conv    <span class="number">256</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">512</span>   -&gt;    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">256</span></span><br><span class="line">   <span class="number">57</span> conv    <span class="number">512</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">256</span>   -&gt;    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">512</span></span><br><span class="line">   <span class="number">58</span> Shortcut Layer: <span class="number">55</span></span><br><span class="line">   <span class="number">59</span> conv    <span class="number">256</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">512</span>   -&gt;    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">256</span></span><br><span class="line">   <span class="number">60</span> conv    <span class="number">512</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">256</span>   -&gt;    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">512</span></span><br><span class="line">   <span class="number">61</span> Shortcut Layer: <span class="number">58</span></span><br><span class="line">   <span class="number">62</span> conv   <span class="number">1024</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">2</span>    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">512</span>   -&gt;    <span class="number">13</span> x  <span class="number">13</span> x1024</span><br><span class="line">   <span class="number">63</span> conv    <span class="number">512</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>    <span class="number">13</span> x  <span class="number">13</span> x1024   -&gt;    <span class="number">13</span> x  <span class="number">13</span> x <span class="number">512</span></span><br><span class="line">   <span class="number">64</span> conv   <span class="number">1024</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">13</span> x  <span class="number">13</span> x <span class="number">512</span>   -&gt;    <span class="number">13</span> x  <span class="number">13</span> x1024</span><br><span class="line">   <span class="number">65</span> Shortcut Layer: <span class="number">62</span></span><br><span class="line">   <span class="number">66</span> conv    <span class="number">512</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>    <span class="number">13</span> x  <span class="number">13</span> x1024   -&gt;    <span class="number">13</span> x  <span class="number">13</span> x <span class="number">512</span></span><br><span class="line">   <span class="number">67</span> conv   <span class="number">1024</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">13</span> x  <span class="number">13</span> x <span class="number">512</span>   -&gt;    <span class="number">13</span> x  <span class="number">13</span> x1024</span><br><span class="line">   <span class="number">68</span> Shortcut Layer: <span class="number">65</span></span><br><span class="line">   <span class="number">69</span> conv    <span class="number">512</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>    <span class="number">13</span> x  <span class="number">13</span> x1024   -&gt;    <span class="number">13</span> x  <span class="number">13</span> x <span class="number">512</span></span><br><span class="line">   <span class="number">70</span> conv   <span class="number">1024</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">13</span> x  <span class="number">13</span> x <span class="number">512</span>   -&gt;    <span class="number">13</span> x  <span class="number">13</span> x1024</span><br><span class="line">   <span class="number">71</span> Shortcut Layer: <span class="number">68</span></span><br><span class="line">   <span class="number">72</span> conv    <span class="number">512</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>    <span class="number">13</span> x  <span class="number">13</span> x1024   -&gt;    <span class="number">13</span> x  <span class="number">13</span> x <span class="number">512</span></span><br><span class="line">   <span class="number">73</span> conv   <span class="number">1024</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">13</span> x  <span class="number">13</span> x <span class="number">512</span>   -&gt;    <span class="number">13</span> x  <span class="number">13</span> x1024</span><br><span class="line">   <span class="number">74</span> Shortcut Layer: <span class="number">71</span></span><br><span class="line">   <span class="number">75</span> conv    <span class="number">512</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>    <span class="number">13</span> x  <span class="number">13</span> x1024   -&gt;    <span class="number">13</span> x  <span class="number">13</span> x <span class="number">512</span></span><br><span class="line">   <span class="number">76</span> conv   <span class="number">1024</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">13</span> x  <span class="number">13</span> x <span class="number">512</span>   -&gt;    <span class="number">13</span> x  <span class="number">13</span> x1024</span><br><span class="line">   <span class="number">77</span> conv    <span class="number">512</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>    <span class="number">13</span> x  <span class="number">13</span> x1024   -&gt;    <span class="number">13</span> x  <span class="number">13</span> x <span class="number">512</span></span><br><span class="line">   <span class="number">78</span> conv   <span class="number">1024</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">13</span> x  <span class="number">13</span> x <span class="number">512</span>   -&gt;    <span class="number">13</span> x  <span class="number">13</span> x1024</span><br><span class="line">   <span class="number">79</span> conv    <span class="number">512</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>    <span class="number">13</span> x  <span class="number">13</span> x1024   -&gt;    <span class="number">13</span> x  <span class="number">13</span> x <span class="number">512</span></span><br><span class="line">   <span class="number">80</span> conv   <span class="number">1024</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">13</span> x  <span class="number">13</span> x <span class="number">512</span>   -&gt;    <span class="number">13</span> x  <span class="number">13</span> x1024</span><br><span class="line">   <span class="number">81</span> conv    <span class="number">255</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>    <span class="number">13</span> x  <span class="number">13</span> x1024   -&gt;    <span class="number">13</span> x  <span class="number">13</span> x <span class="number">255</span></span><br><span class="line">   <span class="number">82</span> detection</span><br><span class="line">   <span class="number">83</span> route  <span class="number">79</span></span><br><span class="line">   <span class="number">84</span> conv    <span class="number">256</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>    <span class="number">13</span> x  <span class="number">13</span> x <span class="number">512</span>   -&gt;    <span class="number">13</span> x  <span class="number">13</span> x <span class="number">256</span></span><br><span class="line">   <span class="number">85</span> upsample            <span class="number">2</span>x    <span class="number">13</span> x  <span class="number">13</span> x <span class="number">256</span>   -&gt;    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">256</span></span><br><span class="line">   <span class="number">86</span> route  <span class="number">85</span> <span class="number">61</span></span><br><span class="line">   <span class="number">87</span> conv    <span class="number">256</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">768</span>   -&gt;    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">256</span></span><br><span class="line">   <span class="number">88</span> conv    <span class="number">512</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">256</span>   -&gt;    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">512</span></span><br><span class="line">   <span class="number">89</span> conv    <span class="number">256</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">512</span>   -&gt;    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">256</span></span><br><span class="line">   <span class="number">90</span> conv    <span class="number">512</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">256</span>   -&gt;    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">512</span></span><br><span class="line">   <span class="number">91</span> conv    <span class="number">256</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">512</span>   -&gt;    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">256</span></span><br><span class="line">   <span class="number">92</span> conv    <span class="number">512</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">256</span>   -&gt;    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">512</span></span><br><span class="line">   <span class="number">93</span> conv    <span class="number">255</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">512</span>   -&gt;    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">255</span></span><br><span class="line">   <span class="number">94</span> detection</span><br><span class="line">   <span class="number">95</span> route  <span class="number">91</span></span><br><span class="line">   <span class="number">96</span> conv    <span class="number">128</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">256</span>   -&gt;    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">128</span></span><br><span class="line">   <span class="number">97</span> upsample            <span class="number">2</span>x    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">128</span>   -&gt;    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">128</span></span><br><span class="line">   <span class="number">98</span> route  <span class="number">97</span> <span class="number">36</span></span><br><span class="line">   <span class="number">99</span> conv    <span class="number">128</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">384</span>   -&gt;    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">128</span></span><br><span class="line">  <span class="number">100</span> conv    <span class="number">256</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">128</span>   -&gt;    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">256</span></span><br><span class="line">  <span class="number">101</span> conv    <span class="number">128</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">256</span>   -&gt;    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">128</span></span><br><span class="line">  <span class="number">102</span> conv    <span class="number">256</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">128</span>   -&gt;    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">256</span></span><br><span class="line">  <span class="number">103</span> conv    <span class="number">128</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">256</span>   -&gt;    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">128</span></span><br><span class="line">  <span class="number">104</span> conv    <span class="number">256</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">128</span>   -&gt;    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">256</span></span><br><span class="line">  <span class="number">105</span> conv    <span class="number">255</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">256</span>   -&gt;    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">255</span></span><br><span class="line">  <span class="number">106</span> detection</span><br><span class="line">Loading weights from yolov3.weights...</span><br><span class="line"> seen <span class="number">64</span></span><br><span class="line">Done!</span><br><span class="line">data\dog.jpg: Predicted <span class="keyword">in</span> <span class="number">0.027030</span> seconds.</span><br><span class="line">dog: <span class="number">99</span>%</span><br><span class="line">car: <span class="number">25</span>%</span><br><span class="line">bicycle: <span class="number">99</span>%</span><br><span class="line">truck: <span class="number">93</span>%</span><br></pre></td></tr></table></figure><h2 id="Tiny-YOLO"><a href="#Tiny-YOLO" class="headerlink" title="Tiny YOLO"></a>Tiny YOLO</h2><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">D:\Works\Local\darknet\build\darknet\x64&gt; .\darknet.exe detect .\cfg\yolov2<span class="literal">-tiny</span>.cfg .\yolov2<span class="literal">-tiny</span>.weights .\data\dog</span><br><span class="line">.jpg</span><br><span class="line">layer     filters    size              input                output</span><br><span class="line">    <span class="number">0</span> conv     <span class="number">16</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>   <span class="number">416</span> x <span class="number">416</span> x   <span class="number">3</span>   -&gt;   <span class="number">416</span> x <span class="number">416</span> x  <span class="number">16</span></span><br><span class="line">    <span class="number">1</span> max          <span class="number">2</span> x <span class="number">2</span> / <span class="number">2</span>   <span class="number">416</span> x <span class="number">416</span> x  <span class="number">16</span>   -&gt;   <span class="number">208</span> x <span class="number">208</span> x  <span class="number">16</span></span><br><span class="line">    <span class="number">2</span> conv     <span class="number">32</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>   <span class="number">208</span> x <span class="number">208</span> x  <span class="number">16</span>   -&gt;   <span class="number">208</span> x <span class="number">208</span> x  <span class="number">32</span></span><br><span class="line">    <span class="number">3</span> max          <span class="number">2</span> x <span class="number">2</span> / <span class="number">2</span>   <span class="number">208</span> x <span class="number">208</span> x  <span class="number">32</span>   -&gt;   <span class="number">104</span> x <span class="number">104</span> x  <span class="number">32</span></span><br><span class="line">    <span class="number">4</span> conv     <span class="number">64</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>   <span class="number">104</span> x <span class="number">104</span> x  <span class="number">32</span>   -&gt;   <span class="number">104</span> x <span class="number">104</span> x  <span class="number">64</span></span><br><span class="line">    <span class="number">5</span> max          <span class="number">2</span> x <span class="number">2</span> / <span class="number">2</span>   <span class="number">104</span> x <span class="number">104</span> x  <span class="number">64</span>   -&gt;    <span class="number">52</span> x  <span class="number">52</span> x  <span class="number">64</span></span><br><span class="line">    <span class="number">6</span> conv    <span class="number">128</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">52</span> x  <span class="number">52</span> x  <span class="number">64</span>   -&gt;    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">128</span></span><br><span class="line">    <span class="number">7</span> max          <span class="number">2</span> x <span class="number">2</span> / <span class="number">2</span>    <span class="number">52</span> x  <span class="number">52</span> x <span class="number">128</span>   -&gt;    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">128</span></span><br><span class="line">    <span class="number">8</span> conv    <span class="number">256</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">128</span>   -&gt;    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">256</span></span><br><span class="line">    <span class="number">9</span> max          <span class="number">2</span> x <span class="number">2</span> / <span class="number">2</span>    <span class="number">26</span> x  <span class="number">26</span> x <span class="number">256</span>   -&gt;    <span class="number">13</span> x  <span class="number">13</span> x <span class="number">256</span></span><br><span class="line">   <span class="number">10</span> conv    <span class="number">512</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">13</span> x  <span class="number">13</span> x <span class="number">256</span>   -&gt;    <span class="number">13</span> x  <span class="number">13</span> x <span class="number">512</span></span><br><span class="line">   <span class="number">11</span> max          <span class="number">2</span> x <span class="number">2</span> / <span class="number">1</span>    <span class="number">13</span> x  <span class="number">13</span> x <span class="number">512</span>   -&gt;    <span class="number">13</span> x  <span class="number">13</span> x <span class="number">512</span></span><br><span class="line">   <span class="number">12</span> conv   <span class="number">1024</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">13</span> x  <span class="number">13</span> x <span class="number">512</span>   -&gt;    <span class="number">13</span> x  <span class="number">13</span> x1024</span><br><span class="line">   <span class="number">13</span> conv    <span class="number">512</span>  <span class="number">3</span> x <span class="number">3</span> / <span class="number">1</span>    <span class="number">13</span> x  <span class="number">13</span> x1024   -&gt;    <span class="number">13</span> x  <span class="number">13</span> x <span class="number">512</span></span><br><span class="line">   <span class="number">14</span> conv    <span class="number">425</span>  <span class="number">1</span> x <span class="number">1</span> / <span class="number">1</span>    <span class="number">13</span> x  <span class="number">13</span> x <span class="number">512</span>   -&gt;    <span class="number">13</span> x  <span class="number">13</span> x <span class="number">425</span></span><br><span class="line">   <span class="number">15</span> detection</span><br><span class="line">mask_scale: <span class="keyword">Using</span> default <span class="string">&#x27;1.000000&#x27;</span></span><br><span class="line">Loading weights from .\yolov2<span class="literal">-tiny</span>.weights...</span><br><span class="line"> seen <span class="number">64</span></span><br><span class="line">Done!</span><br><span class="line">.\data\dog.jpg: Predicted <span class="keyword">in</span> <span class="number">0.005972</span> seconds.</span><br><span class="line">dog: <span class="number">82</span>%</span><br><span class="line">car: <span class="number">24</span>%</span><br><span class="line">bicycle: <span class="number">26</span>%</span><br><span class="line">car: <span class="number">30</span>%</span><br><span class="line">bicycle: <span class="number">59</span>%</span><br><span class="line">person: <span class="number">26</span>%</span><br><span class="line">person: <span class="number">28</span>%</span><br><span class="line">car: <span class="number">41</span>%</span><br><span class="line">car: <span class="number">73</span>%</span><br><span class="line"><span class="built_in">Compare</span>!!</span><br><span class="line">GPUの性能が良いからなのか、速度が恐ろしいことになっています。</span><br><span class="line">リアルタイムいけるやん(震え声)</span><br><span class="line">編集</span><br><span class="line"> YOLOV3YOLOV2TINY YOLO</span><br><span class="line">Speed<span class="number">0.027030</span> sec (<span class="number">27</span>ms)<span class="number">0.012998</span> sec (<span class="number">12</span>ms)<span class="number">0.005972</span> sec (<span class="number">5</span>ms)</span><br><span class="line">Layer Num<span class="number">106</span><span class="number">31</span><span class="number">15</span></span><br><span class="line">Detected Objectdog: <span class="number">99</span>%dog: <span class="number">82</span>%dog: <span class="number">82</span>%</span><br><span class="line">bicycle: <span class="number">99</span>%bicycle: <span class="number">82</span>%car: <span class="number">73</span>%</span><br><span class="line">truck: <span class="number">93</span>%truck: <span class="number">74</span>%bicycle: <span class="number">59</span>%</span><br><span class="line">car: <span class="number">25</span>%bicycle: <span class="number">25</span>%car: <span class="number">41</span>%</span><br><span class="line">pottedplant: <span class="number">24</span>%car: <span class="number">30</span>%</span><br><span class="line">person: <span class="number">28</span>%</span><br><span class="line">person: <span class="number">26</span>%</span><br><span class="line">bicycle: <span class="number">26</span>%</span><br><span class="line">car: <span class="number">24</span>%</span><br></pre></td></tr></table></figure><h1 id="Compare"><a href="#Compare" class="headerlink" title="Compare!!"></a>Compare!!</h1><p>GPUの性能が良いからなのか、速度が恐ろしいことになっています。<br>リアルタイムいけるやん(震え声)</p><p>[table id=28 /]</p><p>画像の結果は下記。</p><p><a href="../../../../public/2018/04/6a381b1f8a1d79b21509a578ea3f2bb6.png"><img src="../../../../public/2018/04/6a381b1f8a1d79b21509a578ea3f2bb6.png"></a><br><strong>YOLOv3</strong></p><p><a href="../../../../public/2018/04/7f955b0dd729a4def0114f4dc242efd4.png"><img src="../../../../public/2018/04/7f955b0dd729a4def0114f4dc242efd4.png"></a><br><strong>YOLOv2</strong></p><p><a href="../../../../public/2018/04/3b12a0555434f5c98bc248183480e01d.png"><img src="../../../../public/2018/04/3b12a0555434f5c98bc248183480e01d.png"></a><br><strong>Tiny YOLO</strong></p><p>層が3倍になったからといって単純に速度が1/3という訳では無いですが、精度向上しても、これだけの速度低下なのは凄いことです。<br>YOLOv3の出力を見ると、<strong>Shortcut Layer</strong> という単語が頻出していますが、これは<strong>Residual Network</strong>ですかね。</p><p><a href="https://pjreddie.com/media/files/papers/YOLOv3.pdf">論文</a>を見ると確かにそう書いてあります。</p><blockquote><p>We use a new network for performing feature extraction. Our new network is a hybrid approach between the network used in YOLOv2, Darknet-19, and that newfangled residual network stuff.<br>我々は特徴抽出を行う新しいネットワークを使用する。<br>我々の新しいネットワークは、YOLOv2、Darknet-19、そして、あの最新式のResidualネットワークで使われているネットワークのハイブリットなアプローチだ。</p></blockquote><p>こいつは凄い(小並感)<br>ところでYOLOv4は何時ですかね(すっとぼけ)</p>]]></content>
      
      
      <categories>
          
          <category> %e3%83%87%e3%82%a3%e3%83%bc%e3%83%97%e3%83%a9%e3%83%bc%e3%83%8b%e3%83%b3%e3%82%b0 </category>
          
          <category> gpupu </category>
          
          <category> ディープラーニング </category>
          
          <category> CUDA </category>
          
          <category> GPUPU </category>
          
          <category> Darknet </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>YOLO_Comapre</title>
      <link href="2018/04/30/2957/"/>
      <url>2018/04/30/2957/</url>
      
        <content type="html"><![CDATA[<p>[[“”,”YOLOv3”,”YOLOv2”,”Tiny YOLO”],[“Speed”,”0.027030 sec (27ms)”,”0.012998 sec (12ms)”,”0.005972 sec (5ms)”],[“Layer Num”,”106”,”31”,”15”],[“Detected Object”,”dog: 99%”,”dog: 82%”,”dog: 82%”],[“#rowspan#”,”bicycle: 99%”,”bicycle: 82%”,”car: 73%”],[“#rowspan#”,”truck: 93%”,”truck: 74%”,”bicycle: 59%”],[“#rowspan#”,”car: 25%”,”bicycle: 25%”,”car: 41%”],[“#rowspan#”,””,”pottedplant: 24%”,”car: 30%”],[“#rowspan#”,””,””,”person: 28%”],[“#rowspan#”,””,””,”person: 26%”],[“#rowspan#”,””,””,”bicycle: 26%”],[“#rowspan#”,””,””,”car: 24%”]]</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その111 MacOSXでX11が見つからない</title>
      <link href="2018/04/30/2952/"/>
      <url>2018/04/30/2952/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>備忘録。<br><strong>dlib</strong>をMacでビルドしようと思ったら、見つからない、というので焦った。<br>brew installでそれらしい名前も無いので..</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p>ずばり下記。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://dl.bintray.com/xquartz/downloads/XQuartz-2.7.11.dmg</span><br><span class="line">$ hdiutil mount XQuartz-2.7.11.dmg</span><br><span class="line">$ <span class="built_in">cd</span> /Volumes/XQuartz-2.7.11</span><br><span class="line">$ sudo installer -pkg XQuartz.pkg -target / -lang ja</span><br><span class="line">$ <span class="built_in">cd</span></span><br><span class="line">$ hdiutil detach /Volumes/XQuartz-2.7.11</span><br></pre></td></tr></table></figure><p>wgetはhomebrewからインストールしておくこと。</p>]]></content>
      
      
      <categories>
          
          <category> Apple </category>
          
          <category> Mac </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETで機械学習を試してみる LibSvm.Net編 第1回</title>
      <link href="2018/04/30/2943/"/>
      <url>2018/04/30/2943/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>直前の記事であろうことか説明とサンプルで使っているライブラリを間違えるというドジを踏みました。<br>謹んでお詫びします。</p><p>で、**Support Vector Machine (SVM)**のライブラリをたくさん調べたのですが、以前話したようにそこまで多くありません。<br>なので、自分で作ってみました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://www.nuget.org/packages/LibSvmDotNet" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=www.nuget.org"></img><div class="hbc-site-name">www.nuget.org</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://api.nuget.org/v3-flatcontainer/libsvmdotnet/1.0.2/icon"></img></div><div class="hbc-text"><div class="hbc-title">LibSvmDotNet 1.0.2</div><div class="hbc-url">https://www.nuget.org/packages/LibSvmDotNet</div><div class="hbc-description">.NET wrapper for LIBSVM written in C#. Please download libsvm.dll from https://github.com/cjlin1/libsvm</div></div></div></div></a></div></div><p>本当は、<strong>LibSvm.Net</strong> て名前で登録したかったんですが、既に存在するために泣く泣くこうなりました。<br>まぁ、githubのリポジトリのurlもこうだから、悪くないと言えば悪くないのですが…</p><p>ところで、世の中に存在する.NETのSVMライブラリのほとんどが <strong>LIBSVM</strong> のラッパーであるのと同じく、自分で作ったのもラッパーです。<br>もう少し違いを説明します。</p><ul><li><a href="http://accord-framework.net/">Accord.NET</a><ul><li>有名どころです。SVM以外の機械学習も可能です。SVMは独自の実装の模様。ただ、LIBSVMのモデルファイルを読めたりします。</li></ul></li><li><a href="https://github.com/ksopyla/KMLib">KMLib</a><ul><li>GPUを使える模様。が、最終更新が5年前。CUDA 3.0…</li></ul></li><li><a href="https://github.com/ccerhan/LibSVMsharp">LibSVMsharp</a><ul><li>最新のLIBSVMに対応。libsvm.dllを直接読み込みます。</li></ul></li><li><a href="https://github.com/nicolaspanel/libsvm.net">libsvm.net</a><ul><li>最終更新が3年前。また、Javaのラッパー <em>IKVM</em> を経由しているため速度面で不利。</li></ul></li><li><a href="https://github.com/aardvark-platform/aardvark.semantictextonforests">libsvm.clr</a><ul><li>C++/CLIでLIBSVMを再ビルドして.NETから呼べるようにしています。</li></ul></li></ul><p>この中で立ち位置が近いのは、</p><ul><li>LibSVMsharp</li><li>libsvm.net</li><li>libsvm.clr</li></ul><p>です。<br>LibSvm.Netとの違いを説明すると、</p><ul><li>LibSVMsharp<ul><li>LibSVMsharpは、Predict関数を呼ぶ度にモデルファイルをアンマネージド領域にコピーしています。なので、何度も予測処理をかけたりする場合は、LibSvm.Netは効率よく動作します。</li><li>一応、何度も呼び出さないようにする方法もありますが、ポインタを受け渡しするという開発者泣かせの方式。</li></ul></li><li>libsvm.net<ul><li>Javaなんか経由しません。LibSvm.Netは100%C#でP/Invokeで直接LIBSVMを呼び出します。</li></ul></li><li>libsvm.clr<ul><li>C++/CLIなので、LinuxやMacで使えません。LibSvm.Netは100%C#の.NETStandard準拠です。他の依存ライブラリもありません。Linuxで動くことも確認しています。</li></ul></li></ul><p>何より、XMLコメントほぼ全て英語と日本語で実装していますので、IntelliSenseがバリバリ効きます!!</p><p>使い勝手は他とどっこいどっこいですが、前回と同じサンプルをLibSvm.Netで実装したものを持ってきました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/takuya-takeuchi/LibSvmDotNet/tree/master/example/Classification10" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/6241854?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">takuya-takeuchi/LibSvmDotNet</div><div class="hbc-url">https://github.com/takuya-takeuchi/LibSvmDotNet/tree/master/example/Classification10</div><div class="hbc-description">.NET wrapper for LIBSVM written in C#. Contribute to takuya-takeuchi/LibSvmDotNet development by creating an account on GitHub.</div></div></div></div></a></div></div><h1 id="Get-Started"><a href="#Get-Started" class="headerlink" title="Get Started"></a>Get Started</h1><p>LibSvm.Netを使うには下記の作業が必要です。</p><p>1.NugetからLibSvm.Netのインストール<br>2.LIBSVMのソースをダウンロード<br>3.LIBSVMのソースをビルド</p><p>ちょっと面倒ですが、どれも手順はしっかりしています。<br>LIBSVMのビルド手順はLibSvm.Netの<a href="https://github.com/takuya-takeuchi/LibSvmDotNet/wiki/Tutorial-for-Windows">Wikiでも説明しています</a>ので参考にしてください。</p><h1 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h1><p>前回と同じですが、LibSvm.Netで再実装したソースです。<br>というか、LibSvm.Netのリポジトリにあるサンプルです。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> LibSvmDotNet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Classification10</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// Create random data</span></span><br><span class="line">            <span class="keyword">var</span> r = <span class="keyword">new</span> Random();</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">int</span> trainCount = <span class="number">500</span>;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">int</span> testCount = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> temp = Path.GetTempPath();</span><br><span class="line">            <span class="keyword">var</span> trainDic = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">var</span> testDic = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">var</span> testDicAns = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> l = <span class="number">0</span>; l &lt; <span class="number">10</span>; l++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; trainCount; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// Create decimal value 0 or greater but less than 10</span></span><br><span class="line">                    <span class="keyword">var</span> v = r.NextDouble() + l;</span><br><span class="line">                    trainDic.AppendLine(<span class="string">$&quot;<span class="subst">&#123;l&#125;</span> 1:<span class="subst">&#123;v&#125;</span>&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; testCount; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// Create decimal value 0 or greater but less than 10</span></span><br><span class="line">                    <span class="keyword">var</span> v = r.NextDouble() + l;</span><br><span class="line">                    testDic.AppendLine(<span class="string">$&quot;<span class="subst">&#123;l&#125;</span> 1:<span class="subst">&#123;v&#125;</span>&quot;</span>);</span><br><span class="line">                    testDicAns.Add(l);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> tempTrainPath = Path.Combine(temp, <span class="string">&quot;train&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> tempTestPath = Path.Combine(temp, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> fs = <span class="keyword">new</span> FileStream(tempTrainPath, FileMode.Create, FileAccess.Write, FileShare.Write))</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> sw = <span class="keyword">new</span> StreamWriter(fs, Encoding.ASCII))</span><br><span class="line">                sw.Write(trainDic.ToString());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> fs = <span class="keyword">new</span> FileStream(tempTestPath, FileMode.Create, FileAccess.Write, FileShare.Write))</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> sw = <span class="keyword">new</span> StreamWriter(fs, Encoding.ASCII))</span><br><span class="line">                sw.Write(testDic.ToString());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Load training data and test data set</span></span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> train = Problem.FromFile(tempTrainPath))</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> test = Problem.FromFile(tempTestPath))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Configure parameter</span></span><br><span class="line">                <span class="keyword">var</span> param = <span class="keyword">new</span> Parameter</span><br><span class="line">                &#123;</span><br><span class="line">                    SvmType = SvmType.CSVC,</span><br><span class="line">                    KernelType = KernelType.RBF,</span><br><span class="line">                    Gamma = <span class="number">0.05</span>d,</span><br><span class="line">                    C = <span class="number">5</span>d,</span><br><span class="line">                    CacheSize = <span class="number">100</span>,</span><br><span class="line">                    Degree = <span class="number">3</span>,</span><br><span class="line">                    Coef0 = <span class="number">0</span>,</span><br><span class="line">                    Nu = <span class="number">0.5</span>,</span><br><span class="line">                    Epsilon = <span class="number">1e-3</span>,</span><br><span class="line">                    P = <span class="number">0.1</span>,</span><br><span class="line">                    Shrinking = <span class="literal">true</span>,</span><br><span class="line">                    Probability = <span class="literal">false</span>,</span><br><span class="line">                    WeightLabel = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>],</span><br><span class="line">                    Weight = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">0</span>]</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> message = LibSvm.CheckParameter(train, param);</span><br><span class="line">                <span class="keyword">if</span> (!<span class="keyword">string</span>.IsNullOrWhiteSpace(message))</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">$&quot;Error: <span class="subst">&#123;message&#125;</span> for train problem&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                message = LibSvm.CheckParameter(test, param);</span><br><span class="line">                <span class="keyword">if</span> (!<span class="keyword">string</span>.IsNullOrWhiteSpace(message))</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">$&quot;Error: <span class="subst">&#123;message&#125;</span> for test problem&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Train training data</span></span><br><span class="line">                <span class="keyword">using</span> (<span class="keyword">var</span> model = LibSvm.Train(train, param))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> correct = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">var</span> total = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">var</span> x = test.X;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; test.Length; i++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// Get vector from test data</span></span><br><span class="line">                        <span class="keyword">var</span> array = x[i];</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// Get classification result (returns label)</span></span><br><span class="line">                        <span class="keyword">var</span> ret1 = (<span class="keyword">int</span>)LibSvm.Predict(model, array);</span><br><span class="line">                        <span class="keyword">if</span> (ret1 == testDicAns[i])</span><br><span class="line">                            correct++;</span><br><span class="line"></span><br><span class="line">                        total++;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    Console.WriteLine(<span class="string">$&quot;Accuracy: <span class="subst">&#123;correct / (<span class="keyword">double</span>)total * <span class="number">100</span>&#125;</span>%&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前回と違い、ModelとProblemがIDisposableな事くらいですかね、違いは。<br>ちなみに、libsvm.net、libsvm.clrはProblem、Model、Parameter、Nodeの全てが構造体です。<br>対して、LibSvm.NetはNodeだけが構造体です。古い記事ですが、.NETにおける構造体とクラスの使い分けの基準となるサイズの分水嶺は16バイトです。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://mag.autumn.org/Content.modf?id=20061014194823" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=mag.autumn.org"></img><div class="hbc-site-name">mag.autumn.org</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">時代錯誤に今更こんなことを検証するのかよ!　C#で何バイトなら構造体にして許容できるか?             【▲→川俣晶の縁側→ソフトウェア→技術雑記】          </div><div class="hbc-url">http://mag.autumn.org/Content.modf?id=20061014194823</div></div></div></div></a></div></div><p>Nodeは16バイトで境界値の真上ですが、Modelは184バイト、Paramterは104バイトです。<br>Modelファイルは予測処理を行う場合、頻繁に受け渡しする値です。libsvm.clrとか大丈夫?</p><p>実行すると下記のような出力を行います。ここも同じですね。<br>強いて言うなら、.NET Coreのコンソールになっているくらいです。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">Works</span>\<span class="title">OpenSource</span>\<span class="title">LibSvmDotNet</span>\<span class="title">example</span>\<span class="title">Classification10</span>&gt; <span class="title">dotnet</span> <span class="title">run</span> -<span class="title">c</span> <span class="title">Release</span></span></span><br><span class="line"><span class="function">*</span></span><br><span class="line"><span class="function"><span class="title">optimization</span> <span class="title">finished</span>, #<span class="title">iter</span> = 84</span></span><br><span class="line"><span class="function"><span class="title">nu</span> = 0.166000</span></span><br><span class="line"><span class="function"><span class="title">obj</span> = -636.290437, <span class="title">rho</span> = 0.028434</span></span><br><span class="line"><span class="function"><span class="title">nSV</span> = 166, <span class="title">nBSV</span> = 166</span></span><br><span class="line"><span class="function">*</span></span><br><span class="line"><span class="function">.</span></span><br><span class="line"><span class="function">.</span></span><br><span class="line"><span class="function">.</span></span><br><span class="line"><span class="function"><span class="title">optimization</span> <span class="title">finished</span>, #<span class="title">iter</span> = 79</span></span><br><span class="line"><span class="function"><span class="title">nu</span> = 0.156000</span></span><br><span class="line"><span class="function"><span class="title">obj</span> = -581.389855, <span class="title">rho</span> = -0.017062</span></span><br><span class="line"><span class="function"><span class="title">nSV</span> = 156, <span class="title">nBSV</span> = 156</span></span><br><span class="line"><span class="function"><span class="title">Total</span> <span class="title">nSV</span> = 1406</span></span><br><span class="line"><span class="function"><span class="title">Accuracy</span>: 99.5%</span></span><br></pre></td></tr></table></figure><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>正直車輪の再発明な気がしないでもないですが、コメントを書くに当たりSVMの資料を漁るに漁ったので単語の意味とか朧気だったのが、ある程度わかるようになっています。<br>日本語に直すの大変ですよ、本当に。</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/LibSvmDotNet/tree/master/example/Classification10">https://github.com/takuya-takeuchi/LibSvmDotNet/tree/master/example/Classification10</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET </category>
          
          <category> net-framework </category>
          
          <category> .NET Framework </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> net </category>
          
          <category> .NET Core </category>
          
          <category> 機械学習 </category>
          
          <category> .NETで機械学習を試してみる LibSvm.Net編 </category>
          
          <category> LibSvm.Net </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETで機械学習を試してみる libsvm.clr編 第1回</title>
      <link href="2018/04/22/2928/"/>
      <url>2018/04/22/2928/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><font color="red">2018/04/30 更新<br>記事の中で実際に使用しているライブラリが間違っていました。<strong>libsvm.net</strong> ではなく <strong>libsvm.clr</strong> でした。<br>そのため、記事の説明を <strong>libsvm.clr</strong> に変更しています。</font></p><p>機械学習といえば猫も杓子もディープラーニングって感じですが、ディープラーニングを使うにはちょっと重すぎるという場合に、まだまだいけるのが <strong>Support Vector Machine (SVM)</strong> です。<br>.NETでSVMを扱えるライブラリはそこまで多くありません。</p><ul><li>Accord.NET</li><li>KMLib</li><li>LibSVMsharp</li><li>libsvm.net</li><li>libsvm.clr</li></ul><p>位が簡単に見つかるところです。<br><strong>dlib</strong>でもsvmは扱えますが、ラップ処理が終わっていませんので<strong>dlib.net</strong>では扱えません。<br>(テンプレートを.NETを移植するのは本当に辛いです) 今回は、<strong>libsvm.clr</strong>を使います。<br>libsvm.clrはlibsvmをC++/CLIでビルドし直したライブラリです。<br>libsvmは<a href="https://ja.wikipedia.org/wiki/LIBSVM">wikipedia</a>によれば、</p><blockquote><p>LIBSVMおよびLIBLINEARは広く使われるオープンソースの機械学習ライブラリである。両方とも国立台湾大学で開発され、C言語APIを用いたC++で記述されている。</p></blockquote><p>とあります。<br>2000年あたりから開発されているようで、現在でも開発が続いています。<br>(最終更新は2016年12月!!)</p><p>ソースは下記になります </p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/takuya-takeuchi/Demo/tree/master/SVM1" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/6241854?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">takuya-takeuchi/Demo</div><div class="hbc-url">https://github.com/takuya-takeuchi/Demo/tree/master/SVM1</div><div class="hbc-description">Sample source code for Demonstration, Experiment and Test - takuya-takeuchi/Demo</div></div></div></div></a></div></div><h1 id="Get-Started"><a href="#Get-Started" class="headerlink" title="Get Started"></a>Get Started</h1><p>libsvm.clrを使うには下記の作業が必要です。</p><ol><li>Nugetからlibsvm.clrのインストール</li></ol><p>以上!!!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Install-Package libsvm.clr.vs2015.x64</span><br></pre></td></tr></table></figure><p>で完了です。</p><h1 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h1><p>SVMといえば、2値判定が有名ですが、多値判定も可能です。<br>今回は多値判定をテストします。</p><p>ただし、libsvmは遅いです。これは今後解説しますが、データが線形で分類できるなら、<strong>liblinear</strong>の使用をお勧めします。<br><a href="https://www.csie.ntu.edu.tw/~cjlin/liblinear/">公式ページ</a>にも</p><blockquote><p>When to use LIBLINEAR but not LIBSVM There are some large data for which with/without nonlinear mappings gives similar performances. Without using kernels, one can quickly train a much larger set via a linear classifier. Document classification is one such application. In the following example (20,242 instances and 47,236 features; available on LIBSVM data sets), the cross-validation time is significantly reduced by using LIBLINEAR: LIBSVMではなくLIBLINEARを使用するとき 非線形マッピングが有無に関わらず、近似したパフォーマンスが得られる巨大なデータがあります。カーネルを利用しない場合、線形分類器を通じて非常に大きなデータセットを高速に訓練できます。ドキュメント分類はそのアプローチの一つです。下記のサンプル (20,242インスタンスと47,236の特徴量; LIBSVMで利用可能なデータセット) において、LIBLINEARを使用することで交差検定の時間を大幅に減らしています。<br>(注:345.569sが2.944sと170倍の性能をたたき出しています!!)</p></blockquote><p>とあります。</p><p>まず、学習データについて。<br>libsvm.clr、というかlibsvmは、学習データをテキスト形式で用意します。<br>各学習対象データを整数または小数のベクトルで表現します。<br>例えば、</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.334343 0.7080 -23222 0 54544</span><br></pre></td></tr></table></figure><p>というデータがある場合、</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1:0.334343 2:0.7080 3:-23222 5:54544</span><br></pre></td></tr></table></figure><p>と表現します。<br>libsvmにおいて、0という値は無視することができます。<br>そのために、ベクトル内の各値の先頭に1から始める要素番号を付与することで、0をスキップしたことを認識することができます。<br>1行1データとして学習データを生成します。<br>そして、大事なことですが、labelは整数または小数で指定します。さもなくばクラッシュします。文字列なんか使えません。</p><p>今回のサンプルでは、テストデータの生成も含んでいます。<br>内容は、</p><ul><li>0以上10未満の小数を 0 から 9 の整数に分類</li></ul><p>というもの。<br>例えば、0.5455は0、8.9843は8というような感じです。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> LibSvm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SupportVectorMachineTest</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// ランダムにデータを作成</span></span><br><span class="line">            <span class="keyword">var</span> r = <span class="keyword">new</span> Random();</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">int</span> trainCount = <span class="number">500</span>;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">int</span> testCount = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> temp = Path.GetTempPath();</span><br><span class="line">            <span class="keyword">var</span> trainDic = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">var</span> testDic = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">var</span> testDicAns = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> l = <span class="number">0</span>; l &lt; <span class="number">10</span>; l++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; trainCount; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 0 以上 10未満の小数を生成</span></span><br><span class="line">                    <span class="keyword">var</span> v = r.NextDouble() + l;</span><br><span class="line">                    trainDic.AppendLine(<span class="string">$&quot;<span class="subst">&#123;l&#125;</span> 1:<span class="subst">&#123;v&#125;</span>&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; testCount; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 0 以上 10未満の小数を生成</span></span><br><span class="line">                    <span class="keyword">var</span> v = r.NextDouble() + l;</span><br><span class="line">                    testDic.AppendLine(<span class="string">$&quot;<span class="subst">&#123;l&#125;</span> 1:<span class="subst">&#123;v&#125;</span>&quot;</span>);</span><br><span class="line">                    testDicAns.Add(l);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> tempTrainPath = Path.Combine(temp, <span class="string">&quot;train&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> tempTestPath = Path.Combine(temp, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> fs = <span class="keyword">new</span> FileStream(tempTrainPath, FileMode.Create, FileAccess.Write, FileShare.Write))</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> sw = <span class="keyword">new</span> StreamWriter(fs, Encoding.ASCII))</span><br><span class="line">                sw.Write(trainDic.ToString());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> fs = <span class="keyword">new</span> FileStream(tempTestPath, FileMode.Create, FileAccess.Write, FileShare.Write))</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> sw = <span class="keyword">new</span> StreamWriter(fs, Encoding.ASCII))</span><br><span class="line">                sw.Write(testDic.ToString());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// データセットの読み込み</span></span><br><span class="line">            <span class="keyword">var</span> train = Svm.ReadProblem(tempTrainPath);</span><br><span class="line">            <span class="keyword">var</span> test = Svm.ReadProblem(tempTestPath);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// パラメータの設定</span></span><br><span class="line">            <span class="keyword">var</span> param = <span class="keyword">new</span> Parameter();</span><br><span class="line">            param.SvmType = SvmType.C_SVC;</span><br><span class="line">            param.KernelType = KernelType.RBF;</span><br><span class="line">            param.Gamma = <span class="number">0.05</span>d;</span><br><span class="line">            param.C = <span class="number">5</span>d;</span><br><span class="line">            param.CacheSize = <span class="number">100</span>;</span><br><span class="line">            param.Degree = <span class="number">3</span>;</span><br><span class="line">            param.Coef0 = <span class="number">0</span>;</span><br><span class="line">            param.Nu = <span class="number">0.5</span>;</span><br><span class="line">            param.Eps = <span class="number">1e-3</span>;</span><br><span class="line">            param.p = <span class="number">0.1</span>;</span><br><span class="line">            param.Shrinking = <span class="number">1</span>;</span><br><span class="line">            param.Probability = <span class="number">0</span>;</span><br><span class="line">            param.WeightLabel = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">            param.Weight = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> message = Svm.CheckParameter(train, param);</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">string</span>.IsNullOrWhiteSpace(message))</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;Error: <span class="subst">&#123;message&#125;</span> for train problem&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            message = Svm.CheckParameter(test, param);</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">string</span>.IsNullOrWhiteSpace(message))</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;Error: <span class="subst">&#123;message&#125;</span> for test problem&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 学習データとパラメータから学習</span></span><br><span class="line">            <span class="keyword">var</span> model = Svm.Train(train, param);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> correct = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">var</span> total = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; test.Count; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 学習データのベクトル</span></span><br><span class="line">                <span class="keyword">var</span> x = test.x[i];</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 分類結果 (ラベルが返ってくる)</span></span><br><span class="line">                <span class="keyword">var</span> ret1 = (<span class="keyword">int</span>)Svm.Predict(model, x);</span><br><span class="line">                <span class="keyword">if</span> (ret1 == testDicAns[i])</span><br><span class="line">                    correct++;</span><br><span class="line"></span><br><span class="line">                total++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;Accuracy: <span class="subst">&#123;correct / (<span class="keyword">double</span>)total * <span class="number">100</span>&#125;</span>%&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ソースを見てもそこまで難しいことはしていません。<br>そして、実行すると下記のような出力を行います。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">Works</span>\<span class="title">OpenSource</span>\<span class="title">Demo</span>\<span class="title">SVM1</span>\<span class="title">SupportVectorMachineTest</span>\<span class="title">bin</span>\<span class="title">Release</span>&gt; .\<span class="title">SupportVectorMachineTest.exe</span></span></span><br><span class="line"><span class="function">*</span></span><br><span class="line"><span class="function"><span class="title">optimization</span> <span class="title">finished</span>, #<span class="title">iter</span> = 84</span></span><br><span class="line"><span class="function"><span class="title">nu</span> = 0.166000</span></span><br><span class="line"><span class="function"><span class="title">obj</span> = -636.290437, <span class="title">rho</span> = 0.028434</span></span><br><span class="line"><span class="function"><span class="title">nSV</span> = 166, <span class="title">nBSV</span> = 166</span></span><br><span class="line"><span class="function">*</span></span><br><span class="line"><span class="function">.</span></span><br><span class="line"><span class="function">.</span></span><br><span class="line"><span class="function">.</span></span><br><span class="line"><span class="function"><span class="title">optimization</span> <span class="title">finished</span>, #<span class="title">iter</span> = 79</span></span><br><span class="line"><span class="function"><span class="title">nu</span> = 0.156000</span></span><br><span class="line"><span class="function"><span class="title">obj</span> = -580.913665, <span class="title">rho</span> = 0.001248</span></span><br><span class="line"><span class="function"><span class="title">nSV</span> = 156, <span class="title">nBSV</span> = 156</span></span><br><span class="line"><span class="function"><span class="title">Total</span> <span class="title">nSV</span> = 1442</span></span><br><span class="line"><span class="function"><span class="title">Accuracy</span>: 99.8%</span></span><br></pre></td></tr></table></figure><p>10クラスで学習データが5000、テストデータが1000で、毎回99.0%以上の精度を叩き出します。<br>100%で欲しかったところですが、まぁまぁでしょう。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>簡単にSVMを試すことができて良い感じではあります。<br>ただ、機械学習系のライブラリは、ここ最近Pythonのが手軽な感じが否定できません。<br>もう少し日本語のドキュメントやC#のライブラリが充実してくれると良いのですが….</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/SVM1">https://github.com/takuya-takeuchi/Demo/tree/master/SVM1</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET </category>
          
          <category> net-framework </category>
          
          <category> .NET Framework </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> .NETで機械学習を試してみる libsvm.clr編 </category>
          
          <category> 機械学習 </category>
          
          <category> libsvm.clr </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その110 Debian with Raspberry Pi Desktop on VirtualBoxでWebCamがselect timeoutで使えない</title>
      <link href="2018/04/16/2923/"/>
      <url>2018/04/16/2923/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>WebCamをVirtualBox上のゲストOS <strong>Debian with Raspberry Pi Desktop</strong> に接続してキャプチャをしても動かない件。<br>具体的には、</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select timeout </span><br></pre></td></tr></table></figure><p>と表示され何も動作しない。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p>下記のページが参考になりました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://farshbaf.net/en/artificial-intelligence/blog/usb-camera-error-virtual-machine-virtual-box-vmware-open-cv" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=farshbaf.net"></img><div class="hbc-site-name">farshbaf.net</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">USB 2.0 camera error on Virtual Machine (Virtual Box, VMWare) in Open CV : Farshbaf.NET Artificial Intelligence BlogUSB 2.0 camera error on Virtual Machine (Virtual Box, VMWare) in Open CV : Farshbaf.NET Artificial Intelligence Blog</div><div class="hbc-url">https://farshbaf.net/en/artificial-intelligence/blog/usb-camera-error-virtual-machine-virtual-box-vmware-open-cv</div></div></div></div></a></div></div><blockquote><p>I have change the usb setting in VM ware settings and make it to support USB 3.0. On the other hand I attached the camera to a USB 2.0 port and that works both of them</p></blockquote><p>要するに、</p><ul><li>USB 3.0をサポートするように仮想マシンの設定を変更</li><li>カメラをUSB 2.0ポートに接続</li></ul><p>ということ。<br>仮想マシン設定の<strong>USB</strong>から <strong>USB 3.0 (xHCI) コントローラー</strong>に変更すればOKです。</p><p>これでうまく動きます。<br>コードは下記です。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">c = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line">c.set(cv2.cv.CV_CAP_PROP_FRAME_WIDTH, <span class="number">1200</span>)</span><br><span class="line">c.set(cv2.cv.CV_CAP_PROP_FRAME_HEIGHT, <span class="number">800</span>)</span><br><span class="line">r, img = c.read()</span><br><span class="line">cv2.imwrite(<span class="string">&#x27;./capture.jpg&#x27;</span>, img)</span><br><span class="line">c.release()</span><br></pre></td></tr></table></figure><p>ただ、上のコードだと保存される画像が、960x544になっていました。</p><p>これは、指定したサイズがカメラでサポートしているサイズではなかったためです。<br>恐らく指定したサイズに何かしらのルールで近しいサイズに強制的に変更していると思われます。<br>テストしたカメラには、確かに960x544というサイズがありました。</p>]]></content>
      
      
      <categories>
          
          <category> 仮想化 </category>
          
          <category> %e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%e8%a8%80%e8%aa%9e </category>
          
          <category> Linux </category>
          
          <category> Python </category>
          
          <category> linux </category>
          
          <category> マルチメディア </category>
          
          <category> OpenCV </category>
          
          <category> Debian </category>
          
          <category> VirtualBox </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その109 Debian with Raspberry Pi Desktop on VirtualBoxでUSB機器を有効にする</title>
      <link href="2018/04/14/2906/"/>
      <url>2018/04/14/2906/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>VirtualBoxを使うメリットでゲスト側でUSB機器を使えることにあります。<br>Hyper-Vでも使えないことはないのですが、<strong>RemoteFX USB リダイレクト</strong>とかよーわからないテクノロジーを使わないといけません。<br>ましてやゲストOSが<strong>Windows 10 Enterprise限定</strong>。こんなのおかしいよ!!</p><p>じゃぁVirtualBoxでUSB機器を使うのが簡単か？というとそうでもない。</p><h1 id="What’s-problem"><a href="#What’s-problem" class="headerlink" title="What’s problem?"></a>What’s problem?</h1><p>通常、仮想OSウィンドウの右下にあるUSBアイコンから認識したいUSB機器を選択すればよいのだが、それが失敗する。</p><p><a href="../../../../public/2018/04/317d696c3bfd24ac32f064ca810081a0.png"><img src="../../../../public/2018/04/317d696c3bfd24ac32f064ca810081a0.png"></a><br>何がダメなのか詳しいメッセージをください…</p><h1 id="How-to-use-USB-device"><a href="#How-to-use-USB-device" class="headerlink" title="How to use USB device?"></a>How to use USB device?</h1><p>ゲストOSの拡張コンポーネント<strong>Extension Pack</strong>をインストールする必要があります。</p><h2 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h2><p>まず<a href="https://www.virtualbox.org/wiki/Downloads">公式</a>からダウンロードしてきます。</p><p><a href="../../../../public/2018/04/963fabf15991782128f0722ecbd09523.png"><img src="../../../../public/2018/04/963fabf15991782128f0722ecbd09523-1024x563.png"></a></p><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>続いてインストール。<br><strong>ファイル -&gt; 環境設定</strong>からダイアログを開き、<strong>機能拡張</strong>タブを選択します。</p><p><a href="../../../../public/2018/04/e6eee08249c76789b91a4b5cf8e31c08.png"><img src="../../../../public/2018/04/e6eee08249c76789b91a4b5cf8e31c08.png"></a></p><p>右側の**+**ボタンを選択し、ダウンロードしてきたファイルを選択します。</p><p><a href="../../../../public/2018/04/47d37e15108b1cf1bcb9880d8a6a91d4.png"><img src="../../../../public/2018/04/47d37e15108b1cf1bcb9880d8a6a91d4.png"></a></p><p>ライセンス条項は、最下段までスクロールしないと同意できません。</p><p><a href="../../../../public/2018/04/df76f3497d7f931b48bdaacd11d0a519.png"><img src="../../../../public/2018/04/df76f3497d7f931b48bdaacd11d0a519.png"></a><br><a href="../../../../public/2018/04/15f457906cd670e1f9d33563db0d9ceb.png"><img src="../../../../public/2018/04/15f457906cd670e1f9d33563db0d9ceb.png"></a><br><a href="../../../../public/2018/04/5fca4a2b74a994ec3ae9d19ca25360fe.png"><img src="../../../../public/2018/04/5fca4a2b74a994ec3ae9d19ca25360fe.png"></a></p><h2 id="Enable-USB"><a href="#Enable-USB" class="headerlink" title="Enable USB"></a>Enable USB</h2><p>インストールできたらUSBを有効にします。<br>次は、ゲストOSの設定から<strong>USB</strong>を選択します。ゲストOS起動中には使えません。</p><p><a href="../../../../public/2018/04/2211d79632a7dea43e7ff269cab1b47d.png"><img src="../../../../public/2018/04/2211d79632a7dea43e7ff269cab1b47d.png"></a></p><p>右側の**+**ボタンから追加したいデバイスを選択、追加します。</p><p><a href="../../../../public/2018/04/dfc2f823564cd2f022574cdcae836b7a.png"><img src="../../../../public/2018/04/dfc2f823564cd2f022574cdcae836b7a.png"></a></p><p>機器によっては、<strong>USB 3.0 (xHCI) コントローラー</strong>を選択しないとゲストOSが認識してくれません。<br>上の画像の<strong>Intel Realsense</strong>がまさにそれです。<br>実際のデバイスがUSB 3.0ポートにつながっているかどうかは関係ないです。</p><p>設定完了後、ゲストOSを起動して、先述のエラーメッセージが表示されなければ成功です。</p>]]></content>
      
      
      <categories>
          
          <category> 仮想化 </category>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> Debian </category>
          
          <category> VirtualBox </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その108 Debian with Raspberry Pi Desktop on VirtualBoxでGuest Additionsを追加する</title>
      <link href="2018/04/14/2910/"/>
      <url>2018/04/14/2910/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>VirtualBoxでもHyper-Vのゲスト拡張機能のようなものが用意されています。</p><h1 id="How-to-install"><a href="#How-to-install" class="headerlink" title="How to install?"></a>How to install?</h1><p>VirtualBox上のDebian with Raspberry Pi Desktopへの拡張インストールは下記が詳しいです。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://www.aoakley.com/articles/2017-07-04-raspbian-x86-virtualbox.php" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=www.aoakley.com"></img><div class="hbc-site-name">www.aoakley.com</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="images/rpi-x86-vbox/rv00-desktop.jpg"></img></div><div class="hbc-text"><div class="hbc-title">Raspbian x86 on VirtualBox on a Windows PC</div><div class="hbc-url">http://www.aoakley.com/articles/2017-07-04-raspbian-x86-virtualbox.php</div><div class="hbc-description">How to run a Raspberry Pi desktop as a virtual machine on your Microsoft Windows PC or laptop.</div></div></div></div></a></div></div><p>ちなみに先にssh接続できるようにしておくと、コマンドをコピペできるので間違えなくて済みます。</p><p>まず、次のコマンドでDebianのリポジトリを使用可能にします。どうもRaspbianのGuest Additionsは長らくメンテされていない模様。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt install -y dirmngr</span><br><span class="line">$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key 8B48AD6246925553</span><br><span class="line">$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key 7638D0442B90D010</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;deb http://ftp.debian.org/debian stretch-backports main contrib non-free&quot;</span> | sudo tee /etc/apt/sources.list.d/backports.list</span><br><span class="line">$ sudo chmod 644 /etc/apt/sources.list.d/backports.list</span><br></pre></td></tr></table></figure><p>ちなみに、apt-keyは下記の引数でproxyを指定することができます。会社とかのセキュアの環境ではこれが必要になるでしょう。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--keyserver-option http-proxy=http://&lt;user&gt;:&lt;password&gt;@&lt;serveraddress&gt;:&lt;port&gt;</span><br></pre></td></tr></table></figure><p>そしてインストール。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt install virtualbox-guest-dkms virtualbox-guest-x11 linux-headers-$(uname -r)</span><br><span class="line">$ sudo shutdown -r now</span><br></pre></td></tr></table></figure><p>これで拡張機能が使えます。</p>]]></content>
      
      
      <categories>
          
          <category> 仮想化 </category>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> Debian </category>
          
          <category> VirtualBox </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その107 Debian with Raspberry Pi Desktop on VirtualBoxにssh接続</title>
      <link href="2018/04/14/2902/"/>
      <url>2018/04/14/2902/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Windows10のVirtualBox上に構築した<strong>Debian with Raspberry Pi Desktop</strong>に対して、ssh接続するのに少し嵌ったのでメモ。</p><h1 id="How-to-do"><a href="#How-to-do" class="headerlink" title="How to do?"></a>How to do?</h1><p>VirtualBox内の仮想マシンに外部からアクセスする場合、VirtualBoxのネットワーク設定を<strong>NAT</strong>にした上で、指定したポートを仮想マシンにポートフォワードする必要がある。<br>通常、sshは22で待ち受けるので、ホストPCへの22宛の通信をゲストOSの22へフォワードすればよい。</p><p>が、これがうまくいかない。<br>外から、sshでホストPC宛に接続を試みても、</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Permission denied, please try again.</span><br></pre></td></tr></table></figure><p>というエラーが返ってくる。<br>そこで、下記のコマンドで、sshの接続に失敗したログを見てみる。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat /var/<span class="built_in">log</span>/auth.log | grep <span class="string">&#x27;sshd.\*Invalid&#x27;</span></span><br></pre></td></tr></table></figure><p>しかし、ログそのものが出力されていない。<br>こうなると、そもそもssh接続が仮想マシン側に到達していない、と考えるとが筋である。<br>なので、ポートフォワーディングを<br><a href="../../../../public/2018/04/3a495773eb924093597eb101367c034a.png"><img src="../../../../public/2018/04/3a495773eb924093597eb101367c034a.png"></a><br> のようにし、22ポート以外に変更する。<br>ssh接続も</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh &lt;user&gt;@&lt;address&gt; -p 222</span><br></pre></td></tr></table></figure><p>に変更する。</p><p>こうすると上手くいった。</p><h1 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h1><p>ポートフォーワーディングは転送元ポートと転送先ポートが同じでも問題ないはずである。<br>なのにそれが失敗したのは、ホスト側で別のアプリが22でLISTENしていたからだと考えられる。</p><p>なので、ホストPCでLISTENしているポートを調べてみた。<br>外部から22ポート宛にssh接続してみる。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">TAKUYA</span>&gt;<span class="title">netstat</span> | <span class="title">find</span> &quot;22&quot;</span></span><br><span class="line"><span class="function">  <span class="title">TCP</span>         192.168.11.11:22       <span class="title">TAKUYA</span>-<span class="title">PC2</span>:52037       <span class="title">CLOSE_WAIT</span></span></span><br><span class="line"><span class="function">  <span class="title">TCP</span>         192.168.11.11:222      <span class="title">TAKUYA</span>-<span class="title">PC2</span>:51989       <span class="title">TIME_WAIT</span></span></span><br></pre></td></tr></table></figure><p>なんか22ポート使っている奴がいる… Windows10端末で22ポートで待ち受けするアプリなぞ思い当たらないので、調べてみた。<br>下記の記事を発見。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://ascii.jp/elem/000/001/555/1555599/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=ascii.jp"></img><div class="hbc-site-name">ASCII.jp</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://ascii.jp/img/2017/09/24/1617423/l/079e96ef18c845c9.jpg?20200122"></img></div><div class="hbc-text"><div class="hbc-title">Windows 10でSSH（Secure Shell）サーバーを使う</div><div class="hbc-url">http://ascii.jp/elem/000/001/555/1555599/</div><div class="hbc-description">Windows 10のAnniversary Update（RS1）から、開発者モードをオンにすると、SSHサーバーが起動するようになっている。</div></div></div></div></a></div></div><p>上の記事によると、</p><blockquote><p>ハッキリしているのは、Windows 10（Desktop、Mobile、IoT）で開発者モードをオンにすると、SSH関連の2つのサービス（SSH Server Broker、SSH Server Proxy）が起動するようになるということだ。</p></blockquote><p><a href="../../../../public/2018/04/d7bdf4723b1f3f3ddf5e5357e124316c.png"><img src="../../../../public/2018/04/d7bdf4723b1f3f3ddf5e5357e124316c-1024x530.png"></a><br> 確かに動いています。<br>気づかなかった…</p><p>とりえあず、Windows10端末でssh接続する予定はないので、この2つのサービスの自動起動を無効、停止しました。</p>]]></content>
      
      
      <categories>
          
          <category> 仮想化 </category>
          
          <category> Microsoft </category>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> Debian </category>
          
          <category> VirtualBox </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その106 compattelrunner.exeを停止する</title>
      <link href="2018/04/14/2896/"/>
      <url>2018/04/14/2896/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>少し古いWindows10マシン上でHDDへのアクセスがいつまでたっても100%のままで不安を覚え、リソースモニターでチェックしたのが事の始まり。<br>いくつか暴れまわっているプロセスの中で目に留まったのが <strong>compattelrunner.exe</strong>。何ぞこれぇ？</p><h1 id="What-is-compattelrunner-exe"><a href="#What-is-compattelrunner-exe" class="headerlink" title="What is compattelrunner.exe?"></a>What is compattelrunner.exe?</h1><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://blog.yam5.com/archives/1558" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=blog.yam5.com"></img><div class="hbc-site-name">blog.yam5.com</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">CompatTelRunner.exeを停止してWindows 10を軽くする方法 – コログ</div><div class="hbc-url">https://blog.yam5.com/archives/1558</div><div class="hbc-description">Windows 10を起動すると、1分近くHDDがガリガリ言ってることがあります。 高速なSSDでは影響ないかもしれませんが、HDDは大量のファイル読み書きが行われていると、他の動作も遅くなりパソコン操作に支障が出ます。 リソースモニターで探していると、 CompatTelRun…</div></div></div></div></a></div></div><p>上記ページによれば、</p><blockquote><p>カスタマーエクスペリエンス向上プログラム（マイクロソフトへの情報提供）に関するアプリケーションですが、これに同意していなくても強制的に起動し、起動時に怪しげな動作をします。</p></blockquote><p>とのこと。<br>名称からすると <strong>Compatible Telemetry Runner (互換性テレメトリーランナー)</strong> って感じです。<br>やることが<del>鬼畜です</del>顧客思いですね、Microsoftさん。</p><p>だけど、HDDに強烈なボディブローを長時間与えるのはよろしくないので、停止させていただきます。</p><h2 id="タスクスケジューラの起動"><a href="#タスクスケジューラの起動" class="headerlink" title="タスクスケジューラの起動"></a>タスクスケジューラの起動</h2><p>コントロールパネルからでもよいですが、Windows 10だとコントロールパネルへのアクセスが面倒なので、<strong>ファイル名を指定して実行</strong>より<strong>Taskschd.msc</strong>を起動</p><h2 id="compattelrunner-exeの起動タスクを停止"><a href="#compattelrunner-exeの起動タスクを停止" class="headerlink" title="compattelrunner.exeの起動タスクを停止"></a>compattelrunner.exeの起動タスクを停止</h2><p>まず、左側の<strong>タスクスケジューラライブラリ</strong>から <strong>Microsoft -&gt; Windows -&gt; Application Experience</strong> を選択。</p><p><a href="../../../../public/2018/04/2397a66fe2aa6255ab4e453792289f8c.png"><img src="../../../../public/2018/04/2397a66fe2aa6255ab4e453792289f8c.png"></a></p><p>続いて、右側の<strong>Microsoft Compatibility Appraiser</strong> を選択してダブルクリック</p><p><a href="../../../../public/2018/04/f412e60bccb1f394aefa1ac20d4dee61.png"><img src="../../../../public/2018/04/f412e60bccb1f394aefa1ac20d4dee61.png"></a></p><p><strong>操作タブ</strong>に移動</p><p><a href="../../../../public/2018/04/1d64d7d049ddf745178272b471302501.png"><img src="../../../../public/2018/04/1d64d7d049ddf745178272b471302501.png"></a></p><p>compattelrunner.exeの開始を確認。<br>ダイアログを閉じ、<strong>Microsoft Compatibility Appraiser</strong>を右クリック、コンテキストメニューから<strong>無効</strong>を選択。</p><p>これで自動起動が止まります。</p><p>しかし、これでカスタマーエクスペリエンス向上につながるとは思えないんですけどね…</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その105 Hyper-VでDebian with Raspberry Pi Desktop を使う</title>
      <link href="2018/04/13/2863/"/>
      <url>2018/04/13/2863/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Raspberry Piを使ったデモシステムの構築を計画しており、見積書、発注まで来ているのですが、如何せんLinuxなので早めに調査をしておこうと思い、仮想環境上で実行環境を作ろうとしたのが始まり。<br>といっても会社はWindows7マシンでHyper-Vなぞ使えないし、Hyper-Vサーバーはありますがネットワークが別で、それがネックになり、泣く泣くVirtualBoxで環境を作りました。<br>でも自宅はHyper-V、細かいことは気にしない。</p><h1 id="Get-Started"><a href="#Get-Started" class="headerlink" title="Get Started"></a>Get Started</h1><h2 id="ISOの入手"><a href="#ISOの入手" class="headerlink" title="ISOの入手"></a>ISOの入手</h2><p>まずはOSイメージのダウンロード。公式サイト<a href="https://www.raspberrypi.org/downloads/raspberry-pi-desktop/">RASPBERRY PI DESKTOP</a>からゲットします。</p><p><a href="../../../../public/2018/04/screencapture-raspberrypi-org-downloads-raspberry-pi-desktop-2018-04-13-19_34_42.png"><img src="../../../../public/2018/04/screencapture-raspberrypi-org-downloads-raspberry-pi-desktop-2018-04-13-19_34_42-1024x796.png"></a></p><h2 id="仮想マシンの用意"><a href="#仮想マシンの用意" class="headerlink" title="仮想マシンの用意"></a>仮想マシンの用意</h2><p>Hyper-Vマネージャーから仮想マシンを用意します。<br>今回は、Raspberry Pi 3に近しい性能にするため、</p><ul><li>メモリ1GB</li><li>HDD16GB</li></ul><p>に制限します。</p><p><a href="../../../../public/2018/04/04529353e5e48511242d91cf30ed0a8d.png"><img src="../../../../public/2018/04/04529353e5e48511242d91cf30ed0a8d.png"></a></p><p><a href="../../../../public/2018/04/be7df588ff60ea488947ccb2b33369ce.png"><img src="../../../../public/2018/04/be7df588ff60ea488947ccb2b33369ce.png"></a></p><p><a href="../../../../public/2018/04/d16be71b3ed5f96b2d84c72ed859bf0d.png"><img src="../../../../public/2018/04/d16be71b3ed5f96b2d84c72ed859bf0d.png"></a></p><p><a href="../../../../public/2018/04/1f76318ac1e20e6f16f913d2b617236a.png"><img src="../../../../public/2018/04/1f76318ac1e20e6f16f913d2b617236a.png"></a></p><p><a href="../../../../public/2018/04/29079c0e9b0a8fde4f8929230cf74f4d.png"><img src="../../../../public/2018/04/29079c0e9b0a8fde4f8929230cf74f4d.png"></a></p><p><a href="../../../../public/2018/04/7b019e1409d5f7e7223aaad4051c88a2.png"><img src="../../../../public/2018/04/7b019e1409d5f7e7223aaad4051c88a2.png"></a></p><p><a href="../../../../public/2018/04/a6e73b1d38bef6c6ad88cffda523d689.png"><img src="../../../../public/2018/04/a6e73b1d38bef6c6ad88cffda523d689.png"></a></p><h2 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h2><p>仮想マシンンにインストールします。</p><p><a href="../../../../public/2018/04/fc77969e5383b348cb76340b9fd7bce1.png"><img src="../../../../public/2018/04/fc77969e5383b348cb76340b9fd7bce1.png"></a></p><p><a href="../../../../public/2018/04/c26948fa1e137a5a756769b857ca3337.png"><img src="../../../../public/2018/04/c26948fa1e137a5a756769b857ca3337.png"></a></p><p><a href="../../../../public/2018/04/fd3200ecdbc67c8b1a01a771c866e9da.png"><img src="../../../../public/2018/04/fd3200ecdbc67c8b1a01a771c866e9da.png"></a></p><p><a href="../../../../public/2018/04/f0550ec4d2dad10a5bfe0232254ea263.png"><img src="../../../../public/2018/04/f0550ec4d2dad10a5bfe0232254ea263.png"></a></p><p><a href="../../../../public/2018/04/d4733f3f7bdb19f0d866826de6189fd3.png"><img src="../../../../public/2018/04/d4733f3f7bdb19f0d866826de6189fd3.png"></a></p><p><a href="../../../../public/2018/04/38bc67a2734fe5150516ae5ff435c63b.png"><img src="../../../../public/2018/04/38bc67a2734fe5150516ae5ff435c63b.png"></a></p><p><a href="../../../../public/2018/04/295bbfb3d0d6dbf54e6de70697f62e42.png"><img src="../../../../public/2018/04/295bbfb3d0d6dbf54e6de70697f62e42.png"></a></p><p><a href="../../../../public/2018/04/ac8991b472dfdbc791a148edea6b2e81.png"><img src="../../../../public/2018/04/ac8991b472dfdbc791a148edea6b2e81.png"></a></p><p><a href="../../../../public/2018/04/f5cad5476d9f775a418e91691cd14a95.png"><img src="../../../../public/2018/04/f5cad5476d9f775a418e91691cd14a95.png"></a></p><p><a href="../../../../public/2018/04/4ac6cbefa7fc87e05ab6d785f5f70d0d.png"><img src="../../../../public/2018/04/4ac6cbefa7fc87e05ab6d785f5f70d0d.png"></a></p><p><a href="../../../../public/2018/04/0d9a6c2b8cf432cf470158516b5fe8a5.png"><img src="../../../../public/2018/04/0d9a6c2b8cf432cf470158516b5fe8a5.png"></a></p><p><a href="../../../../public/2018/04/f9c4327009f7ce2bcd7733c46dc27d52.png"><img src="../../../../public/2018/04/f9c4327009f7ce2bcd7733c46dc27d52.png"></a></p><p><a href="../../../../public/2018/04/28c1675f5c15d64aa95066b0571242ff.png"><img src="../../../../public/2018/04/28c1675f5c15d64aa95066b0571242ff.png"></a></p><p>これでインストールは完了です。<br>一度仮想マシンを停止して、ISOファイルを取り出します。そうしないと、インストール画面が再度表示されてしまいます。</p><h2 id="起動"><a href="#起動" class="headerlink" title="起動"></a>起動</h2><p>インストールが終わったので、起動してみます。</p><p><a href="../../../../public/2018/04/59ead51a2e8d9d54f279a6cc6d298d49.png"><img src="../../../../public/2018/04/59ead51a2e8d9d54f279a6cc6d298d49.png"></a></p><p><a href="../../../../public/2018/04/2677311d412b54596df96bdcd06ad482.png"><img src="../../../../public/2018/04/2677311d412b54596df96bdcd06ad482.png"></a></p><p>無事にデスクトップが表示されました。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> IoT </category>
          
          <category> Hyper-V </category>
          
          <category> iot </category>
          
          <category> Raspbian </category>
          
          <category> Raspberry Pi </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETで自動テストを試してみる 第1回</title>
      <link href="2018/04/10/2852/"/>
      <url>2018/04/10/2852/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>会社の海外現地法人にて、自動テストでコスト削減、みたいなことが話にあがり、こっちでもやらないとダメだよね、って話になりました。<br>その際に話題にあがったのが<strong>Appium</strong>。<br><strong>Selenium</strong>と名前が少し似ているので、関係があると思ったら、まぁその通りで。<br>Seleniumは使ったことはなくて、Webアプリ用でしょ?デスクトップアプリに関係ない?と思ったら今は違っていて、Selenium(に互換のあるAPIを持つアプリ)がWebサーバーとして動作し、テスト対象アプリとテストを指示するクライアントを仲介することで、iOS、Android、VB(レガシーだよ!!)とか何でもござれのご様子。<br><strong>RPA(Robotics Process Automation)</strong> の一種やないと思い始めまして、ちょっと興味が。</p><p>で、Selenium互換のAPIを持つのがAppium。そのAppiumを経由することでWindowsアプリを操作することもできます。</p><p>ちなみに、この話は、<strong>Windows 10が対象で、7や8では試せません。</strong></p><p>ソースは下記になります </p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/takuya-takeuchi/Demo/tree/master/Appium1" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/6241854?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">takuya-takeuchi/Demo</div><div class="hbc-url">https://github.com/takuya-takeuchi/Demo/tree/master/Appium1</div><div class="hbc-description">Sample source code for Demonstration, Experiment and Test - takuya-takeuchi/Demo</div></div></div></div></a></div></div><h1 id="Get-Started"><a href="#Get-Started" class="headerlink" title="Get Started"></a>Get Started</h1><p>Appiumを使うには下記の作業が必要。</p><ol><li>Windows Application Driverのインストール</li><li>テストの記述・実行</li></ol><h2 id="Windows-Application-Driverのインストール"><a href="#Windows-Application-Driverのインストール" class="headerlink" title="Windows Application Driverのインストール"></a>Windows Application Driverのインストール</h2><p>Windowsアプリを対象にするには、<strong>Windows Application Driver (WinAppDriver)</strong> が必要。<br>テスト対象Windowsアプリとテスト(を指示するアプリ)クライアントを仲介し、Windowsアプリの仕様や挙動を伝えるI/Fってことです。</p><p>まずは、こいつをインストールします。<br>下記からインストーラをダウンロードし、実行します。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/Microsoft/WinAppDriver/releases" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars2.githubusercontent.com/u/6154722?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">Releases · microsoft/WinAppDriver</div><div class="hbc-url">https://github.com/Microsoft/WinAppDriver/releases</div><div class="hbc-description">Windows Application Driver. Contribute to microsoft/WinAppDriver development by creating an account on GitHub.</div></div></div></div></a></div></div><p>インストールは大したことないので割愛。<br>どうでもいいですが、Windows7でもインストールは出来ますが、最終的にテスト実行時に </p><p><a href="../../../../public/2018/04/4c4a0878b1408f4534fcf9019e0f0e6a.png"><img src="../../../../public/2018/04/4c4a0878b1408f4534fcf9019e0f0e6a.png"></a></p><p>となりますので無駄骨です。</p><h2 id="テストの記述・実行"><a href="#テストの記述・実行" class="headerlink" title="テストの記述・実行"></a>テストの記述・実行</h2><p>もうテストが書けます!! <strong>Nuget</strong>でライブラリが配布されていますので、テストを記述したアプリを作成します。<br>基本は、</p><ul><li>Windows Application Driverの起動</li><li>テストの記述・実行</li></ul><p>です。<br>サンプルがネットに転がっているので少し改造させてもらいます。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://www.ka-net.org/blog/?p=6879" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=www.ka-net.org"></img><div class="hbc-site-name">初心者備忘録</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://www.ka-net.org/blog/wp-content/uploads/eyecatch-Selenium.png"></img></div><div class="hbc-text"><div class="hbc-title">Windows Application Driverを試してみました。</div><div class="hbc-url">https://www.ka-net.org/blog/?p=6879</div><div class="hbc-description">Build 2016のセッション「UI Test Automation for Browsers and Ap…</div></div></div></div></a></div></div><p>上の記事は電卓(ただしUWP製の)を操作します。<br>が、こっちは、ネイティブのGuidgen.exeを操作してみます。<br>最初に</p><script src="https://gist.github.com/takuya-takeuchi/843d5c3664179dd8db886809f323fc48.js"></script><p>で、nugetの参照を追加します。<br>次はソースです。</p><script src="https://gist.github.com/takuya-takeuchi/bd3509fb2c255eed8c6b8237830281c4.js"></script><p>特に迷うポイントはありませんが、ボタンを探す際、ニーモニックがあると戸惑うくらいでしょう。<br>各コントロールの名前は、<strong>inspect.exe</strong>を使って調べることができます。</p><p><a href="../../../../public/2018/04/7785a5f7a54238bad49205954537c163.png"><img src="../../../../public/2018/04/7785a5f7a54238bad49205954537c163.png"></a></p><p>プログラムを実行すると、コンソールでWinAppDriver.exeが立ち上がり、Guidgen.exeが自動で操作されています。</p><p><a href="../../../../public/2018/04/f141f66a167ac8ec698aed5c1856143c.png"><img src="../../../../public/2018/04/f141f66a167ac8ec698aed5c1856143c-1024x649.png"></a></p><p>注意して欲しいのは、マウスカーソルが奪われますので、作業するのは止めた方が良いです。</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/Appium1">https://github.com/takuya-takeuchi/Demo/tree/master/Appium1</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> Windows Application Driver </category>
          
          <category> .NETで自動テストを試してみる </category>
          
          <category> 自動テスト </category>
          
          <category> Appium </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その104 260文字を超えるパスを有効にする 追試験</title>
      <link href="2018/04/05/2835/"/>
      <url>2018/04/05/2835/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>以前、<a href="https://taktak.jp/2016/08/11/1502">開発メモ その9 260文字を超えるパスを有効にする</a>という記事を書いたのですが、どうもCreators Update以降、微妙に挙動が変わっているように見えます。</p><p>具体的には、レジストリを有効にし、app.configに設定を追記しても、長いパスが有効にならないのです。<br>検証は、</p><ul><li>Hyper-V上に英語版の<strong>Aniversary Update (Winver 1607)**、</strong>Creators Update (Winver 1703)**を新規に構築</li><li>ループポリシーで設定を有効にし、かつレジストリに設定が正しく書き込まれていることを確認</li><li>.NET 4.6.2.でビルドし、かつapp.configを用意</li></ul><p>それが下記の結果です。</p><p><a href="../../../../public/2018/04/5f1ffdff10528bf1a6f9bf9e25aed881.png"><img src="../../../../public/2018/04/5f1ffdff10528bf1a6f9bf9e25aed881-1024x655.png"></a><br> <strong>Aniversary Update</strong></p><p><a href="../../../../public/2018/04/f4c5b1a3c86b27c98d45b13955423373.png"><img src="../../../../public/2018/04/f4c5b1a3c86b27c98d45b13955423373-1024x655.png"></a><br> <strong>Creators Update</strong></p><p>同じサンプルを実行させたのに結果が違います。<br>何故でしょう?</p><h1 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h1><p>対応策は、manifestを埋め込む、ということだけです。<br>埋め込むmanifestは</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span> <span class="attr">xmlns</span>=<span class="string">&quot;urn:schemas-microsoft-com:asm.v3&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">windowsSettings</span> <span class="attr">xmlns:ws2</span>=<span class="string">&quot;http://schemas.microsoft.com/SMI/2016/WindowsSettings&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ws2:longPathAware</span>&gt;</span>true<span class="tag">&lt;/<span class="name">ws2:longPathAware</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">windowsSettings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure><p>です。<br>下記はmanifestを埋め込んだ結果です。</p><p><a href="../../../../public/2018/04/f0a6f771180a934e6c1d553737b72cbe.png"><img src="../../../../public/2018/04/f0a6f771180a934e6c1d553737b72cbe-1024x655.png"></a><br> <strong>Creators Update</strong></p><p>しかし、manifestを埋め込む、ということ自体は以前からMSDNに書いてあったはずです。</p><p>上のページの途中の説明です。</p><blockquote><p>A registry key allows you to enable or disable the new long path behavior. To enable long path behavior set the registry key at HKLM\SYSTEM\CurrentControlSet\Control\FileSystem LongPathsEnabled (Type: REG_DWORD). The key’s value will be cached by the system (per process) after the first call to an affected Win32 file or directory function (list follows). The registry key will not be reloaded during the lifetime of the process. In order for all apps on the system to recognize the value of the key, a reboot might be required because some processes may have started before the key was set. The registry key can also be controlled via Group Policy at Computer Configuration &gt; Administrative Templates &gt; System &gt; Filesystem &gt; Enable NTFS long paths. You can also enable the new long path behavior per app via the manifest:</p></blockquote><p>要するに、</p><blockquote><p>レジストリキーが長いパスの新しい扱いの有効/無効を許可します。長いパスの扱いを有効にするために、<strong>HKLM\SYSTEM\CurrentControlSet\Control\FileSystem LongPathsEnabled (Type: REG_DWORD)</strong> にキーを設定します。キーの値は、影響のあるwin32のファイルまたはディレクトリ関数(後述のリスト)の最初の呼び出し後、システム(プロセス毎)によって、キャッシュされます。レジストリキーはプロセスの生存中は再読込されません。<br>システム上の全てのアプリケーションにキーの値を認識させるために、いくつかのプロセスは値が設定される前に起動されたがために、システムの再起動を要求されるかもしれません。<br>レジストリキーはグループポリシーの<strong>コンピューターの構成 -&gt; 管理用テンプレート -&gt; システム -&gt; ファイルシステム -&gt; Win32 の長いパスを有効にする</strong> によっても制御することが出来ます。<br>また、マニフェストによっても新しい長いパスの扱いを有効にすることが出来ます。</p></blockquote><p>です。<br>本文の<strong>also</strong>の係りをみるに、レジストリキーの設定さえあればOKのはずです。<br>ぶっちゃけ理由がわかりません。<br>が、manifestを有効にすれば動作しました。<br>最終的な検証は下記の通り。<br>[table id=27 /]</p><p>結局、Creators Updateから長いパスを扱うには、</p><ul><li>グループポリシー (またはレジストリ) の設定を有効</li><li>manifestで長いパスを扱えるよう設定</li></ul><p>の<strong>両方</strong>を満たす必要があるようです。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その103 Sony Neural Network LibrariesのC++ライブラリをビルドする</title>
      <link href="2018/04/01/2830/"/>
      <url>2018/04/01/2830/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>そこまで面倒なことはないけど、自分メモ。</p><h1 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h1><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/sony/nnabla" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars1.githubusercontent.com/u/8435219?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">sony/nnabla</div><div class="hbc-url">https://github.com/sony/nnabla</div><div class="hbc-description">Neural Network Libraries. Contribute to sony/nnabla development by creating an account on GitHub.</div></div></div></div></a></div></div><p>ソースは上から入手。<br>手順は<a href="https://github.com/sony/nnabla/blob/master/doc/build/build_cpp_utils_windows.md">Build C++ libraries on Windows</a>に書いてあるとおり。<br>C++のライブラリだけど、それを作るのにPythonが必要です。<br>動かすのにPythonがいるわけではないです。<br>(ただし、学習はPythonが必要で推論はC++だけOK)</p><ol><li>clone</li><li>nnabla\build-tools\msvc\setup_cpp_utils_deps.bat を実行</li><li>nnabla\build-tools\msvc\cmake_cpp_utils.bat を実行</li></ol><p>です。<br>途中、Pythonでモジュールが足りない、って言われるときがあります。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ cmake -G &quot;Visual Studio <span class="number">14</span> <span class="number">2015</span> Win64&quot; -DBUILD_CPP_UTILS=ON -DBUILD_PYTHON_PACKAGE=OFF -DLibArchive_LIBRARY=D:\Works\OpenSource\NeuralNetworkLibrariesDotNet\nnabla\build-tools\msvc\..\..\third_party\libarchive-v3.<span class="number">3</span>.<span class="number">2</span>\build-folder\libarchive\Release\archive.lib -DLibArchive_INCLUDE_DIR=D:\Works\OpenSource\NeuralNetworkLibrariesDotNet\nnabla\build-tools\msvc\..\..\third_party\libarchive-v3.<span class="number">3</span>.<span class="number">2</span>\libarchive -DProtobuf_INCLUDE_DIR=D:\Works\OpenSource\NeuralNetworkLibrariesDotNet\nnabla\build-tools\msvc\..\..\third_party\protobuf-v3.<span class="number">4</span>.<span class="number">1</span>\src -DProtobuf_LIBRARY=D:\Works\OpenSource\NeuralNetworkLibrariesDotNet\nnabla\build-tools\msvc\..\..\third_party\protobuf-v3.<span class="number">4</span>.<span class="number">1</span>\build-folder\Release\libprotobuf.lib -DProtobuf_LITE_LIBRARY=D:\Works\OpenSource\NeuralNetworkLibrariesDotNet\nnabla\build-tools\msvc\..\..\third_party\protobuf-v3.<span class="number">4</span>.<span class="number">1</span>\build-folder\Release\libprotobuf-lite.lib -DProtobuf_PROTOC_EXECUTABLE=D:\Works\OpenSource\NeuralNetworkLibrariesDotNet\nnabla\build-tools\msvc\..\..\third_party\protobuf-v3.<span class="number">4</span>.<span class="number">1</span>\build-folder\Release\protoc.exe -DPROTOC_COMMAND=D:\Works\OpenSource\NeuralNetworkLibrariesDotNet\nnabla\build-tools\msvc\..\..\third_party\protobuf-v3.<span class="number">4</span>.<span class="number">1</span>\build-folder\Release\protoc.exe D:\Works\OpenSource\NeuralNetworkLibrariesDotNet\nnabla\build-tools\msvc\..\.. -DZLIB_LIBRARY_RELEASE=D:\Works\OpenSource\NeuralNetworkLibrariesDotNet\nnabla\build-tools\msvc\..\..\third_party\zlib123dllx64\dll_x64\zlibwapi.lib -DZLIB_INCLUDE_DIR=D:\Works\OpenSource\NeuralNetworkLibrariesDotNet\nnabla\build-tools\msvc\..\..\third_party\zlib123dllx64    || <span class="keyword">GOTO</span> :error</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> last):</span><br><span class="line">  File &quot;D:/Works/OpenSource/NeuralNetworkLibrariesDotNet/nnabla/build-tools/code_generator/generate.py&quot;, line <span class="number">90</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    generate()</span><br><span class="line">  File &quot;D:/Works/OpenSource/NeuralNetworkLibrariesDotNet/nnabla/build-tools/code_generator/generate.py&quot;, line <span class="number">67</span>, <span class="keyword">in</span> generate</span><br><span class="line">    solver_info, solver_types)</span><br><span class="line">  File &quot;D:\Works\OpenSource\NeuralNetworkLibrariesDotNet\nnabla\build-tools\code_generator\code_generator_utils.py&quot;, line <span class="number">204</span>, <span class="keyword">in</span> generate_init</span><br><span class="line">    generate_from_template(template, **kwargs)</span><br><span class="line">  File &quot;D:\Works\OpenSource\NeuralNetworkLibrariesDotNet\nnabla\build-tools\code_generator\code_generator_utils.py&quot;, line <span class="number">95</span>, <span class="keyword">in</span> generate_from_template</span><br><span class="line">    filename=path_template, template_kwargs=kwargs)</span><br><span class="line">  File &quot;D:\Works\OpenSource\NeuralNetworkLibrariesDotNet\nnabla\build-tools\code_generator\code_generator_utils.py&quot;, line <span class="number">54</span>, <span class="keyword">in</span> render_with_template</span><br><span class="line">    from mako.template import Template</span><br><span class="line"><span class="function">ImportError: <span class="title">No</span> <span class="title">module</span> <span class="title">named</span> <span class="title">mako.template</span></span></span><br><span class="line"><span class="function"><span class="title">CMake</span> <span class="title">Error</span> <span class="title">at</span> <span class="title">CMakeLists.txt</span>:67 (<span class="title">message</span>):</span></span><br><span class="line"><span class="function">  <span class="title">generate.py</span> <span class="title">failed</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">-- <span class="title">Configuring</span> <span class="title">incomplete</span>, <span class="title">errors</span> <span class="title">occurred</span>!</span></span><br><span class="line"><span class="function"><span class="title">See</span> <span class="title">also</span> &quot;<span class="title">D</span>:/<span class="title">Works</span>/<span class="title">OpenSource</span>/<span class="title">NeuralNetworkLibrariesDotNet</span>/<span class="title">nnabla</span>/<span class="title">build</span>/<span class="title">CMakeFiles</span>/<span class="title">CMakeOutput.log</span>&quot;.</span></span><br></pre></td></tr></table></figure><p>上の場合は、<strong>mako.template</strong> が無いって文句言ってますので</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python -m pip install mako</span><br></pre></td></tr></table></figure><p>みたいにインストールします。</p><p>エラーが無ければ、<strong>nnabla\build\bin\Release</strong> にlibも含めたライブラリが生成されます。</p>]]></content>
      
      
      <categories>
          
          <category> %e3%83%87%e3%82%a3%e3%83%bc%e3%83%97%e3%83%a9%e3%83%bc%e3%83%8b%e3%83%b3%e3%82%b0 </category>
          
          <category> ディープラーニング </category>
          
          <category> Neural Network Libraries </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その102 CMakeから別ライブラリのクラスを呼び出す</title>
      <link href="2018/03/31/2807/"/>
      <url>2018/03/31/2807/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>会社で自社作成のクラスを提供する話がありましたが、ソースではなく、ライブラリとして提供することになりました。<br>選択肢は、</p><ol><li>静的ライブラリ</li><li>共有ライブラリ</li></ol><p>の2択。<br>静的にしても良かったのですが、CMakeで共有ライブラリを作って、クラスを呼んだことがないので、共有にしてみました。</p><p>サンプルソースは下記になります </p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/takuya-takeuchi/Demo/tree/master/CMake3" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/6241854?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">takuya-takeuchi/Demo</div><div class="hbc-url">https://github.com/takuya-takeuchi/Demo/tree/master/CMake3</div><div class="hbc-description">Sample source code for Demonstration, Experiment and Test - takuya-takeuchi/Demo</div></div></div></div></a></div></div><h1 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h1><p>基本的に動的ライブラリを作るのは問題ありません。<br><strong>CMakeLists.txt</strong>に</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add_library</span>(<span class="variable">$&#123;PROJ_NAME&#125;</span> SHARED <span class="variable">$&#123;SOURCES&#125;</span> <span class="variable">$&#123;HEADERS&#125;</span>)</span><br></pre></td></tr></table></figure><p>上記のように<strong>SHARED</strong>をつければ、dllまたはsoファイルが生成されます。<br>しかし、Windowsの場合、共有ライブラリを使用するには、libファイルが必要になります。<br>下記のクラスをdllにした場合、どうなるでしょう? </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _CPP_TEST_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CPP_TEST_H_</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Test();</span><br><span class="line">    <span class="keyword">virtual</span> ~Test();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>生成されたdllを<strong>Dependency Walker</strong>で見てみました。</p><p><a href="../../../../public/2018/03/a72515a6c999250744da1596f1b009ce.png"><img src="../../../../public/2018/03/a72515a6c999250744da1596f1b009ce.png"></a></p><p>何もエクスポートされていません。<br>そもそも、libファイルがないので、リンクできません。<br>当然、こんな状態でリンクできません。<br>共有ライブラリを作って、かつlibファイルを作成するには、一工夫が必要。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _CPP_TEST_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CPP_TEST_H_</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> __<span class="title">declspec</span>( <span class="title">dllexport</span> ) <span class="title">Test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Test();</span><br><span class="line">    <span class="keyword">virtual</span> ~Test();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><strong>class</strong>の後に、<strong>dllexport</strong>属性を付与します。<br>シンボルが1つ以上エクスポートされるとlibが生成される模様。</p><p>これで、dllと一緒に、libファイルが生成されます。<br>また、生成されたdllも適切にシンボルをエクスポートできています。</p><p><a href="../../../../public/2018/03/acb5a918fd65165f0204752919db922c.png"><img src="../../../../public/2018/03/acb5a918fd65165f0204752919db922c.png"></a></p><p>ただし、<strong>gcc</strong>の場合、デフォルトでエクスポートされます。<br>dllexport属性は余計でビルドエラーを生成しますので、プリプロセッサで切り分けておくと楽です。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _WINDOWS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLASSEXPORT __declspec( dllexport )</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLASSEXPORT</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _CPP_TEST_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CPP_TEST_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;export.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CLASSEXPORT</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Test();</span><br><span class="line">    <span class="keyword">virtual</span> ~Test();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/CMake3">https://github.com/takuya-takeuchi/Demo/tree/master/CMake3</a></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
          <category> その他 </category>
          
          <category> CMake </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その101 GitKrakenでpushしたら failed to get server certificate</title>
      <link href="2018/03/31/2813/"/>
      <url>2018/03/31/2813/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><a href="../../../../public/2018/03/f19fb2c05d70de09bedfa9918c0de089.png"><img src="../../../../public/2018/03/f19fb2c05d70de09bedfa9918c0de089.png"></a></p><h1 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h1><p>ズバリな答え。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://stackoverflow.com/questions/48985995/gitkraken-and-github-failed-to-get-server-certificate-the-handle-is-in-the-wr?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=stackoverflow.com"></img><div class="hbc-site-name">Stack Overflow</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded"></img></div><div class="hbc-text"><div class="hbc-title">GitKraken And Github - failed to get server certificate: The handle is in the wrong state for the requested operation</div><div class="hbc-url">https://stackoverflow.com/questions/48985995/gitkraken-and-github-failed-to-get-server-certificate-the-handle-is-in-the-wr?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa</div><div class="hbc-description">I am getting this error message from GitKraken whenever I try to clone/fetch/push/push to any of my Github repositories:  failed to get se…</div></div></div></div></a></div></div><p>要するに、Githubが</p><ul><li>TLSv1/TLSv1.1: <a href="https://github.com/">https://github.com</a> と <a href="https://api.github.comweb/">https://api.github.comWeb</a> へのAPI、Gitを含む全てのHTTPSコネクションに適用</li><li>diffie-hellman-group1-sha1: github.com へのSSHコネクションに適用</li><li>diffie-hellman-group14-sha1: github.com へのSSHコネクションに適用</li></ul><p>による弱い暗号標準が削除されたためとのこと。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://blog.github.com/2018-02-23-weak-cryptographic-standards-removed/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=blog.github.com"></img><div class="hbc-site-name">The GitHub Blog</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://github.blog/wp-content/uploads/2018/02/26907144-178243fc-4ba6-11e7-8f15-8985451b33c2.jpg?fit=1200%2C630"></img></div><div class="hbc-text"><div class="hbc-title">Weak cryptographic standards removed - The GitHub Blog</div><div class="hbc-url">https://blog.github.com/2018-02-23-weak-cryptographic-standards-removed/</div><div class="hbc-description">Earlier today we permanently removed support for the following weak cryptographic standards on github.com and api.github.com: TLSv1/TLSv1.1:…</div></div></div></div></a></div></div> <div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://news.mynavi.jp/article/20180226-588372/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=news.mynavi.jp"></img><div class="hbc-site-name">マイナビニュース</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://news.mynavi.jp/article/20180226-588372/index_images/index.jpg"></img></div><div class="hbc-text"><div class="hbc-title">GitHub、弱い暗号標準の利用を廃止</div><div class="hbc-url">https://news.mynavi.jp/article/20180226-588372/</div><div class="hbc-description">GitHubは2月23日、同日をもってgithub.comおよびapi.github.comから弱いとされる暗号標準の利用を廃止したと伝えた。これまでサポートしてきてこれらの暗号標準は今後利用することはできないとしている。</div></div></div></div></a></div></div><p>ですが、Stackoverflowの記事による、Windowsパッチの適用は効果がありませんでした(既に適用済みのパッチであったため)。<br>次の修正ツールを適用し再起動したら直りました。</p><p><a href="https://support.microsoft.com/ja-jp/help/3140245/update-to-enable-tls-1-1-and-tls-1-2-as-a-default-secure-protocols-in#easy">WinHTTP が Windows での既定のセキュリティで保護されたプロトコルとして TLS 1.1 および TLS 1.2 を有効にする更新プログラム</a> </p><p><a href="../../../../public/2018/03/0431e5dcc7f6153fc3a208c5e787811f.png"><img src="../../../../public/2018/03/0431e5dcc7f6153fc3a208c5e787811f.png"></a></p><p><a href="../../../../public/2018/03/fbcad98c1f0191134817643ac76deaa7.png"><img src="../../../../public/2018/03/fbcad98c1f0191134817643ac76deaa7.png"></a></p><p><a href="../../../../public/2018/03/e933c466666e5e3947ae90e3a45ce62a.png"><img src="../../../../public/2018/03/e933c466666e5e3947ae90e3a45ce62a.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> バージョン管理システム </category>
          
          <category> git </category>
          
          <category> GitKraken </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その100 WPFのControlTemplate内のListBoxに対してStyleが適用されない</title>
      <link href="2018/03/20/2804/"/>
      <url>2018/03/20/2804/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>Themes\Generic.xaml</strong> 内に定義した <strong>ControlTemplate</strong> についてのお話。<br>ControlTemplte 内のGridでRrsourcesセクションを用意し、下記のようなコードを書いた。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;Style TargetType&#x3D;&quot;&#123;x:Type controls:TestControl&#125;&quot;&gt;</span><br><span class="line">    &lt;Setter Property&#x3D;&quot;Template&quot;&gt;</span><br><span class="line">        &lt;Setter.Value&gt;</span><br><span class="line">            &lt;ControlTemplate TargetType&#x3D;&quot;&#123;x:Type controls:TestControl&#125;&quot;&gt;</span><br><span class="line">                &lt;Grid x:Name&#x3D;&quot;_Grid&quot;</span><br><span class="line">                      HorizontalAlignment&#x3D;&quot;Stretch&quot;</span><br><span class="line">                      VerticalAlignment&#x3D;&quot;Stretch&quot;&gt;</span><br><span class="line">                    &lt;Grid.Resources&gt;</span><br><span class="line">                        &lt;Style BasedOn&#x3D;&quot;&#123;StaticResource &#123;x:Type ListBox&#125;&#125;&quot; TargetType&#x3D;&quot;ListBox&quot;&gt;</span><br><span class="line">                            &lt;Setter Property&#x3D;&quot;FontSize&quot; Value&#x3D;&quot;24&quot; &#x2F;&gt;</span><br><span class="line">                        &lt;&#x2F;Style&gt;</span><br><span class="line">                    &lt;&#x2F;Grid.Resources&gt;</span><br><span class="line">                    &lt;ListBox x:Name&#x3D;&quot;ListBox1&quot; Grid.Column&#x3D;&quot;0&quot; &#x2F;&gt;</span><br><span class="line">                &lt;&#x2F;Grid&gt;</span><br><span class="line">            &lt;&#x2F;ControlTemplate&gt;</span><br><span class="line">        &lt;&#x2F;Setter.Value&gt;</span><br><span class="line">    &lt;&#x2F;Setter&gt;</span><br><span class="line">&lt;&#x2F;Style&gt;</span><br></pre></td></tr></table></figure><p>期待しているのは、ListBoxのStyleを継承した、新しいStyleを継承すること。上のコードは省略してあって、本当はListBoxがもう少しあります。<br>ところが、上のコントロールを配置、実行するとStyleの継承がうまくいきませんでした。OSSのライブラリのクールなスタイルを継承したはずが、Windowsのもっさいスタイルが適用されていました…. しかも、Windows7だとうまくいくのに、Windows10だとうまくいかない、という不思議な挙動。</p><p>何故?</p><h1 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h1><p>Windows7と10で挙動が異なる原因は不明でしたが、本現象は、ListBoxに対してStyleを使うのをやめると治ります。<br>つまり、直接ListBoxの要素のプロパティに値を設定します。</p><p>かなり納得がいかない修正でしたが、関係しそうな話題は見つかりました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://social.msdn.microsoft.com/Forums/ja-JP/355fc10b-5bb8-4433-be69-d4b0cbcc3684/genericxamldatatemplatedatatemplate?forum=wpfja" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=social.msdn.microsoft.com"></img><div class="hbc-site-name">social.msdn.microsoft.com</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">    カスタムコントロールのGeneric.xamlにDataTemplateを書き、コードビハインドからDataTemplateを取得したい</div><div class="hbc-url">https://social.msdn.microsoft.com/Forums/ja-JP/355fc10b-5bb8-4433-be69-d4b0cbcc3684/genericxamldatatemplatedatatemplate?forum=wpfja</div></div></div></div></a></div></div><p>とりあえず解決したので良しとします。会社で無駄に悩みました。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET </category>
          
          <category> .NET Framework </category>
          
          <category> C# </category>
          
          <category> Windows Presentation Foundation </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その99 Bitnami Redmineでthinが停止する場合の原因追及</title>
      <link href="2018/02/01/2801/"/>
      <url>2018/02/01/2801/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>昔自分で書いた記事を忘れていて、Googleで彷徨っていたのでメモ。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://taktak.jp/2012/10/13/295" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=taktak.jp"></img><div class="hbc-site-name">taktak.jp</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">BitNami Redmine Statck が起動しない…だと… – A certain engineer &quot;COMPLEX&quot;</div><div class="hbc-url">https://taktak.jp/2012/10/13/295</div></div></div></div></a></div></div><p><strong>Bitnami Redmine Stack</strong>は非常に便利なので会社でも使っているのですが、バージョンアップの度に、エラーに悩まされるのでビクビクします。<br>今週も、<strong>3.2系</strong>から最新の<strong>3.4系</strong>にアップデートしたのですが、チケット画面に遷移できないという問題を抱えてしまい、泣く泣く戻すことにしました。</p><p>で、その際、<strong>thin</strong>が止まって、Redmineが起動すらしない、という状況に陥りました。</p><p><strong>Apache2</strong>やRedmineはエラーログを吐いてくれるくせに、thinはエラーログを吐いてくれません。<br>なので、thinが起動しないときは、コンソールから起動して停止する理由を確認します。</p><h1 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h1><p>スタートメニューの<strong>Bitnami Redmine Stack を使用する</strong>からコンソールを立ち上げて、<strong>apps\redmine\htdocs</strong> まで移動し、コマンドを入力します。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> apps\redmine\htdocs</span><br><span class="line">$ bundle exec thin <span class="built_in">start</span> -e production</span><br><span class="line">Using rack adapter</span><br><span class="line">Thin web server (v1.<span class="number">2</span>.<span class="number">11</span> codename Bat-Shit Crazy)</span><br><span class="line">Maximum connections <span class="built_in">set</span> to <span class="number">1024</span></span><br><span class="line">Listening on <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>:<span class="number">3000</span>, CTRL+C to stop</span><br></pre></td></tr></table></figure><p>上は上手く起動した場合ですが、失敗した場合はエラーログが出力されます。例えば、</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Using rack adapter</span><br><span class="line">DL is deprecated, please use Fiddle</span><br><span class="line"><span class="function">C:/<span class="title">BitNami</span>/<span class="title">redmine</span>-3.2.2-0/<span class="title">apps</span>/<span class="title">redmine</span>/<span class="title">htdocs</span>/<span class="title">vendor</span>/<span class="title">bundle</span>/<span class="title">ruby</span>/2.1.0/<span class="title">gems</span>/<span class="title">mysql2</span>-0.4.2-<span class="title">x86</span>-<span class="title">mingw32</span>/<span class="title">lib</span>/<span class="title">mysql2</span>/<span class="title">client.rb</span>:87:<span class="title">in</span> `<span class="title">connect</span>&#x27;: <span class="title">Can</span>&#x27;<span class="title">t</span> <span class="title">connect</span> <span class="title">to</span> <span class="title">MySQL</span> <span class="title">server</span> <span class="title">on</span> &#x27;127.0.0.1&#x27; (10061) (<span class="title">Mysql2</span>::<span class="title">Error</span>)</span></span><br></pre></td></tr></table></figure><p>みたいなエラーが表示されたりします。<br>原因を解決したら、エラーが出なくなるまで、起動と確認を繰り返します。</p>]]></content>
      
      
      <categories>
          
          <category> プロジェクト管理 </category>
          
          <category> Redmine </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その98 boostをビルドする際のuser-config.jamの指定</title>
      <link href="2018/01/30/2797/"/>
      <url>2018/01/30/2797/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>boost</strong>をビルドする際、C++からPythonを制御できるboost.Python等の一部モジュールの設定を行う際、<strong>user-config.jam</strong>という設定ファイルを使用しますが、このファイル、<a href="http://www.boost.org/build/doc/html/bbv2/overview/configuration.html">公式サイト</a>では、**%HOMEDRIVE%<strong>, **%HOMEPATH%</strong>, <strong>%HOME%</strong>, <strong>%BOOST_BUILD_PATH%</strong> に展開するよう書いてあります。</p><p>でも、boostに関連するファイルを、全く無関係な場所に展開するのは、何か気持ち悪いです。<br>なので、その対応策をメモ。</p><h1 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h1><p>簡単。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b2.exe toolset=msvc-<span class="number">12</span>.<span class="number">0</span> link=static runtime-link=static,shared --user-config=user-config.jam</span><br></pre></td></tr></table></figure><p>ビルド時に、**–user-config**を追加するだけ。</p>]]></content>
      
      
      <categories>
          
          <category> その他 </category>
          
          <category> boost </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その97 GitKrakenの最後に開いたリポジトリフォルダを消去する</title>
      <link href="2018/01/06/2790/"/>
      <url>2018/01/06/2790/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>GitKraken</strong>便利ですわー。巨大なリポジトリでもそれなりにサクサク動きます。<br>でも、あまりにも巨大だと、リポジトリを開く処理が終わらないんですよね…</p><p>で、一度開いてしまうと、次の起動の初期リポジトリが、そこになってしまうんですよ。<br>そうなったら、どうにもなりません。</p><h1 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h1><p>そんな私の悩みを解決してくださった回答がこちら。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://stackoverflow.com/questions/37678725/gitkraken-config-file" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=stackoverflow.com"></img><div class="hbc-site-name">Stack Overflow</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded"></img></div><div class="hbc-text"><div class="hbc-title">GitKraken config file (Windows)</div><div class="hbc-url">https://stackoverflow.com/questions/37678725/gitkraken-config-file</div><div class="hbc-description">Where can I find the config files for GitKraken on Windows?GitKraken shows many repositories, which I would not like to be listed in the &quot;…</div></div></div></div></a></div></div><p>ではなく、ここをヒントに、「最後に開いたリポジトリ」の設定がどこかにあるのか、ということを調べました。<br>**%AppData%.gitkraken\profiles&lt;random string&gt;\profile** の <strong>lastOpenedRepository</strong> を削除すればOK!!</p>]]></content>
      
      
      <categories>
          
          <category> バージョン管理システム </category>
          
          <category> git </category>
          
          <category> GitKraken </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その96 MSYSのHOMEはWindows上でどこにあるの?</title>
      <link href="2018/01/04/2786/"/>
      <url>2018/01/04/2786/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>ただの備忘録。</p><h1 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h1><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://superuser.com/questions/340993/i-cant-see-msys-home-directory-under-windows-7s-file-explorer" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=superuser.com"></img><div class="hbc-site-name">Super User</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://cdn.sstatic.net/Sites/superuser/Img/apple-touch-icon@2.png?v=e869e4459439"></img></div><div class="hbc-text"><div class="hbc-title">I can&#39;t see MSYS home directory under Windows 7&#39;s file explorer</div><div class="hbc-url">https://superuser.com/questions/340993/i-cant-see-msys-home-directory-under-windows-7s-file-explorer</div><div class="hbc-description">I&#39;m using MSYS (MinGW UNIX environment) to get a working UNIX-like environment on my Windows 7 workstation. When I start the MinGW shell, I …</div></div></div></div></a></div></div><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pwd -W</span><br><span class="line"><span class="function">C:/<span class="title">msys64</span>/<span class="title">home</span>/<span class="title">TAKUYA</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> その他 </category>
          
          <category> MSYS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その95 WindowsにBazelをインストールする</title>
      <link href="2017/12/24/2767/"/>
      <url>2017/12/24/2767/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>TensorFlow</strong>のビルドで一躍有名になったビルドシステム<strong>Bazel</strong>をインストールします。<br>といっても、TensorFlowではなく、別のgoogle製OSSのビルドに使いたいだけです。</p><p>Windowsでの導入記事が見つからないので自分でやってみます。<br>きっと会社で使うことになるでしょうし。</p><h1 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h1><p>まずは<a href="https://docs.bazel.build/versions/master/install-windows.html">公式</a>でWindowsへの導入説明を読みます。<br>Bazelのインストールは下記の3手法があります。</p><ul><li>バイナリのダウンロード</li><li>Chocolatey</li><li>ソースから自分でビルド</li></ul><p>今回はバイナリをダウンロードします。</p><h2 id="Downalod"><a href="#Downalod" class="headerlink" title="Downalod"></a>Downalod</h2><p>Githubでダウンロードできますので入手します。<a href="https://github.com/bazelbuild/bazel/releases">Releaseページ</a>から各自の環境に適合したものをダウンロードします。<br>2017/12/24現在で最新は0.9.0です。</p><h2 id="Let’s-install"><a href="#Let’s-install" class="headerlink" title="Let’s install"></a>Let’s install</h2><p>適当なフォルダに展開するだけです。<br>そして公式ページでは</p><blockquote><p>We recommend putting the binary in a directory that’s on your %PATH%.</p></blockquote><p>つまり、<strong>環境変数PATH上のディレクトリに展開することを推奨します。</strong> とのお達し。<br>このあたりは好みです。<br>今回は、<strong>C:\Program Files\Google\Bazel\bazel-0.9.0-windows-x86_64.exe</strong>に展開しました。<br>同じフォルダに、<strong>Bazel.exe</strong>というシンボリックリンクがあるとちょっと幸せな感じがします。</p><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup!!"></a>Setup!!</h2><p>残念なことに、これで終わりではないです。<br><strong>CMake</strong>とかインストーラーで終わりなのに、何この面倒な感じ。<br>公式における<a href="https://docs.bazel.build/versions/master/windows.html">インストール後の指示</a>には、</p><ul><li>Python 2.7またはそれ以降</li><li>msys2</li><li>msys2 パッケージ</li><li>Java JDK 8</li></ul><p>が必要だと書いてあります。<br>げんなりします。</p><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>既に私のシステムにはPythonがあるので省略します。<br><strong>Anaconda</strong>なり<strong>Miniconda</strong>なりでインストールするのが簡単です。<br>Minicondaでしたら、インストールした際のスクリーンショット付きで記事があります。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://taktak.jp/2016/05/28/1372" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=taktak.jp"></img><div class="hbc-site-name">taktak.jp</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">ディープラーニング Caffe for Windows その1 環境構築 – A certain engineer &quot;COMPLEX&quot;</div><div class="hbc-url">https://taktak.jp/2016/05/28/1372</div></div></div></div></a></div></div><h3 id="msys2"><a href="#msys2" class="headerlink" title="msys2"></a>msys2</h3><p><strong>msys2</strong>はインストーラーで提供されています。<br><a href="http://www.msys2.org/">公式ページ</a>からダウンロードでします。<br>msysは<a href="https://ja.wikipedia.org/wiki/MSYS">wiki</a>によると、</p><blockquote><p>Windows上で動作するUnixシェル(Bash)やテキスト操作ユーティリティ(gawk, sed, findutil)、ソースコードパッチ用ツール(diffutil), アーカイブツール(tar, bzip2, zlib)を統合したパッケージである。</p></blockquote><p>とのこと。<br>ようするにPowerShellみたいな別シェルですね(適当)。</p><p>注意するのは、インストール先に、</p><ul><li>非ASCII文字</li><li>空白</li><li>シンボリックリンク</li><li>ショートパス (恐らく8.3形式のことかと)</li></ul><p>を<strong>使うな</strong>、とありますので指示に従います。面倒だな。</p><p><a href="../../../../public/2017/12/05553478b817a3b4d04ad9ab494d03b7.png"><img src="../../../../public/2017/12/05553478b817a3b4d04ad9ab494d03b7.png"></a></p><p><a href="../../../../public/2017/12/8f15913c583c4882b7bcc3227603edec.png"><img src="../../../../public/2017/12/8f15913c583c4882b7bcc3227603edec.png"></a><br> インストール先に使う文字には注意!!</p><p><a href="../../../../public/2017/12/2b52fece42f95910e5da9d6abcf9557e.png"><img src="../../../../public/2017/12/2b52fece42f95910e5da9d6abcf9557e.png"></a></p><p><a href="../../../../public/2017/12/985697cc205ec5c8c8489a838c864f4a.png"><img src="../../../../public/2017/12/985697cc205ec5c8c8489a838c864f4a.png"></a></p><p><a href="../../../../public/2017/12/1c75a2b0b9d8aea24ebecf66d82ae689.png"><img src="../../../../public/2017/12/1c75a2b0b9d8aea24ebecf66d82ae689.png"></a><br> 完了!!</p><h3 id="msys2のパッケージ追加"><a href="#msys2のパッケージ追加" class="headerlink" title="msys2のパッケージ追加"></a>msys2のパッケージ追加</h3><p>追加のパッケージが必要とのことなので、先ほどインストールしたmsys2を起動します。<br>スタートメニューから<strong>MSYS2 64bit</strong>を開きます。</p><p><a href="../../../../public/2017/12/af94d0d0edc2e2da11158bbf6eb9be15.png"><img src="../../../../public/2017/12/af94d0d0edc2e2da11158bbf6eb9be15.png"></a></p><p>で、<strong>MSYS2 MSYS</strong>をクリックします。選択肢が複数あって、「うっ」って思いました。止めて欲しいね。<br>シェルが起動したら、</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -Syuu git curl zip unzip</span><br></pre></td></tr></table></figure><p>と入力します。</p><p><a href="../../../../public/2017/12/747891ac95f49e1db245ff6ac40d1b80.png"><img src="../../../../public/2017/12/747891ac95f49e1db245ff6ac40d1b80.png"></a></p><p><a href="../../../../public/2017/12/c8552b1aab7f5b798ed5a0f0189ea3a3.png"><img src="../../../../public/2017/12/c8552b1aab7f5b798ed5a0f0189ea3a3.png"></a></p><p>インストールするか?と聞かれたので<strong>y</strong>と入力</p><p>が、途中で、 </p><p><a href="../../../../public/2017/12/209ca7b4fdb5ea6e33703c1820bf65e5.png"><img src="../../../../public/2017/12/209ca7b4fdb5ea6e33703c1820bf65e5.png"></a></p><p>はぁ!?</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">警告: terminate MSYS2 without returning to shell and check <span class="keyword">for</span> updates again</span><br><span class="line">警告: <span class="keyword">for</span> example close your terminal window instead of calling <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>と出ました。<br>要約すると、もう一度シェルを立ち上げ直して同じ事をしろ、ってことです。<br>が、閉じるボタンを押下すると、処理中なのか応答が鈍いですが、</p><p><a href="../../../../public/2017/12/9059c9edd4778555314c9512de4ca076.png"><img src="../../../../public/2017/12/9059c9edd4778555314c9512de4ca076.png"></a></p><p>と出るので、OKで停止します。<br>それでも応答なしとかになったら、タスクマネージャなり<strong>Alt+F4</strong>で停止させます。<br><del>鬱陶しい….</del></p><p>で、再起動後、また同じコマンドを入力したら上手くいきました。<br><del>何の苦行だよ….</del><br>結構時間がかかりますので、コーヒー飲むなり風呂に入るなりして時間をつぶします。</p><h3 id="Java-JDK-8"><a href="#Java-JDK-8" class="headerlink" title="Java JDK 8"></a>Java JDK 8</h3><p>7でもなく9でもなく、8だそうです。何、この厳密なバージョン指定。<br>BazelにはJDK8が埋め込まれているそうです。なので、普通に起動できたらOKでしょう。<br>私は起動できたので、何もしませんでした。</p><h2 id="起動"><a href="#起動" class="headerlink" title="起動"></a>起動</h2><p>コマンドプロンプトから、bazel.exeを起動します。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">$ C:\Program Files\Google\Bazel&gt;bazel.exe</span><br><span class="line">Extracting Bazel installation...</span><br><span class="line">                                                           [bazel release <span class="number">0</span>.<span class="number">9</span>.<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function">Usage: <span class="title">bazel</span> &lt;<span class="title">command</span>&gt; &lt;<span class="title">options</span>&gt; ...</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Available</span> <span class="title">commands</span>:</span></span><br><span class="line"><span class="function">  <span class="title">analyze</span>-<span class="title">profile</span>     <span class="title">Analyzes</span> <span class="title">build</span> <span class="title">profile</span> <span class="title">data</span>.</span></span><br><span class="line"><span class="function">  <span class="title">build</span>               <span class="title">Builds</span> <span class="title">the</span> <span class="title">specified</span> <span class="title">targets</span>.</span></span><br><span class="line"><span class="function">  <span class="title">canonicalize</span>-<span class="title">flags</span>  <span class="title">Canonicalizes</span> <span class="title">a</span> <span class="title">list</span> <span class="title">of</span> <span class="title">bazel</span> <span class="title">options</span>.</span></span><br><span class="line"><span class="function">  <span class="title">clean</span>               <span class="title">Removes</span> <span class="title">output</span> <span class="title">files</span> <span class="title">and</span> <span class="title">optionally</span> <span class="title">stops</span> <span class="title">the</span> <span class="title">server</span>.</span></span><br><span class="line"><span class="function">  <span class="title">coverage</span>            <span class="title">Generates</span> <span class="title">code</span> <span class="title">coverage</span> <span class="title">report</span> <span class="title">for</span> <span class="title">specified</span> <span class="title">test</span> <span class="title">targets</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  <span class="title">dump</span>                <span class="title">Dumps</span> <span class="title">the</span> <span class="title">internal</span> <span class="title">state</span> <span class="title">of</span> <span class="title">the</span> <span class="title">bazel</span> <span class="title">server</span> <span class="title">process</span>.</span></span><br><span class="line"><span class="function">  <span class="title">fetch</span>               <span class="title">Fetches</span> <span class="title">external</span> <span class="title">repositories</span> <span class="title">that</span> <span class="title">are</span> <span class="title">prerequisites</span> <span class="title">to</span> <span class="title">th</span></span></span><br><span class="line"><span class="function"><span class="title">e</span> <span class="title">targets</span>.</span></span><br><span class="line"><span class="function">  <span class="title">help</span>                <span class="title">Prints</span> <span class="title">help</span> <span class="title">for</span> <span class="title">commands</span>, <span class="title">or</span> <span class="title">the</span> <span class="title">index</span>.</span></span><br><span class="line"><span class="function">  <span class="title">info</span>                <span class="title">Displays</span> <span class="title">runtime</span> <span class="title">info</span> <span class="title">about</span> <span class="title">the</span> <span class="title">bazel</span> <span class="title">server</span>.</span></span><br><span class="line"><span class="function">  <span class="title">license</span>             <span class="title">Prints</span> <span class="title">the</span> <span class="title">license</span> <span class="title">of</span> <span class="title">this</span> <span class="title">software</span>.</span></span><br><span class="line"><span class="function">  <span class="title">mobile</span>-<span class="title">install</span>      <span class="title">Installs</span> <span class="title">targets</span> <span class="title">to</span> <span class="title">mobile</span> <span class="title">devices</span>.</span></span><br><span class="line"><span class="function">  <span class="title">print_action</span>        <span class="title">Prints</span> <span class="title">the</span> <span class="title">command</span> <span class="title">line</span> <span class="title">args</span> <span class="title">for</span> <span class="title">compiling</span> <span class="title">a</span> <span class="title">file</span>.</span></span><br><span class="line"><span class="function">  <span class="title">query</span>               <span class="title">Executes</span> <span class="title">a</span> <span class="title">dependency</span> <span class="title">graph</span> <span class="title">query</span>.</span></span><br><span class="line"><span class="function">  <span class="title">run</span>                 <span class="title">Runs</span> <span class="title">the</span> <span class="title">specified</span> <span class="title">target</span>.</span></span><br><span class="line"><span class="function">  <span class="title">shutdown</span>            <span class="title">Stops</span> <span class="title">the</span> <span class="title">bazel</span> <span class="title">server</span>.</span></span><br><span class="line"><span class="function">  <span class="title">test</span>                <span class="title">Builds</span> <span class="title">and</span> <span class="title">runs</span> <span class="title">the</span> <span class="title">specified</span> <span class="title">test</span> <span class="title">targets</span>.</span></span><br><span class="line"><span class="function">  <span class="title">version</span>             <span class="title">Prints</span> <span class="title">version</span> <span class="title">information</span> <span class="title">for</span> <span class="title">bazel</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Getting</span> <span class="title">more</span> <span class="title">help</span>:</span></span><br><span class="line"><span class="function">  <span class="title">bazel</span> <span class="title">help</span> &lt;<span class="title">command</span>&gt;</span></span><br><span class="line"><span class="function">                   <span class="title">Prints</span> <span class="title">help</span> <span class="title">and</span> <span class="title">options</span> <span class="title">for</span> &lt;<span class="title">command</span>&gt;.</span></span><br><span class="line"><span class="function">  <span class="title">bazel</span> <span class="title">help</span> <span class="title">startup_options</span></span></span><br><span class="line"><span class="function">                   <span class="title">Options</span> <span class="title">for</span> <span class="title">the</span> <span class="title">JVM</span> <span class="title">hosting</span> <span class="title">bazel</span>.</span></span><br><span class="line"><span class="function">  <span class="title">bazel</span> <span class="title">help</span> <span class="title">target</span>-<span class="title">syntax</span></span></span><br><span class="line"><span class="function">                   <span class="title">Explains</span> <span class="title">the</span> <span class="title">syntax</span> <span class="title">for</span> <span class="title">specifying</span> <span class="title">targets</span>.</span></span><br><span class="line"><span class="function">  <span class="title">bazel</span> <span class="title">help</span> <span class="title">info</span>-<span class="title">keys</span></span></span><br><span class="line"><span class="function">                   <span class="title">Displays</span> <span class="title">a</span> <span class="title">list</span> <span class="title">of</span> <span class="title">keys</span> <span class="title">used</span> <span class="title">by</span> <span class="title">the</span> <span class="title">info</span> <span class="title">command</span>.</span></span><br></pre></td></tr></table></figure><p>動いた感じですね。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>まぁ、面倒な感じでした。<br>PythonやJDK8は既にインストール済みだったので、実質msys2のインストールがメインでしたが。</p>]]></content>
      
      
      <categories>
          
          <category> google </category>
          
          <category> Google </category>
          
          <category> Bazel </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その94 boostを使った最小のCMakeプロジェクト その2</title>
      <link href="2017/12/23/2761/"/>
      <url>2017/12/23/2761/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><a href="https://taktak.jp/2017/12/21/2757">前回</a>の記事で、boostを使った簡単なクロスプラットフォームアプリを作りました。<br>で、それを会社でテンプレートにして手を加え、Windowsで動かしたらまったく動きませんでした。<br>というかビルドが通らない。<br>理由は<strong>lib</strong>が見つからないこと。<br>前回のサンプルは、libを使わず、ヘッダーだけで動作したプログラムだった模様。<br>なので、ちょっと修正します。<br>ソースは下記になります。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/takuya-takeuchi/Demo/tree/master/CMake2" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/6241854?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">takuya-takeuchi/Demo</div><div class="hbc-url">https://github.com/takuya-takeuchi/Demo/tree/master/CMake2</div><div class="hbc-description">Sample source code for Demonstration, Experiment and Test - takuya-takeuchi/Demo</div></div></div></div></a></div></div><h1 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h1><p>まずは、CMakeLists.txt</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cmake\_minimum\_required(VERSION <span class="number">3.9</span>.<span class="number">0</span>) <span class="keyword">set</span>(PROJ\_NAME <span class="keyword">Test</span>)  </span><br><span class="line"><span class="keyword">project</span>(<span class="variable">$&#123;PROJ\_NAME&#125;</span> VERSION <span class="number">1.0</span>.<span class="number">0</span>)  </span><br><span class="line">\<span class="comment"># Select the release build type by default if (NOT CMAKE\_BUILD\_TYPE) set(CMAKE\_BUILD\_TYPE &quot;Release&quot;) endif()  </span></span><br><span class="line">\<span class="comment"># target source and header files FILE(GLOB\_RECURSE HEADERS $&#123;PROJECT\_SOURCE\_DIR&#125;/\*.h) FILE(GLOB\_RECURSE SOURCES $&#123;PROJECT\_SOURCE\_DIR&#125;/\*.cpp)  </span></span><br><span class="line"><span class="keyword">include</span>\_directories(<span class="variable">$&#123;BOOST\_ROOT&#125;</span>)  </span><br><span class="line"><span class="comment">#add\_executable($&#123;PROJ\_NAME&#125; $&#123;HEADERS&#125; $&#123;SOURCES&#125;) add\_executable($&#123;PROJ\_NAME&#125; main.cpp)  </span></span><br><span class="line"><span class="keyword">if</span>(CMAKE\_GENERATOR <span class="keyword">MATCHES</span> <span class="string">&quot;Visual Studio&quot;</span>) <span class="keyword">set</span>(STATIC\_LIBRARIES <span class="variable">$&#123;BOOST\_LIBRARYDIR&#125;</span>/libboost\_system-vc140-mt-<span class="number">1</span>\_65\_1.lib <span class="variable">$&#123;BOOST\_LIBRARYDIR&#125;</span>/libboost\_filesystem-vc140-mt-<span class="number">1</span>\_65\_1.lib ) <span class="keyword">target</span>\_link\_libraries(<span class="variable">$&#123;PROJ\_NAME&#125;</span> <span class="variable">$&#123;STATIC\_LIBRARIES&#125;</span>) <span class="keyword">else</span>() <span class="keyword">set</span>(STATIC\_LIBRARIES <span class="variable">$&#123;BOOST\_LIBRARYDIR&#125;</span>/libboost\_system.a <span class="variable">$&#123;BOOST\_LIBRARYDIR&#125;</span>/libboost\_filesystem.a ) <span class="keyword">target</span>\_link\_libraries(<span class="variable">$&#123;PROJ\_NAME&#125;</span> <span class="variable">$&#123;STATIC\_LIBRARIES&#125;</span>) <span class="keyword">endif</span>()  </span><br><span class="line"><span class="keyword">set</span>(CompilerFlags CMAKE\_CXX\_FLAGS CMAKE\_CXX\_FLAGS\_DEBUG CMAKE\_CXX\_FLAGS\_RELEASE CMAKE\_C\_FLAGS CMAKE\_C\_FLAGS\_DEBUG CMAKE\_C\_FLAGS\_RELEASE ) <span class="keyword">foreach</span>(CompilerFlag <span class="variable">$&#123;CompilerFlags&#125;</span>) <span class="keyword">string</span>(REPLACE <span class="string">&quot;/MDd&quot;</span> <span class="string">&quot;/MD&quot;</span> <span class="variable">$&#123;CompilerFlag&#125;</span> <span class="string">&quot;$&#123;$&#123;CompilerFlag&#125;&#125;&quot;</span>) <span class="keyword">endforeach</span>()  </span><br><span class="line"><span class="keyword">set</span>(CPACK\_PROJECT\_NAME <span class="variable">$&#123;PROJECT\_NAME&#125;</span>) <span class="keyword">set</span>(CPACK\_PROJECT\_VERSION <span class="variable">$&#123;PROJECT\_VERSION&#125;</span>) <span class="keyword">include</span>(CPack)</span><br></pre></td></tr></table></figure><p>今回の肝は、<strong>target_link_libraries</strong>の行。<br>コンパイラが<strong>Visual Studio</strong>なのかそうでないのかで、リンクするライブラリを変えています。<br>次に、main.cpp </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; #include &lt;boost/filesystem.hpp&gt;  </span></span></span><br><span class="line"><span class="keyword">namespace</span> fs = boost::filesystem;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>\* argv\[\])</span> </span>&#123; <span class="function"><span class="keyword">const</span> fs::path <span class="title">path</span><span class="params">(argv\[<span class="number">1</span>\])</span></span>;  </span><br><span class="line">boost::system::error\_code error; <span class="keyword">const</span> <span class="keyword">bool</span> result = fs::exists(path, error); <span class="keyword">if</span> (!result || error) &#123; <span class="built_in">printf</span>(<span class="string">&quot;%s does not exist!!\\n&quot;</span>, argv\[<span class="number">1</span>\]); &#125; <span class="keyword">else</span> &#123; <span class="built_in">printf</span>(<span class="string">&quot;%s exists!!\\n&quot;</span>, argv\[<span class="number">1</span>\]); &#125; &#125;</span><br></pre></td></tr></table></figure><p> 引数で渡されたファイルが存在するかどうかを表示するだけです。</p><h1 id="Build-amp-Run"><a href="#Build-amp-Run" class="headerlink" title="Build&amp;Run"></a>Build&amp;Run</h1><p>ビルドします。<br><strong>CMakeLists.txt</strong>と<strong>main.cp</strong>が同じ階層にあるものとし、カレントディレクトリがCMakeLists.txtと同じだとします。<br>また、CMakeのパスは通っているものとします。</p><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> build $ <span class="built_in">cd</span> build $ cmake -G &quot;Visual Studio <span class="number">14</span> <span class="number">2015</span> Win64&quot; -DBOOST\_ROOT=D:\\boost\\<span class="number">1</span>.<span class="number">65</span>.<span class="number">1</span> -DBOOST\_LIBRARYDIR=D:\\boost\\<span class="number">1</span>.<span class="number">65</span>.<span class="number">1</span>\\build\\MSVC14.<span class="number">0</span>\\x64\\lib .. $ cmake --build . --config Release $ <span class="built_in">cd</span> Release $ Test.exe c:\\Windows\\System32\\zipfldr.dll c:\\Windows\\System32\\zipfldr.dll exists!! $ Test.exe c:\\Windows\\System32\\zipfldr.dll2 c:\\Windows\\System32\\zipfldr.dll2 does <span class="keyword">not</span> <span class="keyword">exist</span>!! </span><br></pre></td></tr></table></figure><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> build $ <span class="built_in">cd</span> build $ cmake -DBOOST\_ROOT=/usr/include -DBOOST\_LIBRARYDIR=/usr/lib64 .. $ cmake --build . --config Release $ ./Test /usr/local/bin/CMake2/main.cpp /usr/local/bin/CMake2/main.cpp exists!! $ ./Test /usr/local/bin/CMake2/main.cpp2 /usr/local/bin/CMake2/main.cpp2 does <span class="keyword">not</span> <span class="keyword">exist</span>!! </span><br></pre></td></tr></table></figure><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>今度はきちんと静的リンクできています。</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/CMake2">https://github.com/takuya-takeuchi/Demo/tree/master/CMake2</a></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
          <category> その他 </category>
          
          <category> boost </category>
          
          <category> CMake </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その93 boostを使った最小のCMakeプロジェクト</title>
      <link href="2017/12/21/2757/"/>
      <url>2017/12/21/2757/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>クロスプラットフォームのアプリケーションを作成するとき、<strong>CMake</strong>は鉄板中の鉄板ですが、魔術のような<strong>CMakeLists.txt</strong>を書くのはうんざりします。<br><strong>Visual Studio</strong>ならプロパティからヘッダーの参照、ライブラリの参照、という感じでスラスラ作業できますが。<br>そんな中クロスプラットフォームのコンソールアプリを作る必要に駆られたのでメモ。<br>ソースは下記になります </p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/takuya-takeuchi/Demo/tree/master/CMake1" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/6241854?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">takuya-takeuchi/Demo</div><div class="hbc-url">https://github.com/takuya-takeuchi/Demo/tree/master/CMake1</div><div class="hbc-description">Sample source code for Demonstration, Experiment and Test - takuya-takeuchi/Demo</div></div></div></div></a></div></div><p>といっても、ソースそのものは本質では無く、CMakeLists.txtとboostの使い方が一番の肝。<br>特に、boostのパスを外部から指定してビルドするのがターゲットになります。</p><h1 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h1><p>まずは、CMakeLists.txt</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cmake\_minimum\_required(VERSION <span class="number">3.9</span>.<span class="number">0</span>) <span class="keyword">set</span>(PROJ\_NAME <span class="keyword">Test</span>)  </span><br><span class="line"><span class="keyword">project</span>(<span class="variable">$&#123;PROJ\_NAME&#125;</span> VERSION <span class="number">1.0</span>.<span class="number">0</span>)  </span><br><span class="line">\<span class="comment"># Select the release build type by default if (NOT CMAKE\_BUILD\_TYPE) set(CMAKE\_BUILD\_TYPE &quot;Release&quot;) endif()  </span></span><br><span class="line">\<span class="comment"># target source and header files # FILE(GLOB\_RECURSE HEADERS $&#123;PROJECT\_SOURCE\_DIR&#125;/\*.h) # FILE(GLOB\_RECURSE SOURCES $&#123;PROJECT\_SOURCE\_DIR&#125;/\*.cpp)  </span></span><br><span class="line"><span class="keyword">include</span>\_directories(<span class="variable">$&#123;BOOST\_ROOT&#125;</span>)  </span><br><span class="line"><span class="comment">#add\_executable($&#123;PROJ\_NAME&#125; $&#123;HEADERS&#125; $&#123;SOURCES&#125;) add\_executable($&#123;PROJ\_NAME&#125; main.cpp)  </span></span><br><span class="line"><span class="keyword">set</span>(CompilerFlags CMAKE\_CXX\_FLAGS CMAKE\_CXX\_FLAGS\_DEBUG CMAKE\_CXX\_FLAGS\_RELEASE CMAKE\_C\_FLAGS CMAKE\_C\_FLAGS\_DEBUG CMAKE\_C\_FLAGS\_RELEASE ) <span class="keyword">foreach</span>(CompilerFlag <span class="variable">$&#123;CompilerFlags&#125;</span>) <span class="keyword">string</span>(REPLACE <span class="string">&quot;/MDd&quot;</span> <span class="string">&quot;/MD&quot;</span> <span class="variable">$&#123;CompilerFlag&#125;</span> <span class="string">&quot;$&#123;$&#123;CompilerFlag&#125;&#125;&quot;</span>) <span class="keyword">endforeach</span>()  </span><br><span class="line"><span class="keyword">set</span>(CPACK\_PROJECT\_NAME <span class="variable">$&#123;PROJECT\_NAME&#125;</span>) <span class="keyword">set</span>(CPACK\_PROJECT\_VERSION <span class="variable">$&#123;PROJECT\_VERSION&#125;</span>) <span class="keyword">include</span>(CPack)</span><br></pre></td></tr></table></figure><p>色々コメントがありますが、<strong>add_executable</strong>で実行ファイルを指定しているのと、<strong>include_directories</strong>でboostのパスを指定するのが肝。<br>特に、include_directoriesが無いと、cmakeコマンドにboostのパスを渡してもビルドに失敗します。<br>次に、main.cpp </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; #include &lt;limits&gt; #include &lt;boost/math/constants/constants.hpp&gt;  </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123; <span class="keyword">double</span> pi = boost::math::constants::pi&lt;<span class="keyword">double</span>&gt;();  </span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span>.precision(<span class="built_in">std</span>::numeric\_limits&lt;<span class="keyword">double</span>&gt;::max\_digits10); <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; pi &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; &#125;</span><br></pre></td></tr></table></figure><p>円周率を表示するだけです。</p><h1 id="Build-amp-Run"><a href="#Build-amp-Run" class="headerlink" title="Build&amp;Run"></a>Build&amp;Run</h1><p>ビルドします。<br><strong>CMakeLists.txt</strong>と<strong>main.cp</strong>が同じ階層にあるものとし、カレントディレクトリがCMakeLists.txtと同じだとします。<br>また、CMakeのパスは通っているものとします。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> build $ <span class="built_in">cd</span> build $ cmake -G &quot;Visual Studio <span class="number">14</span> <span class="number">2015</span> Win64&quot; -DBOOST\_ROOT=D:\\Works\\Lib2\\boost\\boost\_1\_59\_0 -DBOOS T\_LIBRARYDIR=D:\\Works\\Lib2\\boost\\boost\_1\_59\_0\\lib64-msvc-<span class="number">12</span>.<span class="number">0</span> .. $ cmake --build . --config Release $ <span class="built_in">cd</span> Release $ Test.exe <span class="number">3</span>.<span class="number">1415926535897931</span></span><br></pre></td></tr></table></figure><p>上のような感じです。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>意外とboost+CMakeの簡単なアプリという組み合わせが無くて困りました。<br>ましてや、boostのパスを外部から指定するタイプの完全なサンプルが無かったのです。<br>インストール済みのboostをfindするのはあったのですが。</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/CMake1">https://github.com/takuya-takeuchi/Demo/tree/master/CMake1</a></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
          <category> その他 </category>
          
          <category> boost </category>
          
          <category> CMake </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Bluetooth Low Energyの自作ビーコンを作る その2</title>
      <link href="2017/12/06/2750/"/>
      <url>2017/12/06/2750/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><a href="https://taktak.jp/2017/12/05/2718">前回</a>は、mbedのアカウント作成、ソースのコンパイルを行いました。<br>今回は実際にBEL Nanoにバイナリを書き込んで、動かしてみます。</p><h1 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h1><h2 id="接続"><a href="#接続" class="headerlink" title="接続"></a>接続</h2><p><strong>BLE Nano v2</strong>をPCに接続します。<br>購入時は、ボードとライターが接続されていましたが、もし外したのなら、向きに注意して接続します。<br>ボードとライターを接続したら、PCのUSB端子に接続します。<br>続いて、エクスプローラーを開きます。<br>Macとかだと、Finderに接続したBLE Nanoがドライブとして現れるようですが… 私のWindows7はUSBハブ経由だからなのか、見つかりませんでした。<br>見つからない場合は<a href="https://os.mbed.com/handbook/Windows-serial-configuration">mbed Windows serial port driver</a>をインストールします。<br>情報は<strong>JellyWare様</strong>より。ありがとうございます。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://jellyware.jp/kurage/blenano/blenano_start.html" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=jellyware.jp"></img><div class="hbc-site-name">JellyWare Inc.</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://jellyware.jp/images/ogp.png"></img></div><div class="hbc-text"><div class="hbc-title">JellyWare株式会社</div><div class="hbc-url">http://jellyware.jp/kurage/blenano/blenano_start.html</div><div class="hbc-description">人が技術を作る。技術が人の暮らしをつくる。だから、人をつなげ、何かを作り、それをまた誰かに伝えたい。JellyWareはそんな人と技術が集まるプラットフォームです。</div></div></div></div></a></div></div><p>とりあえず、Windows10はドライバ無しでも認識しました、<br><a href="../../../../public/2017/12/7d02b04c14057d3cb2e90daa3906ccff.png"><img src="../../../../public/2017/12/7d02b04c14057d3cb2e90daa3906ccff.png"></a></p><h2 id="書き込み"><a href="#書き込み" class="headerlink" title="書き込み"></a>書き込み</h2><p>いざ書き込みです。<br>といっても想像の通り、ドラッグアンドドロップで、前回ダウンロードしたバイナリを書き込むだけの親切設計。</p><h2 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h2><p>前回買ってきたブレッドボードに接続してみます。</p><p><a href="../../../../public/2017/12/2b4484331fb1f6eda52c325ebfff59c5.jpeg"><img src="../../../../public/2017/12/2b4484331fb1f6eda52c325ebfff59c5.jpeg"></a><br> そして、iPhoneあたりにBLEビーコンを検出できるアプリがあるので、それを使って検知してみます。<br>今回はこれを使ってみました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://itunes.apple.com/jp/app/locate-beacon/id738709014?mt=8&ign-mpt=uo%3D4" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=itunes.apple.com"></img><div class="hbc-site-name">App Store</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://is4-ssl.mzstatic.com/image/thumb/Purple60/v4/eb/23/34/eb2334be-31df-0667-96c4-08c84831e976/mzl.wqkjbqgc.png/1200x630wa.png"></img></div><div class="hbc-text"><div class="hbc-title">‎Locate Beacon</div><div class="hbc-url">https://itunes.apple.com/jp/app/locate-beacon/id738709014?mt=8&ign-mpt=uo%3D4</div><div class="hbc-description">‎Makes your device transmit as a Proximity Beacon with iBeacon™ Technology and configurable identifiers.  Finds nearby beacons with Eddyston…</div></div></div></div></a></div></div><p>UUIDは前回の<strong>main.cpp</strong>に書かれていますので、それを入力します。<br>そして、検知結果がこちら。</p><p><a href="../../../../public/2017/12/14e2d244b4403b71d41794027eb96f48.png"><img src="../../../../public/2017/12/14e2d244b4403b71d41794027eb96f48-576x1024.png"></a></p><p>無事に動作しました。<br>電子工作、なかなか面白いですね。</p>]]></content>
      
      
      <categories>
          
          <category> IoT </category>
          
          <category> 無線通信 </category>
          
          <category> Bluetooth </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Bluetooth Low Energyの自作ビーコンを作る その1</title>
      <link href="2017/12/05/2718/"/>
      <url>2017/12/05/2718/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>IoT熱が高まってついに電子工作を始めました。</p><ul><li><a href="https://www.switch-science.com/catalog/269/">透明なブレッドボード</a></li><li><a href="https://www.switch-science.com/catalog/620/">普通のジャンパワイヤ(オス～オス)</a></li><li><a href="https://www.switch-science.com/catalog/117/">コイン型電池ホルダCR2032用</a></li><li><a href="https://www.switch-science.com/catalog/3444/">RedBearLab BLE Nanoキット V2</a></li></ul><p>スイッチサイエンス、お世話になります。<br>で、何がしたいかというと、BLEビーコンを作ってみたいんですよ。<br>いやネット上でBLE Nanoキットを使ってサンプルは転がっているんですが、電子工作スキルなるものを習得できれば、と思います。<br>子供の頃はプラモデル作るのは好きでした。大丈夫でしょう。</p><h1 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h1><p>基本的には、<strong>JellyWare様</strong>の下記のページをなぞるだけです。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://jellyware.jp/kurage/blenano/blenano2_minibread.html" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=jellyware.jp"></img><div class="hbc-site-name">JellyWare Inc.</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://jellyware.jp/images/ogp.png"></img></div><div class="hbc-text"><div class="hbc-title">JellyWare株式会社</div><div class="hbc-url">http://jellyware.jp/kurage/blenano/blenano2_minibread.html</div><div class="hbc-description">人が技術を作る。技術が人の暮らしをつくる。だから、人をつなげ、何かを作り、それをまた誰かに伝えたい。JellyWareはそんな人と技術が集まるプラットフォームです。</div></div></div></div></a></div></div><p>違うのは、ボリュームがない点です。<br>つまり、電池、コイン電池ホルダ、ジャンパワイヤ、BLE Nano v2、ブレッドボードだけを使います。<br>ひたすらパケットを送信するだけのビーコンです。<br>で、軽く記事を読むと、</p><ul><li>mbed<ul><li>ARM社のプロトタイピング用ワンボードマイコン用のプログラミング環境</li></ul></li></ul><p>が必要とのこと。Visual Studioで出来ないの?と温いことを思いますが、郷に入っては郷に従うの精神で行きます。</p><h2 id="mbedのアカウント取得"><a href="#mbedのアカウント取得" class="headerlink" title="mbedのアカウント取得"></a>mbedのアカウント取得</h2><p>無料出来る模様。どうやってマネタイズしているのか。<br>アカウント作成は<a href="https://os.mbed.com/">ここ</a>から。</p><p><a href="../../../../public/2017/12/screencapture-os-mbed-1512474425483.png"><img src="../../../../public/2017/12/screencapture-os-mbed-1512474425483.png"></a><br> Log In/Sign upを選択</p><p><a href="../../../../public/2017/12/screencapture-os-mbed-1512474720679.png"><img src="../../../../public/2017/12/screencapture-os-mbed-1512474720679.png"></a><br> Sign upを選択</p><p><a href="../../../../public/2017/12/screencapture-os-mbed-account-login-1512474449614.png"><img src="../../../../public/2017/12/screencapture-os-mbed-account-login-1512474449614.png"></a><br> メールアドレス、ユーザ名、パスワード、名前、名字、国名を入力</p><p>以上で完了です。<br>完了後、メールが届いて最終確認後、Sing Inできます。</p><p><a href="../../../../public/2017/12/screencapture-os-mbed-account-signup-1512474459878.png"><img src="../../../../public/2017/12/screencapture-os-mbed-account-signup-1512474459878.png"></a><br> Compilerを押して作業開始!!</p><h2 id="BLE-Nanoを動かす下準備"><a href="#BLE-Nanoを動かす下準備" class="headerlink" title="BLE Nanoを動かす下準備"></a>BLE Nanoを動かす下準備</h2><p>mbedはブラウザ上で作業が完結する模様。<br>なので、ブラウザ上でソース編集、デバイスに書き込みという往復作業になります。<br>まず、先の画面でCompilerをクリックすると、下記のような画面に遷移します。</p><p><a href="../../../../public/2017/12/screencapture-os-mbed-compiler-1512475342662.png"><img src="../../../../public/2017/12/screencapture-os-mbed-compiler-1512475342662-1024x663.png"></a></p><p>ここで、右上の<strong>デバイス未選択</strong>をクリック。</p><p><a href="../../../../public/2017/12/0d40a5e4a645fc6b96e767d64ac0878e.png"><img src="../../../../public/2017/12/0d40a5e4a645fc6b96e767d64ac0878e.png"></a></p><p><a href="../../../../public/2017/12/08380e686b3ff2ca21a20dfa3dfa0cdf.png"><img src="../../../../public/2017/12/08380e686b3ff2ca21a20dfa3dfa0cdf.png"></a><br> 表示されるダイアログの左下の<strong>Add Platform</strong>をクリック</p><p>別ウィンドウで開発ボードの一覧がリストアップされます。</p><p><a href="../../../../public/2017/12/cf4e206a27690c2fa42ff52ed5b22232.png"><img src="../../../../public/2017/12/cf4e206a27690c2fa42ff52ed5b22232.png"></a><br> <strong>RedBearLab BLE Nano</strong>を選択</p><p>続いて、BLE Nanoの詳細に移動しますので、画面右側中央の<strong>Add to your Mbed Compiler</strong>をクリック<br><a href="../../../../public/2017/12/9c935de28796773fd6510abb042265cb.png"><img src="../../../../public/2017/12/9c935de28796773fd6510abb042265cb.png"></a> <a href="../../../../public/2017/12/1482ba79f3d74b8d2f4bacd2d69baf50.png"><img src="../../../../public/2017/12/1482ba79f3d74b8d2f4bacd2d69baf50.png"></a><br> 成功しました。</p><h2 id="サンプルのインポート"><a href="#サンプルのインポート" class="headerlink" title="サンプルのインポート"></a>サンプルのインポート</h2><p>次にサンプルソースをインポートします。<br><a href="https://os.mbed.com/teams/Bluetooth-Low-Energy/code/BLE_iBeacon/">BLE_iBeacon</a>というサンプルがありますので、これを自分の環境にインポートします。<br>画面左上の<strong>インポート</strong>をクリックします。</p><p><a href="../../../../public/2017/12/bb76dd5d620c8d707107b276108230ed.png"><img src="../../../../public/2017/12/bb76dd5d620c8d707107b276108230ed.png"></a></p><p><a href="../../../../public/2017/12/a0a58da8bf3e8683419f4711bbde78e9.png"><img src="../../../../public/2017/12/a0a58da8bf3e8683419f4711bbde78e9.png"></a><br> <strong>Source URL</strong>に先ほどのBLE_iBeaconのurlを入力し、Importを実行</p><p><a href="../../../../public/2017/12/79e56549ce789c59c19e6ca2cb63fa9a.png"><img src="../../../../public/2017/12/79e56549ce789c59c19e6ca2cb63fa9a-1024x611.png"></a><br> 成功するとプロジェクト一式が画面に表示されます</p><p>おもむろに、<strong>main.cpp</strong>を見てみます。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/\* mbed Microcontroller Library \* Copyright (c) <span class="number">2006</span><span class="number">-2015</span> ARM Limited \* \* Licensed under the Apache License, Version <span class="number">2.0</span> (the <span class="string">&quot;License&quot;</span>); \* you may <span class="keyword">not</span> use <span class="keyword">this</span> file except in compliance with the License. \* You may obtain a copy of the License at \* \* http:<span class="comment">//www.apache.org/licenses/LICENSE-2.0 \* \* Unless required by applicable law or agreed to in writing, software \* distributed under the License is distributed on an &quot;AS IS&quot; BASIS, \* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \* See the License for the specific language governing permissions and \* limitations under the License. \*/  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;mbed.h&quot;</span> #<span class="meta-keyword">include</span> <span class="meta-string">&quot;ble/services/iBeacon.h&quot;</span>  </span></span><br><span class="line">BLE ble;  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bleInitComplete</span><span class="params">(BLE::InitializationCompleteCallbackContext \*params)</span> </span>&#123; BLE &amp;ble = params-&gt;ble; ble\_error\<span class="keyword">_t</span> error = params-&gt;error;  </span><br><span class="line"><span class="keyword">if</span> (error != BLE\_ERROR\_NONE) &#123; <span class="keyword">return</span>; &#125;  </span><br><span class="line">/\*\* \* The Beacon payload has the following composition: \* <span class="number">128</span>-Bit / <span class="number">16b</span>yte UUID = E2 <span class="number">0</span>A <span class="number">39</span> F4 <span class="number">73</span> F5 <span class="number">4B</span> C4 A1 <span class="number">2F</span> <span class="number">17</span> D1 AD <span class="number">07</span> A9 <span class="number">61</span> \* Major/Minor = <span class="number">0x1122</span> / <span class="number">0x3344</span> \* Tx Power = <span class="number">0xC8</span> = <span class="number">200</span>, <span class="number">2&#x27;</span>s compliment is <span class="number">256</span><span class="number">-200</span> = (<span class="number">-56</span>dB) \* \* Note: please remember to calibrate your beacons TX Power <span class="keyword">for</span> more accurate results. \*/ <span class="keyword">const</span> uint8\<span class="keyword">_t</span> uuid\[\] = &#123;<span class="number">0xE2</span>, <span class="number">0x0A</span>, <span class="number">0x39</span>, <span class="number">0xF4</span>, <span class="number">0x73</span>, <span class="number">0xF5</span>, <span class="number">0x4B</span>, <span class="number">0xC4</span>, <span class="number">0xA1</span>, <span class="number">0x2F</span>, <span class="number">0x17</span>, <span class="number">0xD1</span>, <span class="number">0xAD</span>, <span class="number">0x07</span>, <span class="number">0xA9</span>, <span class="number">0x61</span>&#125;; uint16\<span class="keyword">_t</span> majorNumber = <span class="number">1122</span>; uint16\<span class="keyword">_t</span> minorNumber = <span class="number">3344</span>; uint16\<span class="keyword">_t</span> txPower = <span class="number">0xC8</span>; iBeacon \*ibeacon = <span class="keyword">new</span> iBeacon(ble, uuid, majorNumber, minorNumber, txPower);  </span><br><span class="line">ble.gap().setAdvertisingInterval(<span class="number">1000</span>); /\* <span class="number">1000</span>ms. \*/ ble.gap().startAdvertising(); &#125;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123; ble.init(bleInitComplete);  </span><br><span class="line">/\* SpinWait <span class="keyword">for</span> initialization to complete. This is necessary because the \* BLE object is used in the main loop below. \*/ <span class="keyword">while</span> (!ble.hasInitialized()) &#123; /\* spin loop \*/ &#125;  </span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123; ble.waitForEvent(); <span class="comment">// allows or low power operation &#125; &#125;</span></span><br></pre></td></tr></table></figure><p>すごくシンプルです。<br>main関数内で、おまじないした後は、全ての処理が<strong>bleInitComplete</strong>関数内に書いてあります。<br>サンプルは1秒毎にアドバタイジングパケットを送信する模様。<br>とりあえず、これをコンパイルします。</p><p><a href="../../../../public/2017/12/523cfc6344d3ed66b00dcec640bb60ed.png"><img src="../../../../public/2017/12/523cfc6344d3ed66b00dcec640bb60ed.png"></a><br> 画面左上のコンパイルをクリック</p><p><a href="../../../../public/2017/12/a36956468750cdc5a3db07e06abe8c25.png"><img src="../../../../public/2017/12/a36956468750cdc5a3db07e06abe8c25.png"></a><br> コンパイルが始まります</p><p><a href="../../../../public/2017/12/f8f2977af9c753bcd2f6808d6719c838.png"><img src="../../../../public/2017/12/f8f2977af9c753bcd2f6808d6719c838-1024x185.png"></a></p><p>が、エラーと警告。</p><ul><li>Warning: #warning directive: toolchain.h has been replaced by mbed_toolchain.h, please update to mbed_toolchain.h [since mbed-os-5.3] in “extras/mbed_e7ca05fa8600/platform/toolchain.h”, Line: 23, Col: 3</li><li>Error: Cannot open source input file “core_cmInstr.h”: No such file or directory in “BLE_API/ble/services/iBeacon.h”, Line: 19, Col: 27</li></ul><p>とりあえず警告は無視して、エラーを直します。エラー行右の**Fix it!**をクリック。<br>なんとライブラリを探してきて、候補を提示してくれます。<br>ただ、どれを選べば良いのか見当もつきません。<br>ということで調べてみると、 </p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://blog.akanumahiroaki.com/entry/2017/09/19/080000" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=blog.akanumahiroaki.com"></img><div class="hbc-site-name">Tech Blog by Akanuma Hiroaki</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png"></img></div><div class="hbc-text"><div class="hbc-title">BLE Nano を mbed で iBeacon 化する - Tech Blog by Akanuma Hiroaki</div><div class="hbc-url">http://blog.akanumahiroaki.com/entry/2017/09/19/080000</div><div class="hbc-description">前回 BLE Nano で Lチカまでやったので、今回は BLE Nano を iBeacon 化して、iOS アプリから検知してみたいと思います。 また、開発環境としては前回の記事で、 Vagrant で構築した VM からだと mbed import の途中で止まってしまった…</div></div></div></div></a></div></div><p>という記事が。<br>記事によれば、</p><blockquote><p>ですがこのビルドを指定すると下記のようなエラーになってしまったので、 4eea097334d6 で実行しています。</p></blockquote><p>とのこと。どうもインポート時に最新ビルドを持ってくるようにしたのが不味かった模様。<br>なので、プロジェクトを削除してもう一度インポートします。</p><p><a href="../../../../public/2017/12/1cc0b0c56302c9130ead7b679e91d8a3.png"><img src="../../../../public/2017/12/1cc0b0c56302c9130ead7b679e91d8a3.png"></a><br> <strong>Update all libraries to the latest revision</strong>のチェックを外します。</p><p>警告は出ますが、コンパイルに成功し、バイナリをダウンロードできるようになりました。</p><p><a href="../../../../public/2017/12/02632a26d596d01281833c5cc84317b6.png"><img src="../../../../public/2017/12/02632a26d596d01281833c5cc84317b6.png"></a></p><p>まずはコンパイルとバイナリ生成が完了。</p>]]></content>
      
      
      <categories>
          
          <category> IoT </category>
          
          <category> 無線通信 </category>
          
          <category> Bluetooth </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows 10 IoT Core での新規プロジェクト作成</title>
      <link href="2017/12/04/2707/"/>
      <url>2017/12/04/2707/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>Visual Studio</strong>上で、しかもC#を使って、IoTデバイス上で動作できるアプリが簡単に作れる!!っていうのが、Microsoftのエコシステムの強みなんですけど、Visual Studioのどこから作成できるのかがわかりにくいのでメモ。</p><h1 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h1><h2 id="Application-Types"><a href="#Application-Types" class="headerlink" title="Application Types"></a>Application Types</h2><p>まず前提として、IoTデバイス上で動作するアプリは</p><ul><li>GUIあり (UWP)<ul><li>Foreground Apps</li></ul></li><li>GUIなし(UWP)<ul><li>Background Apps</li></ul></li><li>非UWP (C++のみ)<ul><li>Non-UWP Apps</li></ul></li></ul><p>の3種になります。<br>パフォーマンスとか考えると、C++の非UWPって気もしますが、そもそもパフォーマンス云々ならWindows IoTなんか選択しません。<br>Windows IoTを選ぶのは、開発効率の高さ、既存資産の流用、多数の言語サポートなのですから。</p><h2 id="Foreground-Apps"><a href="#Foreground-Apps" class="headerlink" title="Foreground Apps"></a>Foreground Apps</h2><p>で、前述の通り、GUIなら選択肢は<strong>Foreground Apps</strong>しかないといっています。<br><a href="https://docs.microsoft.com/en-us/windows/iot-core/develop-your-app/buildingappsforiotcore">Developing foreground applications</a>によれば、</p><blockquote><p>All of the standard UWP languages and project templates are fully supported on IoT Core.</p></blockquote><h5 id="訳-全ての基本的なUWPの言語及びプロジェクトテンプレートはIoTコア上で完全にサポートされます。"><a href="#訳-全ての基本的なUWPの言語及びプロジェクトテンプレートはIoTコア上で完全にサポートされます。" class="headerlink" title="訳: 全ての基本的なUWPの言語及びプロジェクトテンプレートはIoTコア上で完全にサポートされます。"></a>訳: 全ての基本的なUWPの言語及びプロジェクトテンプレートはIoTコア上で完全にサポートされます。</h5><p>とあるので、普通にUWPアプリを作ればそれで動くはずです。</p><h2 id="Background-Apps"><a href="#Background-Apps" class="headerlink" title="Background Apps"></a>Background Apps</h2><p>問題は、GUIを使わないタイプ。<br><strong>Background App</strong>とよばれる、このタイプはコンソールアプリなのですが、従来の<strong>Mainメソッド</strong>から構成されるものとは異なり、どちらかといえばサービスアプリケーションに近い印象を受けます。そもそもコンソール画面は表示されないので、コンソールアプリとも言えませんが。<br>Background Appsを作成するには、<strong>Windows.ApplicationModel.Background.IBackgroundTask インターフェイス</strong>を継承したクラスを作成するだけです。<br>そのクラスはタスクとして扱われ、バックグラウンドで実行されるという仕組みです。<br>サンプルを見る限りは非常に簡単ですが、ここはテンプレートを利用しましょう。<br>というか、MSDNにもそう書いてあります。<br>でも、Visual Studioをインストールしてもテンプレートは存在せず、<strong>Visual Studio Marketplace</strong>から入手せよとのこと。えぇ…</p><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=MicrosoftIoT.WindowsIoTCoreProjectTemplates">Windows IoT Core Project Templates</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=MicrosoftIoT.WindowsIoTCoreProjectTemplatesforVS15">Windows IoT Core Project Templates for VS 2017</a></li></ul><p>入手したインストーラを実行し、<strong>新しいプロジェクト</strong>を開くと、<strong>Windows IoT Core</strong>が追加されます。</p><p><a href="../../../../public/2017/12/bd28c4a9a6ec722100d1bfed5cf509cf.png"><img src="../../../../public/2017/12/bd28c4a9a6ec722100d1bfed5cf509cf.png"></a></p><p><a href="../../../../public/2017/12/8c9a77301be08cfd6425cd68d0e3de7f.png"><img src="../../../../public/2017/12/8c9a77301be08cfd6425cd68d0e3de7f.png"></a><br> ターゲットのWindows 10のビルドを選択します。</p><p>作成されたプロジェクトは、<strong>StartupTask.cs</strong>というソースが一つ(+他の細々したもの)というシンプルなものです。</p><p><a href="../../../../public/2017/12/9fa909c177793da776f6ca453d6f9af7.png"><img src="../../../../public/2017/12/9fa909c177793da776f6ca453d6f9af7-1024x725.png"></a></p><p>これを元に作成していけば、アイデアを形に出来るでしょう。きっと。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> IoT </category>
          
          <category> Windows IoT </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows 10 IoT Coreのセットアップ</title>
      <link href="2017/12/04/2685/"/>
      <url>2017/12/04/2685/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>新しいプロジェクト、と言いますか<strong>PoC</strong>のために、検証を休みの日とかに考えています。<br>その一環で<strong>Raspberry Pi3</strong>を使おうと思い、どうせなら<strong>Windows</strong>でやってみるか、ということで最新の<strong>Windows 10 IoT Core</strong>を試してみることに。</p><h1 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h1><h2 id="Download-Windows-10-IoT-Core-Dashboard"><a href="#Download-Windows-10-IoT-Core-Dashboard" class="headerlink" title="Download Windows 10 IoT Core Dashboard"></a>Download Windows 10 IoT Core Dashboard</h2><p>まずは、<strong>Windows 10 IoT Core Dashboard</strong>をダウンロードします。<br>これは、Windows 10にインストールする、IoTデバイスのダッシュボードアプリケーションです。<br>DashboardからOSのインストール、各種設定の変更が可能です。<br><a href="https://docs.microsoft.com/en-us/windows/iot-core/connect-your-device/iotdashboard">Windows 10 IoT Core Dashboard</a>からダウンロードします。</p><p><a href="../../../../public/2017/12/screencapture-docs-microsoft-en-us-windows-iot-core-connect-your-device-iotdashboard-1512375005956.png"><img src="../../../../public/2017/12/screencapture-docs-microsoft-en-us-windows-iot-core-connect-your-device-iotdashboard-1512375005956-1024x379.png"></a></p><h2 id="Install-Windows-10-IoT-Core-Dashboard"><a href="#Install-Windows-10-IoT-Core-Dashboard" class="headerlink" title="Install Windows 10 IoT Core Dashboard"></a>Install Windows 10 IoT Core Dashboard</h2><p>次はインストールです。ダウンロードした<strong>Setup.exe</strong>をダブルクリックするだけです。<br><strong>ClickOnce</strong>なのか、インストールはすぐ終わります。</p><p><a href="../../../../public/2017/12/ec73e51527bf37ac8109501e5073ba71.png"><img src="../../../../public/2017/12/ec73e51527bf37ac8109501e5073ba71.png"></a></p><p><a href="../../../../public/2017/12/2dd68645732b9f493d31e5b83924ee04.png"><img src="../../../../public/2017/12/2dd68645732b9f493d31e5b83924ee04.png"></a></p><h2 id="Launch-Dashboard"><a href="#Launch-Dashboard" class="headerlink" title="Launch Dashboard"></a>Launch Dashboard</h2><p>インストールが完了するとDashboardが立ち上がりますが、スタートメニューから起動も出来ます。</p><p><a href="../../../../public/2017/12/3f7fa114521dd1864cfe1810fa62cd07.png"><img src="../../../../public/2017/12/3f7fa114521dd1864cfe1810fa62cd07-1024x697.png"></a></p><p><a href="../../../../public/2017/12/5eda967b14cede1ab1dd6a0174aecefc.png"><img src="../../../../public/2017/12/5eda967b14cede1ab1dd6a0174aecefc.png"></a></p><p>Dashboardが立ち上がるとファイアウォールの許可を求めるダイアログが出るので、適当に許可を与えます。<br>許可しないと、OSイメージのダウンロードが出来ないと思われますので、必須でしょう。</p><p><a href="../../../../public/2017/12/5886a4cddd806495a669da6567f5898f.png"><img src="../../../../public/2017/12/5886a4cddd806495a669da6567f5898f.png"></a></p><h2 id="Setup-New-Device"><a href="#Setup-New-Device" class="headerlink" title="Setup New Device"></a>Setup New Device</h2><p>いよいよOSのインストールです。<br>インストールは、画面左の<strong>新しいデバイスのセットアップ</strong>から実行します。<br><strong>デバイスの種類</strong>は<strong>Rasoberry Pi 2 &amp; 3</strong>、<strong>OS ビルド</strong>は、<strong>Windows !0 IoT Core (16299)**を選択します。<br>ドライブは、SDカードが挿入されたドライブを選択します。<br>**デバイス名</strong>は後から変更できますので、気にしなくても良いです。<br><strong>管理者パスワード</strong>は、今後必要になるので忘れないでください。<br><strong>ソフトウェア ライセンス条項に同意する</strong>をチェックし、<strong>ダウンロードとインストール</strong>をクリックしてOSイメージの作成を開始します。</p><p><a href="../../../../public/2017/12/6d9c4f0021b624a091773eb6aa5ccb07.png"><img src="../../../../public/2017/12/6d9c4f0021b624a091773eb6aa5ccb07-1024x691.png"></a></p><p><a href="../../../../public/2017/12/c31d32a52a6b62e2cfa8c7885561cd9d.png"><img src="../../../../public/2017/12/c31d32a52a6b62e2cfa8c7885561cd9d.png"></a><br> 暫くすると、コンソール画面が表示されますが、もう暫く待機します。</p><p><a href="../../../../public/2017/12/83c41adade8f9474b4460529557e1a78.png"><img src="../../../../public/2017/12/83c41adade8f9474b4460529557e1a78-1024x691.png"></a><br> セットアップが完了しましたので、SDカードを抜いて、お手持ちのIoTデバイスに差し込みます。</p><p>IoTデバイスをLANに接続後、画面右側の<strong>自分のデバイス</strong>に移動します。</p><p><a href="../../../../public/2017/12/3437177837007bfe4bdc3b1007e2042f.png"><img src="../../../../public/2017/12/3437177837007bfe4bdc3b1007e2042f-1024x691.png"></a><br> 自分のデバイスが表示されます。</p><p><a href="../../../../public/2017/12/14966e3f429b05464438d8e2f2e3f409.png"><img src="../../../../public/2017/12/14966e3f429b05464438d8e2f2e3f409-1024x691.png"></a><br> 項目をダブルクリックすると遷移する先でデバイス名を変更できます。</p><h2 id="Go-to-Device-Portal"><a href="#Go-to-Device-Portal" class="headerlink" title="Go to Device Portal"></a>Go to Device Portal</h2><p>Dashboardから出来るのは、OSのインストールとデバイス名の設定ぐらいで、各種詳細設定の変更、リモート接続などは、<strong>Device Portal</strong>から実行します。<br>デバイス一覧から、対象のデバイスを右クリックすると表示されるコンテキストメニューから<strong>Device Poratl で開く</strong>を選択します。</p><p><a href="../../../../public/2017/12/1901c5900717c02c163babdc338df3df.png"><img src="../../../../public/2017/12/1901c5900717c02c163babdc338df3df-1024x691.png"></a> 次に認証ダイアログが表示されます。<br><a href="../../../../public/2017/12/978349dcf234b9fe0f418626cce2899e.png"><img src="../../../../public/2017/12/978349dcf234b9fe0f418626cce2899e.png"></a><br> 先ほど入力した管理者パスワードを利用してログインします。なおユーザ名は<strong>Administrator</strong>です。</p><p><a href="../../../../public/2017/12/b9d941b43eec258626e1b8164bbadc09.png"><img src="../../../../public/2017/12/b9d941b43eec258626e1b8164bbadc09-1024x704.png"></a><br> 起動しました。</p><p>セットアップは以上です。<br><strong>Raspbian</strong>のインストールに比べると非常に簡単です。<br>このあたりは流石Microsoftといったところでしょう。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> IoT </category>
          
          <category> Windows IoT </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>WPF メモ その4 CustomControlに対してStyleが効かない</title>
      <link href="2017/10/28/2681/"/>
      <url>2017/10/28/2681/</url>
      
        <content type="html"><![CDATA[<h1 id="What-does-it-mean"><a href="#What-does-it-mean" class="headerlink" title="What does it mean?"></a>What does it mean?</h1><p>タイトル通り。<br><strong>CustomControl</strong>を作成し、定義した<strong>Style</strong>を適用しても反映されない問題が発生。<br>小一時間悩みました。</p><h1 id="What’s-wrong"><a href="#What’s-wrong" class="headerlink" title="What’s wrong?"></a>What’s wrong?</h1><p>CustomControlのコンストラクタが悪かったようです。<br>普通は、</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DependencyProperty OrientationProperty = DependencyProperty.Register( <span class="string">&quot;Orientation&quot;</span>, <span class="keyword">typeof</span>(Orientation), <span class="keyword">typeof</span>(TestControl), <span class="keyword">new</span> FrameworkPropertyMetadata( Orientation.Horizontal, PropertyChangedCallback));  </span><br><span class="line"><span class="keyword">public</span> Orientation Orientation &#123; <span class="keyword">get</span> =&gt; (Orientation)GetValue(OrientationProperty); <span class="keyword">set</span> =&gt; SetValue(OrientationProperty, <span class="keyword">value</span>); &#125; </span><br></pre></td></tr></table></figure><p>みたいな感じでデフォルト値は、<strong>FrameworkPropertyMetadata</strong>の第一引数で指定します。<br>が、コンストラクタにおいて、</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TestControl</span>(<span class="params"></span>)</span> &#123; <span class="keyword">this</span>.Orientation = Orientation.Horizontal; &#125; </span><br></pre></td></tr></table></figure><p>と余計なものを書いたのが運の尽き。<br>カスタムコントロールのStyleでOrientationのPropertyを定義しても適用されませんでした。<br>なので、コンストラクタ内での値の設定をコメントアウトしたら解決しました。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET </category>
          
          <category> .NET Framework </category>
          
          <category> Windows Presentation Foundation </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETで音声処理を試してみる NAudio編 第2回</title>
      <link href="2017/10/28/2677/"/>
      <url>2017/10/28/2677/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>前回から大分間が開きましたが、音声処理の仕事は継続中です。<br>といっても、毎日の作業全部が音声処理のタスクというわけではないのですが。<br>音声処理のタスクのうち、複数のチャネルを持つWAVファイルを分割する機能の実装があります。<br><strong>5.1ch</strong>の分割を行うようですが、5.1chの**.1**って何？と思って調べてみたら、小数の0.1という訳ではないのね。事実上の6chということの模様。<br>今回はこの機能を実装してみました。<br>ソースは下記になります </p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/takuya-takeuchi/Demo/tree/master/NAudio3" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/6241854?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">takuya-takeuchi/Demo</div><div class="hbc-url">https://github.com/takuya-takeuchi/Demo/tree/master/NAudio3</div><div class="hbc-description">Sample source code for Demonstration, Experiment and Test - takuya-takeuchi/Demo</div></div></div></div></a></div></div><h1 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h1><p>今回はコンソールアプリでデモを作りました。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> wav = <span class="keyword">new</span> WaveFileReader(path)) &#123; <span class="keyword">var</span> channels = wav.WaveFormat.Channels; <span class="keyword">var</span> bitsPerSample = wav.WaveFormat.BitsPerSample; <span class="keyword">var</span> sampleRate = wav.WaveFormat.SampleRate; <span class="keyword">var</span> length = (<span class="keyword">int</span>)(wav.Length / channels); <span class="keyword">var</span> bitLength = bitsPerSample / <span class="number">8</span>; <span class="keyword">if</span> (channels &lt;= <span class="number">1</span>) &#123; Console.WriteLine(<span class="string">&quot;Input file does not contain multiple channels.&quot;</span>); <span class="keyword">return</span>; &#125;  </span><br><span class="line"><span class="keyword">int</span> bytesRead; <span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="keyword">byte</span>\[bitLength \* sampleRate \* channels\];  </span><br><span class="line"><span class="keyword">var</span> buffers = <span class="keyword">new</span> List&lt;MemoryStream&gt;(); <span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>; index &lt; channels; index++) buffers.Add(<span class="keyword">new</span> MemoryStream(length));  </span><br><span class="line"><span class="keyword">while</span> ((bytesRead = wav.Read(buffer, <span class="number">0</span>, buffer.Length)) &gt; <span class="number">0</span>) &#123; <span class="keyword">var</span> offset = <span class="number">0</span>; <span class="keyword">while</span> (offset &lt; bytesRead) &#123; <span class="keyword">for</span> (<span class="keyword">var</span> n = <span class="number">0</span>; n &lt; channels; n++) &#123; buffers\[n\].Write(buffer, offset, bitLength); offset += bitLength; &#125; &#125; &#125;  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>; index &lt; channels; index++) &#123; <span class="keyword">using</span> (<span class="keyword">var</span> writer = <span class="keyword">new</span> WaveFileWriter(<span class="string">$&quot;<span class="subst">&#123;index + <span class="number">1</span>&#125;</span>.wav&quot;</span>, <span class="keyword">new</span> WaveFormat(sampleRate, bitsPerSample, <span class="number">1</span>))) &#123; <span class="keyword">var</span> buf = buffers\[index\].GetBuffer(); writer.Write(buf, <span class="number">0</span>, buf.Length); buffers\[index\].Dispose(); &#125; &#125; &#125;</span><br></pre></td></tr></table></figure><p>wavファイルのパスを指定し、<strong>WaveFileReader</strong>で読み込み、分割を行った後に、チャネル毎に分割して書き出しを行っているだけです。<br>wavファイルで複数のチャネルは、16bitの4チャネルの場合、先頭から順番に ch1(2byte=16bit) ch2(2byte) ch3(2byte) ch4(2byte) ch1(2byte) ch2(2byte) ch3(2byte) ch4(2byte) .. と繰り返しで格納されています。<br>なので、それを順番にバッファに書き出しするだけです。<br>bitsPerSampleを8で除算しているのは、byteに変換しているからですね。</p><h1 id="テスト"><a href="#テスト" class="headerlink" title="テスト"></a>テスト</h1><p>手元に複数チャネルの音声ファイルが無かったので、ネットから探しました。<br>そこで見つけたのが下記。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/WAVE/Samples.html" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=www-mmsp.ece.mcgill.ca"></img><div class="hbc-site-name">www-mmsp.ece.mcgill.ca</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">AIFF / AIFC Sample Files</div><div class="hbc-url">http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/WAVE/Samples.html</div></div></div></div></a></div></div><p>不幸にも5.1chがリンク切れなのですが、8chとか普通じゃお目にかかりそうもないものを見つけたので試しに分割してみました。<br><a href="http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/WAVE/Samples/Microsoft/8_Channel_ID.wav">8_Channel_ID.wav</a>をダウンロードして、デモアプリに渡します。<br>するとデモアプリと同じフォルダに1.wav,2.wav….8.wavの8つのwavファイルが生成されます。<br>分割されたファイルにはそれぞれ、 1.wav: 1st: Front Left 2.wav: 2nd: Front Right 3.wav: 3rd: Centre 4.wav: 6th: tone 5.wav: 4th: Back Left 6.wav: 5th: Back Right 7.wav: 7th: Auxiliary Left 8.wav: 8th: Auxiliary Right という単語を発生する男性の声またはトーンだけが含まれています。<br>元々のファイルにもそれらが時間差で出力されていましたが、これらが綺麗に分離されているのがわかります。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>複数チャネルの音声データの分割など、普通は用途がありませんが、そんな要求が来てもこれで大丈夫です。</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/NAudio3">https://github.com/takuya-takeuchi/Demo/tree/master/NAudio3</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> マルチメディア </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> .NETで音声処理を試してみる NAudio編 </category>
          
          <category> NAudio </category>
          
          <category> 音声処理 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その92 Visual Studio 2017.3が単体テストを検出できない</title>
      <link href="2017/10/07/2672/"/>
      <url>2017/10/07/2672/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>題名の通り。<br>VS2017からVS2017.3に更新したところ発生しました。<br>これまでの<strong>Visual Studio</strong>でも同様の事例はありましたが、ここまできてもこのような現象が発生すると萎えます。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>例のごとく<strong>Stackoverflow</strong>で回答が。</p><p>ただ、最終的にAnswerにはなっておらず、一部のコメント投稿者は、後述の方法で解決した模様。<br>私が試したのは、<strong>MSTest.TestAdapter</strong>, <strong>MSTest.TestFramework</strong> というMicrosoft製のNugetパッケージを更新する方法でした。</p><p><a href="../../../../public/2017/10/6ea8cd337f014a1c80024ebc7363449c.png"><img src="../../../../public/2017/10/6ea8cd337f014a1c80024ebc7363449c.png"></a><br> どちらも1.1.18になっていればOKかと。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> Visual Studio </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その91 WindowsでMiniconda2と3を共存させる</title>
      <link href="2017/09/20/2670/"/>
      <url>2017/09/20/2670/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>PythonのWindows用環境は<strong>Anaconda</strong>や<strong>Miniconda</strong>が有名ですが、初期パッケージの数が少ないMinicondaを専ら好んで使っています。<br>そんなMinicondaは<strong>Python 2.7</strong>と<strong>Python 3.6</strong>をインストールできるパッケージが用意されています。<br>これを使い分けて、Windowsの環境に共存させたいと思います。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h2 id="Case-of-Anaconda"><a href="#Case-of-Anaconda" class="headerlink" title="Case of Anaconda"></a>Case of Anaconda</h2><p>実は、Anacondaでの2と3の共存については記事があります。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://whitecat-student.hatenablog.com/entry/2016/12/28/193156" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=whitecat-student.hatenablog.com"></img><div class="hbc-site-name">白猫学生のブログ</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://ogimage.blog.st-hatena.com/8454420450088709163/10328749687201786710/1531993719"></img></div><div class="hbc-text"><div class="hbc-title">Anacondaを用いてPython2とPython3を共存させる方法 (Windows) - 白猫学生のブログ</div><div class="hbc-url">http://whitecat-student.hatenablog.com/entry/2016/12/28/193156</div><div class="hbc-description">はじめに Pythonはずっと昔に3系列にバージョンがアップされましたが，いまだに2系列を使用している人が数多くいると思います．(自分もその一人です) 当時はライブラリが3系列に対応していなかったり，仕様の微妙な変更等が理由でPython3への移行をしなかった方が多かったと思いま…</div></div></div></div></a></div></div><p>今回はこれを参考にさせてもらいました。</p><h2 id="Case-of-Miniconda"><a href="#Case-of-Miniconda" class="headerlink" title="Case of Miniconda"></a>Case of Miniconda</h2><p>やることは変わりません。<br>私は、Python2をデフォルトにしました。3をデフォルトにしてはいませんが、多分大丈夫? まず環境変数ですが、</p><ul><li>Miniconda2のインストール先<ul><li>C:\Program Files\Miniconda2</li></ul></li><li>Miniconda3のインストール先<ul><li>C:\Program Files\Miniconda3</li></ul></li></ul><p>とします。<br>ユーザーの環境変数 <strong>(システムの環境変数ではない!!)</strong> の<strong>PATH</strong>が、下記の順序で追加されているようにします。</p><ul><li>C:\Program Files\Miniconda2</li><li>C:\Program Files\Miniconda2\Scripts</li><li>C:\Program Files\Miniconda2\Library\bin</li><li>C:\Program Files\Miniconda3</li><li>C:\Program Files\Miniconda3\Scripts</li><li>C:\Program Files\Miniconda3\Library\bin</li></ul><p>最後に、コマンドプロンプトを立ち上げ、<strong>Miniconda3</strong>のインストールパスに移動します。<br>必要に応じて管理者権限は付与してください。<br>そして下記のコマンドを叩きます。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">copy</span> python.exe python3.exe <span class="built_in">cd</span> Scripts <span class="built_in">move</span> conda.exe conda3.exe <span class="built_in">move</span> conda-script.py conda3-script.py <span class="built_in">move</span> easy\_install.exe easy\_install3.exe <span class="built_in">move</span> easy\_install-script.py easy\_install3-script.py <span class="built_in">move</span> pip.exe pip3.exe <span class="built_in">move</span> pip-script.py pip3-script.py </span><br></pre></td></tr></table></figure><h1 id="Try"><a href="#Try" class="headerlink" title="Try"></a>Try</h1><p>コマンドプロンプトを立ち上げ直します。<br>そして、正しく共存できているかを確認します。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\\<span class="title">Users</span>\\<span class="title">XXXXXX</span>&gt;<span class="title">python3</span> --<span class="title">version</span> <span class="title">Python</span> 3.6.1 :: <span class="title">Continuum</span> <span class="title">Analytics</span>, <span class="title">Inc</span>.  </span></span><br><span class="line"><span class="function"><span class="title">C</span>:\\<span class="title">Users</span>\\<span class="title">XXXXXX</span>&gt;<span class="title">python</span> --<span class="title">version</span> <span class="title">Python</span> 2.7.11 :: <span class="title">Continuum</span> <span class="title">Analytics</span>, <span class="title">Inc</span>.</span></span><br></pre></td></tr></table></figure><p>無事に共存できました!!</p>]]></content>
      
      
      <categories>
          
          <category> %e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%e8%a8%80%e8%aa%9e </category>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その90 Visual Studio Code on WindowsでCMakeを使うとエラーになる</title>
      <link href="2017/09/17/2664/"/>
      <url>2017/09/17/2664/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>最新の<strong>CMake 3.9.2</strong>が悪いのか、<strong>Visual Studio Code</strong>でCMakeを使おうとするとエラーになります。<br>WindowsのVisual Studio CodeでCmakeを使うという記事はたくさんあります。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://qiita.com/bigengelt/items/e4c6f08003fe15988b7d" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=qiita.com"></img><div class="hbc-site-name">Qiita</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.qiita.com%2Fassets%2Fpublic%2Farticle-ogp-background-1150d8b18a7c15795b701a55ae908f94.png?ixlib=rb-1.2.2&w=1200&mark=https%3A%2F%2Fqiita-user-contents.imgix.net%2F~text%3Fixlib%3Drb-1.2.2%26w%3D840%26h%3D380%26txt%3DVSCode%25E3%2581%25A7C%252B%252B%25E3%2583%2587%25E3%2583%2590%25E3%2583%2583%25E3%2582%25B0%2528Windows%2529%26txt-color%3D%2523333%26txt-font%3DHiragino%2520Sans%2520W6%26txt-size%3D54%26txt-clip%3Dellipsis%26txt-align%3Dcenter%252Cmiddle%26s%3De7f854c6a7505bc0fb02c23d19f76bc2&mark-align=center%2Cmiddle&blend=https%3A%2F%2Fqiita-user-contents.imgix.net%2F~text%3Fixlib%3Drb-1.2.2%26w%3D840%26h%3D500%26txt%3D%2540bigengelt%26txt-color%3D%2523333%26txt-font%3DHiragino%2520Sans%2520W6%26txt-size%3D45%26txt-align%3Dright%252Cbottom%26s%3Df8f2975fe15c9bbecccaf1b41bd9db12&blend-align=center%2Cmiddle&blend-mode=normal&s=ef6c390ac152d2ce137129e316208fc1"></img></div><div class="hbc-text"><div class="hbc-title">VSCodeでC++デバッグ(Windows) - Qiita</div><div class="hbc-url">http://qiita.com/bigengelt/items/e4c6f08003fe15988b7d</div><div class="hbc-description">概要Visual Studio Codeを使ってVC++のデバッグ＋ビルドを行う方法CMakeの使い方等はこの記事には載せませんので注意してください。また、記事に対するもっと良い方法等があれば是非コメントをお願い致します。...</div></div></div></div></a></div></div><p>が、それでも上手くいかない。<br>Lixnuでは既に自分でも試しており楽勝のはずだったのですが… </p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://taktak.jp/2017/08/17/%e9%96%8b%e7%99%ba%e3%83%a1%e3%83%a2-%e3%81%9d%e3%81%ae83-fedora-26-server%e3%81%a7cmake%e3%81%8b%e3%82%89%e5%85%b1%e6%9c%89%e3%83%a9%e3%82%a4%e3%83%96%e3%83%a9%e3%83%aa%e3%82%92%e4%bd%9c%e6%88%90/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=taktak.jp"></img><div class="hbc-site-name">taktak.jp</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">開発メモ その83 Fedora 26 ServerでCMakeから共有ライブラリを作成する – A certain engineer &quot;COMPLEX&quot;</div><div class="hbc-url">https://taktak.jp/2017/08/17/%e9%96%8b%e7%99%ba%e3%83%a1%e3%83%a2-%e3%81%9d%e3%81%ae83-fedora-26-server%e3%81%a7cmake%e3%81%8b%e3%82%89%e5%85%b1%e6%9c%89%e3%83%a9%e3%82%a4%e3%83%96%e3%83%a9%e3%83%aa%e3%82%92%e4%bd%9c%e6%88%90/</div></div></div></div></a></div></div><p>具体的には、<br><a href="../../../../public/2017/09/acbabd5460f36a5f5ebd33f54fb0649a.png"><img src="../../../../public/2017/09/acbabd5460f36a5f5ebd33f54fb0649a-1024x697.png"></a><br> <strong>Started new CMake Server instance with PID 13456 Build program for generator Ninja is not found. Skipping… Build program for generator Unix Makefiles is not found. Skipping… None of preferred generators available on the system.</strong> というエラーが出力されております。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p><strong>CMake tools</strong>のIssueにヒントがありました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/vector-of-bool/vscode-cmake-tools/issues/132" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars2.githubusercontent.com/u/6154722?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">CMake server: Unable to determine CMake Generator to use · Issue #132 · microsoft/vscode-cmake-tools</div><div class="hbc-url">https://github.com/vector-of-bool/vscode-cmake-tools/issues/132</div><div class="hbc-description">After upgrading my cmake install to 3.7.2, enabling the cmake server option in the vs code settings, and restarting vs code, I get the messa…</div></div></div></div></a></div></div><p>エラー出力にもありますが、<strong>Ninja</strong>が存在しない、って言っているのでそれをインストールします。</p><h2 id="What-is-Ninja"><a href="#What-is-Ninja" class="headerlink" title="What is Ninja?"></a>What is Ninja?</h2><p>Ninjaはスピードに特化した小型のビルドツールとのこと。<br>私はよくわからないので、詳しいことはググってください。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/ninja-build/ninja" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars1.githubusercontent.com/u/11653218?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">ninja-build/ninja</div><div class="hbc-url">https://github.com/ninja-build/ninja</div><div class="hbc-description">a small build system with a focus on speed. Contribute to ninja-build/ninja development by creating an account on GitHub.</div></div></div></div></a></div></div><p>とりあえず、Githubのリリースから最新のバイナリをダウンロードして適当なフォルダに配置します。</p><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><p>続いて、Visual Studio Codeの設定に、下記のような内容を記述します。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">&quot;cmake.generator&quot;</span>: <span class="string">&quot;Ninja&quot;</span>, <span class="attr">&quot;cmake.configureSettings&quot;</span>: &#123; <span class="attr">&quot;CMAKE\_MAKE\_PROGRAM&quot;</span>: <span class="string">&quot;D:/Works/Lib/Ninja/1.8.2/ninja.exe&quot;</span> &#125; &#125;</span><br></pre></td></tr></table></figure><p>設定後、Visual Studio Codeを再起動し、いつものように<strong>Cake: Quick Start</strong>的な感じで始めることが出来るようになっているはずです。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> その他 </category>
          
          <category> CMake </category>
          
          <category> Visual Studio Code </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その89 dlibの顔検出性能をCUDA ON/OFFで比較</title>
      <link href="2017/08/26/2498/"/>
      <url>2017/08/26/2498/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>前回は<strong>dlib</strong>をCUDAを有効にしたバイナリ、無効にしたバイナリを生成しました。</p><p>具体的に、CUDAを有効にしている状態で、どれだけ性能差が出るのかを比較したいと思います。</p><h1 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h1><p>まずは、実験に使う画像を用意します。<br>今回は下記を用意しました。</p><p><a href="../../../../public/2017/07/G7_summit_at_Shimakan_thumbnail.jpg"><img src="../../../../public/2017/07/G7_summit_at_Shimakan_thumbnail.jpg"></a><br> <strong>元画像: <a href="https://upload.wikimedia.org/wikipedia/commons/b/b7/G7/_summit/_at/_Shimakan.jpg">https://upload.wikimedia.org/wikipedia/commons/b/b7/G7\_summit\_at\_Shimakan.jpg</a></strong> 4368x2912の大きなサイズです。<br>次に計測を行うソースです。<br><strong>examples\face_detection_ex.cpp</strong>という顔検出のサンプルがあります。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlib/image\_processing/frontal\_face\_detector.h&gt; #include &lt;dlib/gui\_widgets.h&gt; #include &lt;dlib/image\_io.h&gt; #include &lt;iostream&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> dlib; <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="comment">// ----------------------------------------------------------------------------------------  </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>\*\* argv)</span> </span>&#123; <span class="keyword">try</span> &#123; <span class="keyword">if</span> (argc == <span class="number">1</span>) &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Give some image files as arguments to this program.&quot;</span> &lt;&lt; <span class="built_in">endl</span>; <span class="keyword">return</span> <span class="number">0</span>; &#125;  </span><br><span class="line">frontal\_face\_detector detector = get\_frontal\_face\_detector(); image\_window win;  </span><br><span class="line"><span class="comment">// Loop over all the images provided on the command line. for (int i = 1; i &lt; argc; ++i) &#123; cout &lt;&lt; &quot;processing image &quot; &lt;&lt; argv\[i\] &lt;&lt; endl; array2d&lt;unsigned char&gt; img; load\_image(img, argv\[i\]); // Make the image bigger by a factor of two. This is useful since // the face detector looks for faces that are about 80 by 80 pixels // or larger. Therefore, if you want to find faces that are smaller // than that then you need to upsample the image as we do here by // calling pyramid\_up(). So this will allow it to detect faces that // are at least 40 by 40 pixels in size. We could call pyramid\_up() // again to find even smaller faces, but note that every time we // upsample the image we make the detector run slower since it must // process a larger image. pyramid\_up(img);  </span></span><br><span class="line"><span class="comment">// Now tell the face detector to give us a list of bounding boxes // around all the faces it can find in the image. std::vector&lt;rectangle&gt; dets = detector(img);  </span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Number of faces detected: &quot;</span> &lt;&lt; dets.size() &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// Now we show the image on the screen and the face detections as // red overlay boxes. win.clear\_overlay(); win.set\_image(img); win.add\_overlay(dets, rgb\_pixel(255,0,0));  </span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Hit enter to process the next image...&quot;</span> &lt;&lt; <span class="built_in">endl</span>; <span class="built_in">cin</span>.get(); &#125; &#125; <span class="keyword">catch</span> (exception&amp; e) &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\\nexception thrown!&quot;</span> &lt;&lt; <span class="built_in">endl</span>; <span class="built_in">cout</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">endl</span>; &#125; &#125;</span><br></pre></td></tr></table></figure><p>これに対して、上述の画像を認識させると<br><a href="../../../../public/2017/07/result.jpg"><img src="../../../../public/2017/07/result.jpg"></a><br> こうなります。</p><h1 id="Try"><a href="#Try" class="headerlink" title="Try"></a>Try</h1><p>このソースを下記のように改造します。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlib/image\_processing/frontal\_face\_detector.h&gt; #include &lt;dlib/gui\_widgets.h&gt; #include &lt;dlib/image\_io.h&gt; #include &lt;iostream&gt; #include &lt;chrono&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> dlib; <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="comment">// ----------------------------------------------------------------------------------------  </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>\*\* argv)</span> </span>&#123; <span class="keyword">try</span> &#123; <span class="keyword">if</span> (argc == <span class="number">1</span>) &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Give some image files as arguments to this program.&quot;</span> &lt;&lt; <span class="built_in">endl</span>; <span class="keyword">return</span> <span class="number">0</span>; &#125;  </span><br><span class="line">frontal\_face\_detector detector = get\_frontal\_face\_detector(); image\_window win;  </span><br><span class="line"><span class="built_in">std</span>::chrono::system\_clock::time\_point start, end; start = <span class="built_in">std</span>::chrono::system\_clock::now();  </span><br><span class="line"><span class="comment">// Loop over all the images provided on the command line. for (int c = 0; c &lt; 100; c++) for (int i = 1; i &lt; argc; ++i) &#123; cout &lt;&lt; &quot;processing image &quot; &lt;&lt; argv\[i\] &lt;&lt; endl; array2d&lt;unsigned char&gt; img; load\_image(img, argv\[i\]); // Make the image bigger by a factor of two. This is useful since // the face detector looks for faces that are about 80 by 80 pixels // or larger. Therefore, if you want to find faces that are smaller // than that then you need to upsample the image as we do here by // calling pyramid\_up(). So this will allow it to detect faces that // are at least 40 by 40 pixels in size. We could call pyramid\_up() // again to find even smaller faces, but note that every time we // upsample the image we make the detector run slower since it must // process a larger image. pyramid\_up(img);  </span></span><br><span class="line"><span class="comment">// Now tell the face detector to give us a list of bounding boxes // around all the faces it can find in the image. std::vector&lt;rectangle&gt; dets = detector(img);  </span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;Number of faces detected: &quot; &lt;&lt; dets.size() &lt;&lt; endl; // Now we show the image on the screen and the face detections as // red overlay boxes. //win.clear\_overlay(); //win.set\_image(img); //win.add\_overlay(dets, rgb\_pixel(255,0,0));  </span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;Hit enter to process the next image...&quot; &lt;&lt; endl; //cin.get(); &#125;  </span></span><br><span class="line">end = <span class="built_in">std</span>::chrono::system\_clock::now(); <span class="keyword">double</span> elapsed = <span class="built_in">std</span>::chrono::duration\_cast&lt;<span class="built_in">std</span>::chrono::milliseconds&gt;(end-start).count(); <span class="comment">//ミリ秒に変換  </span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::fixed; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Total: &quot;</span> &lt;&lt; <span class="built_in">std</span>::setprecision(<span class="number">4</span>) &lt;&lt; elapsed &lt;&lt; <span class="built_in">endl</span>; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Average: &quot;</span> &lt;&lt; <span class="built_in">std</span>::setprecision(<span class="number">4</span>) &lt;&lt; elapsed / <span class="number">100</span> &lt;&lt; <span class="built_in">endl</span>; &#125; <span class="keyword">catch</span> (exception&amp; e) &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\\nexception thrown!&quot;</span> &lt;&lt; <span class="built_in">endl</span>; <span class="built_in">cout</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">endl</span>; &#125; &#125;</span><br></pre></td></tr></table></figure><p>要するに、入力した画像ファイルを100回認識させ、その処理に要した合計時間と平均時間を算出するようにしただけです。<br>下記がその結果です。</p><p>Left align</p><p>Total(ms)</p><p>Average(ms)</p><p>w/o CUDA</p><p>1007778.0000</p><p>10077.7800</p><p>w/ CUDA</p><p>997522.0000</p><p>9975.2200</p><p>正直微妙です。約10%しか差がありません。</p>]]></content>
      
      
      <categories>
          
          <category> マルチメディア </category>
          
          <category> gpupu </category>
          
          <category> CUDA </category>
          
          <category> 機械学習 </category>
          
          <category> GPUPU </category>
          
          <category> dlib </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでLinuxと遊んでみる Visual Studio Code編 第8回</title>
      <link href="2017/08/22/2619/"/>
      <url>2017/08/22/2619/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>前回は、自作のSharedライブラリに定義された関数をP/Invokeで呼び出してみました。</p><p>しかしながら、毎回毎回 <strong>/usr/local/lib</strong> とかにコピーするのってどうなんでしょう?<br>Windowsみたいに、実行ファイルと同じディレクトリにSharedライブラリを配置しても動作するのでしょうか?<br>Windowsの場合、exeが呼び出すdllは、実行ファイルから以下の順序で検索されます。</p><ol><li>実行中のプロセスの実行形式モジュールがあるフォルダー。</li><li>現在のフォルダー。</li><li>Windows システム フォルダー。<br>このフォルダーへのパスは、GetSystemDirectory 関数が取得します。</li><li>Windows ディレクトリ。<br>このフォルダーへのパスは、GetWindowsDirectory 関数が取得します。</li><li>環境変数 PATH 内に記述されたフォルダー。</li></ol><p>Linuxの場合、3,4以外は同じ条件で試すことができそうです。<br>ただ、.NET Coreの場合、<strong>dotnet run</strong>で動作する場合のカレントディレクトリに関して情報がないので、2もちょっと先送り。<br>最終的に下記の内容をテストしてみます。</p><ol><li>Sharedライブラリをシステムから削除</li><li>Sharedライブラリを実行ファイルと同じフォルダに配置</li><li>LD_LIBRARY_PATHと実行ファイルと同じフォルダの優先順位</li></ol><h1 id="Try"><a href="#Try" class="headerlink" title="Try"></a>Try</h1><p>サンプルは、<a href="https://taktak.jp/2017/08/19/net%e3%81%a7linux%e3%81%a8%e9%81%8a%e3%82%93%e3%81%a7%e3%81%bf%e3%82%8b-visual-studio-code%e7%b7%a8-%e7%ac%ac7%e5%9b%9e/">.NETでLinuxと遊んでみる Visual Studio Code編 第7回</a>と同じものを使います。</p><h2 id="Sharedライブラリをシステムから削除"><a href="#Sharedライブラリをシステムから削除" class="headerlink" title="Sharedライブラリをシステムから削除"></a>Sharedライブラリをシステムから削除</h2><p>これは動かないはずです。<br>実行ファイルと同じディレクトリ、/usr/local/lib64にSharedライブラリが存在しないことを確認してから実行してみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ sudo updatedb</span><br><span class="line">$ sudo locate libCppLib.so</span><br><span class="line">/home/xxxxxx/Work/Demo/DotNetCoreLinux6/CppLib/build/libCppLib.so</span><br><span class="line">/home/xxxxxx/Work/Demo/DotNetCoreLinux6/CsharpApp/bin/Debug/netcoreapp2.0/libCppLib.so.bak</span><br><span class="line">$ <span class="built_in">export</span> | grep LD_LIBRARY_PATH</span><br><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/home/xxxxxx/Work/Demo/DotNetCoreLinux6/CsharpApp</span><br><span class="line">$ dotnet run 20 50</span><br><span class="line">Unhandled Exception: System.DllNotFoundException: Unable to load DLL <span class="string">&#x27;libCppLib.so&#x27;</span>: The specified module or one of its dependencies could not be found.</span><br><span class="line"> (Exception from HRESULT: 0x8007007E)</span><br><span class="line">   at CsharpApp.Program.Add(Int32 x, Int32 y)</span><br><span class="line">   at CsharpApp.Program.Main(String[] args) <span class="keyword">in</span> /home/xxxxxx/Work/Demo/DotNetCoreLinux6/CsharpApp/Program.cs:line 15</span><br></pre></td></tr></table></figure><p>Windowsと同じように、<strong>System.DllNotFoundException</strong>がスローされました。<br>期待通りです。</p><h2 id="Sharedライブラリを実行ファイルと同じフォルダに配置"><a href="#Sharedライブラリを実行ファイルと同じフォルダに配置" class="headerlink" title="Sharedライブラリを実行ファイルと同じフォルダに配置"></a>Sharedライブラリを実行ファイルと同じフォルダに配置</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/home/xxxxxx/Work/Demo/DotNetCoreLinux6/CsharpApp</span><br><span class="line">$ ls -la bin/Debug/netcoreapp2.0/</span><br><span class="line">合計 32</span><br><span class="line">drwxrwxr-x 2 xxxxxx xxxxxx  171  8月 21 23:50 .</span><br><span class="line">drwxrwxr-x 3 xxxxxx xxxxxx   27  8月 19 06:58 ..</span><br><span class="line">-rw-rw-r-- 1 xxxxxx xxxxxx  437  8月 19 07:41 CsharpApp.deps.json</span><br><span class="line">-rw-rw-r-- 1 xxxxxx xxxxxx 4608  8月 21 23:43 CsharpApp.dll</span><br><span class="line">-rw-rw-r-- 1 xxxxxx xxxxxx  568  8月 21 23:43 CsharpApp.pdb</span><br><span class="line">-rw-rw-r-- 1 xxxxxx xxxxxx  206  8月 19 07:41 CsharpApp.runtimeconfig.dev.json</span><br><span class="line">-rw-rw-r-- 1 xxxxxx xxxxxx  146  8月 19 07:41 CsharpApp.runtimeconfig.json</span><br><span class="line">-rwxr-xr-x 1 root   root   8016  8月 19 07:56 libCppLib.so</span><br><span class="line">$ dotnet run 20 50</span><br><span class="line">20 + 50 = 70</span><br></pre></td></tr></table></figure><p>きちんと動作しました。</p><h2 id="LD-LIBRARY-PATHと実行ファイルと同じフォルダの優先順位"><a href="#LD-LIBRARY-PATHと実行ファイルと同じフォルダの優先順位" class="headerlink" title="LD_LIBRARY_PATHと実行ファイルと同じフォルダの優先順位"></a>LD_LIBRARY_PATHと実行ファイルと同じフォルダの優先順位</h2><p>これは気になりますね。<br>別に.NET Coreに関係なく、Linuxの仕組みと同じような気がしますが… 実行時、どちらが呼び出されたかわかるように、Sharedライブラリ側を修正します。<br><strong>実行ファイルに配置するSharedライブラリ</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123; <span class="built_in">printf</span>(<span class="string">&quot;from executed directory\n&quot;</span>);<span class="keyword">return</span> x + y; &#125;</span><br></pre></td></tr></table></figure><p><strong>/usr/local/lib64に配置するSharedライブラリ</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123; <span class="built_in">printf</span>(<span class="string">&quot;from /usr/local/lib64\n&quot;</span>);<span class="keyword">return</span> x + y; &#125;</span><br></pre></td></tr></table></figure><p>これらをそれぞれビルドして、**/usr/local/lib64<strong>、実行ファイルと同じディレクトリである **bin/Debug/netcoreapp2.0/</strong> にコピーします。<br>また、環境変数LD_LIBRARY_PATHに/usr/local/lib64を追加します。<br>一応、各ディレクトリにSharedライブラリがコピーされたことも確認しておきます。<br>そして、dotnet runで実行します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/home/xxxxxx/Work/Demo/DotNetCoreLinux6/CsharpApp</span><br><span class="line">$ <span class="built_in">export</span> LD_LIBRARY_PATH=/usr/<span class="built_in">local</span>/lib64</span><br><span class="line">$ sudo updatedb</span><br><span class="line">$ locate libCppLib.so</span><br><span class="line">/home/xxxxxx/Work/Demo/DotNetCoreLinux6/CppLib/build/libCppLib.so</span><br><span class="line">/home/xxxxxx/Work/Demo/DotNetCoreLinux6/CsharpApp/bin/Debug/netcoreapp2.0/libCppLib.so</span><br><span class="line">/usr/<span class="built_in">local</span>/lib64/libCppLib.so</span><br><span class="line">$ dotnet run 20 53</span><br><span class="line">from executed directory</span><br><span class="line">20 + 53 = 73</span><br><span class="line">$ rm bin/Debug/netcoreapp2.0/libCppLib.so</span><br><span class="line">$ dotnet run 20 53</span><br><span class="line">from /usr/<span class="built_in">local</span>/lib64</span><br><span class="line">20 + 53 = 73</span><br></pre></td></tr></table></figure><p>結果としては、実行フォルダのSharedライブラリが優先されました。<br>また、実行フォルダのSharedライブラリを削除しても、/usr/local/lib64のSharedライブラリが使用され、きちんと動作することもわかりました。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>結論としては、Windowsと同じく、実行ファイルのあるディレクトリに配置されているライブラリが優先のようですね。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET </category>
          
          <category> Linux </category>
          
          <category> C/C++ </category>
          
          <category> net-framework </category>
          
          <category> .NET Framework </category>
          
          <category> linux </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> Fedora </category>
          
          <category> net </category>
          
          <category> .NET Core </category>
          
          <category> .NETでLinuxと遊んでみる </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その88 C/C++からPythonを呼び出せない</title>
      <link href="2017/08/21/2645/"/>
      <url>2017/08/21/2645/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>前回、C/C++のコードからPythonを呼び出してみました。</p><p>が、自宅の環境だと、Windows 10で動作し、Windows 7で動作しないという問題が発生しました。</p><h2 id="Windows-10"><a href="#Windows-10" class="headerlink" title="Windows 10"></a>Windows 10</h2><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"> b:\\<span class="title">Release</span>&gt;<span class="title">ver</span>  </span></span><br><span class="line"><span class="function"><span class="title">Microsoft</span> <span class="title">Windows</span> \[<span class="title">Version</span> 10.0.15063\]  </span></span><br><span class="line"><span class="function"><span class="title">b</span>:\\<span class="title">Release</span>&gt;<span class="title">where</span> <span class="title">python</span> <span class="title">C</span>:\\<span class="title">Python27</span>\\<span class="title">python.exe</span> <span class="title">C</span>:\\<span class="title">Program</span> <span class="title">Files</span>\\<span class="title">Miniconda2</span>\\<span class="title">python.exe</span>  </span></span><br><span class="line"><span class="function"><span class="title">b</span>:\\<span class="title">Release</span>&gt;<span class="title">ConsoleApplication.exe</span> 10 </span></span><br></pre></td></tr></table></figure><h2 id="Windows-7"><a href="#Windows-7" class="headerlink" title="Windows 7"></a>Windows 7</h2><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"> D:\\<span class="title">Works</span>\\<span class="title">Demo</span>\\<span class="title">CppPython1</span>\\<span class="title">x64</span>\\<span class="title">Release</span>&gt;<span class="title">ver</span>  </span></span><br><span class="line"><span class="function"><span class="title">Microsoft</span> <span class="title">Windows</span> \[<span class="title">Version</span> 6.1.7601\]  </span></span><br><span class="line"><span class="function"><span class="title">D</span>:\\<span class="title">Works</span>\\<span class="title">Demo</span>\\<span class="title">CppPython1</span>\\<span class="title">x64</span>\\<span class="title">Release</span>&gt;<span class="title">where</span> <span class="title">python</span> <span class="title">C</span>:\\<span class="title">Program</span> <span class="title">Files</span>\\<span class="title">Miniconda2</span>\\<span class="title">python.exe</span>  </span></span><br><span class="line"><span class="function"><span class="title">D</span>:\\<span class="title">Works</span>\\<span class="title">Demo</span>\\<span class="title">CppPython1</span>\\<span class="title">x64</span>\\<span class="title">Release</span>&gt;<span class="title">ConsoleApplication.exe</span> <span class="title">ImportError</span>: <span class="title">No</span> <span class="title">module</span> <span class="title">named</span> <span class="title">site</span></span></span><br></pre></td></tr></table></figure><p>python.exeはPathが通っているのは間違いないのですが… きになるのは、Windows 10側はPythonインタプリタが一つ多いところ。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p>調べてみると、そこそこ発生している問題の様子。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://stackoverflow.com/questions/5599872/python-windows-importerror-no-module-named-site/32829580" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=stackoverflow.com"></img><div class="hbc-site-name">Stack Overflow</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded"></img></div><div class="hbc-text"><div class="hbc-title">ImportError: No module named site on Windows</div><div class="hbc-url">https://stackoverflow.com/questions/5599872/python-windows-importerror-no-module-named-site/32829580</div><div class="hbc-description">I am trying to install Python for the first time. I downloaded the following installer from the Python website:Python 2.7.1 Windows Install…</div></div></div></div></a></div></div><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://stackoverflow.com/questions/38465049/python-no-module-named-site" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=stackoverflow.com"></img><div class="hbc-site-name">Stack Overflow</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded"></img></div><div class="hbc-text"><div class="hbc-title">python &quot;No module named site&quot;</div><div class="hbc-url">https://stackoverflow.com/questions/38465049/python-no-module-named-site</div><div class="hbc-description">So I have searched this question before, and it&#39;s been answered satisfactorily for other users on stackoverflow (Python (Windows) - ImportEr…</div></div></div></div></a></div></div><p>ただ、どれも<strong>環境変数PYTHONHOME, PYTHONPATH</strong>を通せ、という説明だけで、私の環境は解決できませんでした。<br>そもそも、Windows 10側にはこの2つの環境変数は定義されていませんでしたし。<br>そんな中、日本語の開発者向けQ&amp;Aコミュニティ<strong>teratail</strong>で回答を見つけました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://teratail.com/questions/28234" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=teratail.com"></img><div class="hbc-site-name">teratail[テラテイル]</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://teratail.com/img/imgFacebookShare.png"></img></div><div class="hbc-text"><div class="hbc-title">windows7/64bit下のpythonでのreportlabのインストール｜teratail</div><div class="hbc-url">https://teratail.com/questions/28234</div><div class="hbc-description">windows7/64bit,pytho2.6環境でreportlabをインストールしようとすると、pythonが見つからない旨のメッセージが表示されてしまい、インストールができません。pdfの生成で使いたいのですが、もし不可能なのであれば他の手段も考慮に入れたいと思っています。…</div></div></div></div></a></div></div><p>ようするに、レジストリがおかしいよ、という話。<br>確かに、Windows 10側には指摘されているレジストリの項目が存在していましたが、Windows 7側にはありませんでした。<br>そのため、レジストリに適切な値を追加することで動作するようです。<br>上のteratailの回答では親切にもレジストリへの追加スクリプトも用意してありましたので、適切に書き換えて実行するだけです。<br>実行前に、問題のレジストリが存在しないことを確認してから実行します。<br>自分の環境では、<strong>Miniconda</strong>に関連付けたいので下記のように修正しました。<br>インストールしてあるMinicondaは4.0.5 64bit (Python 2.7.11)版でした。<br><strong>OS=64bit python=32bit用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00  </span><br><span class="line">\[HKEY\_LOCAL\_MACHINE\\SOFTWARE\\Wow6432Node\\Python\\PythonCore\\2.7\]  </span><br><span class="line">\[HKEY\_LOCAL\_MACHINE\\SOFTWARE\\Wow6432Node\\Python\\PythonCore\\2.7\\Help\]  </span><br><span class="line">\[HKEY\_LOCAL\_MACHINE\\SOFTWARE\\Wow6432Node\\Python\\PythonCore\\2.7\\Help\\MainPythonDocumentation\] @&#x3D;&quot;C:\\\\Program Files (x86)\\\\Miniconda2\\\\Doc\\\\python2713.chm&quot;  </span><br><span class="line">\[HKEY\_LOCAL\_MACHINE\\SOFTWARE\\Wow6432Node\\Python\\PythonCore\\2.7\\InstallPath\] @&#x3D;&quot;C:\\\\Program Files (x86)\\\\Miniconda2\\\\&quot;  </span><br><span class="line">\[HKEY\_LOCAL\_MACHINE\\SOFTWARE\\Wow6432Node\\Python\\PythonCore\\2.7\\InstallPath\\InstallGroup\] @&#x3D;&quot;Python 2.7&quot;  </span><br><span class="line">\[HKEY\_LOCAL\_MACHINE\\SOFTWARE\\Wow6432Node\\Python\\PythonCore\\2.7\\Modules\]  </span><br><span class="line">\[HKEY\_LOCAL\_MACHINE\\SOFTWARE\\Wow6432Node\\Python\\PythonCore\\2.7\\PythonPath\] @&#x3D;&quot;C:\\\\Program Files\\\\Miniconda2 (x86)\\\\Lib;C:\\\\Program Files\\\\Miniconda2 (x86)\\\\DLLs;C:\\\\Program Files (x86)\\\\Miniconda2\\\\Lib\\\\lib-tk&quot; </span><br></pre></td></tr></table></figure><p><strong>OS=64bit python=64bit または OS=32bit用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00  </span><br><span class="line">\[HKEY\_LOCAL\_MACHINE\\SOFTWARE\\Python\\PythonCore\\2.7\]  </span><br><span class="line">\[HKEY\_LOCAL\_MACHINE\\SOFTWARE\\Python\\PythonCore\\2.7\\Help\]  </span><br><span class="line">\[HKEY\_LOCAL\_MACHINE\\SOFTWARE\\Python\\PythonCore\\2.7\\Help\\MainPythonDocumentation\] @&#x3D;&quot;C:\\\\Program Files\\\\Miniconda2\\\\Doc\\\\python2713.chm&quot;  </span><br><span class="line">\[HKEY\_LOCAL\_MACHINE\\SOFTWARE\\Python\\PythonCore\\2.7\\InstallPath\] @&#x3D;&quot;C:\\\\Program Files\\\\Miniconda2\\\\&quot;  </span><br><span class="line">\[HKEY\_LOCAL\_MACHINE\\SOFTWARE\\Python\\PythonCore\\2.7\\InstallPath\\InstallGroup\] @&#x3D;&quot;Python 2.7&quot;  </span><br><span class="line">\[HKEY\_LOCAL\_MACHINE\\SOFTWARE\\Python\\PythonCore\\2.7\\Modules\]  </span><br><span class="line">\[HKEY\_LOCAL\_MACHINE\\SOFTWARE\\Python\\PythonCore\\2.7\\PythonPath\] @&#x3D;&quot;C:\\\\Program Files\\\\Miniconda2\\\\Lib;C:\\\\Program Files\\\\Miniconda2\\\\DLLs;C:\\\\Program Files\\\\Miniconda2\\\\Lib\\\\lib-tk&quot;</span><br></pre></td></tr></table></figure><p>上の内容を、**&lt;適当な名前&gt;.reg**とつけてファイルに保存し、ダブルクリックで実行します。<br>その後、プログラムを実行するとうまくいくようになりました、<br><a href="../../../../public/2017/08/6a69f2dcca0c98660993126e2b5a8910.png"><img src="../../../../public/2017/08/6a69f2dcca0c98660993126e2b5a8910.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> %e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%e8%a8%80%e8%aa%9e </category>
          
          <category> C/C++ </category>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その87 C/C++からPythonを呼び出す</title>
      <link href="2017/08/21/2634/"/>
      <url>2017/08/21/2634/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>Pythonはグルー言語、として有名ですが、C#から呼び出す、というか**.NET Framework<strong>上で動作するPythonの実装である</strong>IronPython**はもう期待できる状態ではありません。</p><p>ですが、Pythonで書かれたプログラムは豊富で、既存のプログラムから呼び出せるようにすると非常に便利なので、C/C++から呼び出す手法を習得してみます。<br>Visual Studioを想定しています。</p><h1 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h1><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p><strong>PythonMod.py</strong> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x, y</span>):</span></span><br><span class="line">  <span class="keyword">return</span> x + y </span><br></pre></td></tr></table></figure><p>足し算を行う関数です。</p><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><p><strong>ConsoleApplication.cpp</strong> </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ConsoleApplication.cpp : コンソール アプリケーションのエントリ ポイントを定義します。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BOOST_PYTHON_STATIC_LIB</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/python.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* scriptFileName = <span class="string">&quot;PythonMod.py&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* scriptAddFunc = <span class="string">&quot;add&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Py_Initialize();</span><br><span class="line"></span><br><span class="line">    boost::python::object modle = boost::python::<span class="keyword">import</span>(<span class="string">&quot;__main__&quot;</span>);</span><br><span class="line">    boost::python::object attr = modle.attr(<span class="string">&quot;__dict__&quot;</span>);</span><br><span class="line"></span><br><span class="line">    boost::python::exec_file(scriptFileName, attr, attr);</span><br><span class="line"></span><br><span class="line">    boost::python::object pythonFun = attr[scriptAddFunc];</span><br><span class="line"></span><br><span class="line">    boost::python::object v = pythonFun(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; boost::python::extract&lt;<span class="keyword">int</span>&gt;(v) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ソースはシンプルです。</p><h3 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h3><p>使用している関数の説明です。</p><h4 id="Py-Initialize"><a href="#Py-Initialize" class="headerlink" title="Py_Initialize"></a>Py_Initialize</h4><p>Python インタプリタを初期化。Python の埋め込みを行うアプリケーションでは、一番最初にこの関数を呼ぶ必要がある。</p><h4 id="boost-python-import"><a href="#boost-python-import" class="headerlink" title="boost::python::import"></a>boost::python::import</h4><p>指定した名前のモジュールをインポートします。<br>また、attr関数は指定した名前の属性を取得します。<br><strong>__dict</strong>は特殊な属性で、クラスに対して使用した場合は、クラスに属するクラス変数やメソッドのオブジェクトが保存されており、クラスのインスタンスに対して使用した場合は、インスタンス変数の辞書が保存されている。<br>このあたりはお約束的なコードになる。</p><h4 id="boost-python-exec-file"><a href="#boost-python-exec-file" class="headerlink" title="boost::python::exec_file"></a>boost::python::exec_file</h4><p>指定したファイル名のPythonスクリプトを実行します。<br>ただ、実行するといっても、この時点では何か実行されるわけではないです。<br>似た関数として、<strong>boost::python::exec</strong>もあるが、こちらはPythonスクリプトの中身の文字列そのものを読み込む。<br>意味的には、第2引数、第3引数に指定した変数にデータを読み込んでいる感じ。</p><h4 id="attr-scriptAddFunc"><a href="#attr-scriptAddFunc" class="headerlink" title="attr[scriptAddFunc]"></a>attr[scriptAddFunc]</h4><p>先の説明にあったように、<strong>__dict</strong>属性は、メソッドや変数を保持している特殊な属性である。<br>そのため、<strong>exec_file</strong>で読み込んだ後は、メソッドなどを名前で検索できるようになっている。<br>先に示したPythonスクリプト内の<strong>add</strong>メソッドをオブジェクトとして取得しています。</p><h4 id="boost-python-object-v-pythonFun-2-5"><a href="#boost-python-object-v-pythonFun-2-5" class="headerlink" title="boost::python::object v = pythonFun(2, 5);"></a>boost::python::object v = pythonFun(2, 5);</h4><p>オブジェクトとして取得したaddメソッドに引数を与えて実行しています。</p><h4 id="boost-python-extract-gt-v"><a href="#boost-python-extract-gt-v" class="headerlink" title="boost::python::extract&gt;(v)"></a>boost::python::extract<int>&gt;(v)</h4><p>実行したaddメソッドの戻りを適切な型に変換しています。</p><h3 id="VC-Project-Setting"><a href="#VC-Project-Setting" class="headerlink" title="VC++ Project Setting"></a>VC++ Project Setting</h3><p>VC++のプロジェクトの設定として</p><h4 id="Include-Directory"><a href="#Include-Directory" class="headerlink" title="Include Directory"></a>Include Directory</h4><ul><li><strong>C:\Program Files\Miniconda2\pkgs\python-2.7.13-0\include</strong> <strong>Miniconda</strong>をインストールしている場合はここだが、環境依存。</li><li><strong>&lt;boost_dir&gt;</strong> boostのインストールディレクトリ。このディレクトリから<strong>boost/python.hpp</strong>が参照できる</li></ul><h4 id="Additional-Library-Directory"><a href="#Additional-Library-Directory" class="headerlink" title="Additional Library Directory"></a>Additional Library Directory</h4><ul><li><strong>C:\Program Files\Miniconda2\pkgs\python-2.7.13-0\libs</strong> <strong>Miniconda</strong>をインストールしている場合はここだが、環境依存。</li><li><strong>&lt;boost_dir&gt;\lib64-msvc-14.0</strong> インストールしているboostのバージョンに依存。</li></ul><h4 id="Additional-Library"><a href="#Additional-Library" class="headerlink" title="Additional Library"></a>Additional Library</h4><ul><li><strong>python27.lib</strong></li><li>boostのlib ソース側で<strong>BOOST_PYTHON_STATIC_LIB</strong>を指定しているため指定不要。boostを静的にリンクすることになる。</li></ul><h1 id="Try"><a href="#Try" class="headerlink" title="Try"></a>Try</h1><p>特に考えず、普通にビルドして実行するだけです。<br>注意するのは、Pythonスクリプトを実行ファイルと同一ディレクトリに配置することくらいです。<br><strong>2+5</strong>の結果が正しく表示されています。</p><p><a href="../../../../public/2017/08/48c5ac4d726ce08cdbecdc1bfbd36f85.png"><img src="../../../../public/2017/08/48c5ac4d726ce08cdbecdc1bfbd36f85.png"></a></p><p><strong>PythonMod.py</strong>のaddメソッドを積算に変更した場合。</p><p><a href="../../../../public/2017/08/aab897268891e0c75f4877ad78a758ed.png"><img src="../../../../public/2017/08/aab897268891e0c75f4877ad78a758ed.png"></a></p><p>C++側の修正なしで挙動の変更が可能です。<br>このあたりはIronPythonと同じです。</p>]]></content>
      
      
      <categories>
          
          <category> %e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%e8%a8%80%e8%aa%9e </category>
          
          <category> C/C++ </category>
          
          <category> Python </category>
          
          <category> その他 </category>
          
          <category> boost </category>
          
          <category> python-2 </category>
          
          <category> Boost.Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その86 Fedora 26 ServerでGitKrakenのデスクトップアイコンを表示する</title>
      <link href="2017/08/21/2629/"/>
      <url>2017/08/21/2629/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>前回、デスクトップにアイコンを表示できるようになりました。</p> <p>WindowsならExplorerからAlt+ドラッグアンドドロップでショートカットを作れます。<br>Linuxでも可能ですが、これで作られるのは、ただのシンボリックリンクです。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p><strong>結論から言うと、やり方がわかりませんでした＼(^o^)／</strong></p><p>ですが、ランチャに登録する方法はわかりました。<br>GithubGistにアイコンも含めて登録するスクリプトを書いてくださった方いました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://gist.github.com/aelkz/17528d2f6a5db73185c7dfbd28e49d18" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=gist.github.com"></img><div class="hbc-site-name">Gist</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://github.githubassets.com/images/modules/gists/gist-og-image.png"></img></div><div class="hbc-text"><div class="hbc-title">How to install gitkraken on Fedora [25,26,27] + launcher icon</div><div class="hbc-url">https://gist.github.com/aelkz/17528d2f6a5db73185c7dfbd28e49d18</div><div class="hbc-description">How to install gitkraken on Fedora [25,26,27] + launcher icon - [FEDORA] gitkraken</div></div></div></div></a></div></div><p>ただ、この方法だと、デスクトップに表示する方法で私の環境では動作しませんでした。<br>なので、少し書き換えて、ランチャに登録するようにしてみました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export PATH=\$PATH:/opt/gitkraken&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"></span><br><span class="line">wget http://img.informer.com/icons_mac/png/128/422/422255.png</span><br><span class="line">mv 422255.png /opt/gitkraken/icon.png</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ~/.<span class="built_in">local</span>/share/applications</span><br><span class="line"></span><br><span class="line">touch gitkraken.desktop</span><br><span class="line">vi gitkraken.desktop</span><br></pre></td></tr></table></figure><p>viで開いたテキストに下記の内容を入力して保存します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Name&#x3D;GitKraken</span><br><span class="line">Comment&#x3D;Git Flow</span><br><span class="line">Exec&#x3D;&#x2F;opt&#x2F;gitkraken&#x2F;gitkraken</span><br><span class="line">Icon&#x3D;&#x2F;opt&#x2F;gitkraken&#x2F;icon.png</span><br><span class="line">Terminal&#x3D;false</span><br><span class="line">Type&#x3D;Application</span><br><span class="line">Encoding&#x3D;UTF-8</span><br><span class="line">Categories&#x3D;Utility;Development;</span><br></pre></td></tr></table></figure><p>ランチャから<strong>GitKraken</strong>が見つかるようになりました。<br>アプリを起動し、お気に入りに追加することもできます。</p><p><a href="../../../../public/2017/08/08a108ca47a075c72548170833e80db0.png"><img src="../../../../public/2017/08/08a108ca47a075c72548170833e80db0-1024x668.png"></a></p><p>右クリックでメニューが表示されるので、<strong>お気に入りに追加</strong>をクリックします。</p><p><a href="../../../../public/2017/08/182e537fc3406f876214e4a213ef3ac0.png"><img src="../../../../public/2017/08/182e537fc3406f876214e4a213ef3ac0-1024x668.png"></a></p><p>左側のバーに追加されました。</p><p><a href="../../../../public/2017/08/02ffb98ff9ba5c1fffab88d09f3b9e61.png"><img src="../../../../public/2017/08/02ffb98ff9ba5c1fffab88d09f3b9e61-1024x668.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> バージョン管理システム </category>
          
          <category> Fedora </category>
          
          <category> git </category>
          
          <category> GitKraken </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その85 Fedora 26 Serverでデスクトップにアイコンを表示する</title>
      <link href="2017/08/20/2624/"/>
      <url>2017/08/20/2624/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p><strong>Fedora 26</strong>をインストールしたとき、デスクトップに何も表示されていませんし、アプリをデスクトップに表示したいと思いましたが方法がわからないのでメモ。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>そのものズバリな記事を書いていらっしゃる方がいました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://bitwalk.blogspot.jp/2016/12/gnome.html" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=bitwalk.blogspot.jp"></img><div class="hbc-site-name">bitwalk.blogspot.jp</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://1.bp.blogspot.com/-YlUonmrL_4E/VoOtbjPcImI/AAAAAAAAEZk/nMefjzdNxwI/w1200-h630-p-k-no-nu/gnome.png"></img></div><div class="hbc-text"><div class="hbc-title">GNOME デスクトップにアイコンを表示する</div><div class="hbc-url">http://bitwalk.blogspot.jp/2016/12/gnome.html</div><div class="hbc-description"> F edora 25 から、 Wayland  がデフォルトの ウィンドウシステム に採用されるようになりました。Wayland は、 X Window System  の代替を目指している Linux 向けに開発されたディスプレイサーバーのプロトコルで、 OpenGL ES …</div></div></div></div></a></div></div><p><strong>Gnome Tweak Tool</strong>をインストールして設定すれば使えるとのこと。<br>下記でインストール可能。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo dnf install -y gnome-tweak-tool</span><br><span class="line">$ <span class="built_in">which</span> gnome-tweak-tool</span><br><span class="line">/usr/bin/gnome-tweak-tool</span><br></pre></td></tr></table></figure><p>起動は、デスクトップ画面で端末を立ち上げて、<strong>gnome-tweak-tool</strong>として起動します。</p><p><a href="../../../../public/2017/08/e36043fd0b41ad6403b27ef2dc5cfeff.png"><img src="../../../../public/2017/08/e36043fd0b41ad6403b27ef2dc5cfeff-1024x668.png"></a></p><p><strong>デスクトップ</strong>タブを選択します。</p><p><a href="../../../../public/2017/08/a412ed2d82ca2d8d8b541e42a04dd5af.png"><img src="../../../../public/2017/08/a412ed2d82ca2d8d8b541e42a04dd5af-1024x668.png"></a></p><p><strong>デスクトップにアイコンを表示する</strong>を有効にすると、アイコンが表示されます。</p><p><a href="../../../../public/2017/08/47c5d13c0bc776be9ff32aa6e54f573e.png"><img src="../../../../public/2017/08/47c5d13c0bc776be9ff32aa6e54f573e-1024x668.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> Fedora </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでLinuxと遊んでみる Visual Studio Code編 第7回</title>
      <link href="2017/08/19/2610/"/>
      <url>2017/08/19/2610/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>前々回は、<strong>GLibc</strong>内の関数をP/Invokeで呼び出してみました。</p><p>また、CMakeでビルドしたC++のライブラリで関数を公開してみました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://taktak.jp/2017/08/19/%E9%96%8B%E7%99%BA%E3%83%A1%E3%83%A2-%E3%81%9D%E3%81%AE84-visual-studio-code%E3%81%AEcmake%E3%81%8B%E3%82%89%E9%96%A2%E6%95%B0%E3%82%92export%E3%81%99%E3%82%8B/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=taktak.jp"></img><div class="hbc-site-name">taktak.jp</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">開発メモ その84 Visual Studio CodeのCMakeから関数をExportする – A certain engineer &quot;COMPLEX&quot;</div><div class="hbc-url">https://taktak.jp/2017/08/19/%E9%96%8B%E7%99%BA%E3%83%A1%E3%83%A2-%E3%81%9D%E3%81%AE84-visual-studio-code%E3%81%AEcmake%E3%81%8B%E3%82%89%E9%96%A2%E6%95%B0%E3%82%92export%E3%81%99%E3%82%8B/</div></div></div></div></a></div></div><p>これを利用して、.NET CoreでビルドしたC#のアプリケーションから、自作のC++ライブラリの関数を呼びだしてみます。</p><h1 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h1><p>C#とC++の簡単なプロジェクトを用意します。<br>今回のサンプルは </p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/takuya-takeuchi/Demo/tree/master/DotNetCoreLinux6" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/6241854?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">takuya-takeuchi/Demo</div><div class="hbc-url">https://github.com/takuya-takeuchi/Demo/tree/master/DotNetCoreLinux6</div><div class="hbc-description">Sample source code for Demonstration, Experiment and Test - takuya-takeuchi/Demo</div></div></div></div></a></div></div><p>になります。</p><p>サンプルは下記の構成になります。</p><ul><li>C++ 2つのint型の引数の和を返すAdd関数を備えたSharedライブラリ</li><li>C# コマンドラインの2つの引数を整数に変換し、その引数をAdd関数に渡した結果を標準出力に表示する実行アプリ</li></ul><h2 id="C"><a href="#C" class="headerlink" title="C#"></a>C#</h2><p><strong>Program.cs</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CsharpApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">DllImport(<span class="meta-string">&quot;libCppLib.so&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">Add</span>(<span class="params"><span class="keyword">int</span> x, <span class="keyword">int</span> y</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> x = <span class="keyword">int</span>.Parse(args[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">var</span> y = <span class="keyword">int</span>.Parse(args[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">var</span> sum = Add(x, y);</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;x&#125;</span> + <span class="subst">&#123;y&#125;</span> = <span class="subst">&#123;sum&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h2><p><strong>libCppLib.cpp</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123; <span class="keyword">return</span> x + y; &#125;</span><br></pre></td></tr></table></figure><p><strong>CMakeLists.txt</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>.<span class="number">0</span>)</span><br><span class="line"><span class="keyword">project</span>(CppLib VERSION <span class="number">0.0</span>.<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(CTest)</span><br><span class="line"><span class="keyword">enable_testing</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>(CppLib SHARED CppLib.cpp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CPACK_PROJECT_NAME <span class="variable">$&#123;PROJECT_NAME&#125;</span>)</span><br><span class="line"><span class="keyword">set</span>(CPACK_PROJECT_VERSION <span class="variable">$&#123;PROJECT_VERSION&#125;</span>)</span><br><span class="line"><span class="keyword">include</span>(CPack)</span><br></pre></td></tr></table></figure><h1 id="Try"><a href="#Try" class="headerlink" title="Try"></a>Try</h1><p>C++側は、Visual Studio Codeで、CMakeを使ってビルドします。<br>ビルド完了後、buildフォルダ配下に <strong>libCppLib.so</strong> が生成されます。<br>このファイルをシステムの共有フォルダに移動します。<br><strong>FHS (Filesystem Hierarchy Standard)</strong> のルールに従って適切なフォルダにSharedライブラリをコピーします。<br>今回は、**/usr/local/lib64**にコピーします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ file cp CppLib/build/libCppLib.so</span><br><span class="line">CppLib/build/libCppLib.so: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically</span><br><span class="line"> linked, BuildID[sha1]=73b7791b3eeb907e40dadcfbac6ec14df4da8eef, not stripped</span><br><span class="line">$ nm -D CppLib/build/libCppLib.so</span><br><span class="line">0000000000000760 T Add</span><br><span class="line">                 w _ITM_deregisterTMCloneTable</span><br><span class="line">                 w _ITM_registerTMCloneTable</span><br><span class="line">                 U _ZNSt8ios_base4InitC1Ev</span><br><span class="line">                 U _ZNSt8ios_base4InitD1Ev</span><br><span class="line">0000000000201028 B __bss_start</span><br><span class="line">                 U __cxa_atexit</span><br><span class="line">                 w __cxa_finalize</span><br><span class="line">                 w __gmon_start__</span><br><span class="line">0000000000201028 D _edata</span><br><span class="line">0000000000201030 B _end</span><br><span class="line">0000000000000764 T _fini</span><br><span class="line">00000000000005f8 T _init</span><br><span class="line">$ sudo cp CppLib/build/libCppLib.so /usr/<span class="built_in">local</span>/lib64</span><br></pre></td></tr></table></figure><p>きちんと、Sharedライブラリがx64形式になっていることと、Add関数が公開されていることを確認し、フォルダにコピーしています。</p><p>C#側もビルドしますが、ビルド完了後、<strong>環境変数LD_LIBRARY_PATH</strong>に <strong>/usr/local/lib64</strong> を追加します。<br>そうしないと、C#のアプリがライブラリを見つけることができません。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> CsharpApp</span><br><span class="line">$ dotnet restore</span><br><span class="line">$ dotnet build</span><br><span class="line">Microsoft (R) Build Engine version 15.3.409.57025 <span class="keyword">for</span> .NET Core</span><br><span class="line">Copyright (C) Microsoft Corporation. All rights reserved.</span><br><span class="line"></span><br><span class="line">  CsharpApp -&gt; /home/xxxxxx/Work/Demo/DotNetCoreLinux6/CsharpApp/bin/Debug/netcoreapp2.0/CsharpApp.dll</span><br><span class="line"></span><br><span class="line">Build succeeded.</span><br><span class="line">    0 Warning(s)</span><br><span class="line">    0 Error(s)</span><br><span class="line"></span><br><span class="line">Time Elapsed 00:00:10.24</span><br><span class="line">$ <span class="built_in">export</span> LD_LIBRARY_PATH=/usr/<span class="built_in">local</span>/lib64:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line">$ dotnet run 2 4</span><br><span class="line">2 + 4 = 6</span><br><span class="line">$ dotnet run 12 664</span><br><span class="line">12 + 664 = 676</span><br></pre></td></tr></table></figure><p>期待通りの結果になりました。<br>環境変数LD_LIBRARY_PATHへの追加は一時的なものですので、別のシェルを立ち上げたりすると、そのシェルでは認識しないので、再度追加するか永続的に認識するよう別途対応しましょう。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>自作ライブラリを使えるようになりました。<br>これによりLinuxでやれることが広がりました。</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/DotNetCoreLinux6">https://github.com/takuya-takeuchi/Demo/tree/master/DotNetCoreLinux6</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET </category>
          
          <category> Linux </category>
          
          <category> C/C++ </category>
          
          <category> net-framework </category>
          
          <category> .NET Framework </category>
          
          <category> linux </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> Fedora </category>
          
          <category> net </category>
          
          <category> C# </category>
          
          <category> .NET Core </category>
          
          <category> .NETでLinuxと遊んでみる </category>
          
          <category> Visual Studio Code </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その84 Visual Studio CodeのCMakeから関数をExportする</title>
      <link href="2017/08/19/2607/"/>
      <url>2017/08/19/2607/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>前回は、Visual Studio CodeからSharedライブラリを作成しました。</p><p>C#からSharedライブラリを呼び出すには、<strong>P/Invoke</strong>を使うしかありませんが、Sharedライブラリ側で関数をExportする必要があります。<br><strong>Visual C++**ならdefファイルでも定義するか、シンプルに</strong>C++/CLI**を使ってクラス経由で使えるようすることも一つの手ですが、Linuxでは後者は使えません。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>前回と同じように、Visual Studio Codeから<strong>CMake</strong>でテンプレートを作成し、Sharedライブラリを生成する状態まで準備します。<br>この状態で生成された*.soファイルを<strong>nm</strong>コマンドを <strong>-D</strong> オプションをつけて実行することで、ライブラリに含まれるシンボルを表示してみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ nm -D libTestCMake.so</span><br><span class="line">                 w _ITM_deregisterTMCloneTable</span><br><span class="line">                 w _ITM_registerTMCloneTable</span><br><span class="line">00000000000007ea T _Z9say_hellov</span><br><span class="line">                 U _ZNSt8ios_base4InitC1Ev</span><br><span class="line">                 U _ZNSt8ios_base4InitD1Ev</span><br><span class="line">                 U _ZSt4cout</span><br><span class="line">                 U _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc</span><br><span class="line">0000000000201030 B __bss_start</span><br><span class="line">                 U __cxa_atexit</span><br><span class="line">                 w __cxa_finalize</span><br><span class="line">                 w __gmon_start__</span><br><span class="line">0000000000201030 D _edata</span><br><span class="line">0000000000201038 B _end</span><br><span class="line">0000000000000868 T _fini</span><br><span class="line">00000000000006a8 T _init</span><br></pre></td></tr></table></figure><p>元のソースは</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">say_hello</span><span class="params">()</span></span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Hello, from TestCMake!\n&quot;</span>; &#125;</span><br></pre></td></tr></table></figure><p>です。<br>シンボルに<strong>say_hello</strong>という文字が見えます。<br>ですが、前後に不規則?な英数字が付与されています。</p><p>では、関数をExportしてみます。<br>ソースコードを下記のように修正し、ビルドした後、シンボルを表示してみます。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="keyword">void</span> <span class="title">say_hello</span><span class="params">()</span></span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Hello, from TestCMake!\n&quot;</span>; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ nm -D libTestCMake.so</span><br><span class="line">                 w _ITM_deregisterTMCloneTable</span><br><span class="line">                 w _ITM_registerTMCloneTable</span><br><span class="line">                 U _ZNSt8ios_base4InitC1Ev</span><br><span class="line">                 U _ZNSt8ios_base4InitD1Ev</span><br><span class="line">                 U _ZSt4cout</span><br><span class="line">                 U _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc</span><br><span class="line">0000000000201030 B __bss_start</span><br><span class="line">                 U __cxa_atexit</span><br><span class="line">                 w __cxa_finalize</span><br><span class="line">                 w __gmon_start__</span><br><span class="line">0000000000201030 D _edata</span><br><span class="line">0000000000201038 B _end</span><br><span class="line">0000000000000868 T _fini</span><br><span class="line">00000000000006a8 T _init</span><br><span class="line">00000000000007ea T say_hello</span><br></pre></td></tr></table></figure><p>今度は、<strong>say_hello</strong>という文字列が完全に表示されています。<br>無事に公開されているようです。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> C/C++ </category>
          
          <category> linux </category>
          
          <category> Fedora </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その83 Fedora 26 ServerでCMakeから共有ライブラリを作成する</title>
      <link href="2017/08/17/2594/"/>
      <url>2017/08/17/2594/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>前回は、Visual Studio CodeからC++で開発を行う環境の構築を行いました。</p><p>Visual Studio Codeでの開発情報も増えつつありますが、まだまだLinux上での開発記事は少ないです。<br>CMakeの知識が少ないと、</p><ul><li>.a <strong>Staticライブラリ</strong></li><li>.so <strong>Sharedライブラリ</strong></li></ul><p>の作成を切り替えることもままなりません。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h2 id="Initialize-Project"><a href="#Initialize-Project" class="headerlink" title="Initialize Project"></a>Initialize Project</h2><p><strong>CMake Tools</strong>を使うと、ボイラープレートよろしくプロジェクトのテンプレートを作成することができます。<br>まず、空のフォルダをVisual Studio Codeで開きます。</p><p><a href="../../../../public/2017/08/016628ad5797244d7c545a102175954e.png"><img src="../../../../public/2017/08/016628ad5797244d7c545a102175954e-1024x768.png"></a></p><p>次に、コマンドパレットから、<strong>CMake: Quick Start</strong>を選択または入力します。</p><p><a href="../../../../public/2017/08/6aea62a6c0929d0cf5e100b8fa1864ff.png"><img src="../../../../public/2017/08/6aea62a6c0929d0cf5e100b8fa1864ff-1024x276.png"></a></p><p>次に、プロジェクト名を入力します。</p><p><a href="../../../../public/2017/08/5ff2fb6ff7d8ddacba285309b543ec5b.png"><img src="../../../../public/2017/08/5ff2fb6ff7d8ddacba285309b543ec5b-1024x276.png"></a></p><p>次に、プロジェクトの種別を選択します。</p><ul><li>Library <strong>Staticライブラリ</strong></li><li>Executable 実行形式モジュール</li></ul><p>の2形式を選択できます。Staticライブラリは後で変更できます。<br>今回は、<strong>Library</strong>を選択。</p><p><a href="../../../../public/2017/08/1b65a6a9b2de786640a61678d20f460f.png"><img src="../../../../public/2017/08/1b65a6a9b2de786640a61678d20f460f-1024x276.png"></a></p><p>ビルド構成を選択します。</p><p><a href="../../../../public/2017/08/304689f7220de3666d6a320a9742f216.png"><img src="../../../../public/2017/08/304689f7220de3666d6a320a9742f216-1024x276.png"></a><br> これでテンプレートが完成します。</p><h2 id="Build-Project"><a href="#Build-Project" class="headerlink" title="Build Project"></a>Build Project</h2><p>この状態で、一度ビルドを行います。<br>コマンドパレットから、<strong>CMake: Build</strong>を選択または入力します。</p><p><a href="../../../../public/2017/08/d72e8a8f47d1b26846515e0808eaa206.png"><img src="../../../../public/2017/08/d72e8a8f47d1b26846515e0808eaa206-1024x276.png"></a></p><p>ビルドが成功すると、<strong>build</strong>フォルダの配下に、<strong>lib&lt;プロジェクト名&gt;.a</strong>が生成されます。</p><p><a href="../../../../public/2017/08/32f0b672b8578bcc6b7d3bc9709f00ea.png"><img src="../../../../public/2017/08/32f0b672b8578bcc6b7d3bc9709f00ea-1024x768.png"></a><br> テンプレートなので、ソースファイルは、**&lt;プロジェクト名&gt;.cpp**という下記の内容のファイルです。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="keyword">void</span> say\_hello()&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Hello, from TestCMake!\\n&quot;</span>; &#125;</span><br></pre></td></tr></table></figure><p>シンプルですが、これでStaticライブラリが簡単に生成できます。</p><h2 id="Create-Shared-Library-so"><a href="#Create-Shared-Library-so" class="headerlink" title="Create Shared Library (*.so)"></a>Create Shared Library (*.so)</h2><p>続いては、Sharedライブラリを作成する方法です。<br><strong>CMakeLists.txt</strong>を開きます。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add\_library(TestCMake TestCMake.cpp)</span><br></pre></td></tr></table></figure><p>を</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add\_library(TestCMake SHARED TestCMake.cpp)</span><br></pre></td></tr></table></figure><p>に変更し、再度ビルドします。<br>すると、今度は、<strong>build</strong>フォルダの配下に、<strong>lib&lt;プロジェクト名&gt;.so</strong>が生成されます。</p><p><a href="../../../../public/2017/08/d0f31abbf02d03448d693fdd1e5c042b.png"><img src="../../../../public/2017/08/d0f31abbf02d03448d693fdd1e5c042b-1024x768.png"></a><br> Sharedライブラリを作れるようになったので、C#からP/Invokeで呼び出すこともできるようになります。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> Visual Studio </category>
          
          <category> Fedora </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでLinuxと遊んでみる Visual Studio Code編 第6回</title>
      <link href="2017/08/17/2578/"/>
      <url>2017/08/17/2578/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>前回は、<strong>Visual Studio Code</strong>からデバッグしてみました。</p><p>今回は、.NET Core 2.0をインストールし、Visual Studio Codeから実行してみます。<br>公式ページにはコマンドプロンプトから実行していますので、動作確認も含んでいます。</p><p>また、今回から、対象が<strong>Red Hat Enterprise Linux</strong>から<strong>Fedora</strong>に変わりました。</p><h1 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h1><h2 id="Install-NET-Core-2-0-0"><a href="#Install-NET-Core-2-0-0" class="headerlink" title="Install .NET Core 2.0.0"></a>Install .NET Core 2.0.0</h2><p>公式ページを参考にしてインストール。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://www.microsoft.com/net/core#linuxfedora" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=www.microsoft.com"></img><div class="hbc-site-name">Microsoft</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://dotnet.microsoft.com/static/images/redesign/social/square.png"></img></div><div class="hbc-text"><div class="hbc-title">Download .NET (Linux, macOS, and Windows)</div><div class="hbc-url">https://www.microsoft.com/net/core#linuxfedora</div><div class="hbc-description">Free downloads for building and running .NET apps on Linux, macOS, and Windows. Runtimes, SDKs, and developer packs for .NET Framework, .NET…</div></div></div></div></a></div></div><p>下記のコマンドを実行するだけです。<br>インストール先が、**/dotnet**なので、気に入らなければ変更します。<br>ただ、公式ページの警告</p><blockquote><p>Note, a user-controlled directory must be used when installing from tar.gz on Linux systems.</p></blockquote><p>を考えると、ユーザーが制御できるフォルダにするべき、とあるのでホームが無難でしょう。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo dnf install libunwind libicu</span><br><span class="line">$ curl -sSL -o dotnet.tar.gz https://aka.ms/dotnet-sdk-2.0.0-linux-x64</span><br><span class="line">$ mkdir -p ~/dotnet &amp;&amp; tar zxf dotnet.tar.gz -C ~/dotnet</span><br><span class="line">$ <span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/dotnet</span><br><span class="line">$ rm dotnet.tar.gz</span><br></pre></td></tr></table></figure><p>バージョン情報を調べると、きちんと<strong>2.0.0</strong>になっています。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet --version</span><br><span class="line">2.0.0</span><br></pre></td></tr></table></figure><h2 id="Test-NET-Core-2-0-0"><a href="#Test-NET-Core-2-0-0" class="headerlink" title="Test .NET Core 2.0.0"></a>Test .NET Core 2.0.0</h2><p>こちらも公式ページを参考に、CUIでテストします。<br>カレントに<strong>hwapp</strong>フォルダを作成し、そこで初期化処理を行い、実行します。<br><strong>Hello World!</strong> と表示されれば成功です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet new console -o hwapp</span><br><span class="line">$ <span class="built_in">cd</span> hwapp</span><br><span class="line">$ dotnet run</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><h1 id="Try"><a href="#Try" class="headerlink" title="Try"></a>Try</h1><p>ここからはVisual Studio Codeを使います。<br>Visual Studio Codeから先ほどのhwappフォルダを開きます。<br>この時、</p><p><strong>The .NET CLI tools cannnot be located. .NET Core debugging will not be enabled. Make sure .NET CLI tools are installed and are on the path.</strong></p><p>という警告が表示されるかもしれません。</p><p>これは、普通に.NET Core SDKのことを指しています。先ほどインストールしたものがそうですので、Visual Studio Codeから認識できていません。<br>この状態だと、ビルドしても、 </p><p><a href="../../../../public/2017/08/bb826afe55947d4405577c90b4deeeb6.png"><img src="../../../../public/2017/08/bb826afe55947d4405577c90b4deeeb6-1024x768.png"></a></p><p>というようにエラーになります。<br>なので、<strong>export PATH=$PATH:$HOME/dotnet</strong> を実行した端末(ターミナル)<br>からcodeを実行するか、</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi ~/.bash_profile</span><br></pre></td></tr></table></figure><p>で、末尾に、</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/dotnet</span><br></pre></td></tr></table></figure><p>を追加してから、codeを立ち上げるかのどちらかです。<br>再度立ち上げ直して、ビルド、デバッグ実行を行うと、<strong>launch.json</strong>や<strong>tasks.json</strong>の作成を要求されますので、指示に従います。<br>作成後、<strong>launch.json</strong>を開いて、</p><ul><li>&lt;insert-target-framework-here&gt;<ul><li><strong>.csproj</strong>の<strong>TargetFramework</strong>要素で置換。今回は、<strong>netcoreapp2.0</strong>です。</li></ul></li><li>&lt;insert-project-name-here&gt;<ul><li><strong>.csproj</strong>のファイル名部分です。今回は、<strong>hwapp</strong>です。</li></ul></li></ul><p>というように修正を行います。</p><p>その後、デバッグができるようになっているはずです。</p><p><a href="../../../../public/2017/08/e1df33be33b71d0b77f8ae14f8763e51.png"><img src="../../../../public/2017/08/e1df33be33b71d0b77f8ae14f8763e51-1024x768.png"></a></p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>2.0.0に変更されても、大きな違いはないです。しいて言うなら、プロジェクトファイルの仕様が、*.csprojに完全に戻ったことですかな。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET </category>
          
          <category> Linux </category>
          
          <category> net-framework </category>
          
          <category> .NET Framework </category>
          
          <category> linux </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> Fedora </category>
          
          <category> net </category>
          
          <category> Visual Studio Code </category>
          
          <category> .NET Core </category>
          
          <category> .NETでLinuxと遊んでみる </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その82 Fedora 26 ServerでVisual Studio CodeでのC++開発環境を準備する</title>
      <link href="2017/08/17/2567/"/>
      <url>2017/08/17/2567/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>もう<strong>Redhat Enterprise Linux</strong>には見切りを付けました。<br><strong>GLibc</strong>が古かったり、リポジトリが古かったり、さんざんな目に遭いました。<br>今後は、Fedoraをメインにしていきたいです。</p><p>そこで、開発環境を再度整えることになったので、メモしておきます。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h2 id="CMake"><a href="#CMake" class="headerlink" title="CMake"></a>CMake</h2><p><strong>RHEL</strong>とは異なり、CMakeは最初から<strong>ServerMode</strong>でビルドされていました。<br>またきちんと最新版が用意されています。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf -y install CMake</span><br></pre></td></tr></table></figure><h2 id="GCC-C"><a href="#GCC-C" class="headerlink" title="GCC C++"></a>GCC C++</h2><p>C++の開発をするのに必須のコンパイラー。<br>これも最新版が用意されています。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf -y install gcc-c++</span><br></pre></td></tr></table></figure><h2 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h2><p>Fedoraへのインストールは公式に書いてあります。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://code.visualstudio.com/docs/setup/linux" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=code.visualstudio.com"></img><div class="hbc-site-name">code.visualstudio.com</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://code.visualstudio.com/opengraphimg/opengraph-docs.png"></img></div><div class="hbc-text"><div class="hbc-title">Running Visual Studio Code on Linux</div><div class="hbc-url">https://code.visualstudio.com/docs/setup/linux</div><div class="hbc-description">Get Visual Studio Code up and running on Linux.</div></div></div></div></a></div></div><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc</span><br><span class="line">sudo sh -c <span class="string">&#x27;echo -e &quot;[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc&quot; &gt; /etc/yum.repos.d/vscode.repo&#x27;</span></span><br><span class="line">sudo dnf check-update</span><br><span class="line">sudo dnf install code</span><br></pre></td></tr></table></figure><p>次に拡張を追加します。<br>インストールする拡張は、</p><h3 id="C-C"><a href="#C-C" class="headerlink" title="C/C++"></a>C/C++</h3><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=marketplace.visualstudio.com"></img><div class="hbc-site-name">marketplace.visualstudio.com</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://ms-vscode.gallerycdn.vsassets.io/extensions/ms-vscode/cpptools/1.1.3/1607049308689/Microsoft.VisualStudio.Services.Icons.Default"></img></div><div class="hbc-text"><div class="hbc-title">C/C++ - Visual Studio Marketplace</div><div class="hbc-url">https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools</div><div class="hbc-description">Extension for Visual Studio Code - C/C++ IntelliSense, debugging, and code browsing.</div></div></div></div></a></div></div><h3 id="C"><a href="#C" class="headerlink" title="C#"></a>C#</h3><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=marketplace.visualstudio.com"></img><div class="hbc-site-name">marketplace.visualstudio.com</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://ms-dotnettools.gallerycdn.vsassets.io/extensions/ms-dotnettools/csharp/1.23.6/1605311230265/Microsoft.VisualStudio.Services.Icons.Default"></img></div><div class="hbc-text"><div class="hbc-title">C# - Visual Studio Marketplace</div><div class="hbc-url">https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp</div><div class="hbc-description">Extension for Visual Studio Code - C# for Visual Studio Code (powered by OmniSharp).</div></div></div></div></a></div></div><h3 id="CMake-1"><a href="#CMake-1" class="headerlink" title="CMake"></a>CMake</h3><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://marketplace.visualstudio.com/items?itemName=twxs.cmake" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=marketplace.visualstudio.com"></img><div class="hbc-site-name">marketplace.visualstudio.com</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://twxs.gallerycdn.vsassets.io/extensions/twxs/cmake/0.0.17/1488841920286/Microsoft.VisualStudio.Services.Icons.Default"></img></div><div class="hbc-text"><div class="hbc-title">CMake - Visual Studio Marketplace</div><div class="hbc-url">https://marketplace.visualstudio.com/items?itemName=twxs.cmake</div><div class="hbc-description">Extension for Visual Studio Code - CMake langage support for Visual Studio Code</div></div></div></div></a></div></div><h3 id="CMake-Tools"><a href="#CMake-Tools" class="headerlink" title="CMake Tools"></a>CMake Tools</h3><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://marketplace.visualstudio.com/items?itemName=vector-of-bool.cmake-tools" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=marketplace.visualstudio.com"></img><div class="hbc-site-name">marketplace.visualstudio.com</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://ms-vscode.gallerycdn.vsassets.io/extensions/ms-vscode/cmake-tools/1.5.3/1605649317747/Microsoft.VisualStudio.Services.Icons.Default"></img></div><div class="hbc-text"><div class="hbc-title">CMake Tools - Visual Studio Marketplace</div><div class="hbc-url">https://marketplace.visualstudio.com/items?itemName=vector-of-bool.cmake-tools</div><div class="hbc-description">Extension for Visual Studio Code - Extended CMake support in Visual Studio Code</div></div></div></div></a></div></div><h3 id="vscode-icons"><a href="#vscode-icons" class="headerlink" title="vscode-icons"></a>vscode-icons</h3><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://marketplace.visualstudio.com/items?itemName=robertohuertasm.vscode-icons" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=marketplace.visualstudio.com"></img><div class="hbc-site-name">marketplace.visualstudio.com</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://vscode-icons-team.gallerycdn.vsassets.io/extensions/vscode-icons-team/vscode-icons/11.0.0/1600368328068/Microsoft.VisualStudio.Services.Icons.Default"></img></div><div class="hbc-text"><div class="hbc-title">vscode-icons - Visual Studio Marketplace</div><div class="hbc-url">https://marketplace.visualstudio.com/items?itemName=robertohuertasm.vscode-icons</div><div class="hbc-description">Extension for Visual Studio Code - Icons for Visual Studio Code</div></div></div></div></a></div></div>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> Fedora </category>
          
          <category> Visual Studio Code </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その81 Fedora 26 ServerにVNC Serverをインストールする</title>
      <link href="2017/08/17/2556/"/>
      <url>2017/08/17/2556/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p><strong>Fedora 26 Server</strong>で<strong>GNOME</strong>をインストールした後です。<br>ちなみに、GNOMEのインストールは、</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ su -</span><br><span class="line"><span class="comment"># SELINUX=enforcing を SELINUX=disabled に変更</span></span><br><span class="line">$ vi /etc/sysconfig/selinux</span><br><span class="line">$ reboot</span><br><span class="line">$ sestatus</span><br><span class="line">SELinux status:                 disabled</span><br><span class="line"><span class="comment"># GNOMEのインストール</span></span><br><span class="line">$ sudo dnf -y group install <span class="string">&quot;Fedora Workstation&quot;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;exec /usr/bin/gnome-session&quot;</span> &gt;&gt; ~/.xinitrc</span><br><span class="line">$ sudo systemctl <span class="built_in">set</span>-default graphical.target</span><br><span class="line">Removed /etc/systemd/system/default.target.</span><br><span class="line">Created symlink /etc/systemd/system/default.target → /usr/lib/systemd/system/graphical.target.</span><br><span class="line">$ systemctl get-default</span><br><span class="line">graphical.target</span><br><span class="line">$ systemctl -f <span class="built_in">enable</span> gdm.service</span><br><span class="line">Created symlink /etc/systemd/system/display-manager.service → /usr/lib/systemd/system/gdm.service.</span><br><span class="line">$ systemctl restart gdm.service</span><br></pre></td></tr></table></figure><p>途中でさらっと流していますが、<strong>SELinux</strong>の無効化が大事です。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo dnf install tigervnc-server</span><br><span class="line">$ sudo firewall-cmd --add-service=vnc-server --permanent</span><br><span class="line">success</span><br><span class="line">$ sudo firewall-cmd --reload</span><br><span class="line">success</span><br></pre></td></tr></table></figure><h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><p>一度、起動してみて、繋がるかどうかを確認します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初回起動時にパスワードの設定と各種設定の自動実行</span></span><br><span class="line">$ vncserver</span><br><span class="line"></span><br><span class="line">You will require a password to access your desktops.</span><br><span class="line"></span><br><span class="line">Password:</span><br><span class="line">Verify:</span><br><span class="line">Would you like to enter a view-only password (y/n)? n</span><br><span class="line"></span><br><span class="line">New <span class="string">&#x27;XXXXXX-YYYYYY:1 (xxxxxx)&#x27;</span> desktop is XXXXXX-YYYYYY:1</span><br><span class="line"></span><br><span class="line">Creating default startup script /home/xxxxxx/.vnc/xstartup</span><br><span class="line">Creating default config /home/xxxxxx/.vnc/config</span><br><span class="line">Starting applications specified <span class="keyword">in</span> /home/xxxxxx/.vnc/xstartup</span><br><span class="line">Log file is /home/xxxxxx/.vnc/XXXXXX-YYYYYY:1.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 起動</span></span><br><span class="line">$ vncserver</span><br></pre></td></tr></table></figure><h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><p>自動起動の設定を行います。<br>まず設定ファイルを作成。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cp /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:1.service</span><br><span class="line">$ sudo vi /etc/systemd/system/vncserver@:1.service</span><br></pre></td></tr></table></figure><p>ファイル中の、という文字列をユーザー名で置換します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> vncserver@:1.service</span><br><span class="line">$ sudo systemctl start vncserver@:1.service</span><br></pre></td></tr></table></figure><p>この時、すぐに応答が帰ってこず、エラーが表示された場合、</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl status vncserver@\:1.service</span><br><span class="line">● vncserver@:1.service - Remote desktop service (VNC)</span><br><span class="line">   Loaded: loaded (/etc/systemd/system/vncserver@:1.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: failed (Result: timeout) since Thu 2017-08-17 09:20:55 JST; 1min 25s ago</span><br><span class="line">  Process: 3039 ExecStart=/usr/bin/vncserver :1 (code=exited, status=0/SUCCESS)</span><br><span class="line">  Process: 3034 ExecStartPre=/usr/bin/vncserver -<span class="built_in">kill</span> :1 (code=exited, status=0/SUCCESS)</span><br><span class="line"></span><br><span class="line"> 8月 17 09:20:52 XXXXXX-YYYYYY tracker-miner-fs.desktop[3373]: Received signal:15-&gt;<span class="string">&#x27;Terminated&#x27;</span></span><br><span class="line"> 8月 17 09:20:52 XXXXXX-YYYYYY tracker-extract.desktop[3371]: Received signal:15-&gt;<span class="string">&#x27;Terminated&#x27;</span></span><br><span class="line"> 8月 17 09:20:52 XXXXXX-YYYYYY tracker-miner-user-guides.desktop[3374]: Received signal:15-&gt;<span class="string">&#x27;Termina</span></span><br><span class="line"><span class="string"> 8月 17 09:20:52 XXXXXX-YYYYYY tracker-miner-user-guides.desktop[3374]: OK</span></span><br><span class="line"><span class="string"> 8月 17 09:20:52 XXXXXX-YYYYYY tracker-miner-apps.desktop[3372]: Received signal:15-&gt;&#x27;</span>Terminated<span class="string">&#x27;</span></span><br><span class="line"><span class="string"> 8月 17 09:20:52 XXXXXX-YYYYYY tracker-miner-apps.desktop[3372]: OK</span></span><br><span class="line"><span class="string"> 8月 17 09:20:52 XXXXXX-YYYYYY tracker-miner-fs.desktop[3373]: OK</span></span><br><span class="line"><span class="string"> 8月 17 09:20:55 XXXXXX-YYYYYY systemd[1]: Failed to start Remote desktop service (VNC).</span></span><br><span class="line"><span class="string"> 8月 17 09:20:55 XXXXXX-YYYYYY systemd[1]: vncserver@:1.service: Unit entered failed state.</span></span><br><span class="line"><span class="string"> 8月 17 09:20:55 XXXXXX-YYYYYY systemd[1]: vncserver@:1.service: Failed with result &#x27;</span>timeout<span class="string">&#x27;.</span></span><br></pre></td></tr></table></figure><p>起動がタイムアウトしている場合があります。<br>どうもSELinuxが悪さをしている感じがしました。OS再インストール後、SELinuxを無効化してから実行したら、この現象は発生しませんでした。</p><p>ただ、OS起動時のVNC自動起動で接続してもカーソルが表示されない状態になってしまって使い物になりません。</p><p>OS起動後、手動で<strong>vncserver</strong>で起動した場合は、正しく接続できましたので、しばらくはこれで対応します。</p><p>ですので、</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl <span class="built_in">disable</span> vncserver@:1.service</span><br></pre></td></tr></table></figure><p>で、自動起動を無効にしました。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> Fedora </category>
          
          <category> %e3%83%aa%e3%83%a2%e3%83%bc%e3%83%88%e3%83%87%e3%82%b9%e3%82%af%e3%83%88%e3%83%83%e3%83%97 </category>
          
          <category> VNC </category>
          
          <category> リモートデスクトップ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その80 Cent7/RHEL7でVisual Studio CodeでC++の開発をお勧めしない</title>
      <link href="2017/08/17/2558/"/>
      <url>2017/08/17/2558/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p><strong>Visual Studio Code</strong>は素晴らしい開発環境です。<br>Windows/Mac/Linuxで動作するマルチプラットフォーム対応が売りですが、Linuxはディストリビューションが多すぎて、コアの部分の挙動が異なります。<br>原因として、システムに使われているモジュールの依存関係が牙をむきます。<br>自分は、Visual Studio Codeの言語拡張機能である、**C/C++**を使っていました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=marketplace.visualstudio.com"></img><div class="hbc-site-name">marketplace.visualstudio.com</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://ms-vscode.gallerycdn.vsassets.io/extensions/ms-vscode/cpptools/1.1.3/1607049308689/Microsoft.VisualStudio.Services.Icons.Default"></img></div><div class="hbc-text"><div class="hbc-title">C/C++ - Visual Studio Marketplace</div><div class="hbc-url">https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools</div><div class="hbc-description">Extension for Visual Studio Code - C/C++ IntelliSense, debugging, and code browsing.</div></div></div></div></a></div></div><p>Microsoft謹製のツールで信頼がおける、と思っていました。</p><p>しかし、<strong>Redhat Enterprise Linux 7</strong>では、この拡張は動きませんでした。<br>拡張機能である、CMake Tools経由でビルドしてみました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://marketplace.visualstudio.com/items?itemName=vector-of-bool.cmake-tools" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=marketplace.visualstudio.com"></img><div class="hbc-site-name">marketplace.visualstudio.com</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://ms-vscode.gallerycdn.vsassets.io/extensions/ms-vscode/cmake-tools/1.5.3/1605649317747/Microsoft.VisualStudio.Services.Icons.Default"></img></div><div class="hbc-text"><div class="hbc-title">CMake Tools - Visual Studio Marketplace</div><div class="hbc-url">https://marketplace.visualstudio.com/items?itemName=vector-of-bool.cmake-tools</div><div class="hbc-description">Extension for Visual Studio Code - Extended CMake support in Visual Studio Code</div></div></div></div></a></div></div><p><a href="../../../../public/2017/08/1afca26085ef41a6a0aa2d04845c3469.png"><img src="../../../../public/2017/08/1afca26085ef41a6a0aa2d04845c3469-1024x719.png"></a></p><p> <strong>CMakeTools extension was unable to initialize: [cmake-server] Failed to activate protocol version: “generator” is unset but required.</strong></p><p> というエラーを吐いて、ビルドが停止します。</p><h1 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h1><p>一見、<strong>CMakeTools</strong>が悪いように思えます。<br>未確認ですが、CMakeToolsはServerModeで動作しているCMakeを経由して言語拡張にビルドを要求している?</p><p>ともかくとして、調べてみると、どうも<strong>GLibc</strong>のバージョンに問題があるようです。<br>CentOS7、RHEL7のGLibcは<strong>2.17</strong>がデフォルトでインストールされています。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ yum list installed | grep glibc</span><br><span class="line">Repo rhel-server-rhscl-7-rpms forced skip_if_unavailable=True due to: /etc/pki/entitlement/4481450522517738742-key.pem</span><br><span class="line">Repo rhel-7-server-dotnet-rpms forced skip_if_unavailable=True due to: /etc/pki/entitlement/4481450522517738742-key.pem</span><br><span class="line">Repo rhel-7-server-rpms forced skip_if_unavailable=True due to: /etc/pki/entitlement/4481450522517738742-key.pem</span><br><span class="line">Repo rhel-7-server-rt-rpms forced skip_if_unavailable=True due to: /etc/pki/entitlement/4481450522517738742-key.pem</span><br><span class="line">glibc.i686                         2.17-196.el7              @rhel-7-server-rpms</span><br><span class="line">glibc.x86_64                       2.17-196.el7              @rhel-7-server-rpms</span><br><span class="line">glibc-common.x86_64                2.17-196.el7              @rhel-7-server-rpms</span><br><span class="line">glibc-devel.i686                   2.17-196.el7              @rhel-7-server-rpms</span><br><span class="line">glibc-devel.x86_64                 2.17-196.el7              @rhel-7-server-rpms</span><br><span class="line">glibc-headers.x86_64               2.17-196.el7              @rhel-7-server-rpms</span><br></pre></td></tr></table></figure><p>ところが、C/C++言語拡張は<strong>2.18</strong>を要求します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ ldd /home/xxxxxx/.vscode/extensions/ms-vscode.cpptools-0.12.2/bin/Microsoft.VSCode.CPP.Extension.linux</span><br><span class="line">/home/xxxxxx/.vscode/extensions/ms-vscode.cpptools-0.12.2/bin/Microsoft.VSCode.CPP.Extension.linux: /lib64/libc.so.6: version `GLIBC_2.18<span class="string">&#x27; not found (required by /home/xxxxxx/.vscode/extensions/ms-vscode.cpptools-0.12.2/bin/Microsoft.VSCode.CPP.Extension.linux)</span></span><br><span class="line"><span class="string">        linux-vdso.so.1 =&gt;  (0x00007ffe613a7000)</span></span><br><span class="line"><span class="string">        libm.so.6 =&gt; /lib64/libm.so.6 (0x00007fb11b780000)</span></span><br><span class="line"><span class="string">        libpthread.so.0 =&gt; /lib64/libpthread.so.0 (0x00007fb11b564000)</span></span><br><span class="line"><span class="string">        libc.so.6 =&gt; /lib64/libc.so.6 (0x00007fb11b1a0000)</span></span><br><span class="line"><span class="string">        libdl.so.2 =&gt; /lib64/libdl.so.2 (0x00007fb11af9c000)</span></span><br><span class="line"><span class="string">        librt.so.1 =&gt; /lib64/librt.so.1 (0x00007fb11ad94000)</span></span><br><span class="line"><span class="string">        libgcc_s.so.1 =&gt; /lib64/libgcc_s.so.1 (0x00007fb11ab7d000)</span></span><br><span class="line"><span class="string">        /lib64/ld-linux-x86-64.so.2 (0x00007fb11ba98000)</span></span><br></pre></td></tr></table></figure><p>この問題は、Issueとして報告されています。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/Microsoft/vscode-cpptools/issues/293" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars2.githubusercontent.com/u/6154722?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">&quot;Connection to server is erroring&quot; on RHEL7.2 · Issue #293 · microsoft/vscode-cpptools</div><div class="hbc-url">https://github.com/Microsoft/vscode-cpptools/issues/293</div><div class="hbc-description">VSCode 1.6.1, Extension 0.9.2 I&amp;#39;m seeing error below when trying to use the extension on RHEL7.2: [4:18:22 PM] Connection to server is e…</div></div></div></div></a></div></div> <div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/Microsoft/vscode-cpptools/issues/19" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars2.githubusercontent.com/u/6154722?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">GLIBC 2.18 dependency · Issue #19 · microsoft/vscode-cpptools</div><div class="hbc-url">https://github.com/Microsoft/vscode-cpptools/issues/19</div><div class="hbc-description">This was copied from the reviews on the extension page. Not sure if it is a language service issue, or a debugger issue.</div></div></div></div></a></div></div><p>解決に向けて取り組んでいるようですが、<a href="https://github.com/Microsoft/vscode-cpptools/issues/19">#19</a>は2016年4月に報告されており、それからコメントが増え続けていますが、解決されていません。</p><p>Linuxのようにディストリビューションごとにコアのモジュールに大きく差が出てくると、かつてWindowsが陥った<a href="https://ja.wikipedia.org/wiki/DLL%E5%9C%B0%E7%8D%84">DLL地獄</a>のような問題は避けられないようですね。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> Red Hat Enterprise Linux </category>
          
          <category> Visual Studio Code </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その79 Fedora 26でSSHを有効にする</title>
      <link href="2017/08/16/2554/"/>
      <url>2017/08/16/2554/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>OSインストール直後、SSHは組み込まれていますが、デーモンとして起動していません。<br>インストールが終わり、ネットワークに接続できたら、何を差し置いても、まずはSSHを有効にしないと始まりません。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><h2 id="デーモンの起動"><a href="#デーモンの起動" class="headerlink" title="デーモンの起動"></a>デーモンの起動</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start sshd.service</span><br></pre></td></tr></table></figure><h2 id="OS起動時にデーモンも起動"><a href="#OS起動時にデーモンも起動" class="headerlink" title="OS起動時にデーモンも起動"></a>OS起動時にデーモンも起動</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl <span class="built_in">enable</span> sshd.service</span><br></pre></td></tr></table></figure><p>特に停止することはないので、停止、スタートアップ起動の無効化は不要ですね。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> Fedora </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その78 Intel NUC DN2820FYKHにFedora 26をインストールする</title>
      <link href="2017/08/16/2551/"/>
      <url>2017/08/16/2551/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>以前、Intel NUCにFedora 24をインストールして失敗しました。</p><p>最新のFedora 26をインストールしてみたところ普通に成功しました。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p>特に手順は変わりません。</p><ol><li><a href="http://www.pendrivelinux.com/universal-usb-installer-easy-as-1-2-3/">Universal USB Installer</a>でブータブルUSBを作成</li><li>USBから起動</li><li>Install to Hard Driveを選択してHDDにインストール</li></ol><p>という普通の手順です。<br>Fedora 24と異なり、何の問題もありませんでした。<br><strong>BIOS</strong>のバージョンは0056でした。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> Intel </category>
          
          <category> Fedora </category>
          
          <category> intel </category>
          
          <category> NUC </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その77 Red Hat Enterprise Linux 7.3でBlueZをビルドしてみる</title>
      <link href="2017/08/10/2540/"/>
      <url>2017/08/10/2540/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>前回はBluetoothを使ってみました。</p><p>ただ、これはCUIで操作していたので、使い勝手が悪いです。<br>せっかくなので、プログラムから使えるようにしてみたいです。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p>単純に、<strong>bluez</strong> をyumからインストールしても、ライブラリやヘッダーがインストールされないようなので、自分でビルドする必要があるようです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://www.kernel.org/pub/linux/bluetooth/bluez-5.44.tar.gz</span><br><span class="line">$ tar xfz bluez-5.44.tar.gz</span><br><span class="line">$ rm bluez-5.44.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> bluez-5.44</span><br><span class="line">$ ./configure --<span class="built_in">disable</span>-systemd --<span class="built_in">enable</span>-library</span><br><span class="line">checking <span class="keyword">for</span> GLIB... no</span><br><span class="line">configure: error: GLib &gt;= 2.28 is required</span><br></pre></td></tr></table></figure><p>というエラーがでるのでシステムにインストールされているglibを調べてみました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ yum info glib</span><br><span class="line">利用可能なパッケージ</span><br><span class="line">名前                : glib</span><br><span class="line">アーキテクチャー    : x86_64</span><br><span class="line">エポック            : 1</span><br><span class="line">バージョン          : 1.2.10</span><br><span class="line">リリース            : 41.el7</span><br><span class="line">容量                : 137 k</span><br><span class="line">リポジトリー        : epel/x86_64</span><br><span class="line">要約                : A library of handy utility <span class="built_in">functions</span></span><br><span class="line">URL                 : http://www.gtk.org/</span><br><span class="line">ライセンス          : LGPLv2+</span><br><span class="line">説明                : GLib is a handy library of utility <span class="built_in">functions</span>. This C library is</span><br><span class="line">                    : designed to solve some portability problems and provide other useful</span><br><span class="line">                    : functionality that most programs require.</span><br></pre></td></tr></table></figure><p>相当古い。<br>しかし、ここでyum install glibしても、どうもリポジトリに含まれているglibが古いようで無意味でした。<br>が、実は落とし穴で、正しくは</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install glib2-devel</span><br></pre></td></tr></table></figure><p>になります。<br>再度試してみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ./configure --<span class="built_in">disable</span>-systemd --<span class="built_in">enable</span>-library</span><br><span class="line">checking <span class="keyword">for</span> DBUS... no</span><br><span class="line">configure: error: D-Bus &gt;= 1.6 is required</span><br></pre></td></tr></table></figure><p>次はD-Busです。これも単純に、yum install dbusではだめで、</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install dbus-devel</span><br></pre></td></tr></table></figure><p>になります。<br>次は、</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ./configure --<span class="built_in">disable</span>-systemd --<span class="built_in">enable</span>-library</span><br><span class="line">checking <span class="keyword">for</span> UDEV... no</span><br><span class="line">configure: error: libudev &gt;= 172 is required</span><br></pre></td></tr></table></figure><p>とでますので、</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install libudev-devel</span><br></pre></td></tr></table></figure><p>になります。<br>次は、</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ./configure --<span class="built_in">disable</span>-systemd --<span class="built_in">enable</span>-library</span><br><span class="line">checking <span class="keyword">for</span> ICAL... no</span><br><span class="line">configure: error: libical is required</span><br></pre></td></tr></table></figure><p>とでますので、</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install libical-devel</span><br></pre></td></tr></table></figure><p>になります。<br>次は、</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ./configure --<span class="built_in">disable</span>-systemd --<span class="built_in">enable</span>-library</span><br><span class="line">checking readline/readline.h usability... no</span><br><span class="line">checking readline/readline.h presence... no</span><br><span class="line">checking <span class="keyword">for</span> readline/readline.h... no</span><br><span class="line">configure: error: readline header files are required</span><br></pre></td></tr></table></figure><p>とでますので、</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install readline-devel</span><br></pre></td></tr></table></figure><p>になります。<br>最終的にこれで依存関係が解決するはずで、</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ./configure --<span class="built_in">disable</span>-systemd --<span class="built_in">enable</span>-library</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure><p>が成功するはずです。<br>インストール後、</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ ls -la /usr/<span class="built_in">local</span>/include/bluetooth/</span><br><span class="line">合計 164</span><br><span class="line">drwxr-xr-x. 2 root root  4096  8月 10 23:44 .</span><br><span class="line">drwxr-xr-x. 5 root root    56  8月 10 23:44 ..</span><br><span class="line">-rw-r--r--. 1 root root  9415  8月 10 23:44 bluetooth.h</span><br><span class="line">-rw-r--r--. 1 root root  3938  8月 10 23:44 bnep.h</span><br><span class="line">-rw-r--r--. 1 root root  1600  8月 10 23:44 cmtp.h</span><br><span class="line">-rw-r--r--. 1 root root 63804  8月 10 23:44 hci.h</span><br><span class="line">-rw-r--r--. 1 root root 10494  8月 10 23:44 hci_lib.h</span><br><span class="line">-rw-r--r--. 1 root root  2087  8月 10 23:44 hidp.h</span><br><span class="line">-rw-r--r--. 1 root root  6648  8月 10 23:44 l2cap.h</span><br><span class="line">-rw-r--r--. 1 root root  2309  8月 10 23:44 rfcomm.h</span><br><span class="line">-rw-r--r--. 1 root root  1541  8月 10 23:44 sco.h</span><br><span class="line">-rw-r--r--. 1 root root 18197  8月 10 23:44 sdp.h</span><br><span class="line">-rw-r--r--. 1 root root 21725  8月 10 23:44 sdp_lib.h</span><br><span class="line">$ ls -la /usr/<span class="built_in">local</span>/lib/libbluetooth*</span><br><span class="line">-rwxr-xr-x. 1 root root    961  8月 10 23:44 /usr/<span class="built_in">local</span>/lib/libbluetooth.la</span><br><span class="line">lrwxrwxrwx. 1 root root     23  8月 10 23:44 /usr/<span class="built_in">local</span>/lib/libbluetooth.so -&gt; libbluetooth.so.3.18.15</span><br><span class="line">lrwxrwxrwx. 1 root root     23  8月 10 23:44 /usr/<span class="built_in">local</span>/lib/libbluetooth.so.3 -&gt; libbluetooth.so.3.18.15</span><br><span class="line">-rwxr-xr-x. 1 root root 397416  8月 10 23:44 /usr/<span class="built_in">local</span>/lib/libbluetooth.so.3.18.15</span><br></pre></td></tr></table></figure><p>ライブラリやヘッダーファイルがインストールされていることが確認できます。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> Red Hat Enterprise Linux </category>
          
          <category> 無線通信 </category>
          
          <category> Bluetooth </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでLinuxと遊んでみる JetBrains Rider編 第0.5回</title>
      <link href="2017/08/10/2530/"/>
      <url>2017/08/10/2530/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>Jetbrains Rider</strong>をインストールしました。</p><p>ですが、しばらく使っていないうちに、正式版がリリースされたので、そのインストールをちょっとだけ。</p><h1 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h1><p>まずは、ダウンロード。<br>2017/08の時点で2017.1が最新です。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://www.jetbrains.com/rider/download/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=www.jetbrains.com"></img><div class="hbc-site-name">JetBrains</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="http://resources.jetbrains.com/storage/products/jetbrains/img/meta/preview.png"></img></div><div class="hbc-text"><div class="hbc-title">Download Rider: The Cross-Platform .NET IDE</div><div class="hbc-url">https://www.jetbrains.com/rider/download/</div><div class="hbc-description">Download the latest version of Rider for Windows, macOS or Linux.</div></div></div></div></a></div></div><p>ダウンロードしたら、端末を開きます。<br>おそらく、ダウンロードフォルダにダウンロードしたファイルがあるので、ダウンロードフォルダに移動します。<br>このあたりは前回と同じです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mv JetBrains.Rider-2017.1.tar.gz /opt</span><br><span class="line">$ <span class="built_in">cd</span> /opt</span><br><span class="line">$ sudo tar xfz JetBrains.Rider-2017.1.tar.gz</span><br><span class="line">$ sudo rm xfz JetBrains.Rider-2017.1.tar.gz</span><br><span class="line">$ ls -la</span><br><span class="line">drwxr-xr-x.  7 root   root         110  8月 10 18:47 Rider-2017.1</span><br><span class="line">$ <span class="built_in">cd</span> Rider-2017.1/bin</span><br><span class="line">$ sudo ./rider.sh</span><br><span class="line">Startup Error: Unable to detect graphics environment</span><br></pre></td></tr></table></figure><p>ダイアログが立ち上がり、設定を引き継ぐかどうかを尋ねられます。</p><p><a href="../../../../public/2017/05/2a25c929f6bb4f046272c29e5872a6d1.png"><img src="../../../../public/2017/05/2a25c929f6bb4f046272c29e5872a6d1.png"></a></p><p>次にライセンス認証を要求されます。<br>ライセンスを持っていないならトライアルが可能です。</p><p><a href="../../../../public/2017/08/36755281596f38b0e5ba79de8aca1a03.png"><img src="../../../../public/2017/08/36755281596f38b0e5ba79de8aca1a03.png"></a></p><p>スプラッシュスクリーンです。</p><p><a href="../../../../public/2017/08/a9b054b4a026a1dbe70af186e6e7d469.png"><img src="../../../../public/2017/08/a9b054b4a026a1dbe70af186e6e7d469.png"></a></p><p>メイン画面です。</p><p><a href="../../../../public/2017/08/73fd8e8c0dc2c0fefe38f6174fa126f6.png"><img src="../../../../public/2017/08/73fd8e8c0dc2c0fefe38f6174fa126f6.png"></a></p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>今回はバージョンアップのみ。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET </category>
          
          <category> Linux </category>
          
          <category> net-framework </category>
          
          <category> .NET Framework </category>
          
          <category> linux </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> Red Hat Enterprise Linux </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> net </category>
          
          <category> JetBrains </category>
          
          <category> .NET Core </category>
          
          <category> .NETでLinuxと遊んでみる </category>
          
          <category> jetbrains </category>
          
          <category> Rider </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでLinuxと遊んでみる JetBrains Rider編 第0回</title>
      <link href="2017/08/10/2317/"/>
      <url>2017/08/10/2317/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>.NET Core</strong>をDocker経由で動かしたりしました。</p><p>ですが、WindowsまたはLinuxの端末上でエディットしてコンパイルするのは面倒だしつまらない。<br>なので、LinuxのGUI上で開発すればいいじゃん、ということで</p><ul><li><strong>Visual Studio Code</strong></li><li><strong>JetBrains Rider</strong></li></ul><p>の2つに白羽の矢が立ちました。<strong>Eclipse</strong>?知らないなぁ….</p><p>自分はJetBrains Toolboxをサブスクライブしているので、今後EAPがとれて正式リリースされても継続利用できます。<br>なにより、<strong>Resharper</strong>、<strong>Clion</strong>を使ってきて満足しているので、Riderもきっと素晴らしい、と信じています。</p><h1 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h1><p>まずは、ダウンロード。<br>2017/05/14の時点でEAP Build21が最新です。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://www.jetbrains.com/rider/download/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=www.jetbrains.com"></img><div class="hbc-site-name">JetBrains</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="http://resources.jetbrains.com/storage/products/jetbrains/img/meta/preview.png"></img></div><div class="hbc-text"><div class="hbc-title">Download Rider: The Cross-Platform .NET IDE</div><div class="hbc-url">https://www.jetbrains.com/rider/download/</div><div class="hbc-description">Download the latest version of Rider for Windows, macOS or Linux.</div></div></div></div></a></div></div><p>ダウンロードしたら、端末を開きます。<br>おそらく、ダウンロードフォルダにダウンロードしたファイルがあるので、ダウンロードフォルダに移動します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">cd</span> ~/ダウンロード</span><br><span class="line">$ ls -la</span><br><span class="line">drwxr-xr-x.  2 hogehoge hogehoge        40  5月 14 12:51 .</span><br><span class="line">drwx------. 21 hogehoge hogehoge      4096  5月 14 12:32 ..</span><br><span class="line">-rw-rw-r--.  1 hogehoge hogehoge 376135045  5月 14 12:51 riderRS-171.4089.466.tar.gz</span><br></pre></td></tr></table></figure><p>インストール先は、Riderのマニュアルがあればそれに従うのですが存在しないので、<strong>IntellJ IDEA</strong>のマニュアルに従い、**/opt**にインストールします。</p><p><a href="https://www.jetbrains.com/help/idea/2017.1/installing-and-launching.html#d923076e245">Starting IntelliJ IDEA on Linux</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mv riderRS-171.4089.466.tar.gz /opt</span><br><span class="line">$ <span class="built_in">cd</span> /opt</span><br><span class="line">$ sudo tar xfz riderRS-171.4089.466.tar.gz</span><br><span class="line">$ sudo rm xfz riderRS-171.4089.466.tar.gz</span><br><span class="line">$ ls -la</span><br><span class="line">drwxr-xr-x.  7 root root 4096  5月 14 13:11 Rider-171.4089.466</span><br></pre></td></tr></table></figure><p><strong>/opt/Rider-171.4089.466</strong>に展開されました。<br>中を見てみますと、<strong>Install-Linux-tar.txt</strong>があるので、確認します。</p><p>```<br>Rider<br>INSTALLATION INSTRUCTIONS<br>===============================================================================<br>Linux Installation Instructions</p><hr><ol><li>Unpack the Rider distribution archive that you downloaded to<br>where you wish to install the program. We will refer to this destination<br>location as your {installation home} below.</li><li>Open a console and cd into “{installation home}/bin” and type:<br>./rider.sh<br>to start the application. As a side effect, this will initialize various<br>configuration files in the ~/.Rider10 directory.</li><li>[OPTIONAL] Add “{installation home}/bin” to your PATH environment<br>variable so that you may start Rider from any directory.</li><li>[OPTIONAL] To adjust the value of the JVM heap size, create<br>~/.Rider10/rider.vmoptions (or rider64.vmoptions<br>if using a 64-bit JDK), and set the -Xms and -Xmx parameters. To see how<br>to do this, you can reference the vmoptions file under<br>“{installation home}/bin” as a model.<br>[OPTIONAL] Changing the location of “config” and “system” directories</li></ol><hr><p>By default, Rider stores all your settings under the ~/.Rider10/config<br>directory and uses ~/.Rider10/system as a data cache.<br>If you want to change these settings,</p><ol><li>Open a console and cd into ~/.Rider10/</li><li>Create the file “idea.properties” and open it in an editor. Set the<br>idea.system.path and/or idea.config.path variables as desired, for<br>example:<br>idea.system.path=<del>/custom/system<br>idea.config.path=</del>/custom/config</li><li>Note that we recommend to store data cache (“system” directory) on a disk<br>with at least 1GB of free space.<br>Enjoy!</li></ol><p>-Rider Development Team</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**&#x2F;bin&#x2F;.rider.sh**を実行するという指示があるので実行します。</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;&#96;sh</span><br><span class="line">$ cd Rider-171.4089.466&#x2F;bin</span><br><span class="line">$ sudo .&#x2F;rider.sh</span><br><span class="line">[YourKit Java Profiler 2016.02-b43] Log file: &#x2F;root&#x2F;.yjp&#x2F;log&#x2F;Rider10-9605.log</span><br><span class="line"></span><br><span class="line">Startup Error: Unable to detect graphics environment</span><br></pre></td></tr></table></figure><p>どうも、SSH経由ではダメな模様。<br>GUIに移動し端末を起動し再度トライ。</p><p>ダイアログが立ち上がり、設定を引き継ぐかどうかを尋ねられます。<br>初めてインストールしたので、<strong>Do not import setting</strong> を選択し、OKを押下します。</p><p><a href="../../../../public/2017/05/2a25c929f6bb4f046272c29e5872a6d1.png"><img src="../../../../public/2017/05/2a25c929f6bb4f046272c29e5872a6d1.png"></a></p><p>次にJetBRains Privacy Policyへの同意を求められますので、<strong>Accept</strong> を押下します。</p><p><a href="../../../../public/2017/05/7b6fca4120f7feb9115ce94495c00b0f.png"><img src="../../../../public/2017/05/7b6fca4120f7feb9115ce94495c00b0f.png"></a></p><p>Themaを選択します。これはお好みを選択し、<strong>Next: Editor Color Schemes</strong> を押下します。</p><p><a href="../../../../public/2017/05/a3828491ebad1d6a58699c125e5785d4.png"><img src="../../../../public/2017/05/a3828491ebad1d6a58699c125e5785d4.png"></a></p><p>エディターの色定義を選択します。これもお好みを選択し、<strong>Next: Keymaps</strong> を押下します。</p><p><a href="../../../../public/2017/05/387f7d19d0cd9740b77158d370bf64d7.png"><img src="../../../../public/2017/05/387f7d19d0cd9740b77158d370bf64d7.png"></a></p><p>キーの割り当てを選択します。これもお好みを選択し、<strong>Next: Desktop Entry</strong> を押下します。</p><p><a href="../../../../public/2017/05/b6c45b005abf1f97a09511360f14ff0a.png"><img src="../../../../public/2017/05/b6c45b005abf1f97a09511360f14ff0a.png"></a></p><p>ショートカットをデスクトップに作成するかどうかです。なぜかIntelliJ IDEAのアイコンです。これもお好みを選択し、<strong>Next: Default plugins</strong> を押下します。</p><p><a href="../../../../public/2017/05/ec2aebb0468c9dbdf25b216825499d2f.png"><img src="../../../../public/2017/05/ec2aebb0468c9dbdf25b216825499d2f.png"></a></p><p>プラグインを選択します。ここでは、<strong>Web Development</strong>、<strong>Version Controls</strong>、<strong>Database Tools</strong>、<strong>Other Tools</strong>を選択できます。<br>全部欲しければそのままで良いです。<strong>Next: Featured plugins</strong>を押下します。</p><p><a href="../../../../public/2017/05/88c96622801e3cd227b10334a2679d41.png"><img src="../../../../public/2017/05/88c96622801e3cd227b10334a2679d41.png"></a></p><p>Featutedプラグインを選択します。ここでは、<strong>IdeaVim</strong>、<strong>Resharper Unity</strong>、<strong>Help AllocationsViewer</strong>、<strong>Python Community Edition</strong>を選択できます。<br>必要に応じて選択します。自分はResharper Unityだけ追加しました。終わったら、<strong>Next: Rider EAP</strong>を押下します。</p><p><a href="../../../../public/2017/05/5fea8e6a2fa758ae69dc2a500025f275.png"><img src="../../../../public/2017/05/5fea8e6a2fa758ae69dc2a500025f275.png"></a></p><p>スタートアップガイドやバグトラッカーの案内です。<br>これで完了です。<br><strong>Start using Rider</strong>を押下して終了します。</p><p><a href="../../../../public/2017/05/272aed6ad854ecb9b13344879ade00db.png"><img src="../../../../public/2017/05/272aed6ad854ecb9b13344879ade00db.png"></a></p><p>スプラッシュスクリーンです。</p><p><a href="../../../../public/2017/05/7c5ff0226a9450756f6afb81da039fed.png"><img src="../../../../public/2017/05/7c5ff0226a9450756f6afb81da039fed.png"></a></p><p>メイン画面です。ここはClion等と同一ですね・<br><a href="../../../../public/2017/05/1ae6125e5727fd0eaf480cb104e1bcb1.png"><img src="../../../../public/2017/05/1ae6125e5727fd0eaf480cb104e1bcb1.png"></a></p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>今回は導入のみ。<br>次回は、プロジェクトを作ってサンプルを実行してみます。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET </category>
          
          <category> Linux </category>
          
          <category> net-framework </category>
          
          <category> .NET Framework </category>
          
          <category> linux </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> Red Hat Enterprise Linux </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> net </category>
          
          <category> JetBrains </category>
          
          <category> .NET Core </category>
          
          <category> .NETでLinuxと遊んでみる </category>
          
          <category> jetbrains </category>
          
          <category> Rider </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その76 DockerからBluetoothを使ってみる</title>
      <link href="2017/07/31/2525/"/>
      <url>2017/07/31/2525/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>Bluetoothを内蔵するホストマシンで、<strong>Docker</strong>上に構築したUbuntuから<strong>hciconfig up</strong>したら、</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hciconfig up</span><br><span class="line">Can<span class="string">&#x27;t open HCI socket.: Address family not supported by protocol</span></span><br></pre></td></tr></table></figure><p>ってなってしまった。<br>そんな時の解決法。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p>解決策はこちら。</p><p><strong>--net host</strong>を付けて、<strong>docker run</strong>しろとのことです。<br>専ら、<strong>Portainer</strong>でGUIから使う私の場合は、コマンドなんて打ちません。<br>Portainerの場合はコンテナ作成時に、下記のように<strong>host</strong>を選択するだけです。</p><p><a href="../../../../public/2017/07/e05a64c2cb84a3283c4d7eaa6c171252.png"><img src="../../../../public/2017/07/e05a64c2cb84a3283c4d7eaa6c171252-1024x246.png"></a></p><p> 途中から変更できないので、必要に応じてコンテナからイメージを作成し、コンテナを作り直すのが吉です。</p>]]></content>
      
      
      <categories>
          
          <category> 仮想化 </category>
          
          <category> Docker </category>
          
          <category> Linux </category>
          
          <category> 無線通信 </category>
          
          <category> Portainer </category>
          
          <category> Bluetooth </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その75 Red Hat Enterprise Linux 7.3でPython 3をDockerで使ってみる</title>
      <link href="2017/07/30/2521/"/>
      <url>2017/07/30/2521/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>前回はRHELでPython3を使えるようにしましたが、何か微妙になりました。</p><p>なので、<strong>Docker</strong>にPython3を使える環境を用意することにしました。</p><h1 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h1><p>既に先人の方が、Dockerファイルを用意してくださっています。<br>しかも、pip付きで。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://qiita.com/kekedadamama/items/154753aa8974774a8b2b" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=qiita.com"></img><div class="hbc-site-name">Qiita</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.qiita.com%2Fassets%2Fpublic%2Farticle-ogp-background-1150d8b18a7c15795b701a55ae908f94.png?ixlib=rb-1.2.2&w=1200&mark=https%3A%2F%2Fqiita-user-contents.imgix.net%2F~text%3Fixlib%3Drb-1.2.2%26w%3D840%26h%3D380%26txt%3DDocker%25E3%2581%25AEubuntu%25E3%2581%25AB%25E3%2582%2588%25E3%2582%258Bpython3.6%25E3%2581%25AE%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AEDockerfile%26txt-color%3D%2523333%26txt-font%3DHiragino%2520Sans%2520W6%26txt-size%3D54%26txt-clip%3Dellipsis%26txt-align%3Dcenter%252Cmiddle%26s%3D7a01a2ee5afb21c89a674a55d06482bf&mark-align=center%2Cmiddle&blend=https%3A%2F%2Fqiita-user-contents.imgix.net%2F~text%3Fixlib%3Drb-1.2.2%26w%3D840%26h%3D500%26txt%3D%2540kekedadamama%26txt-color%3D%2523333%26txt-font%3DHiragino%2520Sans%2520W6%26txt-size%3D45%26txt-align%3Dright%252Cbottom%26s%3Db029b148801ccb2d0fc23df840dc9e14&blend-align=center%2Cmiddle&blend-mode=normal&s=4355ad5a8dae0293b0ced4124e23c64b"></img></div><div class="hbc-text"><div class="hbc-title">Dockerのubuntuによるpython3.6のためのDockerfile - Qiita</div><div class="hbc-url">http://qiita.com/kekedadamama/items/154753aa8974774a8b2b</div><div class="hbc-description">はじめにPython3.6 から追加された文法機能の記事を見かけ、使ってみようと思った時、とりあえずちょろっと使うだけだからDocker(Ubuntu)で試そうとしました。しかし、apt-getでpython3.6を入れ...</div></div></div></div></a></div></div><p>下記の内容を<strong>Dockerfile</strong>という名前で任意のフォルダに保存します。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">16.10</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> kekedadamama</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update -y &amp;&amp; apt-get install -yq wget build-essential gcc zlib1g-dev</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /root/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> wget https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tgz \</span></span><br><span class="line"><span class="bash">        &amp;&amp; tar zxf Python-3.6.0.tgz \</span></span><br><span class="line"><span class="bash">        &amp;&amp; <span class="built_in">cd</span> Python-3.6.0 \</span></span><br><span class="line"><span class="bash">        &amp;&amp; ./configure \</span></span><br><span class="line"><span class="bash">        &amp;&amp; make altinstall</span></span><br><span class="line"><span class="keyword">ENV</span> PYTHONIOENCODING <span class="string">&quot;utf-8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /</span></span><br></pre></td></tr></table></figure><p>続いて、保存したDockerfileのある場所で下記のコマンドを実行します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker build .</span><br><span class="line">... Removing intermediate container 6c279bffa616</span><br><span class="line">Successfully built a86393df781f</span><br></pre></td></tr></table></figure><p>これでビルドが実行されイメージが生成されます。</p><p>ですが、上のページだとDockeファイルの名前が、<strong>DockerFile</strong>になっており、</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ unable to prepare context: unable to evaluate symlinks <span class="keyword">in</span> Dockerfile path: lstat /home/takuya/DockerFiles/Ubuntu-Python36-pip/Dockerfile: no such file or directory</span><br></pre></td></tr></table></figure><p>というエラーが表示され5分ほど悩んでいました。<br>正しくは<strong>Dockerfile</strong>です。大文字小文字を区別する模様。面倒な。</p><h1 id="Try"><a href="#Try" class="headerlink" title="Try"></a>Try</h1><p>イメージが生成されているので、dockerで実行するだけです。<br><strong>Portainer</strong>で実行しても構いません。<br>細かい実行の際の設定は</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://taktak.jp/2017/04/27/2124" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=taktak.jp"></img><div class="hbc-site-name">taktak.jp</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">.NET Core 2.0 PreviewとVisual Studio Codeでコンソールアプリをつくる Linux準備編 – A certain engineer &quot;COMPLEX&quot;</div><div class="hbc-url">https://taktak.jp/2017/04/27/2124</div></div></div></div></a></div></div><p>を参考に。</p><p>Pythonは</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python3.6 -V</span><br><span class="line">Python 3.6.0</span><br></pre></td></tr></table></figure><p>です。<br>必要なら</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">alias</span> python=<span class="string">&#x27;python3.6&#x27;</span></span><br></pre></td></tr></table></figure><p>で使いやすく出来ます。<br>以上で環境の構築は終わりです。</p>]]></content>
      
      
      <categories>
          
          <category> 仮想化 </category>
          
          <category> Docker </category>
          
          <category> %e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%e8%a8%80%e8%aa%9e </category>
          
          <category> Linux </category>
          
          <category> Python </category>
          
          <category> linux </category>
          
          <category> Red Hat Enterprise Linux </category>
          
          <category> Portainer </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その74 Red Hat Enterprise Linux 7.3でPython 3を使ってみる</title>
      <link href="2017/07/29/2518/"/>
      <url>2017/07/29/2518/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>いつインストールしたのかはわかりませんが、<strong>Red Hat Enterprise Linux 7.3</strong>には<strong>Python 2</strong>が入っていました。<br>しかし諸事情で<strong>Python 3</strong>を使う必要があり、その手順を調べました。</p><p>標準のリポジトリには3は入っていない様子。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p>ぶっちゃけると、下記のページに全ての手順が書かれております。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://ytooyama.hatenadiary.jp/entry/2017/03/02/000846" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=ytooyama.hatenadiary.jp"></img><div class="hbc-site-name">ytooyamaのブログ</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://ogimage.blog.st-hatena.com/8454420450106446556/10328749687222527553/1508340513"></img></div><div class="hbc-text"><div class="hbc-title">RHELやCentOSなどでPython 3を使う - ytooyamaのブログ</div><div class="hbc-url">http://ytooyama.hatenadiary.jp/entry/2017/03/02/000846</div><div class="hbc-description">Python 3の環境をCentOS 7で作るのは大変と聞いたのでブログにまとめようと思いました。 Python 3環境をLinuxで作るんだったら迷わず FedoraやUbuntu、openSUSEをオススメします。これらは比較的新しいパッケージを提供するためです。 ただし、ど…</div></div></div></div></a></div></div><p>感謝感謝。</p><p>要点は、Python3が入っているリポジトリを追加する、だけです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum-config-manager --<span class="built_in">enable</span> rhel-server-rhscl-7-rpms</span><br></pre></td></tr></table></figure><p>で追加可能。<br>その後、</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install rh-python35</span><br></pre></td></tr></table></figure><p>で、インストールします。<br>古いPythonと同居していますので、<strong>scl</strong>で環境を切り替えます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ scl <span class="built_in">enable</span> rh-python35 bash</span><br><span class="line">$ python -V</span><br><span class="line">Python 3.5.1</span><br><span class="line">$ <span class="built_in">which</span> python</span><br><span class="line">/opt/rh/rh-python35/root/usr/bin/python</span><br></pre></td></tr></table></figure><p>ついでに、何かと便利な<strong>pip</strong>もインストトールしておきます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://bootstrap.pypa.io/get-pip.py</span><br><span class="line">$ sudo python get-pip.py</span><br><span class="line">$ rm get-pip.py</span><br></pre></td></tr></table></figure><p>が、どうやっても、pipを最新版にアップデートできなかったので、微妙な環境になってしまいました…</p>]]></content>
      
      
      <categories>
          
          <category> %e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%e8%a8%80%e8%aa%9e </category>
          
          <category> Linux </category>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その73 Red Hat Enterprise Linux 7.3でbluetoothを使ってみる</title>
      <link href="2017/07/29/2514/"/>
      <url>2017/07/29/2514/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>IntelのNUC <strong>DN2820FYKH</strong>には内蔵のBluetoothが付属してます。<br>こいつを使えるようにしてみましょう。</p><h1 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h1><p>といっても、RHEL 7.3には最初からbluetoothのプロトコルスタック<strong>BlueZ</strong>がインストールされていました。<br>インストールされているかどうかは</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ bluetoothctl</span><br><span class="line">--version 5.41</span><br></pre></td></tr></table></figure><p>でわかります。<br>インストールされていないなら、</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install bluez</span><br></pre></td></tr></table></figure><p>でインストールできます。<br>次に下記のコマンドを叩きます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo hciconfig up</span><br><span class="line">hci0:   Type: Primary  Bus: USB</span><br><span class="line">        BD Address: A0:A8:CD:4B:93:07  ACL MTU: 1021:5  SCO MTU: 96:5</span><br><span class="line">        DOWN</span><br><span class="line">        RX bytes:631 acl:0 sco:0 events:37 errors:0</span><br><span class="line">        TX bytes:401 acl:0 sco:0 commands:37 errors:0</span><br></pre></td></tr></table></figure><p>ここで、<strong>DOWN</strong>と出ている場合は、本体のbluetoothが準備できていないので、</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo hciconfig hci0 up</span><br></pre></td></tr></table></figure><p>と叩きます。<br>これにより</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo hciconfig up</span><br><span class="line">hci0:   Type: Primary  Bus: USB</span><br><span class="line">        BD Address: A0:A8:CD:4B:93:07  ACL MTU: 1021:5  SCO MTU: 96:5</span><br><span class="line">        UP RUNNING</span><br><span class="line">        RX bytes:1253 acl:0 sco:0 events:75 errors:0</span><br><span class="line">        TX bytes:1119 acl:0 sco:0 commands:75 errors:0</span><br></pre></td></tr></table></figure><p><strong>UP RUNNING</strong>に変化しました。</p><p>続いて、接続したいbluetoothデバイスを待機状態にし、下記のコマンドを叩きます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo hcitool lescan</span><br><span class="line">LE Scan ...</span><br><span class="line">54:6C:0E:79:1A:87 (unknown)</span><br><span class="line">54:6C:0E:79:1A:87 CC2650 SensorTag</span><br></pre></td></tr></table></figure><p>待機状態のデバイスが認識されました。<br><strong>Ctrl+C</strong>でスキャンを解除できます。</p><h1 id="Try"><a href="#Try" class="headerlink" title="Try"></a>Try</h1><p>続いて、デバイスに接続を行います。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo gatttool -b 54:6C:0E:79:1A:87 --interactive</span><br><span class="line">[54:6C:0E:79:1A:87][LE]&gt;</span><br></pre></td></tr></table></figure><p>入力モードに切り替わるので、</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[54:6C:0E:79:1A:87][LE]&gt; connect</span><br><span class="line">Attempting to connect to 54:6C:0E:79:1A:87</span><br><span class="line">Connection successful</span><br></pre></td></tr></table></figure><p>とします。<br>ここで、</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: connect error: Connection refused (111)</span><br></pre></td></tr></table></figure><p>が出力された場合、デバイスの待機状態や電源が切れていますので、接続からやり直します。<br>接続が完了しましたら、実際にデータを送信してみます。<br>下記は、私が接続したデバイスから、計測した温度を取得するコマンドです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[54:6C:0E:79:1A:87][LE]&gt; char-write-cmd 0x24 01</span><br><span class="line">[54:6C:0E:79:1A:87][LE]&gt; char-read-hnd 0x21</span><br><span class="line">Characteristic value/descriptor: 04 00 ad 27 01 11 31</span><br></pre></td></tr></table></figure><p>最初が、温度の計測を有効にし、次が温度を実際に取得するコマンドになります。<br>ここのコマンドは一例ですので、必要に怖じてデバイスのマニュアルを読む必要があります。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> Red Hat Enterprise Linux </category>
          
          <category> Intel </category>
          
          <category> 無線通信 </category>
          
          <category> intel </category>
          
          <category> Bluetooth </category>
          
          <category> NUC </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その72 dlibをCUDAを有効にしてビルドする</title>
      <link href="2017/07/07/2485/"/>
      <url>2017/07/07/2485/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p><strong>OpenCV</strong>には顔検出用の関数があるが、どうにも精度が良くないときがある。<br>そこで最近名前を聞くようになった<strong>dlib</strong>を使って見ることにする。<br>ただ、C#のラッパーなどは出回っておらず、C++から呼び出す泥臭いことが必要な模様。<br>ただ、ソースのサンプルが豊富なので、試してみるのは簡単そう…. と思っていましたがそうでは無かったです。</p><h1 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h1><h2 id="ソース"><a href="#ソース" class="headerlink" title="ソース"></a>ソース</h2><p>まずはソースをダウンロード。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://dlib.net/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=dlib.net"></img><div class="hbc-site-name">dlib.net</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="http://dlib.net/dlib-logo-small.png"></img></div><div class="hbc-text"><div class="hbc-title">dlib C++ Library</div><div class="hbc-url">http://dlib.net/</div></div></div></div></a></div></div><p>ページ左下の青いボタンがダウンロードになります。2017/07/05時点の最新版は19.4です。</p><p><a href="../../../../public/2017/07/screencapture-dlib-net-1499263587443.png"><img src="../../../../public/2017/07/screencapture-dlib-net-1499263587443-1024x274.png"></a><br> ダウンロード後、任意の場所に展開します。<br>ここでは、<strong>D:\Works\Lib\DLib\19.4</strong>とします。<br>配下には下記のファイル、フォルダが展開されます。<br>dlib docs examples python_examples tools CMakeLists.txt documentation.html MANIFEST.in README.md setup.py</p><h2 id="CUDA"><a href="#CUDA" class="headerlink" title="CUDA"></a>CUDA</h2><p>dlibはCUDAを利用することで性能を大幅に向上させることが出来ます。<br>ただし、利用できるCUDAは7.5以降になります。今回は8.0を選択。<br>ダウンロードは下記になります。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://developer.nvidia.com/cuda-downloads" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=developer.nvidia.com"></img><div class="hbc-site-name">NVIDIA Developer</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">CUDA Toolkit 11.1 Update 1 Downloads</div><div class="hbc-url">https://developer.nvidia.com/cuda-downloads</div><div class="hbc-description">Please Note: We advise customers updating to Linux Kernel 5.9+ to use the latest NVIDIA Linux GPU driver R455 that will be available for dow…</div></div></div></div></a></div></div><p>今回はWindows 10用のインストーラを入手します。</p><p><a href="../../../../public/2017/07/screencapture-developer-nvidia-cuda-downloads-1499263676219.png"><img src="../../../../public/2017/07/screencapture-developer-nvidia-cuda-downloads-1499263676219-1024x888.png"></a><br> パッチもダウンロードできるようなので、そちらもダウンロードします。<br>バージョンは異なりますが、インストールは下記を参考にできます。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://taktak.jp/2016/02/11/net%E3%81%A7gpupu%E3%82%92%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B-cuda%E7%B7%A8-%E7%AC%AC0%E5%9B%9E/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=taktak.jp"></img><div class="hbc-site-name">taktak.jp</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">.NETでGPUPUを試してみる CUDA編 第0回 – A certain engineer &quot;COMPLEX&quot;</div><div class="hbc-url">https://taktak.jp/2016/02/11/net%E3%81%A7gpupu%E3%82%92%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B-cuda%E7%B7%A8-%E7%AC%AC0%E5%9B%9E/</div></div></div></div></a></div></div><h2 id="cuDNN"><a href="#cuDNN" class="headerlink" title="cuDNN"></a>cuDNN</h2><p>CUDAを利用するにはcuDNNが必要です。<br>インストールしたCUDAに合わせたバージョンを使います。6.0はdlibで利用できないので、5.1を利用します。<br>ダウンロードは下記になります。<br>NVIDIAの開発者登録が必要ですので、登録を済ませておいてください。</p><p>入手や展開は下記を参考にできます。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://taktak.jp/2016/07/30/%E3%83%87%E3%82%A3%E3%83%BC%E3%83%97%E3%83%A9%E3%83%BC%E3%83%8B%E3%83%B3%E3%82%B0-caffe-for-windows-%E3%81%9D%E3%81%AE3-cudnn-5-0%E5%AF%BE%E5%BF%9C/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=taktak.jp"></img><div class="hbc-site-name">taktak.jp</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">ディープラーニング Caffe for Windows その3 cuDNN 5.0対応 – A certain engineer &quot;COMPLEX&quot;</div><div class="hbc-url">https://taktak.jp/2016/07/30/%E3%83%87%E3%82%A3%E3%83%BC%E3%83%97%E3%83%A9%E3%83%BC%E3%83%8B%E3%83%B3%E3%82%B0-caffe-for-windows-%E3%81%9D%E3%81%AE3-cudnn-5-0%E5%AF%BE%E5%BF%9C/</div></div></div></div></a></div></div><p>今回は、<strong>D:\Works\Lib\NVIDIA\cuDNN</strong>に展開します。</p><h2 id="OpenCV"><a href="#OpenCV" class="headerlink" title="OpenCV"></a>OpenCV</h2><p>下記からインストーラをダウンロードしてインストールしておきます。2017/07/05の時点で最新は3.2.0になります。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://opencv.org/releases.html" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=opencv.org"></img><div class="hbc-site-name">OpenCV</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">Releases - OpenCV</div><div class="hbc-url">http://opencv.org/releases.html</div></div></div></div></a></div></div><p>今回は、<strong>D:\Works\Lib\OpenCV\opencv-3.2.0</strong>に展開します。</p><h2 id="CMake"><a href="#CMake" class="headerlink" title="CMake"></a>CMake</h2><p>Visual Studioのソリューションファイルを生成するために必要です。<br>下記でダウンロードしインストールします。2017/07/05時点の最新の安定版は3.8.2です。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://cmake.org/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=cmake.org"></img><div class="hbc-site-name">cmake.org</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">CMake</div><div class="hbc-url">https://cmake.org/</div></div></div></div></a></div></div><p>インストール時、CMakeを環境変数PATHに追加するか選択できますが、そこは好みで。</p><h2 id="Visual-Studio"><a href="#Visual-Studio" class="headerlink" title="Visual Studio"></a>Visual Studio</h2><p>ビルドに使います。当たり前かもしれませんが、これがくせ者。<br>まず、dlibが対応しているCUDAは7.5以降になります。今回は8.0にします。<br>しかし、8.0に対応しているのはVisual Studio 2015以前です。<br>2017は<strong>対応していません</strong> </p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://docs.nvidia.com/cuda/cuda-installation-guide-microsoft-windows/index.html#axzz4lyCjEB3M" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=docs.nvidia.com"></img><div class="hbc-site-name">docs.nvidia.com</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">Installation Guide Windows :: CUDA Toolkit Documentation</div><div class="hbc-url">http://docs.nvidia.com/cuda/cuda-installation-guide-microsoft-windows/index.html#axzz4lyCjEB3M</div><div class="hbc-description">The installation instructions for the CUDA Toolkit on MS-Windows systems.</div></div></div></div></a></div></div><h1 id="Build-with-CUDA"><a href="#Build-with-CUDA" class="headerlink" title="Build with CUDA"></a>Build with CUDA</h1><p>まずコマンドプロンプトで、dlibの展開フォルダを開きます。<br>なお、<strong>build</strong>フォルダの名前は自由です。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\\<span class="title">Works</span>\\<span class="title">Lib</span>\\<span class="title">DLib</span>\\19.4&gt;<span class="title">cd</span> <span class="title">examples</span> <span class="title">D</span>:\\<span class="title">Works</span>\\<span class="title">Lib</span>\\<span class="title">DLib</span>\\19.4\\<span class="title">examples</span>&gt;<span class="title">mkdir</span> <span class="title">build</span> <span class="title">D</span>:\\<span class="title">Works</span>\\<span class="title">Lib</span>\\<span class="title">DLib</span>\\19.4\\<span class="title">examples</span>&gt;<span class="title">cd</span> <span class="title">build</span> <span class="title">D</span>:\\<span class="title">Works</span>\\<span class="title">Lib</span>\\<span class="title">DLib</span>\\19.4\\<span class="title">examples</span>\\<span class="title">build</span>&gt;&quot;<span class="title">C</span>:\\<span class="title">Program</span> <span class="title">Files</span>\\<span class="title">CMake</span>\\<span class="title">bin</span>\\<span class="title">cmake.exe</span>&quot; -<span class="title">G</span> &quot;<span class="title">Visual</span> <span class="title">Studio</span> 14 2015 <span class="title">Win64</span>&quot; -<span class="title">DCOMPILER</span>\<span class="title">_CAN</span>\<span class="title">_DO</span>\<span class="title">_CPP</span>\<span class="title">_11</span>=<span class="title">ON</span> -<span class="title">DOpenCV</span>\<span class="title">_DIR</span>=<span class="title">D</span>:\\<span class="title">Works</span>\\<span class="title">Lib</span>\\<span class="title">OpenCV</span>\\<span class="title">opencv</span>-3.2.0\\<span class="title">build</span> .. -- <span class="title">The</span> <span class="title">C</span> <span class="title">compiler</span> <span class="title">identification</span> <span class="title">is</span> <span class="title">MSVC</span> 19.0.24215.1 -- <span class="title">The</span> <span class="title">CXX</span> <span class="title">compiler</span> <span class="title">identification</span> <span class="title">is</span> <span class="title">MSVC</span> 19.0.24215.1 -- <span class="title">Check</span> <span class="title">for</span> <span class="title">working</span> <span class="title">C</span> <span class="title">compiler</span>: <span class="title">C</span>:/<span class="title">Program</span> <span class="title">Files</span> (<span class="title">x86</span>)/<span class="title">Microsoft</span> <span class="title">Visual</span> <span class="title">Studio</span> 14.0/<span class="title">VC</span>/<span class="title">bin</span>/<span class="title">x86</span>\<span class="title">_amd64</span>/<span class="title">cl.exe</span> -- <span class="title">Check</span> <span class="title">for</span> <span class="title">working</span> <span class="title">C</span> <span class="title">compiler</span>: <span class="title">C</span>:/<span class="title">Program</span> <span class="title">Files</span> (<span class="title">x86</span>)/<span class="title">Microsoft</span> <span class="title">Visual</span> <span class="title">Studio</span> 14.0/<span class="title">VC</span>/<span class="title">bin</span>/<span class="title">x86</span>\<span class="title">_amd64</span>/<span class="title">cl.exe</span> -- <span class="title">works</span> -- <span class="title">Detecting</span> <span class="title">C</span> <span class="title">compiler</span> <span class="title">ABI</span> <span class="title">info</span> -- <span class="title">Detecting</span> <span class="title">C</span> <span class="title">compiler</span> <span class="title">ABI</span> <span class="title">info</span> - <span class="title">done</span> -- <span class="title">Check</span> <span class="title">for</span> <span class="title">working</span> <span class="title">CXX</span> <span class="title">compiler</span>: <span class="title">C</span>:/<span class="title">Program</span> <span class="title">Files</span> (<span class="title">x86</span>)/<span class="title">Microsoft</span> <span class="title">Visual</span> <span class="title">Studio</span> 14.0/<span class="title">VC</span>/<span class="title">bin</span>/<span class="title">x86</span>\<span class="title">_amd64</span>/<span class="title">cl.exe</span> -- <span class="title">Check</span> <span class="title">for</span> <span class="title">working</span> <span class="title">CXX</span> <span class="title">compiler</span>: <span class="title">C</span>:/<span class="title">Program</span> <span class="title">Files</span> (<span class="title">x86</span>)/<span class="title">Microsoft</span> <span class="title">Visual</span> <span class="title">Studio</span> 14.0/<span class="title">VC</span>/<span class="title">bin</span>/<span class="title">x86</span>\<span class="title">_amd64</span>/<span class="title">cl.exe</span> -- <span class="title">works</span> -- <span class="title">Detecting</span> <span class="title">CXX</span> <span class="title">compiler</span> <span class="title">ABI</span> <span class="title">info</span> -- <span class="title">Detecting</span> <span class="title">CXX</span> <span class="title">compiler</span> <span class="title">ABI</span> <span class="title">info</span> - <span class="title">done</span> -- <span class="title">Detecting</span> <span class="title">CXX</span> <span class="title">compile</span> <span class="title">features</span> -- <span class="title">Detecting</span> <span class="title">CXX</span> <span class="title">compile</span> <span class="title">features</span> - <span class="title">done</span> -- <span class="title">Looking</span> <span class="title">for</span> <span class="title">sys</span>/<span class="title">types.h</span> -- <span class="title">Looking</span> <span class="title">for</span> <span class="title">sys</span>/<span class="title">types.h</span> - <span class="title">found</span> -- <span class="title">Looking</span> <span class="title">for</span> <span class="title">stdint.h</span> -- <span class="title">Looking</span> <span class="title">for</span> <span class="title">stdint.h</span> - <span class="title">found</span> -- <span class="title">Looking</span> <span class="title">for</span> <span class="title">stddef.h</span> -- <span class="title">Looking</span> <span class="title">for</span> <span class="title">stddef.h</span> - <span class="title">found</span> -- <span class="title">Check</span> <span class="title">size</span> <span class="title">of</span> <span class="title">void</span>\* -- <span class="title">Check</span> <span class="title">size</span> <span class="title">of</span> <span class="title">void</span>\* - <span class="title">done</span> -- <span class="title">Enabling</span> <span class="title">SSE2</span> <span class="title">instructions</span> -- <span class="title">Looking</span> <span class="title">for</span> <span class="title">png</span>\<span class="title">_create</span>\<span class="title">_read</span>\<span class="title">_struct</span> -- <span class="title">Looking</span> <span class="title">for</span> <span class="title">png</span>\<span class="title">_create</span>\<span class="title">_read</span>\<span class="title">_struct</span> - <span class="title">found</span> -- <span class="title">Looking</span> <span class="title">for</span> <span class="title">jpeg</span>\<span class="title">_read</span>\<span class="title">_header</span> -- <span class="title">Looking</span> <span class="title">for</span> <span class="title">jpeg</span>\<span class="title">_read</span>\<span class="title">_header</span> - <span class="title">not</span> <span class="title">found</span> -- <span class="title">Searching</span> <span class="title">for</span> <span class="title">BLAS</span> <span class="title">and</span> <span class="title">LAPACK</span> -- <span class="title">Found</span> <span class="title">CUDA</span>: <span class="title">C</span>:/<span class="title">Program</span> <span class="title">Files</span>/<span class="title">NVIDIA</span> <span class="title">GPU</span> <span class="title">Computing</span> <span class="title">Toolkit</span>/<span class="title">CUDA</span>/<span class="title">v8</span>.0 (<span class="title">found</span> <span class="title">suitable</span> <span class="title">version</span> &quot;8.0&quot;, <span class="title">minimum</span> <span class="title">required</span> <span class="title">is</span> &quot;7.5&quot;) -- <span class="title">Looking</span> <span class="title">for</span> <span class="title">cuDNN</span> <span class="title">install</span>... -- \*\*\* <span class="title">cuDNN</span> <span class="title">V5</span>.0 <span class="title">OR</span> <span class="title">GREATER</span> <span class="title">NOT</span> <span class="title">FOUND</span>. <span class="title">DLIB</span> <span class="title">WILL</span> <span class="title">NOT</span> <span class="title">USE</span> <span class="title">CUDA</span>. \*\*\* -- \*\*\* <span class="title">If</span> <span class="title">you</span> <span class="title">have</span> <span class="title">cuDNN</span> <span class="title">then</span> <span class="title">set</span> <span class="title">CMAKE</span>\<span class="title">_PREFIX</span>\<span class="title">_PATH</span> <span class="title">to</span> <span class="title">include</span> <span class="title">cuDNN</span>&#x27;<span class="title">s</span> <span class="title">folder</span>. -- <span class="title">Configuring</span> <span class="title">done</span> -- <span class="title">Generating</span> <span class="title">done</span> -- <span class="title">Build</span> <span class="title">files</span> <span class="title">have</span> <span class="title">been</span> <span class="title">written</span> <span class="title">to</span>: <span class="title">D</span>:/<span class="title">Works</span>/<span class="title">Lib</span>/<span class="title">DLib</span>/19.4/<span class="title">examples</span>/<span class="title">build</span></span></span><br></pre></td></tr></table></figure><p>しかし、Cmakeが失敗します。<br>ネットを見ると、<strong>-DCMAKE_PREFIX_PATH</strong>に<strong>cuDNN</strong>のルートフォルダを指定する、みたいなことが書いてありますが、これでは私の環境ではダメでした。<br>解決策は、cuDNN内の <strong>cuda\include\cudnn.h</strong> <strong>cuda\lib\x64\cudnn.lib</strong> を、それぞれ <strong>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0\include</strong> <strong>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0\lib\x64</strong> にコピーします。<br>その後、buildフォルダ内を削除し、先のコマンドを実行します。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\\<span class="title">Works</span>\\<span class="title">Lib</span>\\<span class="title">DLib</span>\\19.4\\<span class="title">examples</span>\\<span class="title">build</span>&gt;&quot;<span class="title">C</span>:\\<span class="title">Program</span> <span class="title">Files</span>\\<span class="title">CMake</span>\\<span class="title">bin</span>\\<span class="title">cmake.exe</span>&quot; -<span class="title">G</span> &quot;<span class="title">Visual</span> <span class="title">Studio</span> 14 2015 <span class="title">Win64</span>&quot; -<span class="title">DCOMPILER</span>\<span class="title">_CAN</span>\<span class="title">_DO</span>\<span class="title">_CPP</span>\<span class="title">_11</span>=<span class="title">ON</span> -<span class="title">DOpenCV</span>\<span class="title">_DIR</span>=<span class="title">D</span>:\\<span class="title">Works</span>\\<span class="title">Lib</span>\\<span class="title">OpenCV</span>\\<span class="title">opencv</span>-3.2.0\\<span class="title">build</span> ..  </span></span><br><span class="line"><span class="function">\-- <span class="title">Found</span> <span class="title">CUDA</span>: <span class="title">C</span>:/<span class="title">Program</span> <span class="title">Files</span>/<span class="title">NVIDIA</span> <span class="title">GPU</span> <span class="title">Computing</span> <span class="title">Toolkit</span>/<span class="title">CUDA</span>/<span class="title">v8</span>.0 (<span class="title">found</span> <span class="title">suitable</span> <span class="title">version</span> &quot;8.0&quot;, <span class="title">minimum</span> <span class="title">required</span> <span class="title">is</span> &quot;7.5&quot;) -- <span class="title">Looking</span> <span class="title">for</span> <span class="title">cuDNN</span> <span class="title">install</span>... -- <span class="title">Building</span> <span class="title">a</span> <span class="title">CUDA</span> <span class="title">test</span> <span class="title">project</span> <span class="title">to</span> <span class="title">see</span> <span class="title">if</span> <span class="title">your</span> <span class="title">compiler</span> <span class="title">is</span> <span class="title">compatible</span> <span class="title">with</span> <span class="title">CUDA</span>... -- <span class="title">Checking</span> <span class="title">if</span> <span class="title">you</span> <span class="title">have</span> <span class="title">the</span> <span class="title">right</span> <span class="title">version</span> <span class="title">of</span> <span class="title">cuDNN</span> <span class="title">installed</span>. -- <span class="title">Found</span> <span class="title">cuDNN</span>: <span class="title">C</span>:/<span class="title">Program</span> <span class="title">Files</span>/<span class="title">NVIDIA</span> <span class="title">GPU</span> <span class="title">Computing</span> <span class="title">Toolkit</span>/<span class="title">CUDA</span>/<span class="title">v8</span>.0/<span class="title">lib</span>/<span class="title">x64</span>/<span class="title">cudnn.lib</span> -- <span class="title">Configuring</span> <span class="title">done</span> -- <span class="title">Generating</span> <span class="title">done</span> -- <span class="title">Build</span> <span class="title">files</span> <span class="title">have</span> <span class="title">been</span> <span class="title">written</span> <span class="title">to</span>: <span class="title">D</span>:/<span class="title">Works</span>/<span class="title">Lib</span>/<span class="title">DLib</span>/19.4/<span class="title">examples</span>/<span class="title">build</span></span></span><br></pre></td></tr></table></figure><p>CMakeでVisual Studioのソリューションファイルの生成に成功しましたので、下記のようにビルドします。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\\<span class="title">Works</span>\\<span class="title">Lib</span>\\<span class="title">DLib</span>\\19.4&gt;&quot;<span class="title">C</span>:\\<span class="title">Program</span> <span class="title">Files</span>\\<span class="title">CMake</span>\\<span class="title">bin</span>\\<span class="title">cmake.exe</span>&quot; --<span class="title">build</span> . --<span class="title">config</span> <span class="title">Release</span>  </span></span><br><span class="line"><span class="function">..大量のログ..  </span></span><br><span class="line"><span class="function">188 個の警告 0 エラー  </span></span><br><span class="line"><span class="function">経過時間 00:21:08.86 </span></span><br></pre></td></tr></table></figure><h1 id="Build-without-CUDA"><a href="#Build-without-CUDA" class="headerlink" title="Build without CUDA"></a>Build without CUDA</h1><p>もし、CUDAを無効にしたいなら</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\\<span class="title">Works</span>\\<span class="title">Lib</span>\\<span class="title">DLib</span>\\19.4&gt;<span class="title">cd</span> <span class="title">examples</span> <span class="title">D</span>:\\<span class="title">Works</span>\\<span class="title">Lib</span>\\<span class="title">DLib</span>\\19.4\\<span class="title">examples</span>&gt;<span class="title">mkdir</span> <span class="title">build</span>\<span class="title">_cuda</span>\<span class="title">_off</span> <span class="title">D</span>:\\<span class="title">Works</span>\\<span class="title">Lib</span>\\<span class="title">DLib</span>\\19.4\\<span class="title">examples</span>&gt;<span class="title">cd</span> <span class="title">build</span>\<span class="title">_cuda</span>\<span class="title">_off</span> <span class="title">D</span>:\\<span class="title">Works</span>\\<span class="title">Lib</span>\\<span class="title">DLib</span>\\19.4\\<span class="title">examples</span>\\<span class="title">build</span>\<span class="title">_cuda</span>\<span class="title">_off</span>&gt;&quot;<span class="title">C</span>:\\<span class="title">Program</span> <span class="title">Files</span>\\<span class="title">CMake</span>\\<span class="title">bin</span>\\<span class="title">cmake.exe</span>&quot; -<span class="title">G</span> &quot;<span class="title">Visual</span> <span class="title">Studio</span> 14 2015 <span class="title">Win64</span>&quot; -<span class="title">DOpenCV</span>\<span class="title">_DIR</span>=<span class="title">D</span>:\\<span class="title">Works</span>\\<span class="title">Lib</span>\\<span class="title">OpenCV</span>\\<span class="title">opencv</span>-3.2.0\\<span class="title">build</span> -<span class="title">DDLIB</span>\<span class="title">_USE</span>\<span class="title">_CUDA</span>=<span class="title">OFF</span> .. -- <span class="title">The</span> <span class="title">C</span> <span class="title">compiler</span> <span class="title">identification</span> <span class="title">is</span> <span class="title">MSVC</span> 19.0.24215.1 -- <span class="title">The</span> <span class="title">CXX</span> <span class="title">compiler</span> <span class="title">identification</span> <span class="title">is</span> <span class="title">MSVC</span> 19.0.24215.1 -- <span class="title">Check</span> <span class="title">for</span> <span class="title">working</span> <span class="title">C</span> <span class="title">compiler</span>: <span class="title">C</span>:/<span class="title">Program</span> <span class="title">Files</span> (<span class="title">x86</span>)/<span class="title">Microsoft</span> <span class="title">Visual</span> <span class="title">Studio</span> 14.0/<span class="title">VC</span>/<span class="title">bin</span>/<span class="title">x86</span>\<span class="title">_amd64</span>/<span class="title">cl.exe</span> -- <span class="title">Check</span> <span class="title">for</span> <span class="title">working</span> <span class="title">C</span> <span class="title">compiler</span>: <span class="title">C</span>:/<span class="title">Program</span> <span class="title">Files</span> (<span class="title">x86</span>)/<span class="title">Microsoft</span> <span class="title">Visual</span> <span class="title">Studio</span> 14.0/<span class="title">VC</span>/<span class="title">bin</span>/<span class="title">x86</span>\<span class="title">_amd64</span>/<span class="title">cl.exe</span> -- <span class="title">works</span> -- <span class="title">Detecting</span> <span class="title">C</span> <span class="title">compiler</span> <span class="title">ABI</span> <span class="title">info</span> -- <span class="title">Detecting</span> <span class="title">C</span> <span class="title">compiler</span> <span class="title">ABI</span> <span class="title">info</span> - <span class="title">done</span> -- <span class="title">Check</span> <span class="title">for</span> <span class="title">working</span> <span class="title">CXX</span> <span class="title">compiler</span>: <span class="title">C</span>:/<span class="title">Program</span> <span class="title">Files</span> (<span class="title">x86</span>)/<span class="title">Microsoft</span> <span class="title">Visual</span> <span class="title">Studio</span> 14.0/<span class="title">VC</span>/<span class="title">bin</span>/<span class="title">x86</span>\<span class="title">_amd64</span>/<span class="title">cl.exe</span> -- <span class="title">Check</span> <span class="title">for</span> <span class="title">working</span> <span class="title">CXX</span> <span class="title">compiler</span>: <span class="title">C</span>:/<span class="title">Program</span> <span class="title">Files</span> (<span class="title">x86</span>)/<span class="title">Microsoft</span> <span class="title">Visual</span> <span class="title">Studio</span> 14.0/<span class="title">VC</span>/<span class="title">bin</span>/<span class="title">x86</span>\<span class="title">_amd64</span>/<span class="title">cl.exe</span> -- <span class="title">works</span> -- <span class="title">Detecting</span> <span class="title">CXX</span> <span class="title">compiler</span> <span class="title">ABI</span> <span class="title">info</span> -- <span class="title">Detecting</span> <span class="title">CXX</span> <span class="title">compiler</span> <span class="title">ABI</span> <span class="title">info</span> - <span class="title">done</span> -- <span class="title">Detecting</span> <span class="title">CXX</span> <span class="title">compile</span> <span class="title">features</span> -- <span class="title">Detecting</span> <span class="title">CXX</span> <span class="title">compile</span> <span class="title">features</span> - <span class="title">done</span> -- <span class="title">C</span>++11 <span class="title">activated</span>. -- <span class="title">Looking</span> <span class="title">for</span> <span class="title">sys</span>/<span class="title">types.h</span> -- <span class="title">Looking</span> <span class="title">for</span> <span class="title">sys</span>/<span class="title">types.h</span> - <span class="title">found</span> -- <span class="title">Looking</span> <span class="title">for</span> <span class="title">stdint.h</span> -- <span class="title">Looking</span> <span class="title">for</span> <span class="title">stdint.h</span> - <span class="title">found</span> -- <span class="title">Looking</span> <span class="title">for</span> <span class="title">stddef.h</span> -- <span class="title">Looking</span> <span class="title">for</span> <span class="title">stddef.h</span> - <span class="title">found</span> -- <span class="title">Check</span> <span class="title">size</span> <span class="title">of</span> <span class="title">void</span>\* -- <span class="title">Check</span> <span class="title">size</span> <span class="title">of</span> <span class="title">void</span>\* - <span class="title">done</span> -- <span class="title">Enabling</span> <span class="title">SSE2</span> <span class="title">instructions</span> -- <span class="title">Looking</span> <span class="title">for</span> <span class="title">png</span>\<span class="title">_create</span>\<span class="title">_read</span>\<span class="title">_struct</span> -- <span class="title">Looking</span> <span class="title">for</span> <span class="title">png</span>\<span class="title">_create</span>\<span class="title">_read</span>\<span class="title">_struct</span> - <span class="title">found</span> -- <span class="title">Looking</span> <span class="title">for</span> <span class="title">jpeg</span>\<span class="title">_read</span>\<span class="title">_header</span> -- <span class="title">Looking</span> <span class="title">for</span> <span class="title">jpeg</span>\<span class="title">_read</span>\<span class="title">_header</span> - <span class="title">not</span> <span class="title">found</span> -- <span class="title">Searching</span> <span class="title">for</span> <span class="title">BLAS</span> <span class="title">and</span> <span class="title">LAPACK</span> -- <span class="title">Configuring</span> <span class="title">done</span> -- <span class="title">Generating</span> <span class="title">done</span> -- <span class="title">Build</span> <span class="title">files</span> <span class="title">have</span> <span class="title">been</span> <span class="title">written</span> <span class="title">to</span>: <span class="title">D</span>:/<span class="title">Works</span>/<span class="title">Lib</span>/<span class="title">DLib</span>/19.4/<span class="title">examples</span>/<span class="title">build</span>\<span class="title">_cuda</span>\<span class="title">_off</span></span></span><br></pre></td></tr></table></figure><p>とします。<br>この際、cmakeを実行するフォルダを<strong>build</strong>フォルダと別名にしておかないと、CUDAを有効にしたバイナリが上書きされますので注意です。<br>ビルドは同様に、</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\\<span class="title">Works</span>\\<span class="title">Lib</span>\\<span class="title">DLib</span>\\19.4\\<span class="title">examples</span>\\<span class="title">build</span>\<span class="title">_cuda</span>\<span class="title">_off</span>&gt;&quot;<span class="title">C</span>:\\<span class="title">Program</span> <span class="title">Files</span>\\<span class="title">CMake</span>\\<span class="title">bin</span>\\<span class="title">cmake.exe</span>&quot; --<span class="title">build</span> . --<span class="title">config</span> <span class="title">Release</span>  </span></span><br><span class="line"><span class="function">..大量のログ..  </span></span><br><span class="line"><span class="function">188 個の警告 0 エラー  </span></span><br><span class="line"><span class="function">経過時間 00:21:28.63</span></span><br></pre></td></tr></table></figure><p>とします。</p>]]></content>
      
      
      <categories>
          
          <category> マルチメディア </category>
          
          <category> gpupu </category>
          
          <category> CUDA </category>
          
          <category> 機械学習 </category>
          
          <category> GPUPU </category>
          
          <category> dlib </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その71 NLogでLoggerの読み込みに失敗する</title>
      <link href="2017/06/20/2475/"/>
      <url>2017/06/20/2475/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p><strong>NLog</strong>はシンプルで使いやすいです。<br>個人的にはlog4netよりもシンプルで使いやすくて好きです。</p><p>そんなNLogで、複数のLoggerを準備している際に問題が起きました。<br>下記のような<strong>NLog.config</strong>です。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nlog</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.nlog-project.org/schemas/NLog.xsd&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">targets</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">&quot;ABC&quot;</span> <span class="attr">xsi:type</span>=<span class="string">&quot;File&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;file.txt&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">&quot;DEF_&quot;</span> <span class="attr">xsi:type</span>=<span class="string">&quot;File&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;file.txt&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">&quot;GHI&quot;</span> <span class="attr">xsi:type</span>=<span class="string">&quot;File&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;file.txt&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">targets</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">rules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;ABCLogger&quot;</span> <span class="attr">minlevel</span>=<span class="string">&quot;Info&quot;</span> <span class="attr">writeTo</span>=<span class="string">&quot;ABC&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;DEFLogger&quot;</span> <span class="attr">minlevel</span>=<span class="string">&quot;Trace&quot;</span> <span class="attr">writeTo</span>=<span class="string">&quot;DEF&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;GHILogger&quot;</span> <span class="attr">minlevel</span>=<span class="string">&quot;Trace&quot;</span> <span class="attr">writeTo</span>=<span class="string">&quot;GHI&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">rules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nlog</span>&gt;</span></span><br></pre></td></tr></table></figure><p>このファイルをアプリと一緒に読み込み、<strong>LogManager.GetLogger(“GHILogger”);</strong> と実行してもログを書き出すことができません。<br>しかもエラーも発生しません。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>ポイントは、targets内の、targetセクションにおいて、rules内のloggerセクションのwriteTo属性と対応付けすることが出来ないtargetが存在することになります。<br>つまり、<strong>DEF_</strong> がそれです。<br>このため、NLogの内部では処理がおかしくなっているのか、<strong>ABCLogger</strong> は読み込めますが、次の <strong>DEFLogger</strong> は対応付く <strong>DEF</strong> が存在しないため読み込めません。<br>さらに不味いのは、この状態だと後続の <strong>GHILogger</strong> も読めません。<br>途中で対応付けに失敗すると、それ以降の対応付けに失敗あるいは対応付けそのものを中止してしまうのでしょう。</p><p>対応は簡単です。</p><p>targetのname属性またはloggerのwriteTo属性を正しく対応付けるように修正するだけです。<br>この場合は、2番目のtargetのname属性を <strong>DEF</strong> に修正することで正しく動きます。<br>仕事で、ログが出力されなくて悩みましたが、一見無関係に見える、使っていないLoggerが影響するとは思いませんでした。</p>]]></content>
      
      
      <categories>
          
          <category> Logging </category>
          
          <category> logging </category>
          
          <category> NLog </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでLinuxと遊んでみる Visual Studio Code編 第5回</title>
      <link href="2017/05/27/2466/"/>
      <url>2017/05/27/2466/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>前回は、<strong>System.IO.FileStream</strong>を使ってファイルのアクセス権限を確認してみました。</p><p>今回は少し高度なファイルへのアクセス可否についてです。</p><h1 id="P-Invoke"><a href="#P-Invoke" class="headerlink" title="P/Invoke"></a>P/Invoke</h1><p>ファイルに実際にアクセスしてみて、アクセスできるかどうかを試すって、結構良くないと思います。<br>かといって、Windowsの.NET Frameworkにアクセスできるかどうかを試すAPIは無かったはずです。</p><p>ですが、Linuxのシステムコールを使えば、それが実現可能です。<br>システムコールの呼び出しは当然<strong>P/Invoke</strong>で実現します。</p><p>Linuxのシステムコールで、ファイルに対して、読み込みができるか、書き込みが出来るか、実行できるか、という状態を調べるには、<strong>access</strong>を呼び出します。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://linuxjm.osdn.jp/html/LDP_man-pages/man2/access.2.html" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=linuxjm.osdn.jp"></img><div class="hbc-site-name">linuxjm.osdn.jp</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">Man page of ACCESS</div><div class="hbc-url">https://linuxjm.osdn.jp/html/LDP_man-pages/man2/access.2.html</div></div></div></div></a></div></div><p>大抵のシステムコールは<strong>libc</strong>に定義されています。<br>実際に、libcに定義されている関数の一覧からaccessを探してみます。<br>そのために、<strong>nm</strong>コマンドに <strong>-D</strong> オプションを渡します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ nm -D /usr/lib64/lib.so.6 | grep access</span><br><span class="line">00000000000e8ce0 W access</span><br><span class="line">00000000000e8d10 W eaccess</span><br><span class="line">00000000000e8d10 W euidaccess</span><br><span class="line">00000000000e8e30 T faccessat</span><br></pre></td></tr></table></figure><p>これでlibcにaccessが定義されていることがわかりました。<br>次にaccessの使い方です。<br>定義は下記です。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">access</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *pathname, <span class="keyword">int</span> mode)</span></span>;</span><br></pre></td></tr></table></figure><p>第一引数はファイルパスです。<br>第二引数は調べるモードを表します。</p><table><thead><tr><th align="left">値</th><th align="left">意味</th></tr></thead><tbody><tr><td align="left">F_OK</td><td align="left">存在するか</td></tr><tr><td align="left">R_OK</td><td align="left">読み込み可能か</td></tr><tr><td align="left">W_OK</td><td align="left">書き込み可能か</td></tr><tr><td align="left">X_OK</td><td align="left">実行可能か</td></tr></tbody></table><p>第二引数のモードを組み合わせることで、アクセス可否をチェックします。<br>指定したモードを満たせば、0を返します。<br>満たさない場合は-1を返します。</p><h1 id="Try"><a href="#Try" class="headerlink" title="Try"></a>Try</h1><p>今回は、**/etc/passwd**を調べてみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls -la /etc/passwd</span><br><span class="line">-rw-r--r--. 1 root root 2336  4月 20 23:58 /etc/passwd</span><br></pre></td></tr></table></figure><p>root以外は、読み込みしかできません。</p><p>では、これをコードで調べてみます。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">internal</span> <span class="keyword">enum</span> Mode : <span class="keyword">int</span></span><br><span class="line">        &#123;</span><br><span class="line">            F_OK = <span class="number">0</span>,</span><br><span class="line">            X_OK = <span class="number">1</span>,</span><br><span class="line">            W_OK = <span class="number">2</span>,</span><br><span class="line">            R_OK = <span class="number">4</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">DllImport(<span class="meta-string">&quot;libc&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">access</span>(<span class="params"><span class="keyword">string</span> path, Mode mode</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (args.Length != <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Must specify full path!!&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> path = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (access(path, Mode.F_OK) != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Specified path does not exist!!&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(access(path, Mode.R_OK) == <span class="number">0</span> ? <span class="string">&quot;Can read&quot;</span> : <span class="string">&quot;Can not read&quot;</span>);</span><br><span class="line">            Console.WriteLine(access(path, Mode.W_OK) == <span class="number">0</span> ? <span class="string">&quot;Can write&quot;</span> : <span class="string">&quot;Can not write&quot;</span>);</span><br><span class="line">            Console.WriteLine(access(path, Mode.X_OK) == <span class="number">0</span> ? <span class="string">&quot;Can exec&quot;</span> : <span class="string">&quot;Can not exec&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引数で指定したファイルの読み込み、書き込み、実行の可否を調べます。</p><p>前回同様、まずは、一般ユーザで確認します。<br><strong>which</strong>でdotnetコマンドの場所を調べているのは、rootユーザで<strong>dotnet</strong>までのパスが通っていなかったので、実施しているだけです。<br>パスが通っているなら不要です。<br>引数のファイルパスは<strong>dotnet run</strong>の直後に追記することで指定できます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dotnetコマンドの場所を調べます</span></span><br><span class="line">$ <span class="built_in">which</span> dotnet</span><br><span class="line">/opt/rh/rh-dotnetcore11/root/usr/bin/dotnet</span><br><span class="line"></span><br><span class="line">$ /opt/rh/rh-dotnetcore11/root/usr/bin/dotnet run /etc/passwd</span><br><span class="line">Can <span class="built_in">read</span></span><br><span class="line">Can not write</span><br><span class="line">Can not <span class="built_in">exec</span></span><br></pre></td></tr></table></figure><p>読み込みしかできないようです。<br><strong>ls -la</strong>で調べたとおりです。</p><p>続いて、rootで確認します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo /opt/rh/rh-dotnetcore11/root/usr/bin/dotnet run /etc/passwd</span><br><span class="line">Can <span class="built_in">read</span></span><br><span class="line">Can write</span><br><span class="line">Can not <span class="built_in">exec</span></span><br></pre></td></tr></table></figure><p>読み書きができて、実行できないことが確認できました。<br>これも、<strong>ls -la</strong>で調べたとおりです。</p><p>では、存在しないファイルを指定してみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ /opt/rh/rh-dotnetcore11/root/usr/bin/dotnet run /etc/passwd2</span><br><span class="line">Specified path does not exist!!</span><br></pre></td></tr></table></figure><p>きちんと存在しないことを確認してくれます。</p><p>フォルダも調べることが出来ます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ ls -lad /etc</span><br><span class="line">drwxr-xr-x. 141 root root 8192  5月 27 16:15 /etc</span><br><span class="line">$ /opt/rh/rh-dotnetcore11/root/usr/bin/dotnet run /etc</span><br><span class="line">Can <span class="built_in">read</span></span><br><span class="line">Can not write</span><br><span class="line">Can <span class="built_in">exec</span></span><br><span class="line">$ sudo /opt/rh/rh-dotnetcore11/root/usr/bin/dotnet run /etc</span><br><span class="line">Can <span class="built_in">read</span></span><br><span class="line">Can write</span><br><span class="line">Can <span class="built_in">exec</span></span><br></pre></td></tr></table></figure><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>Windows同様、P/Invokeが利用可能であることを確認できました。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET </category>
          
          <category> Linux </category>
          
          <category> net-framework </category>
          
          <category> .NET Framework </category>
          
          <category> linux </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> Red Hat Enterprise Linux </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> net </category>
          
          <category> C# </category>
          
          <category> .NET Core </category>
          
          <category> .NETでLinuxと遊んでみる </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでLinuxと遊んでみる Visual Studio Code編 第4回</title>
      <link href="2017/05/27/2461/"/>
      <url>2017/05/27/2461/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>前回は、<strong>System.IO.DirectoryInfo</strong>を使って、ファイルの一覧を列挙してみました。</p><p>今回はファイルへのアクセス可否についてです。</p><h1 id="May-I-open-this-file"><a href="#May-I-open-this-file" class="headerlink" title="May I open this file?"></a>May I open this file?</h1><p>Windows上のC#なら、ファイルに書き込みできるかどうか等は、実際にファイルへのストリームを作成してみたりします。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">bool</span> <span class="title">CanRead</span>(<span class="params"><span class="keyword">string</span> path</span>)</span> &#123; FileStream stream = <span class="literal">null</span>;  </span><br><span class="line"><span class="keyword">try</span> &#123; stream = <span class="keyword">new</span> FileStream(path, FileMode.Open, FileAccess.Read, FileShare.None); &#125; <span class="keyword">catch</span> &#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125; <span class="keyword">finally</span> &#123; stream?.Dispose(); &#125;  </span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br></pre></td></tr></table></figure><p>では、Linuxでこれを実施するとどうなるでしょう? ありがちなのは、所有者がrootになっていて、root以外が読み込みも出来ないパターンです。<br>例えば、**/etc/sudo.conf**がそうです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls -la /etc/sudo.conf -rw-r-----. 1 root root 1786 11月 24 2016 /etc/sudo.conf $ cat /etc/sudo.conf cat: sudo.conf: 許可がありません</span><br></pre></td></tr></table></figure><p>なので、こんなソースを用意してみました。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System; <span class="keyword">using</span> System.IO;  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication</span> &#123; <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123; <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>\[\] args</span>)</span> &#123; <span class="keyword">if</span> (args.Length != <span class="number">1</span>) &#123; Console.WriteLine(<span class="string">&quot;Must specify full path!!&quot;</span>); <span class="keyword">return</span>; &#125;  </span><br><span class="line"><span class="keyword">var</span> path = args\[<span class="number">0</span>\]; <span class="keyword">if</span> (!File.Exists(path)) &#123; Console.WriteLine(<span class="string">&quot;Specified path does not exist!!&quot;</span>); <span class="keyword">return</span>; &#125;  </span><br><span class="line">FileStream stream = <span class="literal">null</span>;  </span><br><span class="line"><span class="keyword">try</span> &#123; stream = <span class="keyword">new</span> FileStream(path, FileMode.Open, FileAccess.Read, FileShare.None); Console.WriteLine(<span class="string">$&quot;&#x27;<span class="subst">&#123;path&#125;</span>&#x27; can be opened!!&quot;</span>); &#125; <span class="keyword">catch</span> (Exception ex) &#123; Console.WriteLine(<span class="string">$&quot;Can not open file. Reason: <span class="subst">&#123;ex.Message&#125;</span>!!&quot;</span>); &#125; <span class="keyword">finally</span> &#123; stream?.Dispose(); &#125; &#125; &#125; &#125;</span><br></pre></td></tr></table></figure><p>引数で指定したファイルを開くことが出来れば、**’’ can be opened!!**と表示されます。<br>ファイルを開こうとして、例外を投げれば、開けなかった理由が表示される、というシンプルなテストです。<br>ソースを記述したら、プロジェクトフォルダで</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet restore $ dotnet build</span><br></pre></td></tr></table></figure><p>を実行します。<br>これでビルドが成功するはずです。<br>まずは、一般ユーザで確認します。<br><strong>which</strong>でdotnetコマンドの場所を調べているのは、rootユーザで<strong>dotnet</strong>までのパスが通っていなかったので、実施しているだけです。<br>パスが通っているなら不要です。<br>引数のファイルパスは<strong>dotnet run</strong>の直後に追記することで指定できます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dotnetコマンドの場所を調べます $ which dotnet /opt/rh/rh-dotnetcore11/root/usr/bin/dotnet  </span></span><br><span class="line">$ /opt/rh/rh-dotnetcore11/root/usr/bin/dotnet run /etc/sudo.conf Can not open file. Reason: Access to the path <span class="string">&#x27;/etc/sudo.conf&#x27;</span> is denied.!!</span><br></pre></td></tr></table></figure><p>アクセスが拒否されています。<br>続いて、rootで確認します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo /opt/rh/rh-dotnetcore11/root/usr/bin/dotnet run /etc/sudo.conf <span class="string">&#x27;/etc/sudo.conf&#x27;</span> can be opened!!</span><br></pre></td></tr></table></figure><p>無事にアクセスできました。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>基本的なアクセス権も.NET Coreで対処できそうです。<br>次回は、もう少し高度な方法で読み書きできるかを調べてみたいと思います。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET </category>
          
          <category> Linux </category>
          
          <category> net-framework </category>
          
          <category> linux </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> Red Hat Enterprise Linux </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> net </category>
          
          <category> C# </category>
          
          <category> .NET Core </category>
          
          <category> .NETでLinuxと遊んでみる </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでLinuxと遊んでみる Visual Studio Code編 第3回</title>
      <link href="2017/05/26/2451/"/>
      <url>2017/05/26/2451/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>前回は、デバッグ時に引数を指定して実行してみました。</p><p>今回はファイルパスを使ったAPIのメモです。</p><h1 id="System-IO-DirectoryInfo"><a href="#System-IO-DirectoryInfo" class="headerlink" title="System.IO.DirectoryInfo"></a>System.IO.DirectoryInfo</h1><h2 id="相対パス扱いなの"><a href="#相対パス扱いなの" class="headerlink" title="相対パス扱いなの?"></a>相対パス扱いなの?</h2><p>前回、デバッグ引数として、**<del>/<strong>を指定しました。<br>Linuxにおいてこのパスは、実行ユーザのホームディレクトリを示します。<br>(</strong></del>**も同様。) これを使って、下記のコードを実行します。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication</span> &#123; <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123; <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>\[\] args</span>)</span> &#123; <span class="keyword">var</span> path = args\[<span class="number">0</span>\]; Console.WriteLine(<span class="string">$&quot;Path is &#x27;<span class="subst">&#123;path&#125;</span>&#x27;&quot;</span>); <span class="keyword">foreach</span>(<span class="keyword">var</span> f <span class="keyword">in</span> <span class="keyword">new</span> System.IO.DirectoryInfo(path).GetFiles()) Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;f.Name&#125;</span>&quot;</span>); &#125; &#125; &#125;</span><br></pre></td></tr></table></figure><p>よくある、指定したパスの配下のファイルを列挙するプログラムです。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://docs.microsoft.com/en-us/dotnet/api/system.io.directoryinfo.getfiles?view=netcore-1.1" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=docs.microsoft.com"></img><div class="hbc-site-name">docs.microsoft.com</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png"></img></div><div class="hbc-text"><div class="hbc-title">DirectoryInfo.GetFiles Method (System.IO)</div><div class="hbc-url">https://docs.microsoft.com/en-us/dotnet/api/system.io.directoryinfo.getfiles?view=netcore-1.1</div><div class="hbc-description">Returns a file list from the current directory. </div></div></div></div></a></div></div><p>これを実行すると下記の例外を投げます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Unhandled Exception: System.IO.DirectoryNotFoundException: Could not find a part of the path &#39;&#x2F;home&#x2F;XXXXXX&#x2F;git&#x2F;Demo&#x2F;DotNetCoreLinux3&#x2F;~&#x2F;&#39;. at System.IO.UnixFileSystem.FileSystemEnumerable\&#96;1.OpenDirectory(String fullPath) at System.IO.UnixFileSystem.FileSystemEnumerable\&#96;1.Enumerate() at System.IO.UnixFileSystem.FileSystemEnumerable\&#96;1..ctor(String userPath, String searchPattern, SearchOption searchOption, SearchTarget searchTarget, Func\&#96;3 translateResult) at System.IO.UnixFileSystem.EnumerateFileSystemInfos(String fullPath, String searchPattern, SearchOption searchOption, SearchTarget searchTarget) at System.IO.DirectoryInfo.InternalGetFiles(String searchPattern, SearchOption searchOption) at System.IO.DirectoryInfo.GetFiles() at ConsoleApplication.Program.Main(String\[\] args) in &#x2F;home&#x2F;XXXXXX&#x2F;git&#x2F;Demo&#x2F;DotNetCoreLinux3&#x2F;Program.cs:line 11</span><br></pre></td></tr></table></figure><p><strong>Could not find a part of the path ‘/home/XXXXXX/git/Demo/DotNetCoreLinux3/~/‘**という記述から、指定したパスは、カレントディレクトリからの相対パス扱いになってしまいました。<br>なので、</strong>System.IO.Path.GetFullPath**メソッドで絶対パスに変換してみます。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://docs.microsoft.com/en-us/dotnet/api/system.io.path.getfullpath?view=netcore-1.1#System_IO_Path_GetFullPath_System_String_" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=docs.microsoft.com"></img><div class="hbc-site-name">docs.microsoft.com</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png"></img></div><div class="hbc-text"><div class="hbc-title">Path.GetFullPath Method (System.IO)</div><div class="hbc-url">https://docs.microsoft.com/en-us/dotnet/api/system.io.path.getfullpath?view=netcore-1.1#System_IO_Path_GetFullPath_System_String_</div><div class="hbc-description">Returns the absolute path for the specified path string. </div></div></div></div></a></div></div><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">using</span> System;  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication</span> &#123; <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123; <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>\[\] args</span>)</span> &#123; Console.WriteLine(<span class="string">$&quot;Argument is &#x27;<span class="subst">&#123;args\[<span class="number">0</span>\]&#125;</span>&#x27;&quot;</span>);  </span><br><span class="line"><span class="keyword">var</span> path = System.IO.Path.GetFullPath(args\[<span class="number">0</span>\]); Console.WriteLine(<span class="string">$&quot;Path is &#x27;<span class="subst">&#123;path&#125;</span>&#x27;&quot;</span>);  </span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">var</span> f <span class="keyword">in</span> <span class="keyword">new</span> System.IO.DirectoryInfo(path).GetFiles()) Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;f.Name&#125;</span>&quot;</span>); &#125; &#125; &#125;</span><br></pre></td></tr></table></figure><p>変わらず同じ例外が出力されます。<br>デバッグコンソールの出力は下記のようになります。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Argument is &#39;~&#39; Path is &#39;&#x2F;home&#x2F;XXXXXX&#x2F;git&#x2F;Demo&#x2F;DotNetCoreLinux3&#x2F;~&#39;</span><br></pre></td></tr></table></figure><p>なので、**~**はダメな模様。</p><h2 id="ルートから指定してみる"><a href="#ルートから指定してみる" class="headerlink" title="ルートから指定してみる"></a>ルートから指定してみる</h2><p>Windowsでも、パス指定の際の基準はカレントディレクトリになりました。<br>でも、フルパスを指定したなら、それはフルパスとして解釈されます。<br>間違っても、**&lt;カレントディレクトリ&gt;\&lt;フルパス&gt;<strong>みたいな解釈はされません。<br>Linuxでもそうなるでしょうか? Linuxにおけるルートは</strong>/<strong>になります。<br>次は、デバッグ引数に</strong>/<strong>を指定して、実行してみます。<br>無事に最後まで実行できています。<br>また、</strong>/<strong>はGetFullPathでも</strong>/**として認識されています。</p><p><a href="../../../../public/2017/05/bfaee64cfd5435b06420a1383643a39b.png"><img src="../../../../public/2017/05/bfaee64cfd5435b06420a1383643a39b.png"></a> きちんとルートディレクトリの内容と比較してみます。<br>同じ内容であることがわかります。<br><a href="../../../../public/2017/05/8f9faae92bcd8eacc4c3635614bada4c.png"><img src="../../../../public/2017/05/8f9faae92bcd8eacc4c3635614bada4c.png"></a></p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>少しずつ基本的なAPIを使えるようになってきました。<br>Windows/Mac/Linuxでの挙動の違いを比較してみたいですね。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET </category>
          
          <category> Linux </category>
          
          <category> net-framework </category>
          
          <category> linux </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> Red Hat Enterprise Linux </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> net </category>
          
          <category> C# </category>
          
          <category> .NET Core </category>
          
          <category> .NETでLinuxと遊んでみる </category>
          
          <category> Visual Studio Code </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでLinuxと遊んでみる Visual Studio Code編 第2回</title>
      <link href="2017/05/25/2419/"/>
      <url>2017/05/25/2419/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>前回は、GUIからgitによるコミットを実行しました。</p><p>今回はDebug時の引数指定のメモです。</p><h1 id="Try"><a href="#Try" class="headerlink" title="Try"></a>Try</h1><p>デバッグ時の引数を指定してみます。<br><strong>Visula Studio</strong>使っているなら、プロジェクトのプロパティ見て、引数を、ってのがすぐ思い浮かべますが、プロジェクトファイルが存在しない(.NET Core 1.1の場合)ので、ちょっと構えてしまいます。<br>Debugの手順については、きちんと下記の公式ページの<strong>Launch.json attributes</strong>に明記されています。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://code.visualstudio.com/docs/editor/debugging#_launchjson-attributes" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=code.visualstudio.com"></img><div class="hbc-site-name">code.visualstudio.com</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://code.visualstudio.com/assets/docs/editor/debugging/Debugging.png"></img></div><div class="hbc-text"><div class="hbc-title">Debugging in Visual Studio Code</div><div class="hbc-url">https://code.visualstudio.com/docs/editor/debugging#_launchjson-attributes</div><div class="hbc-description">One of the great things in Visual Studio Code is debugging support.  Set breakpoints, step-in, inspect variables and more.</div></div></div></div></a></div></div><p>この<strong>launch.json</strong>が肝になります。<br>ちょっと上のページは文字だけでわかりにくいので画像をつけて。<br>まず<strong>dotnet new</strong>でプロジェクト作成後のフォルダを開いた状態です。</p><p><a href="../../../../public/2017/05/b33fa965fed8ada85e64e9dd08bfc4b4.png"><img src="../../../../public/2017/05/b33fa965fed8ada85e64e9dd08bfc4b4-1024x693.png"></a><br> <strong>Program.cs</strong>の内容は</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication</span> &#123; <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123; <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>\[\] args</span>)</span> &#123; Console.WriteLine(args\[<span class="number">0</span>\]); &#125; &#125; &#125;</span><br></pre></td></tr></table></figure><p>に変更します。<br>また、Console.WriteLineの行とその次の行にブレークポイントを貼っておきます。</p><p>左側のデバッグアイコンをクリックします。</p><p><a href="../../../../public/2017/05/dac71873847fdf5d634c5677a4472d88.png"><img src="../../../../public/2017/05/dac71873847fdf5d634c5677a4472d88.png"></a></p><p>デバッグペインが出現するので、上部の歯車アイコンをクリックします。</p><p><a href="../../../../public/2017/05/01b28b7b1badb6a76ec0f2cfad5c496f.png"><img src="../../../../public/2017/05/01b28b7b1badb6a76ec0f2cfad5c496f.png"></a></p><p><strong>.NET Core</strong>を選択します。</p><p><a href="../../../../public/2017/05/ec3811c36ff1efb98d3d7c15467e6fe0.png"><img src="../../../../public/2017/05/ec3811c36ff1efb98d3d7c15467e6fe0.png"></a></p><p><strong>launch.json</strong>が作成されて表示されます。<br><strong>name:**が</strong>.NET Core Launch (console)**になっているセクションを</p><ul><li><p>“program”: ${workspaceRoot}/bin/Debug//&lt;project-name.dll&gt;</p><ul><li><strong>“program”: ${workspaceRoot}/bin/Debug/netcoreapp1.1/DotNetCoreLinux2.dll</strong> に変更</li></ul></li><li><p>“args: []“</p><ul><li><strong>“args: [“~/“]“</strong></li></ul></li></ul><p>に変更して、保存します。</p><p><a href="../../../../public/2017/05/b548eff4976ef2708a1512afce234a8c.png"><img src="../../../../public/2017/05/b548eff4976ef2708a1512afce234a8c.png"></a></p><p>この状態で<strong>F5</strong>でデバッグを開始すると、<strong>エラー preLaunchTask ‘build’ が見つかりませんでした。</strong>とエラーが表示されます。<br>右側の<strong>タスクランナーの構成</strong>という選択肢を選択します。</p><p><a href="../../../../public/2017/05/d8bae97927166d82a5b51285c5353f12.png"><img src="../../../../public/2017/05/d8bae97927166d82a5b51285c5353f12-1024x117.png"></a></p><p>ドロップダウンから**.NET Core**を選択します。</p><p><a href="../../../../public/2017/05/b0497188a75a8df4831b285ece8a754b.png"><img src="../../../../public/2017/05/b0497188a75a8df4831b285ece8a754b-1024x356.png"></a></p><p><strong>tasks.json</strong>が作成されて、表示されます。<br>特に変更する必要はありません。</p><p><a href="../../../../public/2017/05/3ce5e21ee467c72540334d132aebf979.png"><img src="../../../../public/2017/05/3ce5e21ee467c72540334d132aebf979.png"></a></p><p>再度、F5でデバッグを実施します。<br>コードにエラーが無くても、<strong>エラー preLaunchTask ‘build’ の実行中にビルド エラーが検出されました。</strong>とエラーが表示されるかもしれませんが、そのままデバッグが始まります。</p><p><a href="../../../../public/2017/05/88e89113e3040b616417f331b3a203c9.png"><img src="../../../../public/2017/05/88e89113e3040b616417f331b3a203c9-1024x384.png"></a></p><p>引数<strong>args</strong>にカーソルを合わせると、ウォッチ出来ます。<br><strong>launch.json</strong>で指定した引数が、先頭に格納されているのがわかります。</p><p><a href="../../../../public/2017/05/a8322cec489e74ab2030642466378480.png"><img src="../../../../public/2017/05/a8322cec489e74ab2030642466378480.png"></a></p><p>次の行に進めます。<strong>デバッグコンソール</strong>に**args[0]**の内容が表示されています。</p><p><a href="../../../../public/2017/05/22c292813423d3775269bd3bb8f6182f.png"><img src="../../../../public/2017/05/22c292813423d3775269bd3bb8f6182f.png"></a></p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>引数の指定が出来るようになりました。<br>次回は、ファイルパスを利用したAPIを試してみます。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET </category>
          
          <category> Linux </category>
          
          <category> net-framework </category>
          
          <category> .NET Framework </category>
          
          <category> linux </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> Red Hat Enterprise Linux </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> net </category>
          
          <category> Visual Studio Code </category>
          
          <category> .NET Core </category>
          
          <category> .NETでLinuxと遊んでみる </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでLinuxと遊んでみる Visual Studio Code編 第1.5回</title>
      <link href="2017/05/25/2401/"/>
      <url>2017/05/25/2401/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>前回は、CUI、GUIから.NET Coreのプロジェクトを実行、デバッグしました。</p><p>今回はちょっと脇道で、バージョン管理システムとしてgitをVisual Studio Codeから使ってみます。<br>個人的には、コミット、履歴表示、元に戻す(チェックアウト)は、IDEから実施し、プッシュやブランチの作成は、Gitクライアントから実行するという切り分けが好きです。</p><h1 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h1><p>まずは、gitをインストールする必要があります。<br>Visual Studio Codeは、gitに標準で対応していますが、gitの機能そのものにはgitそれ自体に依存しています。<br>下記のコマンドで実行しますが、<strong>-y</strong>はこの時点で付与しません。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ yum install git 読み込んだプラグイン:langpacks, product-id, search-disabled-repos, subscription-manager 依存性の解決をしています --&gt; トランザクションの確認を実行しています。</span><br><span class="line">---&gt; パッケージ git.x86\_64 0:1.8.3.1-6.el7\_2.1 を インストール --&gt; 依存性の処理をしています: perl-Git = 1.8.3.1-6.el7\_2.1 のパッケージ: git-1.8.3.1-6.el7\_2.1.x86\_64 --&gt; 依存性の処理をしています: perl(Error) のパッケージ: git-1.8.3.1-6.el7\_2.1.x86\_64 --&gt; 依存性の処理をしています: perl(Git) のパッケージ: git-1.8.3.1-6.el7\_2.1.x86\_64 --&gt; 依存性の処理をしています: perl(Term::ReadKey) のパッケージ: git-1.8.3.1-6.el7\_2.1.x86\_64 --&gt; トランザクションの確認を実行しています。</span><br><span class="line">---&gt; パッケージ perl-Error.noarch 1:0.17020-2.el7 を インストール ---&gt; パッケージ perl-Git.noarch 0:1.8.3.1-6.el7\_2.1 を インストール ---&gt; パッケージ perl-TermReadKey.x86\_64 0:2.30-20.el7 を インストール --&gt; 依存性解決を終了しました。</span><br><span class="line"> </span><br><span class="line">依存性を解決しました  </span><br><span class="line">\==================================================================================================================================================================================== Package アーキテクチャー バージョン リポジトリー 容量 ==================================================================================================================================================================================== インストール中: git x86\_64 1.8.3.1-6.el7\_2.1 rhel-7-server-rpms 4.4 M 依存性関連でのインストールをします: perl-Error noarch 1:0.17020-2.el7 rhel-7-server-rpms 32 k perl-Git noarch 1.8.3.1-6.el7\_2.1 rhel-7-server-rpms 53 k perl-TermReadKey x86\_64 2.30-20.el7 rhel-7-server-rpms 31 k  </span><br><span class="line">トランザクションの要約 ==================================================================================================================================================================================== インストール 1 パッケージ (+3 個の依存関係のパッケージ)  </span><br><span class="line">総ダウンロード容量: 4.5 M インストール容量: 22 M Is this ok \[y/d/N\]:</span><br></pre></td></tr></table></figure><p>どうもyumリポジトリに入っているgitのバージョンが1.8とかなり古いようです。<br>(2017/05/17時点で最新版は2.13.0) なので、自分でビルドします。<br>作業手順は下記を参照しました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://bacchi.me/linux/how-to-install-git/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=bacchi.me"></img><div class="hbc-site-name">bacchi.me</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">CentOS に最新版のGitをインストールする - bacchi.me</div><div class="hbc-url">https://bacchi.me/linux/how-to-install-git/</div></div></div></div></a></div></div><h1 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h1><p>ただし、上記は、古いgitがインストールされている環境です。<br>対して、こっちはGitKrakenがいるので、GitKrakenを使って、gitのソースをCloneします。<br>cloneするソースはmasterブランチなので、<strong><a href="https://github.com/git/git.git">https://github.com/git/git.git</a></strong>になります。</p><p><a href="../../../../public/2017/05/5f0ed32cde66228d4a4e68d8255499a7.png"><img src="../../../../public/2017/05/5f0ed32cde66228d4a4e68d8255499a7-1024x693.png"></a></p><p>Cloneが完了した、Clone先のフォルダに移動します。<br>まず必要な依存関係を解決します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> &lt;gitのクローン先&gt; $ yum -y install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-ExtUtils-MakeMaker <span class="comment"># GCCがないならインストール $ yum -y install gcc</span></span><br></pre></td></tr></table></figure><p>続いて、ビルドとインストールを実行します。<br>GCCがないなら、makeそのものが失敗するので要確認。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make prefix=/usr/<span class="built_in">local</span> all $ make prefix=/usr/<span class="built_in">local</span> install</span><br></pre></td></tr></table></figure><p>私の場合、インストール完了後、再度シェルを立ち上げ直すと、gitが有効になりました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git --version git version 2.13.GIT </span><br></pre></td></tr></table></figure><h1 id="git-from-Visual-Studio-Code"><a href="#git-from-Visual-Studio-Code" class="headerlink" title="git from Visual Studio Code"></a>git from Visual Studio Code</h1><p>gitをインストールし、Visual Studio Codeを起動し、プロジェクトフォルダを開きます。<br>既に、プロジェクトフォルダがgitで初期化されている場合、下記のように、左端の<strong>ソース管理</strong>から、未コミット状態のファイル一覧が表示されるようになります。</p><p><a href="../../../../public/2017/05/94bab03186d05879b987bb1715fd1d99.png"><img src="../../../../public/2017/05/94bab03186d05879b987bb1715fd1d99-1024x359.png"></a> 次に、ファイルにカーソルを合わせると、**+<strong>ボタンが表示されるので、それをクリックすることでステージングできます。<br><a href="../../../../public/2017/05/50966824538250ebbd03c2e8dfd0be21.png"><img src="../../../../public/2017/05/50966824538250ebbd03c2e8dfd0be21.png"></a> ステージングが完了したらコメントを入力します。<br>入力が完了したら</strong>Enterキー<strong>または</strong>コミットボタン**でコミットできます。<br><a href="../../../../public/2017/05/96022b0f3db2e821f9ce3278fa34140a.png"><img src="../../../../public/2017/05/96022b0f3db2e821f9ce3278fa34140a.png"></a><br> 後は、pushするなり何なりします。<br>私は前述のように、pushはGitKraken等のGitクライアントに任せます。<br>一応Visual Studio Codeからpush等も可能ですが、ここでは割愛します。</p><h1 id="Conslusion"><a href="#Conslusion" class="headerlink" title="Conslusion"></a>Conslusion</h1><p>開発環境が完成した感じです。<br>後は、Visual Studio Codeに慣れていけば、Macでもどこでも開発できるでしょう。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> Linux </category>
          
          <category> net-framework </category>
          
          <category> linux </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> Red Hat Enterprise Linux </category>
          
          <category> バージョン管理システム </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> git </category>
          
          <category> Visual Studio Code </category>
          
          <category> .NETでLinuxと遊んでみる </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでLinuxと遊んでみる Visual Studio Code編 第1回</title>
      <link href="2017/05/24/2389/"/>
      <url>2017/05/24/2389/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>前回は、**.NET Core<strong>、</strong>Visual Studio Code<strong>、</strong>拡張機能**をインストールしました。</p><p>今回はプロジェクトを作って実行します。</p><h1 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h1><p>まずは、プロジェクトフォルダを作成します。<br>これはどこでも良いので、今回は、**~/git/Demo/DotNetCoreLinux1**とします。<br>このフォルダを移行プロジェクトフォルダと呼称します。<br>まず端末を開き、プロジェクトフォルダに移動し、下記のコマンドを入力します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/git/Demo/DotNetCoreLinux1 $ dotnet new Welcome to .NET Core! --------------------- Learn more about .NET Core @ https://aka.ms/dotnet-docs. Use dotnet --<span class="built_in">help</span> to see available commands or go to https://aka.ms/dotnet-cli-docs. Telemetry -------------- The .NET Core tools collect usage data <span class="keyword">in</span> order to improve your experience. The data is anonymous and does not include commandline arguments. The data is collected by Microsoft and shared with the community. You can opt out of telemetry by setting a DOTNET\_CLI\_TELEMETRY\_OPTOUT environment variable to 1 using your favorite shell. You can <span class="built_in">read</span> more about .NET Core tools telemetry @ https://aka.ms/dotnet-cli-telemetry. Configuring... ------------------- A <span class="built_in">command</span> is running to initially populate your <span class="built_in">local</span> package cache, to improve restore speed and <span class="built_in">enable</span> offline access. This <span class="built_in">command</span> will take up to a minute to complete and will only happen once. Decompressing 100% 5707 ms Expanding 100% 20878 ms Created new C<span class="comment"># project in /home/XXXXX/git/Demo/DotNetCoreLinux1.</span></span><br></pre></td></tr></table></figure><p>初めて<strong>dotnet new</strong>した場合は、環境の初期化が実行されます。<br>以降は表示されません。<br>これにより、プロジェクトフォルダ配下に</p><ul><li><strong>Program.cs</strong></li><li><strong>project.json</strong></li></ul><p>が生成されます。<br>なお、<strong>project.json</strong>によるプロジェクト管理は、.NET Core 2.0から廃止が決定されています。<br>下記では、.NET Core 2.0のプレビュー利用しました。作成されたのは、<strong>corecli.csproj</strong>という見慣れた拡張子でした。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://taktak.jp/2017/04/23/visual-studio-code%E3%81%A7%E3%82%B3%E3%83%B3%E3%82%BD%E3%83%BC%E3%83%AB%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E3%81%A4%E3%81%8F%E3%82%8B-by-net-core-2-0-preview/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=taktak.jp"></img><div class="hbc-site-name">taktak.jp</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">.NET Core 2.0 PreviewとVisual Studio Codeでコンソールアプリをつくる 準備&amp;作成編 – A certain engineer &quot;COMPLEX&quot;</div><div class="hbc-url">https://taktak.jp/2017/04/23/visual-studio-code%E3%81%A7%E3%82%B3%E3%83%B3%E3%82%BD%E3%83%BC%E3%83%AB%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E3%81%A4%E3%81%8F%E3%82%8B-by-net-core-2-0-preview/</div></div></div></div></a></div></div><p>なので、正直、.NET Core 1.1系で勉強する意味は無いのですが、Linux初心者な自分にとっては、Linuxを使って何かをなすことが大事なので無視します。<br>ですが、2017/05/16に.NET Core 2.0の正式なプレビューがリリースされました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://www.infoq.com/jp/news/2017/05/netcore2preview?utm_campaign=rightbar_v2&utm_source=infoq&utm_medium=news_link&utm_content=link_text" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=www.infoq.com"></img><div class="hbc-site-name">InfoQ</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://cdn.infoq.com/statics_s1_20201201-0146/styles/static/images/logo/logo-big.jpg"></img></div><div class="hbc-text"><div class="hbc-title">.NET Core 2.0 Previewリリース、Visual Basicをサポート </div><div class="hbc-url">https://www.infoq.com/jp/news/2017/05/netcore2preview?utm_campaign=rightbar_v2&utm_source=infoq&utm_medium=news_link&utm_content=link_text</div><div class="hbc-description">Microsoftが.NET Core 2 Preview 1のリリースを発表した。.NET Standard 2準拠になり、はじめてVisual Basicをサポートする。</div></div></div></div></a></div></div><p>なので、RHELでのサポートも近いでしょう。</p><h1 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h1><p>準備が出来ました。<br>プロジェクトの作成が出来たので、ビルドして実行します。<br>単純にHello, Worldと表示されるだけですが、重要なのは、環境構築ができており、.NET Coreを使ったプログラミングが可能であることの確認です。<br>まず、下記のコマンドを実行し、リストアします。<br>newした直後は、最低限しかファイルが内ので、nugetのリストアみたいに依存関係にあるライブラリの復元を行います。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet restore <span class="built_in">log</span> : Restoring packages <span class="keyword">for</span> /home/XXXXXX/git/Demo/DotNetCoreLinux1/project.json... <span class="built_in">log</span> : Installing System.Reflection.Metadata 1.4.1. <span class="built_in">log</span> : Installing System.Collections.Immutable 1.3.0. <span class="built_in">log</span> : Writing lock file to disk. Path: /home/XXXXXX/git/Demo/DotNetCoreLinux1/project.lock.json <span class="built_in">log</span> : /home/XXXXXX/git/Demo/DotNetCoreLinux1/project.json <span class="built_in">log</span> : Restore completed <span class="keyword">in</span> 6214ms.</span><br></pre></td></tr></table></figure><p>続いてビルドします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet build Project DotNetCoreLinux1 (.NETCoreApp,Version=v1.1) will be compiled because expected outputs are missing Compiling DotNetCoreLinux1 <span class="keyword">for</span> .NETCoreApp,Version=v1.1  </span><br><span class="line">Compilation succeeded. 0 Warning(s) 0 Error(s)  </span><br><span class="line">Time elapsed 00:00:04.7665117 </span><br></pre></td></tr></table></figure><h1 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h1><p>エラーがないので、実行します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet run Project DotNetCoreLinux1 (.NETCoreApp,Version=v1.1) was previously compiled. Skipping compilation. Hello World!</span><br></pre></td></tr></table></figure><p>予想通りの結果です。<br>ちなみに、プロジェクトフォルダ直下で<strong>dotnet run</strong>ではなく、次のように、実際のバイナリがあるフォルダで実行も出来ます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> bin/Debug/netcoreapp1.1/ $ dotnet DotNetCoreLinux1.dll Hello World!</span><br></pre></td></tr></table></figure><p>dllとなっていますが、実行ファイルです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ file DotNetCoreLinux1.dll DotNetCoreLinux1.dll: PE32 executable (console) Intel 80386 Mono/.Net assembly, <span class="keyword">for</span> MS Windows </span><br></pre></td></tr></table></figure><h1 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h1><p>まず、コンソールが問題ないことがわかりましたので、プロジェクトフォルダをVisual Studio Codeで開きます。<br><strong>ファイル</strong>-&gt;<strong>フォルダーを開く</strong>で開くことが可能です。</p><p><a href="../../../../public/2017/05/acf0aa975f917842a79926093b3c5a06.png"><img src="../../../../public/2017/05/acf0aa975f917842a79926093b3c5a06-1024x693.png"></a></p><p>プロジェクトを開いた状態です。</p><p><a href="../../../../public/2017/05/a718a47a917da9d8d467c357bcfca2fd.png"><img src="../../../../public/2017/05/a718a47a917da9d8d467c357bcfca2fd-1024x693.png"></a></p><p><strong>Program.cs</strong>を選択し、実行可能行の左端をクリックするか、実行可能業にカーソルを置いて<strong>F9</strong>を押下して、ブレークポイントを貼ります。<br>Visual Studioと同じ操作です。</p><p><a href="../../../../public/2017/05/30e54297a4a7544fa6afe22d31b30764.png"><img src="../../../../public/2017/05/30e54297a4a7544fa6afe22d31b30764-1024x348.png"></a></p><p><strong>F5</strong>を押下してデバッグ実行します。<br>こちらもVisual Studioと同じ操作です。<br>しかし、実行できません。<br>よく見ると、ビルドとデバッグに必要なアセットが見つからないので、追加するかを尋ねられますので、<strong>Yes</strong>と応えます。<br>こういう細かいところはまだ日本語化されていない模様。</p><p><a href="../../../../public/2017/05/18e08add50c45088bc6ffa63d667d979.png"><img src="../../../../public/2017/05/18e08add50c45088bc6ffa63d667d979-1024x118.png"></a></p><p>再度実行すると、成功し、ブレークポイントで実行が停止しているのがわかります。</p><p><a href="../../../../public/2017/05/f5afce25449a3051fd438caf8a5a942e.png"><img src="../../../../public/2017/05/f5afce25449a3051fd438caf8a5a942e-1024x693.png"></a></p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>Dockerのようなコンテナでは無く、自分で構築したOS上に、自分で.NET Coreをインストールし、CUI、GUI上で実行、デバッグまで出来るようになりました。<br>次は何か小さなツールを作ってみます。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET </category>
          
          <category> Linux </category>
          
          <category> net-framework </category>
          
          <category> .NET Framework </category>
          
          <category> linux </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> Red Hat Enterprise Linux </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> net </category>
          
          <category> Visual Studio Code </category>
          
          <category> .NET Core </category>
          
          <category> .NETでLinuxと遊んでみる </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでLinuxと遊んでみる Visual Studio Code編 第0回</title>
      <link href="2017/05/22/2366/"/>
      <url>2017/05/22/2366/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>.NET Core</strong>をDocker経由で動かしたりしました。</p><p>ですが、WindowsまたはLinuxの端末上でエディットしてコンパイルするのは面倒だしつまらない。<br>なので、LinuxのGUI上で開発すればいいじゃん、ということで</p><ul><li><strong>Visual Studio Code</strong></li><li><strong>JetBrains Rider</strong></li></ul><p>の2つに白羽の矢が立ちました。<strong>Eclipse</strong>?知らないなぁ…. 会社でも自由に(コスト的な意味で)使えるVisual Studio Codeを使ってみます。</p><h1 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h1><h2 id="Install-NET-Core"><a href="#Install-NET-Core" class="headerlink" title="Install .NET Core"></a>Install .NET Core</h2><p>最初にインストールしておくと良いでしょう。<br>インストールは下記を参照。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://taktak.jp/2017/05/16/net%e3%81%a7linux%e3%81%a8%e9%81%8a%e3%82%93%e3%81%a7%e3%81%bf%e3%82%8b-net-core-%e3%82%a4%e3%83%b3%e3%82%b9%e3%83%88%e3%83%bc%e3%83%ab%e7%b7%a8/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=taktak.jp"></img><div class="hbc-site-name">taktak.jp</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">.NETでLinuxと遊んでみる .NET Core インストール編 – A certain engineer &quot;COMPLEX&quot;</div><div class="hbc-url">https://taktak.jp/2017/05/16/net%e3%81%a7linux%e3%81%a8%e9%81%8a%e3%82%93%e3%81%a7%e3%81%bf%e3%82%8b-net-core-%e3%82%a4%e3%83%b3%e3%82%b9%e3%83%88%e3%83%bc%e3%83%ab%e7%b7%a8/</div></div></div></div></a></div></div><h2 id="Install-Visual-Studio-Code"><a href="#Install-Visual-Studio-Code" class="headerlink" title="Install Visual Studio Code"></a>Install Visual Studio Code</h2><p>まずは、ダウンロード。<br>2017/05/16の時点でVersion 1.12が最新です。<br>RHELなので**.rpm**を選択してダウンロードします。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://code.visualstudio.com/download" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=code.visualstudio.com"></img><div class="hbc-site-name">code.visualstudio.com</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://code.visualstudio.com/opengraphimg/opengraph-home.png"></img></div><div class="hbc-text"><div class="hbc-title">Download Visual Studio Code - Mac, Linux, Windows</div><div class="hbc-url">https://code.visualstudio.com/download</div><div class="hbc-description">Visual Studio Code is free and available on your favorite platform - Linux, macOS, and Windows.  Download Visual Studio Code to experience a…</div></div></div></div></a></div></div><p><a href="../../../../public/2017/05/1241cc474517798c2a6951ff0b8a1749.png"><img src="../../../../public/2017/05/1241cc474517798c2a6951ff0b8a1749-1024x590.png"></a> パッケージは不要なので、そのままインストールします。<br><a href="../../../../public/2017/05/cde2fc418b0725d0a7a0edb24e3801cd.png"><img src="../../../../public/2017/05/cde2fc418b0725d0a7a0edb24e3801cd.png"></a> <strong>アプリケーションインストーラー</strong>が開くので、<strong>インストール</strong>を押下します。<br><a href="../../../../public/2017/05/b39d02f69ea1721313814d90e47611bf.png"><img src="../../../../public/2017/05/b39d02f69ea1721313814d90e47611bf-1024x266.png"></a> 認証を実行します。<br><a href="../../../../public/2017/05/5c678fb5aa14f9c3fd8ab09bc9df11d7.png"><img src="../../../../public/2017/05/5c678fb5aa14f9c3fd8ab09bc9df11d7.png"></a> 暫くすると、インストールが完了します。<br>アプリケーションインストーラーは終了してもOKです。<br>端末を開きます。<br>Visual Studio Codeは下記のコマンドで実行できます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/bin/code</span><br></pre></td></tr></table></figure><p>実行すると次の初期画面が表示されます。<br><a href="../../../../public/2017/05/93c81037c58d1a33e07eee4b72dabd1a.png"><img src="../../../../public/2017/05/93c81037c58d1a33e07eee4b72dabd1a-1024x693.png"></a></p><h2 id="Install-Plugins"><a href="#Install-Plugins" class="headerlink" title="Install Plugins"></a>Install Plugins</h2><p>Visual Studio Codeは拡張機能をインストールすることで真価を発揮します。<br>下記の拡張機能をインストールします。</p><h3 id="C-拡張"><a href="#C-拡張" class="headerlink" title="C## 拡張"></a>C## 拡張</h3><p>Microsoft製の純正拡張機能です。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=marketplace.visualstudio.com"></img><div class="hbc-site-name">marketplace.visualstudio.com</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://ms-dotnettools.gallerycdn.vsassets.io/extensions/ms-dotnettools/csharp/1.23.6/1605311230265/Microsoft.VisualStudio.Services.Icons.Default"></img></div><div class="hbc-text"><div class="hbc-title">C# - Visual Studio Marketplace</div><div class="hbc-url">https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp</div><div class="hbc-description">Extension for Visual Studio Code - C# for Visual Studio Code (powered by OmniSharp).</div></div></div></div></a></div></div><h3 id="VSCode-Icons"><a href="#VSCode-Icons" class="headerlink" title="VSCode-Icons"></a>VSCode-Icons</h3><p>UI中のアイコン表示を増やして、綺麗にしてくれます。別に無くてもいいんですが、使っていて楽しいUIは重要です。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://marketplace.visualstudio.com/items?itemName=robertohuertasm.vscode-icons" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=marketplace.visualstudio.com"></img><div class="hbc-site-name">marketplace.visualstudio.com</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://vscode-icons-team.gallerycdn.vsassets.io/extensions/vscode-icons-team/vscode-icons/11.0.0/1600368328068/Microsoft.VisualStudio.Services.Icons.Default"></img></div><div class="hbc-text"><div class="hbc-title">vscode-icons - Visual Studio Marketplace</div><div class="hbc-url">https://marketplace.visualstudio.com/items?itemName=robertohuertasm.vscode-icons</div><div class="hbc-description">Extension for Visual Studio Code - Icons for Visual Studio Code</div></div></div></div></a></div></div><p>インストールは簡単です。</p><p>まず、<strong>Ctrl+P</strong>でクイックオープンを開きます。</p><p><a href="../../../../public/2017/05/f9476fe637ae01ba374d9ebcf03123f3.png"><img src="../../../../public/2017/05/f9476fe637ae01ba374d9ebcf03123f3-1024x170.png"></a></p><p>次に、下記のコマンドを一つずつ入力しEnterを押下します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ext install csharp ext install vscode-icons</span><br></pre></td></tr></table></figure><p>すると、該当する拡張機能が、左側に表示される拡張機能ペインの先頭に表示されますので、<strong>インストール</strong>を押下します。</p><p><a href="../../../../public/2017/05/cdd22dc1f6fbc661fe550ca947ca6d7d.png"><img src="../../../../public/2017/05/cdd22dc1f6fbc661fe550ca947ca6d7d-1024x283.png"></a></p><p><strong>VSCode-icons</strong>は設定で別途有効にする必要があります。<br>まず、<strong>ファイル</strong>-&gt;<strong>基本設定</strong>-&gt;<strong>ファイルアイコンのテーマ</strong>を選択します。</p><p><a href="../../../../public/2017/05/46fe0c66dd1748dbe0603c131963d674.png"><img src="../../../../public/2017/05/46fe0c66dd1748dbe0603c131963d674-1024x472.png"></a></p><p>そして表示されるリストから<strong>VSCode Icons</strong>を選択します。</p><p><a href="../../../../public/2017/05/203add4c18763b1ef60bc309779cf17a.png"><img src="../../../../public/2017/05/203add4c18763b1ef60bc309779cf17a-1024x250.png"></a><br> 以上で完了です。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>今回は導入のみ。<br>次回は、プロジェクトを作ってサンプルを実行してみます。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET </category>
          
          <category> Linux </category>
          
          <category> net-framework </category>
          
          <category> .NET Framework </category>
          
          <category> linux </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> Red Hat Enterprise Linux </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> net </category>
          
          <category> Visual Studio Code </category>
          
          <category> .NET Core </category>
          
          <category> .NETでLinuxと遊んでみる </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでLinuxと遊んでみる JetBrains Rider編 第1回</title>
      <link href="2017/05/22/2350/"/>
      <url>2017/05/22/2350/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>前回は<strong>JetBrains Rider 2017.1</strong>をインストールしました。</p><p>今回はプロジェクトを作成します。</p><h1 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h1><p>まずはRiderを起動し、<strong>New solution</strong>を選択。</p><p><a href="../../../../public/2017/05/7cfeff4406b5f875ee1fc04c0c688b3b.png"><img src="../../../../public/2017/05/7cfeff4406b5f875ee1fc04c0c688b3b.png"></a></p><p>プロジェクトの作成ダイアログが表示されます。</p><p><a href="../../../../public/2017/05/621e54d42676e3a41e502043def15564.png"><img src="../../../../public/2017/05/621e54d42676e3a41e502043def15564.png"></a></p><p><strong>.NET Core Project</strong>を選択します。<br>しかし、.NET Coreがインストールされていないことが通知されますので、Riderを終了して、.NET Coreをインストールします。</p><p><a href="../../../../public/2017/05/b10f28f4052643d32e72fd0bf4acff80.png"><img src="../../../../public/2017/05/b10f28f4052643d32e72fd0bf4acff80.png"></a></p><p>表示されていた<a href="https://www.microsoft.com/net/download/core">https://www.microsoft.com/net/download/core</a>に移動し、Linuxへのインストール方法をチェックします。</p><h2 id="Install-NET-Core"><a href="#Install-NET-Core" class="headerlink" title="Install .NET Core"></a>Install .NET Core</h2><p>RHELへのパッケージインストール方法が記載されていますので、その通り実行します。<br>しかし 結論から言えば、<a href="https://www.microsoft.com/net/download/core">https://www.microsoft.com/net/download/core</a>では、ダメです。<br>例えば、インストールコマンドを入力すると、</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install rh-dotnetcore10 読み込んだプラグイン:langpacks, product-id, search-disabled-repos, subscription-manager Repo rhel-rs-for-rhel-7-server-eus-rpms forced skip\_if\_unavailable=True due to: /etc/pki/entitlement/7836591386407218947-key.pem Repo rhel-7-server-extras-rpms forced skip\_if\_unavailable=True due to: /etc/pki/entitlement/7836591386407218947-key.pem Repo rhel-ha-for-rhel-7-server-eus-rpms forced skip\_if\_unavailable=True due to: /etc/pki/entitlement/7836591386407218947-key.pem Repo rhel-7-server-eus-rpms forced skip\_if\_unavailable=True due to: /etc/pki/entitlement/7836591386407218947-key.pem Repo rhel-7-server-rt-beta-rpms forced skip\_if\_unavailable=True due to: /etc/pki/entitlement/7836591386407218947-key.pem Repo rhel-rs-for-rhel-7-server-rpms forced skip\_if\_unavailable=True due to: /etc/pki/entitlement/7836591386407218947-key.pem Repo rhel-ha-for-rhel-7-server-rpms forced skip\_if\_unavailable=True due to: /etc/pki/entitlement/7836591386407218947-key.pem Repo rhel-7-server-rpms forced skip\_if\_unavailable=True due to: /etc/pki/entitlement/7836591386407218947-key.pem Repo rhel-7-server-rt-rpms forced skip\_if\_unavailable=True due to: /etc/pki/entitlement/7836591386407218947-key.pem https://cdn.redhat.com/content/beta/rhel/server/7/x86\_64/rt/os/repodata/repomd.xml: \[Errno 14\] curl<span class="comment">#58 - &quot;unable to load client key: -8178 (SEC\_ERROR\_BAD\_KEY)&quot; 他のミラーを試します。</span></span><br><span class="line">警告: 一致するものが見つかりません: dotnetcore No matches found</span><br></pre></td></tr></table></figure><p>パッケージが見つかりません。<br>実は、RHELの場合、これだけではダメで、サブスクリプションを再登録し、リポジトリへ.NET Coreのチャネルを登録する必要があります。<br><a href="https://access.redhat.com/documentation/en-us/net_core/1.0/html/getting_started_guide/gs_install_dotnet">CHAPTER 1. INSTALL .NET CORE 1.0 ON RED HAT ENTERPRISE LINUX</a> また、Riderが対応する.NET Coreは1.1です。<br>これを踏まえて説明します。</p><h3 id="サブスクリプションの再登録"><a href="#サブスクリプションの再登録" class="headerlink" title="サブスクリプションの再登録"></a>サブスクリプションの再登録</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ subscription-manager unregister $ subscription-manager clean <span class="comment"># RedHatのアカウントを入力 $ subscription-manager register 登録中: subscription.rhsm.redhat.com:443/subscription ユーザー名: XXX@YYY.ZZZ パスワード: このシステムは次の ID で登録されました: XXXXXXXX-YYYY-ZZZZ-AAAA-BBBBCCCCDDDD # 日本語環境なら、subscription-manager list --available | egrep &quot;サブスクリプション名|プール ID&quot; $ subscription-manager list --available | egrep &quot;Subscription Name|Pool&quot; サブスクリプション名: Red Hat Enterprise Linux Developer Suite プール ID: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX subscription-manager attach --pool=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX サブスクリプションが正しく割り当てられました: Red Hat Enterprise Linux Developer Suite </span></span><br></pre></td></tr></table></figure><h3 id="リポジトリの登録"><a href="#リポジトリの登録" class="headerlink" title="リポジトリの登録"></a>リポジトリの登録</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># workstationなら -server- を -workstation- に変更 $ subscription-manager repos --enable=rhel-7-server-dotnet-rpms # ついでにベータのリポジトリを無効 $ subscription-manager repos --disable=rhel-7-server-rt-beta-rpms </span></span><br></pre></td></tr></table></figure><h3 id="scl-utilsのインストール"><a href="#scl-utilsのインストール" class="headerlink" title="scl-utilsのインストール"></a>scl-utilsのインストール</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install scl-utils </span><br></pre></td></tr></table></figure><h3 id="NET-Coreのインストール"><a href="#NET-Coreのインストール" class="headerlink" title=".NET Coreのインストール"></a>.NET Coreのインストール</h3><p>.NET Core 1.1をインストールします。</p><ul><li>誤) <strong>dotnetcore10</strong></li><li>正) <strong>dotnetcore11</strong></li></ul><p>です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install rh-dotnetcore11 -y </span><br></pre></td></tr></table></figure><h3 id="NET-Coreの有効化"><a href="#NET-Coreの有効化" class="headerlink" title=".NET Coreの有効化"></a>.NET Coreの有効化</h3><p>まだこの状態では.NET Coreは使えません。下記のコマンドを実行して、.NET Coreを有効化します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scl <span class="built_in">enable</span> rh-dotnetcore11 bash</span><br></pre></td></tr></table></figure><p>上記コマンド実行後、同一のシェルのみで、<strong>dotnet</strong>が使えます。<br>逆を言えば、別のシェルを立ち上げても、<strong>dotnet</strong>は使えません。<br>毎回、上記コマンドを実行するのは面倒なので、</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> scl\_source <span class="built_in">enable</span> rh-dotnetcore11</span><br></pre></td></tr></table></figure><p>を実行すれば良い、と前述のRedhatのページに書いてあるのですが、何故か効果がありません。<br>なので、シェルを立ち上げる際に、毎回自動で実行されるよう、**~/.bashrc**にコマンドを追記します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ su - $ vi ~/.bashrc</span><br></pre></td></tr></table></figure><p>viを起動し、末尾に</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> scl\_source <span class="built_in">enable</span> rh-dotnetcore10</span><br></pre></td></tr></table></figure><p>を追記します。<br>そして、シェルを立ち上げ直して、dotnetのバージョンを確認します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet --version 1.0.0-preview2-1-003177 </span><br></pre></td></tr></table></figure><h2 id="Install-Mono"><a href="#Install-Mono" class="headerlink" title="Install Mono"></a>Install Mono</h2><h3 id="Extra-Packages-for-Enterprise-Linuxの追加"><a href="#Extra-Packages-for-Enterprise-Linuxの追加" class="headerlink" title="Extra Packages for Enterprise Linuxの追加"></a>Extra Packages for Enterprise Linuxの追加</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/ $ wget http://ftp-srv2.kddilabs.jp/Linux/distributions/fedora/epel/7/x86\_64/e/epel-release-7-9.noarch.rpm $ rpm -ivh epel-release-7-9.noarch.rpm $ rm epel-release-7-9.noarch.rpm </span><br></pre></td></tr></table></figure><h1 id="yum-install-yum-utils"><a href="#yum-install-yum-utils" class="headerlink" title="yum install yum-utils"></a>yum install yum-utils</h1><h4 id="Mono-4-8"><a href="#Mono-4-8" class="headerlink" title="Mono 4.8"></a>Mono 4.8</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rpm --import &quot;http://keyserver.ubuntu.com/pks/lookup?op=get&amp;search=0x3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF&quot; # yum-config-manager --add-repo http://download.mono-project.com/repo/centos/ </span></span><br></pre></td></tr></table></figure><h4 id="Mono-5-0"><a href="#Mono-5-0" class="headerlink" title="Mono 5.0"></a>Mono 5.0</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rpm --import &quot;http://keyserver.ubuntu.com/pks/lookup?op=get&amp;search=0x3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF&quot; # yum-config-manager --add-repo http://download.mono-project.com/repo/centos7/ </span></span><br></pre></td></tr></table></figure><h3 id="Mono"><a href="#Mono" class="headerlink" title="Mono"></a>Mono</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install mono-complete -y  </span><br><span class="line">mono --version Mono JIT compiler version 5.0.0 (Stable 5.0.0.100/9667aa6 Thu May 11 10:16:39 UTC 2017) Copyright (C) 2002-2014 Novell, Inc, Xamarin Inc and Contributors. www.mono-project.com TLS: \_\_thread SIGSEGV: altstack Notifications: epoll Architecture: amd64 Disabled: none Misc: softdebug LLVM: supported, not enabled. GC: sgen (concurrent by default) </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET </category>
          
          <category> Linux </category>
          
          <category> net-framework </category>
          
          <category> .NET Framework </category>
          
          <category> linux </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> Red Hat Enterprise Linux </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> net </category>
          
          <category> JetBrains </category>
          
          <category> .NET Core </category>
          
          <category> .NETでLinuxと遊んでみる </category>
          
          <category> jetbrains </category>
          
          <category> Rider </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その70 Red Hat Enterprise Linux 7.3で端末での大文字小文字区別を無効にする</title>
      <link href="2017/05/16/2387/"/>
      <url>2017/05/16/2387/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>Linuxだと、端末(CUI)で入力中、ファイルやフォルダ名等、現在の入力から推測できる候補をTabキーで切り替えることができます。<br>けど、大文字小文字を区別するため、例えば</p><ul><li>test.txt</li><li>Test1.txt</li></ul><p>というファイルが存在したとして、</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp t</span><br></pre></td></tr></table></figure><p>という状態でTabキーを押下しても、表示されるのは<strong>test.txt</strong>だけです。<br>結構不便なので、対応したメモです。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>対応は簡単です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi ~/.inputrc</span><br></pre></td></tr></table></figure><p>でviを起動し、下記の一文を末尾に追加します。<br>ファイルが存在しなくてもそのまま作成して問題ありません。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set completion-ignore-case on</span><br></pre></td></tr></table></figure><p>これで、そのホームディレクトリのユーザでは、TAbキー補完において、大文字小文字の区別が無くなります。<br>設定を有効にするために再度ログインか、端末上で、<strong>CTRL+X、CTRL+R</strong>を連続で押下する必要があります。<br>全ユーザに対して、大文字小文字の区別をなくす場合は、</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi /etc/inputrc</span><br></pre></td></tr></table></figure><p>で同様に記述を追記します。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> Red Hat Enterprise Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでLinuxと遊んでみる .NET Core インストール編</title>
      <link href="2017/05/16/2372/"/>
      <url>2017/05/16/2372/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>.NET Core</strong>をDocker経由で動かしたりしました。</p><p>今回はGUIで動かしたいですし、きちんとホストOSに環境を構築します。<br>対象は<strong>Redhat Enterprise Linux 7.3</strong>です。</p><h1 id="Install-NET-Core"><a href="#Install-NET-Core" class="headerlink" title="Install .NET Core"></a>Install .NET Core</h1><p>結論から良うと、2017/05/16の時点で、<a href="https://www.microsoft.com/net/download/core">.NET Coreの公式ページ</a>のRHELへのインストール手順は動きません。<br>コマンド自体は間違っていませんが、</p><ul><li>コマンドが古い<ul><li>.NET Core 1.0がインストールされてしまう</li></ul></li><li>パッケージが見つからない<ul><li>RHELは下準備が必要</li></ul></li></ul><p>なのです。<br>実際に、インストールコマンドを入力すると、</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install rh-dotnetcore10 読み込んだプラグイン:langpacks, product-id, search-disabled-repos, subscription-manager Repo rhel-rs-for-rhel-7-server-eus-rpms forced skip\_if\_unavailable=True due to: /etc/pki/entitlement/7836591386407218947-key.pem Repo rhel-7-server-extras-rpms forced skip\_if\_unavailable=True due to: /etc/pki/entitlement/7836591386407218947-key.pem Repo rhel-ha-for-rhel-7-server-eus-rpms forced skip\_if\_unavailable=True due to: /etc/pki/entitlement/7836591386407218947-key.pem Repo rhel-7-server-eus-rpms forced skip\_if\_unavailable=True due to: /etc/pki/entitlement/7836591386407218947-key.pem Repo rhel-7-server-rt-beta-rpms forced skip\_if\_unavailable=True due to: /etc/pki/entitlement/7836591386407218947-key.pem Repo rhel-rs-for-rhel-7-server-rpms forced skip\_if\_unavailable=True due to: /etc/pki/entitlement/7836591386407218947-key.pem Repo rhel-ha-for-rhel-7-server-rpms forced skip\_if\_unavailable=True due to: /etc/pki/entitlement/7836591386407218947-key.pem Repo rhel-7-server-rpms forced skip\_if\_unavailable=True due to: /etc/pki/entitlement/7836591386407218947-key.pem Repo rhel-7-server-rt-rpms forced skip\_if\_unavailable=True due to: /etc/pki/entitlement/7836591386407218947-key.pem https://cdn.redhat.com/content/beta/rhel/server/7/x86\_64/rt/os/repodata/repomd.xml: \[Errno 14\] curl<span class="comment">#58 - &quot;unable to load client key: -8178 (SEC\_ERROR\_BAD\_KEY)&quot; 他のミラーを試します。</span></span><br><span class="line">警告: 一致するものが見つかりません: dotnetcore No matches found</span><br></pre></td></tr></table></figure><p>となります。<br>RHELの場合、サブスクリプションを再登録し、リポジトリへ.NET Coreのチャネルを登録する必要があります。<br><a href="https://access.redhat.com/documentation/en-us/net_core/1.0/html/getting_started_guide/gs_install_dotnet">CHAPTER 1. INSTALL .NET CORE 1.0 ON RED HAT ENTERPRISE LINUX</a></p><h3 id="サブスクリプションの再登録"><a href="#サブスクリプションの再登録" class="headerlink" title="サブスクリプションの再登録"></a>サブスクリプションの再登録</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ subscription-manager unregister $ subscription-manager clean <span class="comment"># RedHatのアカウントを入力 $ subscription-manager register 登録中: subscription.rhsm.redhat.com:443/subscription ユーザー名: XXX@YYY.ZZZ パスワード: このシステムは次の ID で登録されました: XXXXXXXX-YYYY-ZZZZ-AAAA-BBBBCCCCDDDD # 日本語環境なら、subscription-manager list --available | egrep &quot;サブスクリプション名|プール ID&quot; $ subscription-manager list --available | egrep &quot;Subscription Name|Pool&quot; サブスクリプション名: Red Hat Enterprise Linux Developer Suite プール ID: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX subscription-manager attach --pool=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX サブスクリプションが正しく割り当てられました: Red Hat Enterprise Linux Developer Suite </span></span><br></pre></td></tr></table></figure><h3 id="リポジトリの登録"><a href="#リポジトリの登録" class="headerlink" title="リポジトリの登録"></a>リポジトリの登録</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># workstationなら -server- を -workstation- に変更 $ subscription-manager repos --enable=rhel-7-server-dotnet-rpms # ついでにベータのリポジトリを無効 $ subscription-manager repos --disable=rhel-7-server-rt-beta-rpms </span></span><br></pre></td></tr></table></figure><h3 id="scl-utilsのインストール"><a href="#scl-utilsのインストール" class="headerlink" title="scl-utilsのインストール"></a>scl-utilsのインストール</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install scl-utils </span><br></pre></td></tr></table></figure><h3 id="NET-Coreのインストール"><a href="#NET-Coreのインストール" class="headerlink" title=".NET Coreのインストール"></a>.NET Coreのインストール</h3><p>.NET Core 1.1をインストールします。</p><ul><li>誤) <strong>dotnetcore10</strong></li><li>正) <strong>dotnetcore11</strong></li></ul><p>です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install rh-dotnetcore11 -y </span><br></pre></td></tr></table></figure><h3 id="NET-Coreの有効化"><a href="#NET-Coreの有効化" class="headerlink" title=".NET Coreの有効化"></a>.NET Coreの有効化</h3><p>まだこの状態では.NET Coreは使えません。下記のコマンドを実行して、.NET Coreを有効化します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scl <span class="built_in">enable</span> rh-dotnetcore11 bash</span><br></pre></td></tr></table></figure><p>上記コマンド実行後、同一のシェルのみで、<strong>dotnet</strong>が使えます。<br>逆を言えば、別のシェルを立ち上げても、<strong>dotnet</strong>は使えません。<br>毎回、上記コマンドを実行するのは面倒なので、</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> scl\_source <span class="built_in">enable</span> rh-dotnetcore11</span><br></pre></td></tr></table></figure><p>を実行すれば良い、と前述のRedhatのページに書いてあるのですが、何故か効果がありません。<br>なので、シェルを立ち上げる際に、毎回自動で実行されるよう、**~/.bashrc**にコマンドを追記します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ su - $ vi ~/.bashrc</span><br></pre></td></tr></table></figure><p>viを起動し、末尾に</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> scl\_source <span class="built_in">enable</span> rh-dotnetcore10</span><br></pre></td></tr></table></figure><p>を追記します。<br>そして、シェルを立ち上げ直して、dotnetのバージョンを確認します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet --version 1.0.0-preview2-1-003177</span><br></pre></td></tr></table></figure><p>これで、.NET Coreが利用できるようになりました。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>基本となる.NET Coreの導入が完了です。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET </category>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> Red Hat Enterprise Linux </category>
          
          <category> net </category>
          
          <category> .NET Core </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その69 OpenCV 3.2 with ContribモジュールでInpaintを使用する</title>
      <link href="2017/05/16/2291/"/>
      <url>2017/05/16/2291/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>OpenCVSharp</strong>にPull Requestを投げました。<br>内容は、<strong>OpenCV</strong>の拡張モジュールに含まれる、xphoto内に用意されている<strong>Inpainting</strong>と呼ばれる画像修復関数のOpenCVSharp対応です。</p><p>そんな画像修復をC++で試してみたメモになります。</p><h2 id="What-is-Inpainting"><a href="#What-is-Inpainting" class="headerlink" title="What is Inpainting?"></a>What is Inpainting?</h2><p>Inpaintingとは聞き慣れない単語ですが、<strong>画像修復</strong>です。<br>Wikipediaの<a href="https://en.wikipedia.org/wiki/Inpainting">Inpaintingの記事 (英語。日本語記事は無し)</a>によれば</p><blockquote><p>Inpainting is the process of reconstructing lost or deteriorated parts of images and videos. In the museum world, in the case of a valuable painting, this task would be carried out by a skilled art conservator or art restorer. In the digital world, inpainting (also known as image interpolation or video interpolation) refers to the application of sophisticated algorithms to replace lost or corrupted parts of the image data (mainly small regions or to remove small defects).</p></blockquote><blockquote><p>Inpaintingは画像や映像における消失または悪化した部分を再構成する手順である。美術の世界において、価値ある絵画の場合、この仕事は技術的に優れた修復士または美術修復家によって為される。デジタルの世界において、inpainting (画像補間またはビデオ補間とも知られている) は、画像データ (主に小さな領域または小さな結果を取り除くため) の消失または壊れた部分を置換するために洗練されたアルゴリズムのアプリケーションを示している。</p></blockquote><p>とあります。<br>有名なPhotoshopもこの機能があります。<br>流石に、Photoshop程の性能はありませんが、適切な場面で用いればOpenCVのInpaintingは威力を発揮します。</p><h2 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use?"></a>How to use?</h2><p>Inpaintingは拡張モジュールにもありますが、通常の<strong>cv名前空間</strong>にも<strong>inpaint関数</strong>があります。<br>どちらも、修復対象の画像、マスク画像 (8ビットグレイスケール)、出力先画像、パラメータを指定しますが、両者の違いはマスク画像の指定方法とパラメータの有無にあります。</p><ul><li><strong>cv::xphoto::inpaint</strong><ul><li>マスク画像の非0 (通常は輝度値255)を有効な画像領域、0 (つまり黒)を修復対象の領域として扱う</li></ul></li><li><strong>cv::inpaint</strong><ul><li>マスク画像の0 (つまり黒)を有効な画像領域、非0 (通常は輝度値255)を修復対象の領域として扱う</li><li>パラメータとして、</li><li>修復される各点を中心とする近傍円形領域の半径</li><li>修復手法 (INPAINT_NSまたはINPAINT_TELEA) を指定</li></ul></li></ul><p>という違いがあります。<br>正確には、cv::xphoto::inpaintにも指定できるパラメータはありますが、OpenCV 3.2の時点では利用できるパラメータは1つだけなので、事実上パラメータはありません。<br>なので、拡張モジュールのcv::xphoto::inpaintは非常に簡単に利用できます。<br>また、cv::xphoto::inpaintの実装は、<strong>Microsoft Research Asia</strong>の<a href="http://kaiminghe.com/eccv12/index.html">Statistics of Patch Offsets for Image Completion</a>という論文の実装の模様。</p><h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><p>Inpaintingのアルゴリズムは、近隣の領域の複製になります。<br>近隣の近似している領域を継ぎ目が自然となるように、補正対象領域のピクセルを置換していきます。<br>当然、壊れた領域はまわりのピクセルから推測されて複製されるため、そこに存在しないものは修復できません。<br>例えば、野球選手の背番号が完全に隠れていて、それを補正した場合、正しい背番号は修復できない、ということです。<br>このケースの場合、ユニフォームの布地の大部分で背番号の部分が補完されるでしょう。</p><h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><p>下記がサンプルです。<br>cv::xphoto::inpaintとcv::inpaintを実行し、元画像、マスク画像、修復後の画像を上下に表示して比較します。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span> #<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core.hpp&gt; #include &lt;opencv2/highgui.hpp&gt; #include &lt;opencv2/opencv.hpp&gt; #include &lt;opencv2/xphoto.hpp&gt;  </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> \* argv\[\])</span> </span>&#123; <span class="comment">// https://ja.wikipedia.org/wiki/%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB:Tokyo\_Tower\_and\_around\_Skyscrapers.jpg auto path = &quot;B:\\\\300px-Tokyo\_Tower\_and\_around\_Skyscrapers.jpg&quot;; auto maskpath = &quot;B:\\\\300px-Tokyo\_Tower\_and\_around\_Skyscrapers\_mask.bmp&quot;;  </span></span><br><span class="line"><span class="keyword">auto</span> src = cv::imread(path); <span class="keyword">auto</span> mask = cv::imread(maskpath, cv::IMREAD\_GRAYSCALE); <span class="keyword">if</span> (mask.channels() != <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;  </span><br><span class="line"><span class="comment">// xphotoのinpaint cv::Mat dst(src.rows, src.cols, src.type()); cv::xphoto::inpaint(src, mask, dst, cv::xphoto::INPAINT\_SHIFTMAP);  </span></span><br><span class="line"><span class="comment">// 従来のinpaint cv::Mat dst2(src.rows, src.cols, src.type()); cv::Mat mask2(mask.rows, mask.cols, mask.type()); // 従来のinpaintのマスクは白領域が修復対象 cv::bitwise\_not(mask, mask2); cv::inpaint(src, mask2, dst2, 3, cv::INPAINT\_TELEA);  </span></span><br><span class="line"><span class="comment">// 元画像、マスク画像、修復後の画像の合成画像 cv::Mat combiend(src.rows \* 2, src.cols \* 3, src.type());  </span></span><br><span class="line">cv::Rect roi\_rect; roi\_rect.x = <span class="number">0</span>; roi\_rect.y = <span class="number">0</span>; roi\_rect.width = src.cols; roi\_rect.height = src.rows;  </span><br><span class="line">cv::Mat roi\_src(combiend, roi\_rect); src.copyTo(roi\_src);  </span><br><span class="line">roi\_rect.x = src.cols; cv::Mat roi\_mask(combiend, roi\_rect); <span class="function">cv::Mat <span class="title">colorMask</span><span class="params">(mask.rows, mask.cols, src.type())</span></span>; cv::cvtColor(mask, colorMask, cv::COLOR\_GRAY2BGR); colorMask.copyTo(roi\_mask);  </span><br><span class="line">roi\_rect.x = src.cols \* <span class="number">2</span>; cv::Mat roi\_dst(combiend, roi\_rect); dst.copyTo(roi\_dst);  </span><br><span class="line">roi\_rect.x = <span class="number">0</span>; roi\_rect.y = src.rows; cv::Mat roi\_src2(combiend, roi\_rect); src.copyTo(roi\_src2);  </span><br><span class="line">roi\_rect.x = src.cols; cv::Mat roi\_mask2(combiend, roi\_rect); <span class="function">cv::Mat <span class="title">colorMask2</span><span class="params">(mask.rows, mask.cols, src.type())</span></span>; cv::cvtColor(mask2, colorMask2, cv::COLOR\_GRAY2BGR); colorMask2.copyTo(roi\_mask2);  </span><br><span class="line">roi\_rect.x = src.cols \* <span class="number">2</span>; cv::Mat roi\_dst2(combiend, roi\_rect); dst2.copyTo(roi\_dst2);  </span><br><span class="line">cv::namedWindow(<span class="string">&quot;preview&quot;</span>); cv::imshow(<span class="string">&quot;preview&quot;</span>, combiend);  </span><br><span class="line">cv::waitKey();  </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure><p>サンプルでは、Wikipediaの<a href="https://ja.wikipedia.org/wiki/%E6%9D%B1%E4%BA%AC%E3%82%BF%E3%83%AF%E3%83%BC">東京タワーの記事</a>の、ある画像中から東京タワーを除去しています。</p><p><a href="../../../../public/2017/05/1694ff4ab6d4577d3b03337798861275.png"><img src="../../../../public/2017/05/1694ff4ab6d4577d3b03337798861275.png"></a> 上段がcv::xphoto::inpaint、下段がcv::inpaintを実行した結果になります。<br>ぱっと見た感じ、cv::xphoto::inpaintは良い感じです。<br>細かく見ると、付近の建物が複製されているのが目立ちます。<br><a href="../../../../public/2017/05/check.png"><img src="../../../../public/2017/05/check.png"></a><br> 一方、cv::inpaintはぼけた感じになってしまいました。<br>パラメータを調整すれば変わる可能性はあると思いますが、いくつか試してみても、どれも似た感じで大差ありませんでした。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>Photoshopが凄すぎるのであって、OSSでここまで実行できるというのは相当凄いことだと実感できます。<br>流石に、人間の手による修復にはかないませんが、近年のAIやDNNなどで、こうした画像修復の分野も、やがて人間に匹敵する性能を見せることになっていくのでしょう。</p>]]></content>
      
      
      <categories>
          
          <category> マルチメディア </category>
          
          <category> 画像処理 </category>
          
          <category> OpenCV </category>
          
          <category> 画像修復 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その68 Red Hat Enterprise Linux 7.2でGitKrakenを使う</title>
      <link href="2017/05/15/2344/"/>
      <url>2017/05/15/2344/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>GitKraken</strong>は美しいUIかつ直感的に利用できる素晴らしいアプリです。<br>そんなGitKrakenはWindows,Mac,Linuxで動作するクロスプラットフォームなアプリケーションです。<br>しかし、<a href="https://www.gitkraken.com/download">公式ページのダウンロードページ</a>のLinuxには、</p><ul><li>Linux (*.deb)<ul><li>Ubuntu LTS 12.04+, Debian 8+</li></ul></li><li>Linux (GZip)<ul><li>Ubuntu LTS 12.04+, Debian 8+</li></ul></li></ul><p>と記述されており、RedHat系である<strong>rpm</strong>に関する記述がありません。<br>ですが、わざわざGZipが用意してあるので、試してみます。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>まずはGZip版をダウンロードします。<br>2015/05/15の時点で最新版は2.5.0になります。<br>ダウンロードしたら、端末を開きます。<br>おそらく、ダウンロードフォルダにダウンロードしたファイルがあるので、ダウンロードフォルダに移動します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/ダウンロード $ ls -la 合計 129284 drwxr-xr-x. 2 hogehoge hogehoge 35 5月 14 18:29 . drwx------. 21 hogehoge hogehoge 4096 5月 14 12:32 .. -rw-rw-r--. 1 hogehoge hogehoge 73006182 5月 14 18:29 gitkraken-amd64.tar.gz</span><br></pre></td></tr></table></figure><p>続いてインストール先にファイルを移動します。今回は**/opt**に展開します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mv gitkraken-amd64.tar.gz /opt $ <span class="built_in">cd</span> /opt $ sudo tar xfz gitkraken-amd64.tar.gz $ sudo rm gitkraken-amd64.tar.gz $ ls -la drwxr-xr-x. 4 root root 4096 5月 3 00:49 gitkraken</span><br></pre></td></tr></table></figure><p>gitkrakenフォルダの中にgitkrakenがあるので実行します。<br>しかし、下記のエラーが発生します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> gitkraken $ sudo ./gitkraken ./gitkraken: error <span class="keyword">while</span> loading shared libraries: libXss.so.1: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure><p><strong>libXss.so.1</strong>が存在しない模様。<br>なので、yumでインストールします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum search libXss libXScrnSaver.i686 : X.Org X11 libXss runtime library libXScrnSaver.x86\_64 : X.Org X11 libXss runtime library</span><br></pre></td></tr></table></figure><p><strong>libXss</strong>は<strong>libXScrnSaver</strong>の模様。今回はx64をインストールします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install libXScrnSaver.x86\_64 -y 読み込んだプラグイン:langpacks, product-id, search-disabled-repos, subscription-manager https://cdn.redhat.com/content/beta/rhel/server/7/x86\_64/rt/os/repodata/repomd.xml: \[Errno 14\] HTTPS Error 403 - Forbidden 他のミラーを試します。</span><br><span class="line">To address this issue please refer to the below knowledge base article  </span><br><span class="line">https://access.redhat.com/solutions/69319  </span><br><span class="line">If above article doesn<span class="string">&#x27;t help to resolve this issue please open a ticket with Red Hat Support.  </span></span><br><span class="line"><span class="string">依存性の解決をしています --&gt; トランザクションの確認を実行しています。</span></span><br><span class="line"><span class="string">---&gt; パッケージ libXScrnSaver.x86\_64 0:1.2.2-6.1.el7 を インストール --&gt; 依存性解決を終了しました。</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">依存性を解決しました  </span></span><br><span class="line"><span class="string">\===================================================================================================================================================================================== Package アーキテクチャー バージョン リポジトリー 容量 ===================================================================================================================================================================================== インストール中: libXScrnSaver x86\_64 1.2.2-6.1.el7 rhel-7-server-eus-rpms 24 k  </span></span><br><span class="line"><span class="string">トランザクションの要約 ===================================================================================================================================================================================== インストール 1 パッケージ  </span></span><br><span class="line"><span class="string">総ダウンロード容量: 24 k インストール容量: 40 k Downloading packages: libXScrnSaver-1.2.2-6.1.el7.x86\_64.rpm | 24 kB 00:00:03 Running transaction check Running transaction test Transaction test succeeded Running transaction インストール中 : libXScrnSaver-1.2.2-6.1.el7.x86\_64 1/1 検証中 : libXScrnSaver-1.2.2-6.1.el7.x86\_64 1/1  </span></span><br><span class="line"><span class="string">インストール: libXScrnSaver.x86\_64 0:1.2.2-6.1.el7  </span></span><br><span class="line"><span class="string">完了しました!</span></span><br></pre></td></tr></table></figure><p>もう一度実行します。<br>スプラッシュスクリーンが起動します。</p><p><a href="../../../../public/2017/05/62b1497999195e52d4f0e5c88fb9a81c.png"><img src="../../../../public/2017/05/62b1497999195e52d4f0e5c88fb9a81c.png"></a></p><p>起動に成功しました。</p><p><a href="../../../../public/2017/05/1cbadb78b01adb942c606779b5c093d0.png"><img src="../../../../public/2017/05/1cbadb78b01adb942c606779b5c093d0-1024x693.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> Red Hat Enterprise Linux </category>
          
          <category> バージョン管理システム </category>
          
          <category> git </category>
          
          <category> GitKraken </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その67 Red Hat Enterprise Linux 7.2で名前解決が出来ない</title>
      <link href="2017/05/14/2313/"/>
      <url>2017/05/14/2313/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>パッケージを最新にしようと思い、</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.redhat.com/content/dist/rhel/server/7/7Server/x86\_64/os/Packages/firefox-52.1.0-2.el7\_3.x86\_64.rpm: \[Errno 14\] curl<span class="comment">#6 - &quot;Could not resolve host: cdn.redhat.com; Unknown error&quot;</span></span><br></pre></td></tr></table></figure><p>ホストが解決できないと言っている。<br>嫌な予感がして、Firefoxを立ち上げて、<strong><a href="http://www.google.co.jp/">www.google.co.jp</a></strong>にアクセスすると、</p><h3 id="サーバーが見つかりませんでした"><a href="#サーバーが見つかりませんでした" class="headerlink" title="サーバーが見つかりませんでした"></a>サーバーが見つかりませんでした</h3><p>という無慈悲なエラー。<br>何故?</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>結論から言うと、**/etc/resolv.conf** が勝手に書き換わっており名前解決が出来なくなっていた模様。<br>どうも、有名な問題らしい。<br>確かに</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/resolv.conf <span class="comment"># Generated by resolvconf</span></span><br></pre></td></tr></table></figure><p>空になっていた。<br>いや、そもそも手動で編集した記憶は無いけど。<br>ともかく、手動でDNSを設定すれば良いらしい。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi /etc/resolv.conf</span><br></pre></td></tr></table></figure><p>で、viを起動し、</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nameserver <span class="number">8.8</span>.<span class="number">8.8</span></span><br></pre></td></tr></table></figure><p>を追記した。<br>疎通確認を実行する。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ping www.google.co.jp PING www.google.co.jp (172.217.26.3) 56(84) bytes of data. 64 bytes from nrt20s02-in-f3.1e100.net (172.217.26.3): icmp\_seq=1 ttl=55 time=11.3 ms 64 bytes from nrt20s02-in-f3.1e100.net (172.217.26.3): icmp\_seq=2 ttl=55 time=13.5 ms 64 bytes from nrt20s02-in-f3.1e100.net (172.217.26.3): icmp\_seq=3 ttl=55 time=18.2 ms</span><br></pre></td></tr></table></figure><p>解決!!</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://hlis-toproad.com/blog/2014/06/02/254/">[技術]resolv.confが勝手に書き換わる問題</a></li><li><a href="http://blog.netandfield.com/shar/2015/06/resolvconf.html">あり？resolv.conf が初期化されちゃった？？？</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> Red Hat Enterprise Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その66 Red Hat Enterprise Linux 7.2のVNC Serverの解像度を変更する</title>
      <link href="2017/05/14/2297/"/>
      <url>2017/05/14/2297/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p><a href="https://taktak.jp/2017/04/20/2079">開発メモ その47 Red Hat Enterprise Linux 7.2にVNC Serverをインストールする</a>で<strong>VNC</strong>をインストールしました。<br>が、解像度が1024x768という前時代的な解像度で不満が募ったので、その対応メモ。<br>ググると、Ubuntuだったり、CentOS6 (systemdではなくinit)だったり、なかなかRHEL7またはCentOS7の情報がなくて面倒でした。<br>VNCの設定は共通なんでしょうけど、そのあたりディストリビューションの差異がどう影響するかわからないから、確実に同じ環境の情報が欲しかった..</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi /usr/bin/vncserver</span><br></pre></td></tr></table></figure><p>下記の行を修正します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$geometry &#x3D; &quot;1280x1024&quot;;</span><br></pre></td></tr></table></figure><p>修正後、VNCを再起動します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl restart vncserver@:1.service </span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://note.websmil.com/linux/centos/centos7-vnc%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">CentOS7 VNCインストール</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> Red Hat Enterprise Linux </category>
          
          <category> %e3%83%aa%e3%83%a2%e3%83%bc%e3%83%88%e3%83%87%e3%82%b9%e3%82%af%e3%83%88%e3%83%83%e3%83%97 </category>
          
          <category> VNC </category>
          
          <category> リモートデスクトップ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その65 OpenCV 3.2 with ContribモジュールでTrackingを使用する</title>
      <link href="2017/05/13/2280/"/>
      <url>2017/05/13/2280/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>OpenCVSharp</strong>にPull Requestを投げました。<br>内容は、<strong>OpenCV</strong>の拡張モジュールに含まれる、<strong>Tracking</strong>と呼ばれる物体追跡用モジュールのOpenCVSharp対応です。</p><p>そんな物体追跡をC++で試してみたメモになります。</p><h2 id="What-is-Tracking"><a href="#What-is-Tracking" class="headerlink" title="What is Tracking?"></a>What is Tracking?</h2><p>詳しい理論などは、</p><ul><li><a href="http://news.mynavi.jp/series/cv_future/027/">動く人・物を追跡する(1) - OpenCVによるトラッキング</a></li><li><a href="http://qiita.com/hmichu/items/3615ddcc93851ad59abe">こんなに簡単!? トラッキング</a></li><li><a href="http://irohalog.hatenablog.com/entry/opencv_tracking_api">OpenCV Tracking API について</a></li></ul><p>がわかりやすいです。<br>ともかく</p><ol><li>画像上の任意矩形を初期位置を設定</li><li>矩形内の特徴を学習</li><li>矩形周辺を探索し移動量推定</li><li>2.から繰り返し</li></ol><p>という流れです。<br>物体追跡を使えば、現実世界において、通過する車両の数を計算したり出来そうですね。</p><h2 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use?"></a>How to use?</h2><p>Trackingの使い方は非常にシンプルです。</p><ol><li>インスタンスの生成<ul><li>cv::Ptr Tracker::create(const cv::String&amp; trackerType)</li></ul></li><li>インスタンスの初期化<ul><li>bool Tracker::init(const cv::Mat&amp; image, const cv::Rect2d&amp; boundingBox)</li></ul></li><li>更新<ul><li>bool Tracker::update(const cv::Mat&amp; image, cv::Rect2d&amp; boundingBox)</li></ul></li><li>3を繰り返す</li></ol><p>以上です。</p><h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><p>物体追跡にはいくつかのアルゴリズムが用意されており、先述のインスタンスの生成の際に、文字列としてアルゴリズムを指定します。<br>OpenCV3.2で利用できるアルゴリズムは</p><ul><li>MIL<ul><li><a href="http://docs.opencv.org/trunk/d0/d26/classcv_1_1TrackerMIL.html">cv::TrackerMIL Class Reference</a></li></ul></li><li>TLD<ul><li><a href="http://docs.opencv.org/trunk/dc/d1c/classcv_1_1TrackerTLD.html">cv::TrackerTLD Class Reference</a></li></ul></li><li>BOOSTING<ul><li><a href="http://docs.opencv.org/trunk/d1/d1a/classcv_1_1TrackerBoosting.html">cv::TrackerBoosting Class Reference</a></li></ul></li><li>KCF<ul><li><a href="http://docs.opencv.org/trunk/d2/dff/classcv_1_1TrackerKCF.html">cv::TrackerKCF Class Reference</a></li></ul></li><li>MEDIANFLOW<ul><li><a href="http://docs.opencv.org/trunk/d7/d86/classcv_1_1TrackerMedianFlow.html">cv::TrackerMedianFlow Class Reference</a></li></ul></li><li>GOTURN<ul><li><a href="http://docs.opencv.org/trunk/d7/d4c/classcv_1_1TrackerGOTURN.html">cv::TrackerGOTURN Class Reference</a></li></ul></li></ul><p>の6つになります。<br>ただし、<strong>GOTURN</strong>は、Caffeを利用しており、入力として、<strong>goturn.prototxt</strong>と<strong>goturn.caffemodel</strong>を実行フォルダに展開する必要があります。<br>さもなくば、</p><blockquote><p>OpenCV Error: Unspecified error (FAILED: fs.is_open(). Can’t open “goturn.prototxt”) in cv::dnn::ReadProtoFromTextFile, file D:\Works\Lib\OpenCV\src\opencv_contrib-3.2.0\modules\dnn\src\caffe\caffe_io.cpp, line 1077 D:\Works\Lib\OpenCV\src\opencv_contrib-3.2.0\modules\dnn\src\caffe\caffe_io.cpp:1077: error: (-2) FAILED: fs.is_open(). Can’t open “goturn.prototxt” in function cv::dnn::ReadProtoFromTextFile</p></blockquote><blockquote><p>OpenCV Error: Unspecified error (FAILED: fs.is_open(). Can’t open “goturn.caffemodel”) in cv::dnn::ReadProtoFromBinaryFile, file D:\Works\Lib\OpenCV\src\opencv_contrib-3.2.0\modules\dnn\src\caffe\caffe_io.cpp, line 1086 D:\Works\Lib\OpenCV\src\opencv_contrib-3.2.0\modules\dnn\src\caffe\caffe_io.cpp:1086: error: (-2) FAILED: fs.is_open(). Can’t open “goturn.caffemodel” in function cv::dnn::ReadProtoFromBinaryFile</p></blockquote><p>というエラーが発生します。<br>入手先は下記の2箇所になります。</p><ol><li>Train you own GOTURN model using<ul><li><a href="https://github.com/Auron-X/GOTURN_Training_Toolkit">https://github.com/Auron-X/GOTURN_Training_Toolkit</a></li></ul></li><li>Download pretrained caffemodel<ul><li><a href="https://github.com/opencv/opencv_extra">https://github.com/opencv/opencv_extra</a></li></ul></li></ol><p>ただ、上記2つを見てもそれらしいのはありませんし、protoxtxtやcaffemodelの名前を変更して実行してもエラーになったりして試すことが出来ませんでした。</p><blockquote><p>OpenCV Error: Requested object was not found (Requested blob “.data1” not found) in cv::dnn::Net::setBlob, file D:\Works\Lib\OpenCV\src\opencv_contrib-.2.0\modules\dnn\src\dnn.cpp, line 516</p></blockquote><p>とりあえず、今回は、GOTURN以外を試しました。</p><h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><p>下記がサンプルです。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span> #<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core.hpp&gt; #include &lt;opencv2/highgui.hpp&gt; #include &lt;opencv2/opencv.hpp&gt; #include &lt;opencv2/tracking.hpp&gt;  </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> \* argv\[\])</span> </span>&#123; <span class="comment">// https://www.youtube.com/watch?v=QAYX9MZ77w8 auto path = &quot;B:\\\\poochy\_yoshis\_woolly\_world.mp4&quot;; cv::VideoCapture vc(path); if (!vc.isOpened()) return -1;  </span></span><br><span class="line">cv::Mat img; vc &gt;&gt; img; <span class="keyword">if</span> (img.empty()) <span class="keyword">return</span> <span class="number">-1</span>;  </span><br><span class="line"><span class="comment">// 横方向の画像数 const int cols = 3;  </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> cnt = <span class="number">5</span>; cv::String trakerTypes\[cnt\]; cv::Rect2d rois\[cnt\]; cv::Ptr&lt;cv::Tracker&gt; trackers\[cnt\];  </span><br><span class="line"><span class="comment">// Trackerの設定 trakerTypes\[0\] = cv::String(&quot;KCF&quot;); trakerTypes\[1\] = cv::String(&quot;MIL&quot;); trakerTypes\[2\] = cv::String(&quot;MEDIANFLOW&quot;); trakerTypes\[3\] = cv::String(&quot;TLD&quot;); trakerTypes\[4\] = cv::String(&quot;BOOSTING&quot;); //trakerTypes\[5\] = cv::String(&quot;GOTURN&quot;);  </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> index = <span class="number">0</span>; index &lt; cnt; index++) trackers\[index\] = cv::Tracker::create(trakerTypes\[index\]);  </span><br><span class="line"><span class="comment">// 縮小後のサイズ auto ratio = 0.5; const auto iw = img.cols \* ratio; const auto ih = img.rows \* ratio; const cv::Size size(iw, ih);  </span></span><br><span class="line"><span class="comment">// 初期位置 const int x = 80; const int y = 60; const int w = 200; const int h = 220; cv::Rect2d roi(x, y, w, h);  </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> index = <span class="number">0</span>; index &lt; cnt; index++) rois\[index\] = roi;  </span><br><span class="line"><span class="comment">// 初回フレームの設定 for (auto index = 0; index &lt; cnt; index++) trackers\[index\]-&gt;init(img, rois\[index\]);  </span></span><br><span class="line">cv::Mat combined\_img(cv::Size(iw \* cols, <span class="built_in">ceil</span>(cnt / <span class="keyword">static</span>\_cast&lt;<span class="keyword">double</span>&gt;(cols)) \* ih ), CV\_8UC3); cv::namedWindow(<span class="string">&quot;preview&quot;</span>);  </span><br><span class="line"><span class="keyword">while</span> (!img.empty()) &#123; cv::Rect roi\_rect; roi\_rect.width = iw; roi\_rect.height = ih; <span class="keyword">for</span> (<span class="keyword">auto</span> index = <span class="number">0</span>; index &lt; cnt; index++) &#123; cv::Mat cloned = img.clone(); roi\_rect.x = iw \* (index % cols); roi\_rect.y = ih \* (index / cols);  </span><br><span class="line"><span class="function">cv::Point <span class="title">p1</span><span class="params">(rois\[index\].x, rois\[index\].y)</span></span>; <span class="function">cv::Point <span class="title">p2</span><span class="params">(p1.x + rois\[index\].width, p1.y + rois\[index\].height)</span></span>; cv::rectangle(cloned, p1, p2, CvScalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>);  </span><br><span class="line">cv::putText(cloned, trakerTypes\[index\], cv::Point(<span class="number">20</span>, <span class="number">40</span>), cv::FONT\_HERSHEY\_PLAIN, <span class="number">2</span>, CvScalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>);  </span><br><span class="line"><span class="function">cv::Mat <span class="title">roi</span><span class="params">(combined\_img, roi\_rect)</span></span>;  </span><br><span class="line">cv::Mat resized; cv::resize(cloned, resized, size); resized.copyTo(roi); &#125;  </span><br><span class="line">cv::imshow(<span class="string">&quot;preview&quot;</span>, combined\_img);  </span><br><span class="line"><span class="comment">// ESC key check auto key = static\_cast&lt;char&gt;(cv::waitKey(30)); if (key == 27) break;  </span></span><br><span class="line">vc &gt;&gt; img; <span class="keyword">if</span> (img.empty() || vc.get(CV\_CAP\_PROP\_POS\_AVI\_RATIO) == <span class="number">1</span>) <span class="keyword">break</span>;  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> index = <span class="number">0</span>; index &lt; cnt; index++) trackers\[index\]-&gt;update(img, rois\[index\]); &#125; &#125;</span><br></pre></td></tr></table></figure><p>これを動かすと、次のようになります。<br>サンプルとして、<strong>ニンテンドー3DS「ポチと! ヨッシー ウールワールドポチと! ヨッシー ウールワールド」</strong>の任天堂Youtube公式チャンネルから<a href="http://pvhttps//www.youtube.com/watch?v=QAYX9MZ77w8">ポチと! ヨッシー ウールワールド ゲームで見られるアニメ 「かけっこ編」</a>を使っています。<br>映像中の青ヨッシーを追跡します。<br>5fpsで録画した上、かなりフレーム数を間引いてGIFアニメにしていますが、アルゴリズム毎の性能はわかると思います。<br>[video width=”960” height=”390” mp4=”../../../../public/2017/05/anime22.mp4”][/video] 評価としては、下記の感じです。</p><ul><li>MIL<ul><li>やや安定。途中で緑ヨッシーにつられてしまっている。</li></ul></li><li>TLD<ul><li>なんかランダムみたいな感じ</li></ul></li><li>BOOSTING<ul><li>そこそこ安定。ただし、一度青ヨッシーが枠から外れたため、途中で緑ヨッシーを追跡している。</li></ul></li><li>KCF<ul><li>一番安定。ただし、枠外に外れてしまうと追跡できなくなる</li></ul></li><li>MEDIANFLOW<ul><li>まったく動いていない</li></ul></li></ul><p>画像を縮小して高速化も試しています。<br>まだまだ工夫の余地はあると思いますが、それなりに目的は達成できています。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>いくつか問題はありますが、物体追跡は色々楽しめそうな技術ですね。<br>画像全体の探索はコストがかかりますが、一度見つかった物体の探索は、物体追跡が一番低コストかもしれません。</p>]]></content>
      
      
      <categories>
          
          <category> マルチメディア </category>
          
          <category> 画像処理 </category>
          
          <category> OpenCV </category>
          
          <category> 物体追跡 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ64 .NET Core SDKの過去バージョンを入手する</title>
      <link href="2017/05/12/2275/"/>
      <url>2017/05/12/2275/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><a href="https://github.com/shimat/opencvsharp">OpenCVSharp</a>をFolkしてPull Requestを投げたりしています。<br>おかげさまで、追加修正などはありますが、全て受け入れてもらっています。<br>で、現在のOpenCVSharpは.NET Coreを採用しており、<strong>global.json</strong>を見ると、<strong>1.0.0-preview2-1-003177</strong>を記述されています。<br>しかし、このバージョンは過去のものになっております。<br>開発するなら、ここを書き換えて自分がインストールしているバージョンに書き換えます。<br>ですが、毎回書き換えて、コミットしないように注意するのは、ちょっと面倒です。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>幸いにして、わかりにくいですが過去のバージョンがあります。<br><a href="https://github.com/dotnet/core/blob/master/release-notes/download-archive.md">.NET Core Runtime and SDK download archive</a> どうでもいいですが、OpenCVSharpは<strong>1.0.0-preview2-1-003177</strong>を使っていますが、上のページに該当するバージョンがありません。<br>これ、実は、**.NET Core 1.1.0 SDK Preview 2.1 build 3177<strong>が該当します。<br>ちゃんとリンク先のページの、</strong>SDK Binaries<strong>をダウンロードすると、</strong>dotnet-dev-win-x64.1.0.0-preview2-1-003177.zip<strong>が入手でき、展開すれば意図したバージョンのSDKが入手できます。<br>その証拠に展開したファイルをコマンドプロンプトから実行すると表示されるバージョンは、</strong>1.0.0-preview2-1-003177**になっています。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet.exe --version <span class="number">1</span>.<span class="number">0</span>.<span class="number">0</span>-preview2-<span class="number">1</span>-<span class="number">003177</span></span><br></pre></td></tr></table></figure><p>展開したファイル群に含まれる_sdkフォルダ<strong>の中身を、</strong>C:\Program Files\dotnet\sdk_に移動すればインストール完了です。<br>つまり、**”C:\Program Files\dotnet\sdk\1.0.0-preview2-1-003177\dotnet.dll”**のような構成になれば正解です。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET </category>
          
          <category> net </category>
          
          <category> .NET Core </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その63 GitLabを始める&amp;GitHubから引っ越し</title>
      <link href="2017/05/12/2252/"/>
      <url>2017/05/12/2252/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><a href="https://taktak.jp/2017/05/07/2228">開発メモ その61 Visual Studio Team Serviceを始める&amp;Githubから引っ越し</a>にて、**Visual Studio Team Service (以下VSTS)**のアカウントの作成を実施しました。<br>しかしながら、ものの一時間で使いにくい、という不満が高まってきました。<br>何が面倒って、</p><ul><li>画面のUIが複雑</li><li>Iterationの概念が複雑</li></ul><p>の2点です。<br>特に、2つ目。仕事でも使っていましたが、やっぱりダメでした。<br>Issue作って、アサインしたりするワークフローを回すという作業が非常に面倒です。<br>個人のプロジェクトで利用するなら、ここまでの複雑なタスク管理は不要なんですよね。</p><h1 id="GitLab"><a href="#GitLab" class="headerlink" title="GitLab"></a>GitLab</h1><p>なので、Githubに似たサービスを利用することにしました。</p><ul><li>GitLab</li><li>Bitbucket</li><li>GitBucket</li><li>Gitblit</li><li>Gogs</li></ul><p>が調べて存在するサービスです。<br>今回は知名度が高い<strong>GitLab</strong>を採用することにしました。<br>ただし、知名度の高さは2017年2月に引き起こしたデータ消失事件も少なからず影響しています。<br><a href="https://techcrunch.com/2017/02/01/gitlab-suffers-major-backup-failure-after-data-deletion-incident/">GitLab suffers major backup failure after data deletion incident</a> この件と下記のメリットを考慮して、GitLabの利用を決断しました。</p><ul><li>プライベートリポジトリを無制限に無料で利用できる</li><li>Githubに似たLook and feel</li><li>最悪、GitLabからGithubに戻れる</li></ul><h1 id="Sign-up"><a href="#Sign-up" class="headerlink" title="Sign up"></a>Sign up</h1><p>公式ページは、<a href="https://about.gitlab.com/">https://about.gitlab.com/</a>です。<br>まず、右上の<strong>Sign Up</strong>を選択します。</p><p><a href="../../../../public/2017/05/1-2.png"><img src="../../../../public/2017/05/1-2-1024x668.png"></a><br> 次に、<strong>Register</strong>を選択し必要な情報を入力してきます。</p><ul><li>Full name<ul><li>自分の名前を入力します。この名前はユーザ認証に使われません。</li></ul></li><li>Username<ul><li>ユーザ認証に利用するユーザ名</li></ul></li><li>Email<ul><li>GitLabからの連絡や問い合わせに使うメールアドレス。メールアドレスを使ってログインも可能です。</li></ul></li><li>Email confirmation<ul><li>入力したメールアドレスの確認</li></ul></li><li>Password<ul><li>パスワード</li></ul></li></ul><p>入力が完了したら、CAPTCHAのチェックボックスにチェックを入れ、Registerボタンをクリックします。</p><p><a href="../../../../public/2017/05/2-2.png"><img src="../../../../public/2017/05/2-2-1024x769.png"></a> 確認メールが入力したメールアドレスに送信されますので、メールを確認して登録を終了させます。<br><a href="../../../../public/2017/05/3-2.png"><img src="../../../../public/2017/05/3-2-1024x372.png"></a> 登録の確認が完了するとメインページに遷移します。<br><a href="../../../../public/2017/05/4-2.png"><img src="../../../../public/2017/05/4-2-1024x488.png"></a><br> これで登録が完了です。</p><h1 id="Import-from-Github"><a href="#Import-from-Github" class="headerlink" title="Import from Github"></a>Import from Github</h1><p>インポートも簡単でした。<br>まず、上部のバーの**+**ボタンをクリックします。</p><p><a href="../../../../public/2017/05/5-2.png"><img src="../../../../public/2017/05/5-2-1024x488.png"></a> 続いて、インポート元のプロジェクトを選択します。<br>今回は<strong>GitHub</strong>を選択。<br><a href="../../../../public/2017/05/6-1.png"><img src="../../../../public/2017/05/6-1-1024x728.png"></a> <strong>List your GitHub repositories</strong>をクリックします。<br><a href="../../../../public/2017/05/7-1.png"><img src="../../../../public/2017/05/7-1-1024x728.png"></a> GitHubへのログインを済ませ、GitLabとGitHubとの連携を許可します。<br><strong>Authorize application</strong>をクリックします。<br><a href="../../../../public/2017/05/8.png"><img src="../../../../public/2017/05/8-1024x728.png"></a> GitHub内のprivateを含むプロジェクトの一覧が表示されます。<br>インポートしたい必要なプロジェクトの右側にある<strong>Import</strong>ボタンをクリックします。<br><a href="../../../../public/2017/05/9.png"><img src="../../../../public/2017/05/9-1024x790.png"></a> 暫くすると、インポートが完了します。<br><a href="../../../../public/2017/05/12.png"><img src="../../../../public/2017/05/12-1024x741.png"></a> 適当にプロジェクト名をクリックして、インポート結果を確認します。<br>ソースコードがインポートされていることが確認できます。<br><a href="../../../../public/2017/05/10.png"><img src="../../../../public/2017/05/10-955x1024.png"></a> <strong>Visual Studio Team Service</strong>とは異なりIssueもインポートに成功しています。素晴らしい。<br><a href="../../../../public/2017/05/11.png"><img src="../../../../public/2017/05/11-1024x948.png"></a></p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>最近のWebサービスは本当に親切ですね。インポートも簡単でした。<br>これが本当に無料で利用できるなんて、信じられません。<br>サービス事業者は厳しい競争にさらされてると思いますが、頑張って欲しいです。</p>]]></content>
      
      
      <categories>
          
          <category> バージョン管理システム </category>
          
          <category> git </category>
          
          <category> GitLab </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その62 Visual Studio Team Serviceのアカウントを削除する</title>
      <link href="2017/05/07/2244/"/>
      <url>2017/05/07/2244/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><a href="https://taktak.jp/2017/05/07/2228">開発メモ その61 Visual Studio Team Serviceを始める&amp;Githubから引っ越し</a>にて、**Visual Studio Team Service (以下VSTS)**のアカウントの作成を実施しました。<br>しかしながら、その後、既に自分はアカウントを持っていることに気づきました。<br>ですので、前回作成したアカウントを削除します。</p><h1 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h1><p>削除の手順は、下記の英語ページでしかMSDNに記述されていませんでした。<br><a href="https://www.visualstudio.com/en-us/docs/setup-admin/team-services/delete-or-recover-your-account-vs">Delete or recover Visual Studio Team Services account</a> まずは、削除したいアカウントにアクセスし、どれでもよいのでプロジェクトを開きます。<br>次に、画面上のバーにある歯車にマウスカーソルを合わせます。</p><p><a href="../../../../public/2017/05/1-1.png"><img src="../../../../public/2017/05/1-1-1024x659.png"></a> カーソルを合わせるとポップアップメニューが出現するので、一番下の<strong>Account settings</strong>を選択します。<br><a href="../../../../public/2017/05/2-1.png"><img src="../../../../public/2017/05/2-1-1024x587.png"></a> 続いて、<strong>Settings</strong>タブを選択します。<br><a href="../../../../public/2017/05/3-1.png"><img src="../../../../public/2017/05/3-1-1024x613.png"></a> 次に、中央の<strong>Advanced administration tasks</strong>の<strong>Delete Account</strong>をクリックします。<br><a href="../../../../public/2017/05/4-1.png"><img src="../../../../public/2017/05/4-1-1024x613.png"></a><br> 削除の確認ダイアログが表示されます。<br>ダイアログの内容は</p><blockquote><p>アカウントを削除すると、あなたのアカウント({youraccount}.visualstudio.com)内の全てのユーザーは即座にアクセスできなくなります。<br>お別れするのが残念です。一度アカウントを削除すると90日間はアカウントは無効状態になり、その後永久に削除されます。詳細はdeleting or recovering your accountを見れます。</p></blockquote><p>になります。<br>削除に必要な下記の情報を入力します。</p><ul><li>削除理由 (オプション)<ul><li>アカウントの削除理由。適当にコンボボックスから選択します。</li></ul></li><li>削除アカウントの確認<ul><li>https://{youraccount}.visualstudio.comの**{youraccount}**部分を入力します</li></ul></li></ul><p><a href="../../../../public/2017/05/5-1.png"><img src="../../../../public/2017/05/5-1-1024x613.png"></a><br> そして、Deleteボタンをクリックすると削除が実行され、VSTSのポータルサイトに遷移します。<br>以上で削除は完了です。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> Visual Studio Team Service </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その61 Visual Studio Team Serviceを始める&amp;Githubから引っ越し</title>
      <link href="2017/05/07/2228/"/>
      <url>2017/05/07/2228/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>Github</strong>のプライベートリポジトリを利用するには、7ドル/月の利用料が必要になります。<br>プライベートリポジトリは<strong>Visual Studio Team Service (以下VSTS)**に移動して、Githubの有料プランを解約しようと思います。<br>勘違いして欲しくないのは、Githubの機能に一切の不満はありません。<br>プライベートリポジトリの保持のために一定の支出があるのが耐えられないだけなんです。<br>削れる支出は削るべきです。<br>また、VSTSを利用するのも、色々なサービスに触れて知見を得るというメリットもあります。<br>何より、仕事で海外のグループ会社は</strong>Team Foundation Service**を使っているので、その類似サービスであるVSTSを利用する際の学習コストは少なくて済むのでは、という目論見もあります。<br>注意 VSTSはインターフェイスが全て英語です。</p><h1 id="Sign-up"><a href="#Sign-up" class="headerlink" title="Sign up"></a>Sign up</h1><p>VSTSは5ユーザーまでは無料で利用できます。<br>つまり個人で利用する分にはリポジトリの個数無制限で無料です。<br>詳細な利用料金は<a href="https://azure.microsoft.com/ja-jp/pricing/calculator/?service=visual-studio-team-services">利用料金ツール</a>を利用します。<br>サインアップは簡単です。<br><a href="https://www.visualstudio.com/ja/team-services/">Visual Studio Team Services</a>にアクセスして、右上の無料アカウントをクリックします。<br>なお既にMicrosoftアカウントを保有しているものとします。</p><p><a href="../../../../public/2017/05/0.png"><img src="../../../../public/2017/05/0-1024x636.png"></a><br> ログイン後、必要な情報を入力していきます。</p><ul><li>覚えやすい名前を選んでください<ul><li>他の利用者と重複しないユニークな名称を利用</li></ul></li><li>コードの管理<ul><li><strong>Git</strong>, <strong>Team Foundation バージョン管理</strong>を選択できます。後から変更できないようです。</li></ul></li><li>プロジェクト名<ul><li>後から変更できますので、慎重になる必要はありません</li></ul></li><li>作業の整理方法 (プロセス)<ul><li><strong>Agile</strong>, <strong>Scrum</strong>, <strong>CMMI</strong>がありますが、後から変更できないようです</li></ul></li><li>ホストする地域<ul><li>どこでも良いですが、これも変更できません。ここはアメリカの信頼性を信じました。</li></ul></li></ul><p><a href="../../../../public/2017/05/1.png"><img src="../../../../public/2017/05/1-1024x708.png"></a> 続行をクリックして、暫くすると次の画面に遷移してプロジェクトの作成とVSTSのアカウント作成が完了します。<br><a href="../../../../public/2017/05/2.png"><img src="../../../../public/2017/05/2-1024x663.png"></a></p><h1 id="Import-from-Github"><a href="#Import-from-Github" class="headerlink" title="Import from Github"></a>Import from Github</h1><p>プロジェクトの作成が完了したら、Githubからリポジトリを引っ越しします。<br>引っ越しは非常に簡単です。<br>プロジェクトのホームの中央にある<strong>or import a repository</strong>をクリックし、<strong>Import</strong>ボタンをクリックします。</p><p><a href="../../../../public/2017/05/3.png"><img src="../../../../public/2017/05/3-1024x663.png"></a><br> 表示されるダイアログに必要な事項を入力します。</p><ul><li>Source Type<ul><li><strong>Git</strong>, <strong>VSTS</strong>から選択。今回はGit</li></ul></li><li>Clone URL<ul><li>Githubでリポジトリのトップページのurlを貼り付けるだけです</li></ul></li><li>Requires authorization<ul><li>プライベートリポジトリからのインポートの場合、チェックして次のUsernameとPasswordを入力します。</li></ul></li><li>Username<ul><li>Githubアカウントのユーザ名</li></ul></li><li>Password / PAT<ul><li>Githubアカウントのパスワード</li></ul></li></ul><p><a href="../../../../public/2017/05/4.png"><img src="../../../../public/2017/05/4-1024x663.png"></a> 入力後、Importをクリックすると、インポートが開始されます。<br><a href="../../../../public/2017/05/5.png"><img src="../../../../public/2017/05/5-1024x663.png"></a> 暫くしてインポートが完了すると、自動的にコード画面に遷移し、インポートが完了します。<br><a href="../../../../public/2017/05/6.png"><img src="../../../../public/2017/05/6-1024x708.png"></a> Historyタブに移動すると、履歴もインポートされていることがわかります。<br><a href="../../../../public/2017/05/7.png"><img src="../../../../public/2017/05/7-1024x663.png"></a><br> さすがにIssueはインポートされてはいませんでした。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>今回のGithubからインポートを実施して、MicrosoftがOSSを初めとする自社製品以外のプロジェクトやソフトウェアと連携を積極的に推進しているという意思を強く感じました。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> Visual Studio Team Service </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その60 Visual Studioで.NET Coreの単体テスト実行後dotnet.exeが大量に残る</title>
      <link href="2017/05/06/2222/"/>
      <url>2017/05/06/2222/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>更新 (2017/05/07) 本問題は、.NET Coreのバージョンが古いからサポート外、という結果になりIssueはCloseされましたので未解決です <strong>OpenCVSharp</strong>の単体テストを実行後、何気なくタスクマネージャーを見てみたら、<strong>dotnet.exe</strong>が大量に存在していました。</p><p><a href="../../../../public/2017/05/5e78658974931a18e7029b4a3bf13e03.png"><img src="../../../../public/2017/05/5e78658974931a18e7029b4a3bf13e03-1024x640.png"></a><br> 実行コマンドラインを見てみると、</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;C:\\Program Files\\dotnet\\dotnet.exe&quot; test &quot;&lt;単体テストのプロジェクトフォルダ&gt;\\project.json&quot; -- port <span class="number">56300</span></span><br></pre></td></tr></table></figure><p>となっており、単体テストの実行によって実行されたプロセスのようです。</p><h1 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use"></a>How to use</h1><p>とりあえず原因がわからないので、githubに投げてみました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/dotnet/cli/issues/6528" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/9141961?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">dotnet.exe remains even though Visual Studio unit test finishes · Issue #8217 · dotnet/sdk</div><div class="hbc-url">https://github.com/dotnet/cli/issues/6528</div><div class="hbc-description">Steps to reproduce Do unit test in VS 2015. Target project is *.xproj. And my environmental is dotnet.exe --version 1.0.3 Expected behavior …</div></div></div></div></a></div></div><p>どちらかといえば、Visual Studioのバグな気がするけど、まずは**.NET Command Line Interface**のリポジトリのIssueに。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET </category>
          
          <category> net </category>
          
          <category> Visual Studio </category>
          
          <category> .NET Core </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OSS IssueReport</title>
      <link href="2017/05/06/2216/"/>
      <url>2017/05/06/2216/</url>
      
        <content type="html"><![CDATA[<p>[[“Date”,”Site”,”Url”,”Title”,”Type”,”Result”],[“2017\/05\/06”,”github”,”<a href="%22https://github.com/dotnet/cli/issues/6528%22">https:\/\/github.com\/dotnet\/cli\/issues\/6528&lt;\/a&gt;”,”dotnet.exe remains even though Visual Studio unit test finishes”,”-“,”Open”],[“2017\/03\/30”,”github”,”</a><a href="%22https://github.com/shimat/opencvsharp/issues/345%22">https:\/\/github.com\/shimat\/opencvsharp\/issues\/345&lt;\/a&gt;”,”FastFeatureDetector does not work”,”-“,”Open”],[“2017\/03\/21”,”github”,”</a><a href="%22https://github.com/shimat/opencvsharp/issues/329%22">https:\/\/github.com\/shimat\/opencvsharp\/issues\/329&lt;\/a&gt;”,”Mat.Diag(Mat) does not reutrn a square diagonal matrix”,”Bug”,”Close”],[“2016\/03\/24”,”github”,”</a>https:\/\/github.com\/Microsoft\/CNTK\/issues\/224&lt;\/a&gt;”,”Fix Missing api-ms-win-core-path-l1-1-0.dll #224”,”Bug”,”Close”]]</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その59 OpenCV 3.2 with ContribモジュールでArUcoを使用する</title>
      <link href="2017/05/04/2204/"/>
      <url>2017/05/04/2204/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>OpenCVSharp</strong>に新しいPull Requestを投げました。<br>内容は、<strong>OpenCV</strong>の拡張モジュールに含まれる、<strong>ArUco</strong>と呼ばれる拡張現実アプリケーション用の計量ライブラリのOpenCVSharpへの移植です。<br>移植作業において、P/Invokeを書くことも大変だったのですが、ライブラリそのものの使い方も大変でしたのでメモします。</p><h2 id="What-is-ArUco"><a href="#What-is-ArUco" class="headerlink" title="What is ArUco?"></a>What is ArUco?</h2><p>まず、ArUcoの公式ページは下記のようです。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://www.uco.es/investiga/grupos/ava/node/26" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=www.uco.es"></img><div class="hbc-site-name">www.uco.es</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title"> ArUco: a minimal library for Augmented Reality applications based on OpenCV | Aplicaciones de la Visión Artificial</div><div class="hbc-url">http://www.uco.es/investiga/grupos/ava/node/26</div></div></div></div></a></div></div><p>ArUcoという名称は、おそらく、<strong>Augmented Reality Universidad de Córdoba</strong>の略なのだと思います。<br>ucoというは、Universidad de Córdoba、つまりスペインのコルドバ大学のドメインです。</p><h2 id="特徴"><a href="#特徴" class="headerlink" title="特徴"></a>特徴</h2><p>下記は、ArUcoについてのOpenCVの下記のドキュメントページです。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://docs.opencv.org/3.2.0/d9/d6d/tutorial_table_of_content_aruco.html" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=docs.opencv.org"></img><div class="hbc-site-name">docs.opencv.org</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">OpenCV: ArUco marker detection (aruco module)</div><div class="hbc-url">http://docs.opencv.org/3.2.0/d9/d6d/tutorial_table_of_content_aruco.html</div></div></div></div></a></div></div><p>そこで、</p><blockquote><p>ArUco markers are binary square fiducial markers that can be used for camera pose estimation. Their main benefit is that their detection is robust, fast and simple. The aruco module includes the detection of these types of markers and the tools to employ them for pose estimation and camera calibration. Also, the ChArUco functionalities combine ArUco markers with traditional chessboards to allow an easy and versatile corner detection. The module also includes the functions to detect ChArUco corners and use them for pose estimation and camera calibration.</p></blockquote><p>AuUcoマーカーはカメラの姿勢推定に用いことが可能な二値化された位置合わせマーカーです。主な利点はそれらの検出がロバスト、高速かつシンプルであることです。<br>ArUcoモジュールには、これらの種別の検出、姿勢推定とカメラキャリブレーションのためのツールを含みます。<br>また、ChArUcoの機能は、ArUcoマーカーに従来のチェスボードを組み合わせることで、簡単で多目的に使えるコーナー検出を可能にします。モジュールは、ChArUcoのコーナー検出、それらを使用した姿勢推定とカメラキャリブレーション機能も含みます。<br>と記述してあります。<br>とりあえず、位置合わせマーカーが全ての起点となります。<br>画像中からマーカーを見つけ出し、マーカーの位置関係から、壁や床の向き、角度を計算できる模様。</p><h1 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use"></a>How to use</h1><p>最初に使い方が大変だったと書きましたが、コード自体は大したことがないです。後述のソース見ればわかりますが、マーカーの検出自体は数行です。<br>何にはまったかというと、</p><ul><li>OpenCVに含まれるサンプル画像は使えない</li><li>辞書が一致しないと検出できない</li></ul><p>とい2点です。</p><h2 id="サンプル画像が使えない"><a href="#サンプル画像が使えない" class="headerlink" title="サンプル画像が使えない"></a>サンプル画像が使えない</h2><p>例えば、<a href="https://github.com/opencv/opencv_contrib/blob/master/modules/aruco/tutorials/aruco_detection/images/singlemarkersoriginal.png">https://github.com/opencv/opencv_contrib/blob/master/modules/aruco/tutorials/aruco_detection/images/singlemarkersoriginal.png</a>というサンプルがあります。OpenCVの公式リポジトリにあるサンプルです。<br>普通に、この画像を読み込んで、<strong>cv::aruco::detectMarkers</strong>に渡しても何も返ってきません。<br>どうも、サンプル画像のマーカーは、現行の辞書で生成される画像とは異なる模様。<br>下記のコミュニティのAnswerでの回答です。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://answers.opencv.org/question/92137/valid-marker-ends-up-in-rejected-candidates-with-aruco-marker-detection/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=answers.opencv.org"></img><div class="hbc-site-name">answers.opencv.org</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">Valid marker ends up in rejected candidates with aruco marker detection - OpenCV Q&amp;A Forum</div><div class="hbc-url">http://answers.opencv.org/question/92137/valid-marker-ends-up-in-rejected-candidates-with-aruco-marker-detection/</div><div class="hbc-description">Hello, I am trying to test the basic functionalities with aruco. I have two problems. I am getting an numpad_chunk() : invalid pointer error…</div></div></div></div></a></div></div><p>なので、自分でマーカーを作って、検出しているのが、後述のソースになります。</p><h2 id="辞書が一致しないと検出できない"><a href="#辞書が一致しないと検出できない" class="headerlink" title="辞書が一致しないと検出できない"></a>辞書が一致しないと検出できない</h2><p>これは、考えてみれば当たり前なのですが、マーカーを検出する際、どの辞書を使うかを引数に渡しています。<br>つまり、検出対象の画像に含まれるマーカーの基になった辞書と、検出に利用する辞書が一致しないと何も検出できません。<br>これに気づかなかったため、OpenCVSharpに移植する際、P/Invokeの記述ミスやメモリ破壊を疑ってしまい、無駄に時間を消費してしまいました。</p><h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><p>下記がサンプルです。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span> #<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; #include &lt;vector&gt; #include &lt;opencv2/core.hpp&gt; #include &lt;opencv2/highgui.hpp&gt; #include &lt;opencv2/aruco.hpp&gt; #include &lt;opencv2/opencv.hpp&gt;  </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> \* argv\[\])</span> </span>&#123; <span class="comment">// 共通パラメータ const auto name = cv::aruco::DICT\_6X6\_250; const auto dictionary = cv::aruco::getPredefinedDictionary(name);  </span></span><br><span class="line"><span class="comment">// マーカー画像を生成 const auto markerSidePixels = 128; const auto columns = 4; const auto rows = 5; const auto margin = 20;  </span></span><br><span class="line"><span class="keyword">auto</span> width = columns \* markerSidePixels + margin \* (columns + <span class="number">1</span>); <span class="keyword">auto</span> height = rows \* markerSidePixels + margin \* (rows + <span class="number">1</span>);  </span><br><span class="line"><span class="keyword">auto</span> id = <span class="number">0</span>; <span class="function">cv::Rect <span class="title">roi</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>, markerSidePixels, markerSidePixels)</span></span>; <span class="function">cv::Mat <span class="title">marker</span><span class="params">(cv::Size(width, height), CV\_8UC1, cv::Scalar::all(<span class="number">255</span>))</span></span>;  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> y = <span class="number">0</span>; y &lt; rows; y++) &#123; roi.y = y \* markerSidePixels + margin \* (y + <span class="number">1</span>);  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x = <span class="number">0</span>; x &lt; columns; x++) &#123; roi.x = x \* markerSidePixels + margin \* (x + <span class="number">1</span>);  </span><br><span class="line"><span class="function">cv::Mat <span class="title">roiMat</span><span class="params">(marker, roi)</span></span>; cv::Mat markerImage; cv::aruco::drawMarker(dictionary, id++, markerSidePixels, markerImage, <span class="number">1</span>); markerImage.copyTo(roiMat); &#125; &#125;  </span><br><span class="line">std::vector&lt;int&gt; markerIds; std::vector&lt;std::vector&lt;cv::Point2f&gt;&gt; markerCorners, rejectedCandidates; cv::Ptr&lt;cv::aruco::DetectorParameters&gt; parameters(new cv::aruco::DetectorParameters());  </span><br><span class="line"><span class="comment">// マーカーの検出 cv::aruco::detectMarkers(marker, dictionary, markerCorners, markerIds, parameters, rejectedCandidates); cv::Mat detected\_marker; cv::cvtColor(marker, detected\_marker, cv::COLOR\_GRAY2RGB); cv::aruco::drawDetectedMarkers(detected\_marker, markerCorners, markerIds, CvScalar(255, 0, 0)); // rejectedCandidatesにはidがないのでnoArray cv::aruco::drawDetectedMarkers(detected\_marker, rejectedCandidates, cv::noArray(), CvScalar(0, 0, 255));  </span></span><br><span class="line">/\* 表示 \*/ cv::namedWindow(<span class="string">&quot;marker&quot;</span>); cv::namedWindow(<span class="string">&quot;detected&quot;</span>); cv::imshow(<span class="string">&quot;marker&quot;</span>, marker); cv::imshow(<span class="string">&quot;detected&quot;</span>, detected\_marker); cv::waitKey(<span class="number">0</span>);  </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure><p>これを動かすと、次のようになります。</p><p><a href="../../../../public/2017/05/0bde279f01158ab3d1847cfeeb476963.png"><img src="../../../../public/2017/05/0bde279f01158ab3d1847cfeeb476963-233x300.png" alt="マーカー画像"></a></p><p><a href="../../../../public/2017/05/e8fc75a46239cd683a875c32097c5b51.png"><img src="../../../../public/2017/05/e8fc75a46239cd683a875c32097c5b51-233x300.png" alt="検出後"></a></p><p>検出後の画像には、マーカーを青で囲んでいます。<br>赤い領域は、候補として検出されたがマーカーとしては識別されなかった棄却された領域です。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>今回は歪みもない画像なので検出精度は100%ですが、現実の空間でもきちんとマーカーの位置を検出できます。<br>マーカーを紙面に印刷し、壁やボードに貼ることで、カメラの位置もわかりますし、付近の物体の位置関係も推定できそうです。</p>]]></content>
      
      
      <categories>
          
          <category> マルチメディア </category>
          
          <category> OpenCV </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その58 OpenCV 3.2 with Contribモジュールをスタティックライブラリとしてビルドする</title>
      <link href="2017/05/04/2202/"/>
      <url>2017/05/04/2202/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p><a href="https://taktak.jp/2017/04/29/2183">開発メモ その55 OpenCV 3.2のContribモジュールをビルドする</a>にて、<strong>OpenCV</strong>を拡張モジュール付きでビルドしましたが、これをスタティックライブラリでビルドする手順のメモ。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p><a href="http://takacity.blog.fc2.com/blog-entry-93.html">C++でOpenCVのフォームアプリを作る(3) - 静的リンク -</a>というそのものズバリなサイトがありました。<br><strong>CMake</strong>で<strong>BUILD_SHARED_LIBS</strong>をOFFにすれば、スタティックライブラリとして生成されます。<br>ソースファイルを下記のように展開したとします。</p><ul><li>c:\src\opencv_contrib-3.2.0<ul><li>doc</li><li>modules</li><li>samples</li><li>…</li></ul></li><li>c:\src\oopencv-3.2.0<ul><li>3rdparty</li><li>apps</li><li>…</li></ul></li></ul><p>この状態で、出力先を<strong>c:\src\opencv-3.2.0\build</strong>とした場合、スタティックライブラリは、<strong>c:\src\opencv-3.2.0\build\lib\Release</strong>または<strong>c:\src\opencv-3.2.0\build\lib\Debug</strong>に出力されます。<br>つまり、BUILD_SHARED_LIBSを状態に関係なく、同じ場所に出力されます。</p>]]></content>
      
      
      <categories>
          
          <category> その他 </category>
          
          <category> マルチメディア </category>
          
          <category> CMake </category>
          
          <category> OpenCV </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その57 が見つかりませんでした</title>
      <link href="2017/05/02/2197/"/>
      <url>2017/05/02/2197/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p><strong>OpenCVSharp</strong>をビルドしようと思ったら、プロジェクトファイルが開けなくなっており、Visual Studio 2015に表示されていたエラーについてのメモ。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><h2 id="Net-Core-1-0-1-tools-Preview-2-をインストール"><a href="#Net-Core-1-0-1-tools-Preview-2-をインストール" class="headerlink" title=".Net Core 1.0.1 tools Preview 2 をインストール"></a>.Net Core 1.0.1 tools Preview 2 をインストール</h2><p>海外の方が同じ問題に遭遇しておりました。日本語では遭遇例がありませんでした。悲しい。いと悲しい。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://richardleeman.blogspot.jp/2017/02/cprogram-files-x86msbuildmicrosoftvisua.html" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=richardleeman.blogspot.jp"></img><div class="hbc-site-name">richardleeman.blogspot.jp</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">&quot;C:\Program Files (x86)\MSBuild\Microsoft\VisualStudio\v14.0\DotNet\Microsoft.DotNet.Props&quot; was not found</div><div class="hbc-url">http://richardleeman.blogspot.jp/2017/02/cprogram-files-x86msbuildmicrosoftvisua.html</div><div class="hbc-description">I recently opened a sample project from a colleague and encountered the following error:   &quot;C:\Program Files (x86)\MSBuild\Microsoft\VisualS…</div></div></div></div></a></div></div><p><strong>.Net Core 1.0.1 tools Preview 2</strong>をインストールすれば良いです。</p><h2 id="0x80070490-要素が見つかりません。"><a href="#0x80070490-要素が見つかりません。" class="headerlink" title="0x80070490 - 要素が見つかりません。"></a>0x80070490 - 要素が見つかりません。</h2><p>が、インストール中にエラーが発生。</p><p><a href="../../../../public/2017/05/8cb366446e4e68857905698fd368f0b0.png"><img src="../../../../public/2017/05/8cb366446e4e68857905698fd368f0b0.png"></a><br> こちらも同じ現象に、遭遇している方が海外に。日本人?いませんねぇ。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://stackoverflow.com/questions/41635165/net-core-tools-preview-for-visual-studio-2015-installation-failure" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=stackoverflow.com"></img><div class="hbc-site-name">Stack Overflow</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded"></img></div><div class="hbc-text"><div class="hbc-title">.NET Core tools preview for Visual Studio (2015) installation failure</div><div class="hbc-url">http://stackoverflow.com/questions/41635165/net-core-tools-preview-for-visual-studio-2015-installation-failure</div><div class="hbc-description">I am reinstalling visual stuido with .net core. I followed the steps stated on the website (https://www.microsoft.com/net/core#windowsvs2015…</div></div></div></div></a></div></div><p>どうも、<strong>Visual Studio 2017</strong>がインストールされている環境に、.Net Core 1.0.1 tools Preview 2をインストールすると遭遇する模様。<br>正確には、<strong>Microsoft Visual C++ 2017 Redistributable</strong>が邪魔をしているらしい。<br>対処法は</p><ul><li>Microsoft Visual C++ 2017 Redistributableをアンインストール</li><li>Microsoft Visual C++ 2015 Redistributableをインストール</li><li>.Net Core 1.0.1 tools Preview 2を再インストール</li><li>Microsoft Visual C++ 2017 Redistributableを再インストール</li></ul><p>という風にすれば良いです。<br>ちなみに、Microsoft Visual C++ 2017 Redistributableをインストールすると、Microsoft Visual C++ 2015 Redistributableは消えてしまいます。<br>再頒布可能パッケージは下記から入手可能。</p><h2 id="Microsoft-Visual-C-2015-Redistributable"><a href="#Microsoft-Visual-C-2015-Redistributable" class="headerlink" title="Microsoft Visual C++ 2015 Redistributable"></a>Microsoft Visual C++ 2015 Redistributable</h2><p><a href="https://www.microsoft.com/ja-jp/download/details.aspx?id=53587">Microsoft Visual C++ 2015 再頒布可能パッケージ Update 3</a></p><h2 id="Microsoft-Visual-C-2017-Redistributable"><a href="#Microsoft-Visual-C-2017-Redistributable" class="headerlink" title="Microsoft Visual C++ 2017 Redistributable"></a>Microsoft Visual C++ 2017 Redistributable</h2><p>ちょっとこっちはわかりにくいです。<br><a href="https://www.visualstudio.com/downloads/">Visual Studio のダウンロード</a>の<strong>Other Tools and Frameworks</strong>にリンクが記載されています。</p><p><a href="../../../../public/2017/05/3f169495fe417c9196a810bfaee4e414.png"><img src="../../../../public/2017/05/3f169495fe417c9196a810bfaee4e414-1024x468.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET </category>
          
          <category> net </category>
          
          <category> .NET Core </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その56 Red Hat Enterprise Linux 7.2でDockerとコンテナを自動で再起動</title>
      <link href="2017/05/01/2191/"/>
      <url>2017/05/01/2191/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>マシン再起動後、自動起動してほしいコンテナってありますよね。<br><strong>Portainer</strong>とか特にそうです。<br>そんな自動起動の方法のメモ。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><h2 id="Dockerの自動起動"><a href="#Dockerの自動起動" class="headerlink" title="Dockerの自動起動"></a>Dockerの自動起動</h2><p>恐らくデフォルトで自動起動になっているとは思います。<br>もし、自動起動設定になっていない場合は下記。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl <span class="built_in">enable</span> docker </span><br></pre></td></tr></table></figure><h2 id="コンテナの自動起動"><a href="#コンテナの自動起動" class="headerlink" title="コンテナの自動起動"></a>コンテナの自動起動</h2><p>再起動を指定できるのは、Dockerのバージョン1.2.0から。<br><strong>run</strong>実行時に<strong>--restartオプション</strong>を付与することでDocker起動時にコンテナを自動で起動させることができます。<br>また、オプションに追加可能なポリシーは下記。</p><p>ポリシー</p><p>内容</p><p>no</p><p>再起動しない (既定値)</p><p>on-failure</p><p>終了ステータスが非0の場合に再起動する</p><p>on-failure:X</p><p>終了ステータスが非0の場合にX回だけ再起動する</p><p>always</p><p>終了ステータスを無視して再起動する</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://docs.docker.com/engine/reference/run/#restart-policies---restart" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=docs.docker.com"></img><div class="hbc-site-name">Docker Documentation</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="/favicons/docs@2x.ico"></img></div><div class="hbc-text"><div class="hbc-title">Docker run reference</div><div class="hbc-url">https://docs.docker.com/engine/reference/run/#restart-policies---restart</div><div class="hbc-description">Configure containers at runtime</div></div></div></div></a></div></div><p>ただし、上記の場合は、runで指定する場合で、既に作成したコンテナには使えません。<br>作成済みコンテナのに対してrestartを設定するには下記。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker update --restart=always</span><br></pre></td></tr></table></figure><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://docs.docker.jp/engine/reference/commandline/update.html" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=docs.docker.jp"></img><div class="hbc-site-name">docs.docker.jp</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">update — Docker-docs-ja 17.06 ドキュメント</div><div class="hbc-url">http://docs.docker.jp/engine/reference/commandline/update.html</div></div></div></div></a></div></div>]]></content>
      
      
      <categories>
          
          <category> 仮想化 </category>
          
          <category> Docker </category>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> Red Hat Enterprise Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その55 OpenCV 3.2のContribモジュールをビルドする</title>
      <link href="2017/04/29/2183/"/>
      <url>2017/04/29/2183/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p><strong>OpenCV</strong>には拡張モジュールと呼ばれる標準のパッケージには含まれず、自分でビルドすることで利用可能なライブラリ群がある。<br>それをビルドする際、罠に嵌まったのでメモ。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h2 id="基本設定"><a href="#基本設定" class="headerlink" title="基本設定"></a>基本設定</h2><p>拡張モジュールは<a href="https://github.com/opencv/opencv_contrib/releases">https://github.com/opencv/opencv_contrib/releases</a>から取得します。<br>また、拡張モジュールのビルドに本体であるOpenCVのソースが必要なので、<a href="http://opencv.org/releases.html">http://opencv.org/releases.html</a>からcontribと同じバージョンのソースをダウンロードします。<br>ダウンロードすると2つのzipが入手できますので、それを適当なフォルダに展開します。<br>展開先を<strong>c:\src</strong>とすると、</p><ul><li>c:\src\opencv_contrib-3.2.0<ul><li>doc</li><li>modules</li><li>samples</li><li>…</li></ul></li><li>c:\src\oopencv-3.2.0<ul><li>3rdparty</li><li>apps</li><li>…</li></ul></li></ul><p>という構成になるはずです。</p><h2 id="CMake"><a href="#CMake" class="headerlink" title="CMake"></a>CMake</h2><p><strong>CMake</strong>のGUIを起動し、下記のテキストボックスに記載した値を入力します。</p><ul><li><em>Where is the source code</em><ul><li>c:\src\oopencv-3.2.0 を指定</li></ul></li><li><em>Where to build the binaries</em><ul><li>c:\src\oopencv-3.2.0\build を指定</li></ul></li></ul><p>この状態で、一度<strong>Configure</strong>を押下します。<br>押下すると、ダイアログでプロジェクトの形式を聞かれます。<br>これは拡張モジュールを利用するプロジェクトに応じて決めます。<br>今回は<strong>Visual Studio 14 2015 Win64</strong>を選択しました。<br>ラジオボタンの選択は、<strong>Use default native compilers</strong>でOKです。<br>選択完了後、<strong>Finish</strong>を押下します。</p><h2 id="OPENCV-EXTRA-MODULES-PATH"><a href="#OPENCV-EXTRA-MODULES-PATH" class="headerlink" title="OPENCV_EXTRA_MODULES_PATH"></a>OPENCV_EXTRA_MODULES_PATH</h2><p>Configure押下後、画面中央のリストにたくさん値が現れるので、<strong>OPENCV_EXTRA_MODULES_PATH</strong>に<strong>c:/src/opencv_contrib-3.2.0/modules</strong>を設定します。<br>注意するのは、**(バックスラッシュ)<strong>ではなく</strong>/(スラッシュ)**でパスを指定することです。<br>さもなくば、 Call Stack (most recent call first): modules/CMakeLists.txt:7 (ocv_glob_modules) というエラーに遭遇します。</p><h2 id="IPP"><a href="#IPP" class="headerlink" title="IPP"></a>IPP</h2><p><strong>Intel Performance Primitives</strong>が無いと CMake Error at cmake/OpenCVFindIPP.cmake:243 (include): include could not find load file: みたいなエラーがでます。<br>エラーが発生したら、<strong>WITH_IPP</strong>のチェックボックスをオフにします。</p><h2 id="CUDA"><a href="#CUDA" class="headerlink" title="CUDA"></a>CUDA</h2><p>GPUを搭載していないなら、<strong>WITH_CUDA</strong>のチェックボックスをオフにします。<br>さもなくば、Visual Studioでのビルド時に大量のエラーに遭遇します。</p><h2 id="Generate"><a href="#Generate" class="headerlink" title="Generate"></a>Generate</h2><p>エラーが無くなったら、<strong>Configuring done</strong>と表示されるので、<strong>Generate</strong>を押下します。<br>すると、<strong>c:\src\oopencv-3.2.0\build</strong>に<strong>OpenCV.sln</strong>が作成されるので、Visual Studioで開きます。<br><strong>ソリューションエクスプローラー</strong>から<strong>CMakeTargets\INSTALL</strong>を右クリックしてスタートアッププロジェクトに指定します。<br>その後、ソリューションをビルドすれば、</p><ul><li>dll<ul><li><strong>c:\src\opencv-3.2.0\build\bin\Release</strong>または<strong>c:\src\opencv-3.2.0\build\bin\Debug</strong></li></ul></li><li>lib<ul><li><strong>c:\src\opencv-3.2.0\build\lib\Release</strong>または<strong>c:\src\opencv-3.2.0\build\lib\Debug</strong></li></ul></li><li>header<ul><li><strong>c:\src\opencv-3.2.0\build\install\include</strong></li></ul></li></ul><p>に生成されます。</p>]]></content>
      
      
      <categories>
          
          <category> その他 </category>
          
          <category> マルチメディア </category>
          
          <category> CMake </category>
          
          <category> OpenCV </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NET Core 2.0 PreviewとVisual Studio Codeでコンソールアプリをつくる Linux実行編</title>
      <link href="2017/04/28/2140/"/>
      <url>2017/04/28/2140/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><a href="https://taktak.jp/2017/04/27/2124">.NET Core 2.0 PreviewとVisual Studio Codeでコンソールアプリをつくる Linux準備編</a>にて、<strong>Portainer</strong>を経由し、<strong>Docker</strong>で、</p><ul><li>debianベースの.NET Core 2.0 Preview SDKのImageをPull</li><li>コンテナの作成</li></ul><p>を実行しました。<br>今回は.NET Coreでソースのビルドと実行を行います。</p><h1 id="コンソールに接続"><a href="#コンソールに接続" class="headerlink" title="コンソールに接続"></a>コンソールに接続</h1><p>Portainerで前回作成したコンテナの詳細画面に遷移します。<br><strong>Container Status</strong>に<strong>Console</strong>というリンクがあるのでクリックします。<br>そうすると、<strong>Container console</strong>という画面に遷移します。</p><p><a href="../../../../public/2017/04/screencapture-192-168-11-18-9000-1492893892110.png"><img src="../../../../public/2017/04/screencapture-192-168-11-18-9000-1492893892110-1024x647.png"></a> ここで、ペンギンアイコンのコンボボックスを開くと、**/bin/sh<strong>と</strong>/bin/bash<strong>を選べます。<br>今回は/bin/bashを選んで、</strong>Connect<strong>をクリックすると、黒い背景のコンソールが出現します。<br>ここで、</strong>ls -la<strong>と入力してEnterキーを叩きます。<br><a href="../../../../public/2017/04/screencapture-192-168-11-18-9000-1492894095245.png"><img src="../../../../public/2017/04/screencapture-192-168-11-18-9000-1492894095245-1024x669.png"></a><br> きちんとコンテナ内につながっているようです。Portainer経由でコンテナに接続もできます。凄い。<br>次に、</strong>cd home/Projects**と叩きます。<br>コンテナ作成時にマッピングしたディレクトリです。きちんと移動したことがわかります。</p><h1 id="dotnet"><a href="#dotnet" class="headerlink" title="dotnet"></a>dotnet</h1><p>コンテナに繋がっていることがわかったので、.NET Coreが利用できることを確認し、ビルドと実行を行っていきます。<br>まず、<strong>dotnet –info</strong>と入力します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dotnet --info .NET Command Line Tools (2.0.0-preview1-005825)  </span></span><br><span class="line">Product Information: Version: 2.0.0-preview1-005825 Commit SHA-1 <span class="built_in">hash</span>: b4a821109d  </span><br><span class="line">Runtime Environment: OS Name: debian OS Version: 8 OS Platform: Linux RID: debian.8-x64 Base Path: /usr/share/dotnet/sdk/2.0.0-preview1-005825/  </span><br><span class="line">Microsoft .NET Core Shared Framework Host  </span><br><span class="line">Version : 2.0.0-preview1-002028-00 Build : 6d0caecf154d3398b9bc0e637089b6af9e250479</span><br></pre></td></tr></table></figure><p>.NET Core 2.0 previewがインストールされている、debianであることが確認できました。<br>ここまでくれば、あとは前々回と同じく、**Hello, world!!**を表示するコンソールを作り、ビルド、実行します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet new console The template <span class="string">&quot;Console Application&quot;</span> was created successfully.  </span><br><span class="line">Processing post-creation actions... Running <span class="string">&#x27;dotnet restore&#x27;</span> on /home/Projects/Projects.csproj... Restore succeeded.  </span><br><span class="line">$ dotnet build Microsoft (R) Build Engine version 15.2.93.5465 Copyright (C) Microsoft Corporation. All rights reserved.  </span><br><span class="line">Projects -&gt; /home/Projects/bin/Debug/netcoreapp2.0/Projects.dll  </span><br><span class="line">Build succeeded. 0 Warning(s) 0 Error(s)  </span><br><span class="line">Time Elapsed 00:00:08.68 $ dotnet run Hello World!</span><br></pre></td></tr></table></figure><p><a href="../../../../public/2017/04/screencapture-192-168-11-18-9000-1492895087015.png"><img src="../../../../public/2017/04/screencapture-192-168-11-18-9000-1492895087015-1024x669.png"></a><br> 実行できました。<br>Docker環境でも.NET Coreを動かせることを証明できました。</p>]]></content>
      
      
      <categories>
          
          <category> 仮想化 </category>
          
          <category> Microsoft </category>
          
          <category> Docker </category>
          
          <category> .NET </category>
          
          <category> Portainer </category>
          
          <category> net </category>
          
          <category> .NET Core </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NET Core 2.0 PreviewとVisual Studio Codeでコンソールアプリをつくる Linux準備編</title>
      <link href="2017/04/27/2124/"/>
      <url>2017/04/27/2124/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><a href="https://taktak.jp/2017/04/23/2110">.NET Core 2.0 PreviewとVisual Studio Codeでコンソールアプリをつくる 準備&amp;作成編</a>にて、**.NET Core 2.0 Preview**を使って、コンソールアプリを</p><ul><li>Visual Studio Codeからデバッグ&amp;実行</li><li>コマンドプロンプトからビルド&amp;実行</li></ul><p>しました。<br>前回の目標に、Linuxでの実行がありましたので、宣言通り、Linuxで実行していきます。</p><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p>今回は、Dockerを使って、Linuxでの実行環境を構築します。<br><a href="https://taktak.jp/2017/04/22/2093">開発メモ その51 Red Hat Enterprise Linux 7.2にPortainerをインストールする</a>にて導入した<strong>Portainer</strong>によって、WebからDockerの管理ができるようになったので、それを使います。</p><h2 id="Docker-Imageの入手"><a href="#Docker-Imageの入手" class="headerlink" title="Docker Imageの入手"></a>Docker Imageの入手</h2><p>.NET Core 2.0の入ったDocker Imageを引っ張ってきます。<br>PortainerのImagesを開きます。<br><strong>Name</strong>と書かれたテキストボックスに<strong>microsoft/dotnet-nightly:2.0-sdk</strong>と入力して。<strong>Pull</strong>ボタンを押下します。<br>この表記は、<strong>DockerImage名:タグ名</strong>となっています。<br>今回は、<a href="https://hub.docker.com/r/microsoft/dotnet-nightly/">microsoft/dotnet-nightly</a>から、debianの.NET Core SDK 2.0 Previewを持ってくるために、microsoft/dotnet-nightly:2.0-sdkと入力しました。</p><p><a href="../../../../public/2017/04/screencapture-192-168-11-18-9000-1492887134732.png"><img src="../../../../public/2017/04/screencapture-192-168-11-18-9000-1492887134732-1024x659.png"></a> 回線環境にもよりますが、私の場合3-4分くらいでPullが完了し、下部の一覧に追加されているのがわかります。<br><a href="../../../../public/2017/04/screencapture-192-168-11-18-9000-1492887778591.png"><img src="../../../../public/2017/04/screencapture-192-168-11-18-9000-1492887778591-1024x659.png"></a> <strong>Id</strong>をクリックして詳細を見てみます。<br>詳しい情報を確認できます。<br><a href="../../../../public/2017/04/screencapture-192-168-11-18-9000-1492888249836.png"><img src="../../../../public/2017/04/screencapture-192-168-11-18-9000-1492888249836-1024x1001.png"></a><br> なお、<strong>Imaeg Tags</strong>の<strong>docker.io/microsoft/dotnet-nightly:2.0-sdk</strong>という文字列は次の作業で使用します。</p><h2 id="コンテナの作成"><a href="#コンテナの作成" class="headerlink" title="コンテナの作成"></a>コンテナの作成</h2><p>画面左のメニューから<strong>Containers</strong>をクリックし、<strong>Add container</strong>をクリックします。</p><p><a href="../../../../public/2017/04/screencapture-192-168-11-18-9000-1492889589053.png"><img src="../../../../public/2017/04/screencapture-192-168-11-18-9000-1492889589053-1024x955.png"></a><br> 今回の入力内容は下記になります。</p><p>入力項目名</p><p>説明</p><p>内容</p><p><strong>Name</strong></p><p>コンテナの名前なので自由に名前を付けることができます。</p><p>dotnet-nightly-2.0-sdk_debian</p><h3 id="Image-configuration"><a href="#Image-configuration" class="headerlink" title="Image configuration"></a>Image configuration</h3><p>入力項目名</p><p>説明</p><p>内容</p><p><strong>Image</strong></p><p>コンテナのベースとなるImage。先ほどPullしたImage Tagです。</p><p>docker.io/microsoft/dotnet-nightly:2.0-sdk</p><p><strong>Always pull images</strong></p><p>コンテナ作成前にImageを常にPullするかどうか</p><p>off</p><h3 id="Ports-configuration"><a href="#Ports-configuration" class="headerlink" title="Ports configuration"></a>Ports configuration</h3><p>入力項目名</p><p>説明</p><p>内容</p><p><strong>Publish all exposed ports</strong>ランダムな値のポートをDockerに公開させるか</p><p>off</p><p><strong>Port mapping</strong></p><p>map addtional portをクリックしてポートのマッピングを設定できます。</p><p>複数設定可能。</p><p>なし</p><h3 id="Access-control"><a href="#Access-control" class="headerlink" title="Access control"></a>Access control</h3><p>入力項目名</p><p>説明</p><p>内容</p><p><strong>Ownership</strong></p><p>privateにすると、Portainer上においてAdminとコンテナを作成した本人のみがコンテナを操作できます。</p><p>Public</p><h3 id="Advanced-container-settings"><a href="#Advanced-container-settings" class="headerlink" title="Advanced container settings"></a>Advanced container settings</h3><h4 id="Volume"><a href="#Volume" class="headerlink" title="Volume"></a>Volume</h4><p>入力項目名</p><p>説明</p><p>内容</p><p><strong>Volume mapping</strong></p><p>ホスト側のディレクトリとコンテナ側のディレクトリをマッピングします。</p><p><strong>Bind</strong>をクリックすることで<strong>host</strong>に入力できます。</p><p>container /home/Projects<br>host /home/takuya/Docker/Projects</p><p><strong>Console</strong></p><p>コンテナと対話するコンソールを指定します。</p><p>Interactive &amp; TTY</p><h4 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h4><p>入力項目名</p><p>説明</p><p>内容</p><p>Privileged mode</p><p>コンテナ以外のホスト上のプロセスと同じレベルでホストへのアクセスを許可するかどうか</p><p>on</p><p>注意 1. 今回のケースのような実行環境を作りたい場合、ConsoleでNoneを指定すると、即座にコンテナが停止します。<br>2. Privileged modeがonでないと、ホストにマッピングしたディレクトリに何も書き込めません 入力後、<strong>Actions</strong>の<strong>Start container</strong>をクリックします。<br>成功すれば、下記のようなメッセージが、画面右上に表示されます。<br><code>Container Started 65425079d33e4b10c91a627785d5035715a05e200b0c4e4ede591a3ed9e58e5d</code> `作成後、詳細を確認できます。</p><p><a href="../../../../public/2017/04/screencapture-192-168-11-18-9000-1492892214548.png"><img src="../../../../public/2017/04/screencapture-192-168-11-18-9000-1492892214548-805x1024.png"></a><br> 今回はここまで。`</p>]]></content>
      
      
      <categories>
          
          <category> 仮想化 </category>
          
          <category> Microsoft </category>
          
          <category> Docker </category>
          
          <category> .NET </category>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> Red Hat Enterprise Linux </category>
          
          <category> Portainer </category>
          
          <category> net </category>
          
          <category> .NET Core </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その54 BitNami Redmine Statckでthinが動かない原因を探る</title>
      <link href="2017/04/27/2178/"/>
      <url>2017/04/27/2178/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>会社での話ですが、OS起動後、<strong>Thin_Redmine</strong>と<strong>Thin_Redmine2</strong>が停止していることがある。<br>何故だかは不明ですが、BitNamiインストール配下のruby関係のファイルが壊れているために、ruby関係であるthinが起動しない模様。<br>ただ、膨大な数のruby関係のファイルから壊れているファイルだけを探すのは至難の業。<br>そのための問題を見つける手段。</p><h1 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h1><p>スタートメニューから<strong>Bitnami Redmine Stack を使用する</strong>を起動し、コマンドプロンプトを立ち上げます。<br>それで、どこでもいいので、<strong>bundle</strong>を実行できるフォルダに移動します。<br>多分、htdocsが最短。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> apps\\redmine\\htdocs $ bundle exec rake tmp:cache:clear</span><br></pre></td></tr></table></figure><p>と実行します。<br>この時、<strong>rbファイル</strong>や<strong>gemspecファイル</strong>壊れていると、rubyが動かないので、</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\\<span class="title">BitNami</span>\\<span class="title">redmine</span>-3.2.2-0\\<span class="title">ruby</span>\\<span class="title">lib</span>\\<span class="title">ruby</span>\\<span class="title">gems</span>\\2.1.0\\<span class="title">specifications</span>\\<span class="title">default</span>\\<span class="title">json</span>-1.8.1.<span class="title">gemspec</span>:2: <span class="title">invalid</span> <span class="title">multibyte</span> <span class="title">char</span> (<span class="title">UTF</span>-8)</span></span><br></pre></td></tr></table></figure><p>のように該当するファイルがエラーを吐きますので、正常なファイルと置き換えます。</p><h1 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h1><p>Windows版のthinは<strong>-log</strong>オプションが使えません。<br><strong>apps\redmine\htdocs\vendor\bundle\ruby\2.1.0\gems\thin-1.6.1-x86-mingw32\lib\thin\runner.rb</strong>内の下記の記述を見てください。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unless</span> Thin.win? <span class="comment"># Daemonizing not supported on Windows opts.separator &quot;&quot; opts.separator &quot;Daemon options:&quot;  </span></span><br><span class="line">opts.on(<span class="string">&quot;-d&quot;</span>, <span class="string">&quot;--daemonize&quot;</span>, <span class="string">&quot;Run daemonized in the background&quot;</span>) &#123; @options\[<span class="symbol">:daemonize</span>\] = <span class="literal">true</span> &#125; opts.on(<span class="string">&quot;-l&quot;</span>, <span class="string">&quot;--log FILE&quot;</span>, <span class="string">&quot;File to redirect output &quot;</span> +  </span><br><span class="line"><span class="string">&quot;(default: <span class="subst">#&#123;@options\[<span class="symbol">:log</span>\]&#125;</span>)&quot;</span>) &#123; <span class="params">|file|</span> @options\[<span class="symbol">:log</span>\] = file &#125; opts.on(<span class="string">&quot;-P&quot;</span>, <span class="string">&quot;--pid FILE&quot;</span>, <span class="string">&quot;File to store PID &quot;</span> +  </span><br><span class="line"><span class="string">&quot;(default: <span class="subst">#&#123;@options\[<span class="symbol">:pid</span>\]&#125;</span>)&quot;</span>) &#123; <span class="params">|file|</span> @options\[<span class="symbol">:pid</span>\] = file &#125; opts.on(<span class="string">&quot;-u&quot;</span>, <span class="string">&quot;--user NAME&quot;</span>, <span class="string">&quot;User to run daemon as (use with -g)&quot;</span>) &#123; <span class="params">|user|</span> @options\[<span class="symbol">:user</span>\] = user &#125; opts.on(<span class="string">&quot;-g&quot;</span>, <span class="string">&quot;--group NAME&quot;</span>, <span class="string">&quot;Group to run daemon as (use with -u)&quot;</span>) &#123; <span class="params">|group|</span> @options\[<span class="symbol">:group</span>\] = group &#125; opts.on( <span class="string">&quot;--tag NAME&quot;</span>, <span class="string">&quot;Additional text to display in process listing&quot;</span>) &#123; <span class="params">|tag|</span> @options\[<span class="symbol">:tag</span>\] = tag &#125;  </span><br><span class="line">opts.separator <span class="string">&quot;&quot;</span> opts.separator <span class="string">&quot;Cluster options:&quot;</span>  </span><br><span class="line">opts.on(<span class="string">&quot;-s&quot;</span>, <span class="string">&quot;--servers NUM&quot;</span>, <span class="string">&quot;Number of servers to start&quot;</span>) &#123; <span class="params">|num|</span> @options\[<span class="symbol">:servers</span>\] = num.to\_i &#125; opts.on(<span class="string">&quot;-o&quot;</span>, <span class="string">&quot;--only NUM&quot;</span>, <span class="string">&quot;Send command to only one server of the cluster&quot;</span>) &#123; <span class="params">|only|</span> @options\[<span class="symbol">:only</span>\] = only.to\_i &#125; opts.on(<span class="string">&quot;-C&quot;</span>, <span class="string">&quot;--config FILE&quot;</span>, <span class="string">&quot;Load options from config file&quot;</span>) &#123; <span class="params">|file|</span> @options\[<span class="symbol">:config</span>\] = file &#125; opts.on( <span class="string">&quot;--all \[DIR\]&quot;</span>, <span class="string">&quot;Send command to each config files in DIR&quot;</span>) &#123; <span class="params">|dir|</span> @options\[<span class="symbol">:all</span>\] = dir &#125; <span class="keyword">if</span> Thin.linux? opts.on(<span class="string">&quot;-O&quot;</span>, <span class="string">&quot;--onebyone&quot;</span>, <span class="string">&quot;Restart the cluster one by one (only works with restart command)&quot;</span>) &#123; @options\[<span class="symbol">:onebyone</span>\] = <span class="literal">true</span> &#125; opts.on(<span class="string">&quot;-w&quot;</span>, <span class="string">&quot;--wait NUM&quot;</span>, <span class="string">&quot;Maximum wait time for server to be started in seconds (use with -O)&quot;</span>) &#123; <span class="params">|time|</span> @options\[<span class="symbol">:wait</span>\] = time.to\_i &#125; <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p> Windowsでは、サポートしていない旨があります。<br>ここを改造しても無駄です。<br>実際にログを吐く処理と思しき、<strong>apps\redmine\htdocs\vendor\bundle\ruby\2.1.0\gems\thin-1.6.1-x86-mingw32\lib\thin\daemonizing.rb</strong>に、</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">daemonize</span> <span class="title">raise</span> <span class="title">PlatformNotSupported</span>, &#x27;<span class="title">Daemonizing</span> <span class="title">is</span> <span class="title">not</span> <span class="title">supported</span> <span class="title">on</span> <span class="title">Windows</span>&#x27; <span class="title">if</span> <span class="title">Thin</span>.<span class="title">win?</span> <span class="title">raise</span> <span class="title">ArgumentError</span>, &#x27;<span class="title">You</span> <span class="title">must</span> <span class="title">specify</span> <span class="title">a</span> <span class="title">pid</span>\<span class="title">_file</span> <span class="title">to</span> <span class="title">daemonize</span>&#x27; <span class="title">unless</span> @<span class="title">pid</span>\<span class="title">_file</span></span></span><br></pre></td></tr></table></figure><p>とあるので、無意味でしょう。<br>なので、ログではなく、<strong>--debug</strong>オプションを使います。<br>で、一度サービスを停止し、<strong>Bitnami Redmine Stack を使用する</strong>を立ち上げます。<br>そして、</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ &quot;&lt;InstallDir&gt;\\ruby\\bin\\ruby.exe&quot; &quot;&lt;InstallDir&gt;/apps/redmine\\htdocs\\bin\\thin&quot; <span class="built_in">start</span> -p <span class="number">3001</span> -e production --debug -c &quot;&lt;InstallDir&gt;\\apps\\redmine\\htdocs&quot; -a <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span> --prefix /redmine <span class="number">2</span>&gt; F:\\thin\_debug.log</span><br></pre></td></tr></table></figure><p>と実行し、しばらくしてから、Ctrl+Cで停止します。**2&gt;**が重要です。<br>するといっぱいログがファイルに吐き出されるはずですので、原因がつかめるかもしれません。</p>]]></content>
      
      
      <categories>
          
          <category> プロジェクト管理 </category>
          
          <category> Redmine </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ディープラーニング Caffe その3 環境構築 with GPU</title>
      <link href="2017/04/23/2148/"/>
      <url>2017/04/23/2148/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>1年以上前、<a href="https://taktak.jp/2016/02/20/808">ディープラーニング Caffe その1 環境構築</a>という記事でにて、14.04でCPUを使ったCaffe環境を構築しました。<br>最近、会社でUbuntu 14.04に<strong>GeForce GTX 1080 Ti</strong>を2枚差すという、金に物を言わせたマシンが届き、そのテストをしています。<br>が、これが動かない。<br>具体的には、ドライバを入れるとGPUは認識し、Caffe、GPUのテストなどはクリアするが、ログイン画面が真っ黒になってしまう、という現象に陥る。<br>恐らく、オンボードのグラフィックボードを無効化したのが原因だと思われる。オンボードのグラッフィクドライバは<strong>nouveau</strong>を使っている? ネットのBlogだと、オングラフィックのIntelのグラフィックボードを無効にしろ、みたいなこと書いてあります。<br>でも、会社のマシンだと、1080 Tiには、出力端子がなかったんだよね… だから、画面を表示するには、オンボードのグラフィックを有効にしておかないといけない気がするんだけど、仕事のときは気づかなかった。<br>で、とりあえず、自宅の環境で、<strong>GeForece GTX 750 Ti</strong>を有効化した状態で、各所で発生する問題が起きるかを検証し、手順をメモします。<br>目標は</p><ul><li>ドライバのインストール</li><li>Caffeのテストを全部Pass</li><li>Nvidiaのデバイステストをパス</li></ul><p>を達成することです。<br>検証環境は</p><ul><li>Dell Vostro 3800</li><li>Ubuntu 14.04 LTSを新規インストールした直後</li><li>Intel Core i3-4130 3.40Ghz</li><li>メモリ16GB</li><li>GeForece GTX 750 Ti</li></ul><p>になります。<br>なお、モニタは、グラフィックボードのHDMI端子に接続しています。<br>また、記事中のコマンドでは、sudoは省略するために、<strong>sudo -s</strong>でrootになっています。</p><h1 id="ソフトウェアの更新"><a href="#ソフトウェアの更新" class="headerlink" title="ソフトウェアの更新"></a>ソフトウェアの更新</h1><p>OSインストール直後だと、ソフトウェアの更新通知が来ますので全て更新します。来ていないなら、「ソフトウェアの更新」を明示的に実行します。<br>ただし、Ubuntuそのものは最新版に更新しないでください。<br>なお、グラフィックドライバを導入していない状態で、ボードの端子で出力していると、画面の表示文字列が一部だけ欠如していたり、突然ロック画面に戻ったりと不安定になっています。</p><p><a href="../../../../public/2017/04/d5f8768433ecc3a9c2ba8c3a4bf52561.jpeg"><img src="../../../../public/2017/04/d5f8768433ecc3a9c2ba8c3a4bf52561-1024x768.jpeg"></a></p><h1 id="SSHサーバー導入"><a href="#SSHサーバー導入" class="headerlink" title="SSHサーバー導入"></a>SSHサーバー導入</h1><p>マシンの前にいるのはつらいので。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install openssh-server $ vi /etc/ssh/sshd\_config</span><br></pre></td></tr></table></figure><p>下記のように更新</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ #PermitRootLogin without-password - PermitRootLogin without-password + PermitRootLogin no </span></span><br></pre></td></tr></table></figure><h1 id="nouveau無効化"><a href="#nouveau無効化" class="headerlink" title="nouveau無効化"></a>nouveau無効化</h1><p>ひょっとすると、オンボードしかない場合は、ここをオフにすると、何も表示されない可能性があるので、このセクションは無視しても可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/modprobe.d/blacklist-nouveau.conf</span><br></pre></td></tr></table></figure><p>下記のように更新</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ blacklist nouveau + blacklist lbm-nouveau + options nouveau modeset=0 + alias nouveau off + alias lbm-nouveau off </span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/modprobe.d/nouveau-kms.conf</span><br></pre></td></tr></table></figure><p>下記のように更新</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ options nouveau modeset=0</span></span><br></pre></td></tr></table></figure><p>更新後、設定を反映し、再起動。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ update-initramfs -u $ reboot </span><br></pre></td></tr></table></figure><h2 id="接続しているボードの確認"><a href="#接続しているボードの確認" class="headerlink" title="接続しているボードの確認"></a>接続しているボードの確認</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1080Ti等は、内部のデータベースに存在しないので、まずは更新 $ update-pciids Downloaded daily snapshot dated 2017-04-23 03:15:02 $ lspci | grep VGA 01:00.0 VGA compatible controller: NVIDIA Corporation GM107 \[GeForce GTX 750 Ti\] (rev a2) </span></span><br></pre></td></tr></table></figure><h2 id="ドライバのインストール"><a href="#ドライバのインストール" class="headerlink" title="ドライバのインストール"></a>ドライバのインストール</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-add-repository ppa:xorg-edgers/ppa $ apt-get update $ apt-get upgrade <span class="comment"># 検索して見つかる最新をインストールする $ apt-cache search &#x27;nvidia-\[0-9\]+$&#x27; $ apt-get install nvidia-375 $ reboot</span></span><br></pre></td></tr></table></figure><p>再起動後、ログインループなら、Ctrl+Alt+F1でCUIでログインし、下記のコマンドを実行。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ユーザフォルダに存在する以下を削除することで、ループを回避できる可能性がある # 自分の環境はこれでログイン成功 $ rm .Xauthority .ICEauthority $ reboot </span></span><br></pre></td></tr></table></figure><h2 id="ドライバのバージョン確認"><a href="#ドライバのバージョン確認" class="headerlink" title="ドライバのバージョン確認"></a>ドライバのバージョン確認</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat /proc/driver/nvidia/version NVRM version: NVIDIA UNIX x86\_64 Kernel Module 375.39 Tue Jan 31 20:47:00 PST 2017 GCC version: gcc version 4.8.4 (Ubuntu 4.8.4-2ubuntu1~14.04.3) </span><br></pre></td></tr></table></figure><h2 id="CUDA-Toolkitのインストール"><a href="#CUDA-Toolkitのインストール" class="headerlink" title="CUDA Toolkitのインストール"></a>CUDA Toolkitのインストール</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ubuntu 14.04 x86\_64 network debを入手 $ wget http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1404/x86\_64/cuda-repo-ubuntu1404\_8.0.61-1\_amd64.deb $ apt-get install aptitude -y $ dpkg -i cuda-repo-ubuntu1404\_8.0.61-1\_amd64.deb $ aptitude update $ aptitude install -y cuda $ reboot </span></span><br></pre></td></tr></table></figure><h1 id="検証"><a href="#検証" class="headerlink" title="検証"></a>検証</h1><h2 id="Caffeの検証"><a href="#Caffeの検証" class="headerlink" title="Caffeの検証"></a>Caffeの検証</h2><p>Caffeのソースをダウンロードしてきて、ビルド及びtestを実行します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://github.com/BVLC/caffe/archive/1.0.zip $ unzip 1.0.zip $ <span class="built_in">cd</span> caffe-1.0 $ cp Makefile.config.example Makefile.config $ vi Makefile.config  </span><br><span class="line">\- CUDA\_DIR := /usr/<span class="built_in">local</span>/cuda + CUDA\_DIR := /usr/<span class="built_in">local</span>/cuda-8.0  </span><br><span class="line">$ apt-get install libatlas-base-dev libboost-all-dev libgflags-dev libgoogle-glog-dev libhdf5-serial-dev libleveldb-dev liblmdb-dev libopencv-dev libprotobuf-dev protobuf-compiler libsnappy-dev -y $ make $ make <span class="built_in">test</span> $ make runtest ...  </span><br><span class="line">\[----------\] Global <span class="built_in">test</span> environment tear-down \[==========\] 2041 tests from 267 <span class="built_in">test</span> cases ran. (421631 ms total) \[ PASSED \] 2041 tests. </span><br></pre></td></tr></table></figure><h2 id="GPUの検証1"><a href="#GPUの検証1" class="headerlink" title="GPUの検証1"></a>GPUの検証1</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/cuda-8.0/samples <span class="comment"># cudnn.hが存在しないというエラーになって途中で止まりますがOK $ make # 停止したら実行 $ ./bin/x86\_64/linux/release/deviceQuery ./bin/x86\_64/linux/release/deviceQuery Starting...  </span></span><br><span class="line">CUDA Device Query (Runtime API) version (CUDART static linking)  </span><br><span class="line">Detected 1 CUDA Capable device(s)  </span><br><span class="line">Device 0: <span class="string">&quot;GeForce GTX 750 Ti&quot;</span> CUDA Driver Version / Runtime Version 8.0 / 8.0 CUDA Capability Major/Minor version number: 5.0 Total amount of global memory: 2000 MBytes (2097414144 bytes) ( 5) Multiprocessors, (128) CUDA Cores/MP: 640 CUDA Cores GPU Max Clock rate: 1084 MHz (1.08 GHz) Memory Clock rate: 2700 Mhz Memory Bus Width: 128-bit L2 Cache Size: 2097152 bytes Maximum Texture Dimension Size (x,y,z) 1D=(65536), 2D=(65536, 65536), 3D=(4096, 4096, 4096) Maximum Layered 1D Texture Size, (num) layers 1D=(16384), 2048 layers Maximum Layered 2D Texture Size, (num) layers 2D=(16384, 16384), 2048 layers Total amount of constant memory: 65536 bytes Total amount of shared memory per block: 49152 bytes Total number of registers available per block: 65536 Warp size: 32 Maximum number of threads per multiprocessor: 2048 Maximum number of threads per block: 1024 Max dimension size of a thread block (x,y,z): (1024, 1024, 64) Max dimension size of a grid size (x,y,z): (2147483647, 65535, 65535) Maximum memory pitch: 2147483647 bytes Texture alignment: 512 bytes Concurrent copy and kernel execution: Yes with 1 copy engine(s) Run time <span class="built_in">limit</span> on kernels: Yes Integrated GPU sharing Host Memory: No Support host page-locked memory mapping: Yes Alignment requirement <span class="keyword">for</span> Surfaces: Yes Device has ECC support: Disabled Device supports Unified Addressing (UVA): Yes Device PCI Domain ID / Bus ID / location ID: 0 / 1 / 0 Compute Mode: &lt; Default (multiple host threads can use ::cudaSetDevice() with device simultaneously) &gt;  </span><br><span class="line">deviceQuery, CUDA Driver = CUDART, CUDA Driver Version = 8.0, CUDA Runtime Version = 8.0, NumDevs = 1, Device0 = GeForce GTX 750 Ti Result = PASS </span><br></pre></td></tr></table></figure><h2 id="GPUの検証2"><a href="#GPUの検証2" class="headerlink" title="GPUの検証2"></a>GPUの検証2</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ nvidia-smi Sun Apr 23 22:14:27 2017 +-----------------------------------------------------------------------------+ | NVIDIA-SMI 375.51 Driver Version: 375.51 | |-------------------------------+----------------------+----------------------+ | GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. | |===============================+======================+======================| | 0 GeForce GTX 750 Ti On | 0000:01:00.0 On | N/A | | 40% 31C P8 1W / 38W | 140MiB / 2000MiB | 0% Default | +-------------------------------+----------------------+----------------------+  </span><br><span class="line">+-----------------------------------------------------------------------------+ | Processes: GPU Memory | | GPU PID Type Process name Usage | |=============================================================================| | 0 1361 G /usr/bin/X 99MiB | | 0 2075 G compiz 39MiB | +-----------------------------------------------------------------------------+ </span><br></pre></td></tr></table></figure><h2 id="NVIDIA-Cuda-compiler"><a href="#NVIDIA-Cuda-compiler" class="headerlink" title="NVIDIA Cuda compiler"></a>NVIDIA Cuda compiler</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/<span class="built_in">local</span>/cuda-8.0/bin/nvcc -V nvcc: NVIDIA (R) Cuda compiler driver Copyright (c) 2005-2016 NVIDIA Corporation Built on Tue\_Jan\_10\_13:22:03\_CST\_2017 Cuda compilation tools, release 8.0, V8.0.61</span><br></pre></td></tr></table></figure><p>無事に動きました。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> %e3%83%87%e3%82%a3%e3%83%bc%e3%83%97%e3%83%a9%e3%83%bc%e3%83%8b%e3%83%b3%e3%82%b0 </category>
          
          <category> Caffe </category>
          
          <category> ディープラーニング </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NET Core 2.0 PreviewとVisual Studio Codeでコンソールアプリをつくる 準備&amp;作成編</title>
      <link href="2017/04/23/2110/"/>
      <url>2017/04/23/2110/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>2017/04/23現在、**.NET Core 2.0**の開発が進められます。<br>そんな.NET Core 2.0のPreviewを使ってコンソールアプリを作ります。<br>目標は</p><ul><li>Visual Studio Codeを使えるようになる</li><li>.NET Coreを使えるようになる</li><li>Linuxでビルドして実行</li></ul><p>になります。<br>特にLinuxでの実行が重要になります。<br>開発環境を広げないと、飯の種が無くなってしまいますので。<br>今回は準備と作成を。</p><h1 id="NET-Core-2-0-Preview"><a href="#NET-Core-2-0-Preview" class="headerlink" title=".NET Core 2.0 Preview"></a>.NET Core 2.0 Preview</h1><p>まずは.NET Coreを入手します。<br>入手先は下記。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/dotnet/cli" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/9141961?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">dotnet/cli</div><div class="hbc-url">https://github.com/dotnet/cli</div><div class="hbc-description">The .NET Core command-line (CLI) tools, used for building .NET Core apps and libraries through your development flow (compiling, NuGet packa…</div></div></div></div></a></div></div><p>上のページで、<strong>Installers and Binaries</strong>ってセクションから環境に応じたものを入手します。<br>今回は、zipで入手します。Previewなんて先行版をインストーラでインストールしたくありません(ｷﾘｯ) これは適当な場所に置いておきます。今回は<strong>D:\Works\Lib\Microsoft.NET Core CLI\2.0.0-preview2-005840\bin</strong>に展開します。<br>パスを通すかはお好みで。</p><h1 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h1><h2 id="入手"><a href="#入手" class="headerlink" title="入手"></a>入手</h2><p>ダウンロード先は下記です。以上。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://code.visualstudio.com/download" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=code.visualstudio.com"></img><div class="hbc-site-name">code.visualstudio.com</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://code.visualstudio.com/opengraphimg/opengraph-home.png"></img></div><div class="hbc-text"><div class="hbc-title">Download Visual Studio Code - Mac, Linux, Windows</div><div class="hbc-url">https://code.visualstudio.com/download</div><div class="hbc-description">Visual Studio Code is free and available on your favorite platform - Linux, macOS, and Windows.  Download Visual Studio Code to experience a…</div></div></div></div></a></div></div><h2 id="C-Extension"><a href="#C-Extension" class="headerlink" title="C# Extension"></a>C# Extension</h2><p>Visual Studio Code起動後、拡張機能を導入します。<br>C#はMicrosoftにおける第一級のプログラミング言語ですが、Visual Studio Codeは、クロスプラットフォームで動作するので、そのあたりの特別扱いはできなかった、あるいはIDEではなくエディタという位置づけなので、言語対応は全て拡張機能で追加しましょう、なスタンスのご様子。面倒。</p><p><a href="../../../../public/2017/04/052c09a990c125f192abcb54c1fb45fd.png"><img src="../../../../public/2017/04/052c09a990c125f192abcb54c1fb45fd-1024x768.png"></a></p><h1 id="コーディング"><a href="#コーディング" class="headerlink" title="コーディング"></a>コーディング</h1><p>まず、プロジェクトフォルダを作成します。<br>Visual Studio Codeでは、プロジェクトという概念がありません。エディタだからですかね。<br>あるのは、開いたフォルダが起点となるという概念だけです。<br>今回は<strong>D:\Works\temp\corecli</strong>をプロジェクトフォルダにします。<br>プロジェクトの作成は、先ほど入手した.NET Coreを使います。<br>まず、コマンドラインでプロジェクトフォルダに移動します。<br>続いて、.NET Coreに含まれる<strong>dotnet.exe</strong>を–helpをつけて呼び出します。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\\<span class="title">Works</span>\\<span class="title">temp</span>\\<span class="title">corecli</span>&gt;&quot;<span class="title">D</span>:\\<span class="title">Works</span>\\<span class="title">Lib</span>\\<span class="title">Microsoft</span>\\.<span class="title">NET</span> <span class="title">Core</span> <span class="title">CLI</span>\\2.0.0-<span class="title">preview2</span>-005840\\<span class="title">bin</span>\\<span class="title">dotnet.exe</span>&quot; --<span class="title">help</span> .<span class="title">NET</span> <span class="title">Command</span> <span class="title">Line</span> <span class="title">Tools</span> (2.0.0-<span class="title">preview2</span>-005840) <span class="title">Usage</span>: <span class="title">dotnet</span> \[<span class="title">host</span>-<span class="title">options</span>\] \[<span class="title">command</span>\] \[<span class="title">arguments</span>\] \[<span class="title">common</span>-<span class="title">options</span>\]  </span></span><br><span class="line"><span class="function"><span class="title">Arguments</span>: \[<span class="title">command</span>\] <span class="title">The</span> <span class="title">command</span> <span class="title">to</span> <span class="title">execute</span> \[<span class="title">arguments</span>\] <span class="title">Arguments</span> <span class="title">to</span> <span class="title">pass</span> <span class="title">to</span> <span class="title">the</span> <span class="title">command</span> \[<span class="title">host</span>-<span class="title">options</span>\] <span class="title">Options</span> <span class="title">specific</span> <span class="title">to</span> <span class="title">dotnet</span> (<span class="title">host</span>) \[<span class="title">common</span>-<span class="title">options</span>\] <span class="title">Options</span> <span class="title">common</span> <span class="title">to</span> <span class="title">all</span> <span class="title">commands</span>  </span></span><br><span class="line"><span class="function"><span class="title">Common</span> <span class="title">options</span>: -<span class="title">v</span>|--<span class="title">verbose</span> <span class="title">Enable</span> <span class="title">verbose</span> <span class="title">output</span> -<span class="title">h</span>|--<span class="title">help</span> <span class="title">Show</span> <span class="title">help</span>  </span></span><br><span class="line"><span class="function"><span class="title">Host</span> <span class="title">options</span> (<span class="title">passed</span> <span class="title">before</span> <span class="title">the</span> <span class="title">command</span>): -<span class="title">d</span>|--<span class="title">diagnostics</span> <span class="title">Enable</span> <span class="title">diagnostic</span> <span class="title">output</span> --<span class="title">version</span> <span class="title">Display</span> .<span class="title">NET</span> <span class="title">CLI</span> <span class="title">Version</span> <span class="title">Number</span> --<span class="title">info</span> <span class="title">Display</span> .<span class="title">NET</span> <span class="title">CLI</span> <span class="title">Info</span>  </span></span><br><span class="line"><span class="function"><span class="title">Commands</span>: <span class="title">new</span> <span class="title">Initialize</span> .<span class="title">NET</span> <span class="title">projects</span>. <span class="title">restore</span> <span class="title">Restore</span> <span class="title">dependencies</span> <span class="title">specified</span> <span class="title">in</span> <span class="title">the</span> .<span class="title">NET</span> <span class="title">project</span>. <span class="title">build</span> <span class="title">Builds</span> <span class="title">a</span> .<span class="title">NET</span> <span class="title">project</span>. <span class="title">publish</span> <span class="title">Publishes</span> <span class="title">a</span> .<span class="title">NET</span> <span class="title">project</span> <span class="title">for</span> <span class="title">deployment</span> (<span class="title">including</span> <span class="title">the</span> <span class="title">runtime</span>). <span class="title">run</span> <span class="title">Compiles</span> <span class="title">and</span> <span class="title">immediately</span> <span class="title">executes</span> <span class="title">a</span> .<span class="title">NET</span> <span class="title">project</span>. <span class="title">test</span> <span class="title">Runs</span> <span class="title">unit</span> <span class="title">tests</span> <span class="title">using</span> <span class="title">the</span> <span class="title">test</span> <span class="title">runner</span> <span class="title">specified</span> <span class="title">in</span> <span class="title">the</span> <span class="title">project</span>. <span class="title">pack</span> <span class="title">Creates</span> <span class="title">a</span> <span class="title">NuGet</span> <span class="title">package</span>. <span class="title">migrate</span> <span class="title">Migrates</span> <span class="title">a</span> <span class="title">project.json</span> <span class="title">based</span> <span class="title">project</span> <span class="title">to</span> <span class="title">a</span> <span class="title">msbuild</span> <span class="title">based</span> <span class="title">project</span>. <span class="title">clean</span> <span class="title">Clean</span> <span class="title">build</span> <span class="title">output</span>(<span class="title">s</span>). <span class="title">sln</span> <span class="title">Modify</span> <span class="title">solution</span> (<span class="title">SLN</span>) <span class="title">files</span>.  </span></span><br><span class="line"><span class="function"><span class="title">Project</span> <span class="title">modification</span> <span class="title">commands</span>: <span class="title">add</span> <span class="title">Add</span> <span class="title">items</span> <span class="title">to</span> <span class="title">the</span> <span class="title">project</span>. <span class="title">remove</span> <span class="title">Remove</span> <span class="title">items</span> <span class="title">from</span> <span class="title">the</span> <span class="title">project</span>. <span class="title">list</span> <span class="title">List</span> <span class="title">items</span> <span class="title">in</span> <span class="title">the</span> <span class="title">project</span>.  </span></span><br><span class="line"><span class="function"><span class="title">Advanced</span> <span class="title">Commands</span>: <span class="title">nuget</span> <span class="title">Provides</span> <span class="title">additional</span> <span class="title">NuGet</span> <span class="title">commands</span>. <span class="title">msbuild</span> <span class="title">Runs</span> <span class="title">Microsoft</span> <span class="title">Build</span> <span class="title">Engine</span> (<span class="title">MSBuild</span>). <span class="title">vstest</span> <span class="title">Runs</span> <span class="title">Microsoft</span> <span class="title">Test</span> <span class="title">Execution</span> <span class="title">Command</span> <span class="title">Line</span> <span class="title">Tool</span>.</span></span><br></pre></td></tr></table></figure><p>色々ありますが、<strong>new</strong>でプロジェクトを初期化することがわかります。<br>ではnewをつけて呼び出します。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\\<span class="title">Works</span>\\<span class="title">temp</span>\\<span class="title">corecli</span>&amp;<span class="title">gt</span>;&quot;<span class="title">D</span>:\\<span class="title">Works</span>\\<span class="title">Lib</span>\\<span class="title">Microsoft</span>\\.<span class="title">NET</span> <span class="title">Core</span> <span class="title">CLI</span>\\2.0.0-<span class="title">preview2</span>-005840\\<span class="title">bin</span>\\<span class="title">dotnet.exe</span>&quot; <span class="title">new</span> <span class="title">Template</span> <span class="title">Instantiation</span> <span class="title">Commands</span> <span class="title">for</span> .<span class="title">NET</span> <span class="title">Core</span> <span class="title">CLI</span>  </span></span><br><span class="line"><span class="function"><span class="title">Usage</span>: <span class="title">new</span> \[<span class="title">options</span>\]  </span></span><br><span class="line"><span class="function"><span class="title">Options</span>: -<span class="title">h</span>, --<span class="title">help</span> <span class="title">Displays</span> <span class="title">help</span> <span class="title">for</span> <span class="title">this</span> <span class="title">command</span>. -<span class="title">l</span>, --<span class="title">list</span> <span class="title">Lists</span> <span class="title">templates</span> <span class="title">containing</span> <span class="title">the</span> <span class="title">specified</span> <span class="title">name</span>. <span class="title">If</span> <span class="title">no</span> <span class="title">name</span> <span class="title">is</span> <span class="title">specified</span>, <span class="title">lists</span> <span class="title">all</span> <span class="title">templates</span>. -<span class="title">n</span>, --<span class="title">name</span> <span class="title">The</span> <span class="title">name</span> <span class="title">for</span> <span class="title">the</span> <span class="title">output</span> <span class="title">being</span> <span class="title">created</span>. <span class="title">If</span> <span class="title">no</span> <span class="title">name</span> <span class="title">is</span> <span class="title">specified</span>, <span class="title">the</span> <span class="title">name</span> <span class="title">of</span> <span class="title">the</span> <span class="title">current</span> <span class="title">directory</span> <span class="title">is</span> <span class="title">used</span>. -<span class="title">o</span>, --<span class="title">output</span> <span class="title">Location</span> <span class="title">to</span> <span class="title">place</span> <span class="title">the</span> <span class="title">generated</span> <span class="title">output</span>. -<span class="title">i</span>, --<span class="title">install</span> <span class="title">Installs</span> <span class="title">a</span> <span class="title">source</span> <span class="title">or</span> <span class="title">a</span> <span class="title">template</span> <span class="title">pack</span>. -<span class="title">u</span>, --<span class="title">uninstall</span> <span class="title">Uninstalls</span> <span class="title">a</span> <span class="title">source</span> <span class="title">or</span> <span class="title">a</span> <span class="title">template</span> <span class="title">pack</span>. --<span class="title">type</span> <span class="title">Shows</span> <span class="title">a</span> <span class="title">subset</span> <span class="title">of</span> <span class="title">the</span> <span class="title">available</span> <span class="title">templates</span>. <span class="title">Valid</span> <span class="title">values</span> <span class="title">are</span> &quot;<span class="title">project</span>&quot;, &quot;<span class="title">item</span>&quot; <span class="title">or</span> &quot;<span class="title">other</span>&quot;. --<span class="title">force</span> <span class="title">Forces</span> <span class="title">content</span> <span class="title">to</span> <span class="title">be</span> <span class="title">generated</span> <span class="title">even</span> <span class="title">if</span> <span class="title">it</span> <span class="title">would</span> <span class="title">change</span> <span class="title">existing</span> <span class="title">files</span>. -<span class="title">lang</span>, --<span class="title">language</span> <span class="title">Specifies</span> <span class="title">the</span> <span class="title">language</span> <span class="title">of</span> <span class="title">the</span> <span class="title">template</span> <span class="title">to</span> <span class="title">create</span>.  </span></span><br><span class="line"><span class="function"><span class="title">Templates</span> <span class="title">Short</span> <span class="title">Name</span> <span class="title">Language</span> <span class="title">Tags</span> ----------------------------------------------------------------------- <span class="title">Console</span> <span class="title">Application</span> <span class="title">console</span> \[<span class="title">C</span>#\], <span class="title">F</span># <span class="title">Common</span>/<span class="title">Console</span> <span class="title">Class</span> <span class="title">library</span> <span class="title">classlib</span> \[<span class="title">C</span>#\], <span class="title">F</span># <span class="title">Common</span>/<span class="title">Library</span> <span class="title">Unit</span> <span class="title">Test</span> <span class="title">Project</span> <span class="title">mstest</span> \[<span class="title">C</span>#\], <span class="title">F</span># <span class="title">Test</span>/<span class="title">MSTest</span> <span class="title">xUnit</span> <span class="title">Test</span> <span class="title">Project</span> <span class="title">xunit</span> \[<span class="title">C</span>#\], <span class="title">F</span># <span class="title">Test</span>/<span class="title">xUnit</span> <span class="title">ASP.NET</span> <span class="title">Core</span> <span class="title">Empty</span> <span class="title">web</span> \[<span class="title">C</span>#\] <span class="title">Web</span>/<span class="title">Empty</span> <span class="title">ASP.NET</span> <span class="title">Core</span> <span class="title">Web</span> <span class="title">App</span> <span class="title">mvc</span> \[<span class="title">C</span>#\], <span class="title">F</span># <span class="title">Web</span>/<span class="title">MVC</span> <span class="title">ASP.NET</span> <span class="title">Core</span> <span class="title">Web</span> <span class="title">API</span> <span class="title">webapi</span> \[<span class="title">C</span>#\] <span class="title">Web</span>/<span class="title">WebAPI</span> <span class="title">Nuget</span> <span class="title">Config</span> <span class="title">nugetconfig</span> <span class="title">Config</span> <span class="title">Web</span> <span class="title">Config</span> <span class="title">webconfig</span> <span class="title">Config</span> <span class="title">Solution</span> <span class="title">File</span> <span class="title">sln</span> <span class="title">Solution</span>  </span></span><br><span class="line"><span class="function"><span class="title">Examples</span>: <span class="title">dotnet</span> <span class="title">new</span> <span class="title">mvc</span> --<span class="title">framework</span> <span class="title">netcoreapp2</span>.0 --<span class="title">auth</span> <span class="title">Individual</span> <span class="title">dotnet</span> <span class="title">new</span> <span class="title">console</span> --<span class="title">framework</span> <span class="title">netcoreapp2</span>.0 <span class="title">dotnet</span> <span class="title">new</span> --<span class="title">help</span></span></span><br></pre></td></tr></table></figure><p>コンソールアプリは、<strong>console</strong>をつける模様。<br>最後に、<strong>new console</strong>を付けて実行します。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\\<span class="title">Works</span>\\<span class="title">temp</span>\\<span class="title">corecli</span>&amp;<span class="title">amp</span>;<span class="title">gt</span>;&quot;<span class="title">D</span>:\\<span class="title">Works</span>\\<span class="title">Lib</span>\\<span class="title">Microsoft</span>\\.<span class="title">NET</span> <span class="title">Core</span> <span class="title">CLI</span>\\2.0.0-<span class="title">preview2</span>-005840\\<span class="title">bin</span>\\<span class="title">dotnet.exe</span>&quot; <span class="title">new</span> <span class="title">console</span> <span class="title">The</span> <span class="title">template</span> &quot;<span class="title">Console</span> <span class="title">Application</span>&quot; <span class="title">was</span> <span class="title">created</span> <span class="title">successfully</span>.  </span></span><br><span class="line"><span class="function"><span class="title">Processing</span> <span class="title">post</span>-<span class="title">creation</span> <span class="title">actions</span>... <span class="title">Running</span> &#x27;<span class="title">dotnet</span> <span class="title">restore</span>&#x27; <span class="title">on</span> <span class="title">D</span>:\\<span class="title">Works</span>\\<span class="title">temp</span>\\<span class="title">corecli</span>\\<span class="title">corecli.csproj</span>... <span class="title">Restore</span> <span class="title">succeeded</span>.</span></span><br></pre></td></tr></table></figure><p>そうすると、プロジェクトフォルダに、</p><ul><li>obj</li><li>corecli.csproj</li><li>NuGet.config</li><li>Program.cs</li></ul><p>が作成されます。<br>csprojを見ると、Visual Studioを思い出しますが、中身は少し違います。<br>ファイルへの参照がない。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Project</span> <span class="attr">Sdk</span>=<span class="string">&quot;Microsoft.NET.Sdk&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span> <span class="tag">&lt;<span class="name">OutputType</span>&gt;</span>Exe<span class="tag">&lt;/<span class="name">OutputType</span>&gt;</span> <span class="tag">&lt;<span class="name">TargetFramework</span>&gt;</span>netcoreapp2.0<span class="tag">&lt;/<span class="name">TargetFramework</span>&gt;</span> <span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">Project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>次に、このフォルダをVisual Studio Codeで開きます。メニューに<strong>フォルダーを開く</strong>がありますので、そこから開きます。</p><p><a href="../../../../public/2017/04/76279b2073aaa126655eb5579cb096a1.png"><img src="../../../../public/2017/04/76279b2073aaa126655eb5579cb096a1-1024x768.png"></a> すると、**Required assets to build and debug are missing from ‘corecli’. Add them?**と聞かれます。<br><a href="../../../../public/2017/04/a956c2fecc47c357ed5ade8f7d4668e2.png"><img src="../../../../public/2017/04/a956c2fecc47c357ed5ade8f7d4668e2-1024x768.png"></a><br> Yesと応えると、プロジェクトに</p><ul><li>.vscode\tasks.json</li><li>.vscode\launch.json</li></ul><p>が追加されます。<br>同時に、**There are unresolved dependencies from ‘corecli.csproj’. Please execute the restore command to continue.**と聞かれますが、Restoreを選んでも下記のエラーになります。<br><code>error: Invalid input &#39;d:\Works\temp\corecli\corecli.csproj&#39;. The file type was not recognized. Done: 1.</code> なので、これは諦めます。</p><h1 id="デバッグ-amp-実行"><a href="#デバッグ-amp-実行" class="headerlink" title="デバッグ&amp;実行"></a>デバッグ&amp;実行</h1><p>現時点で、Program.csには、<strong>Hello World!**と表示するコードが書かれています。<br>これを実行します。<br>**Console.WriteLine</strong>にF9でブレークポイントを置き、F5で実行してみます。このあたりはVisual Studioと同じで助かります。<br>実行すると、エラーがでます。</p><p><a href="../../../../public/2017/04/7d168e1a70d55585dc1f55ad068700cd.png"><img src="../../../../public/2017/04/7d168e1a70d55585dc1f55ad068700cd-1024x768.png"></a> <strong>問題を表示する</strong>とあるのでクリックしますが、 <a href="../../../../public/2017/04/ae09d27d5975a106b62397b00925376d.png"><img src="../../../../public/2017/04/ae09d27d5975a106b62397b00925376d-1024x768.png"></a> <strong>現時点で問題はワークスペースで検出されていません。</strong>と言われます。意味がわかりません。<br>仕方ないので、もう一度実行し、今度は<strong>このままデバッグを続ける</strong>をクリックします。<br>すると、今度は下記のメッセージが表示されました。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">------------------------------------------------------------------- You may only use the Microsoft .<span class="built_in">NET</span> Core Debugger (vsdbg)</span><br><span class="line"> with Visual Studio Code, Visual Studio or Visual Studio <span class="keyword">for</span> Mac software to <span class="built_in">help</span> you develop and test your applications. ------------------------------------------------------------------- The specified framework &#x27;Microsoft.NETCore.App&#x27;, version &#x27;<span class="number">2</span>.<span class="number">0</span>.<span class="number">0</span>-preview1-<span class="number">002061</span>-<span class="number">00</span>&#x27; was <span class="keyword">not</span> found.  </span><br><span class="line">\- Check application dependencies and target a framework version installed <span class="built_in">at</span>:  </span><br><span class="line"><span class="function">C:\\<span class="title">Program</span> <span class="title">Files</span>\\<span class="title">dotnet</span>\\<span class="title">shared</span>\\<span class="title">Microsoft.NETCore.App</span>  </span></span><br><span class="line"><span class="function">\- <span class="title">The</span> <span class="title">following</span> <span class="title">versions</span> <span class="title">are</span> <span class="title">installed</span>:  </span></span><br><span class="line"><span class="function">1.0.0  </span></span><br><span class="line"><span class="function">\- <span class="title">Alternatively</span>, <span class="title">install</span> <span class="title">the</span> <span class="title">framework</span> <span class="title">version</span> &#x27;2.0.0-<span class="title">preview1</span>-002061-00&#x27;.  </span></span><br><span class="line"><span class="function"><span class="title">The</span> <span class="title">target</span> <span class="title">process</span> <span class="title">exited</span> <span class="title">without</span> <span class="title">raising</span> <span class="title">a</span> <span class="title">CoreCLR</span> <span class="title">started</span> <span class="title">event</span>. <span class="title">Ensure</span> <span class="title">that</span> <span class="title">the</span> <span class="title">target</span> <span class="title">process</span> <span class="title">is</span> <span class="title">configured</span> <span class="title">to</span> <span class="title">use</span> .<span class="title">NET</span> <span class="title">Core</span>. <span class="title">This</span> <span class="title">may</span> <span class="title">be</span> <span class="title">expected</span> <span class="title">if</span> <span class="title">the</span> <span class="title">target</span> <span class="title">process</span> <span class="title">did</span> <span class="title">not</span> <span class="title">run</span> <span class="title">on</span> .<span class="title">NET</span> <span class="title">Core</span>. <span class="title">The</span> <span class="title">program</span> &#x27;\[23568\] <span class="title">corecli.dll</span>&#x27; <span class="title">has</span> <span class="title">exited</span> <span class="title">with</span> <span class="title">code</span> -2147450749 (0<span class="title">x80008083</span>).</span></span><br></pre></td></tr></table></figure><p>どうも、依存関係が見つからないご様子。<br>なので、.NET Core 2.0のフォルダにある、<strong>shared\Microsoft.NETCore.App\2.0.0-preview1-002061-00</strong>を<strong>C:\Program Files\dotnet\shared\Microsoft.NETCore.App</strong>にコピーします。<br>その後、もう一度F5実行し、<strong>このままデバッグを続ける</strong>をクリックします。<br>今度は、実行に成功し、ブレークポイントに停止しました。</p><p><a href="../../../../public/2017/04/bbed7d4da07f33b2a5fe5c237d39b2aa.png"><img src="../../../../public/2017/04/bbed7d4da07f33b2a5fe5c237d39b2aa-1024x768.png"></a><br> カーソルを次に進めると、下のコンソールに**Hello World!**が表示されます。<br>少し手こずりましたが、何とか動きました。<br>あと、実行アセンブリは、dllが拡張子なのね…</p><h1 id="コンソールからビルド-amp-実行"><a href="#コンソールからビルド-amp-実行" class="headerlink" title="コンソールからビルド&amp;実行"></a>コンソールからビルド&amp;実行</h1><p>Visual Studio Codeから実行しましたが、dotnet.exeからもビルドしてみます。<br>同じようにカレントをプロジェクトフォルダに移動したコマンドプロンプトから下記でビルドします。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\\<span class="title">Works</span>\\<span class="title">temp</span>\\<span class="title">corecli</span>&gt;&quot;<span class="title">D</span>:\\<span class="title">Works</span>\\<span class="title">Lib</span>\\<span class="title">Microsoft</span>\\.<span class="title">NET</span> <span class="title">Core</span> <span class="title">CLI</span>\\2.0.0-<span class="title">preview2</span>-005840\\<span class="title">bin</span>\\<span class="title">dotnet.exe</span>&quot; <span class="title">build</span> <span class="title">Microsoft</span> (<span class="title">R</span>) <span class="title">Build</span> <span class="title">Engine</span> <span class="title">version</span> 15.2.93.5465 <span class="title">Copyright</span> (<span class="title">C</span>) <span class="title">Microsoft</span> <span class="title">Corporation</span>. <span class="title">All</span> <span class="title">rights</span> <span class="title">reserved</span>.  </span></span><br><span class="line"><span class="function"><span class="title">corecli</span> -&gt; <span class="title">D</span>:\\<span class="title">Works</span>\\<span class="title">temp</span>\\<span class="title">corecli</span>\\<span class="title">bin</span>\\<span class="title">Debug</span>\\<span class="title">netcoreapp2</span>.0\\<span class="title">corecli.dll</span>  </span></span><br><span class="line"><span class="function"><span class="title">Build</span> <span class="title">succeeded</span>. 0 <span class="title">Warning</span>(<span class="title">s</span>) 0 <span class="title">Error</span>(<span class="title">s</span>)  </span></span><br><span class="line"><span class="function"><span class="title">Time</span> <span class="title">Elapsed</span> 00:00:02.92</span></span><br></pre></td></tr></table></figure><p>続いて実行します。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\\<span class="title">Works</span>\\<span class="title">temp</span>\\<span class="title">corecli</span>&gt;&quot;<span class="title">D</span>:\\<span class="title">Works</span>\\<span class="title">Lib</span>\\<span class="title">Microsoft</span>\\.<span class="title">NET</span> <span class="title">Core</span> <span class="title">CLI</span>\\2.0.0-<span class="title">preview2</span>-005840\\<span class="title">bin</span>\\<span class="title">dotnet.exe</span>&quot; <span class="title">run</span> <span class="title">Hello</span> <span class="title">World</span>!</span></span><br></pre></td></tr></table></figure><p>問題なく実行できました。<br>これならLinuxでも実行できそうです。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET </category>
          
          <category> Visual Studio Code </category>
          
          <category> net </category>
          
          <category> .NET Core </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その53 DockerのベースOSについて</title>
      <link href="2017/04/22/2104/"/>
      <url>2017/04/22/2104/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p><strong>Docker</strong>を調べていると、どうしても理解しにくいのが、<strong>カーネルの共有</strong>の概念。<br>世間様のBlogを見ていると、Dockerの概要図で、各層のスタックを<strong>インフラ-マシン-ホストOS-Dockerエンジン-Bin/Lib-App</strong>みたいな表記しているところがいっぱいある。<br>で、<a href="https://hub.docker.com/">Docker Hub</a>で配布しているイメージを見ていると、<strong>App</strong>だけが配布してあって混乱する。</p><ul><li><strong>Bin/Lib</strong>はDokcerエンジンが提供している?</li><li>カーネルの共有ってことは、<strong>App</strong>はホストOSのカーネル部分にアクセスする (Bin/Libを経由して)?</li><li>サンドボックスに近い?</li></ul><p>みたいな勘違いをしていた。<br>さらに混乱したのが、<strong>Docker軽量OS</strong>である<strong>CoreOS</strong>、<strong>Alpine Linux</strong>等の存在。<br>「結局OSがいるじゃん、上のBin/Libsとか何?」ってなった。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>結論から言えば、やっぱりOSはいるんですよ。<br>[slideshare id=54615053&amp;doc=introductiontodockermanagementandoperations2nd-151101144211-lva1-app6892] リンク元:<a href="https://www.slideshare.net/zembutsu/introduction-to-docker-management-and-operations-2nd">https://www.slideshare.net/zembutsu/introduction-to-docker-management-and-operations-2nd</a> 著者:Masahito Zembutsu様</p><p>上のスライドの67Pにおける、<strong>ベースイメージ (公式) Ubuntu、CentOS等</strong>って言葉。<br>OSはいるんです。67P付近がすごくわかりやすい。まじで。<br><a href="https://www.docker.com/what-container">公式ページの説明</a>にも、こんな図がある。</p><p><a href="../../../../public/2017/04/what_is_a_container.png"><img src="../../../../public/2017/04/what_is_a_container.png"></a><br> <a href="https://www.docker.com/sites/default/files/what/_is/_a/_container.png">https://www.docker.com/sites/default/files/what\_is\_a\_container.png</a> より</p><p>いろんなBlog見ていると、Dockerエンジンの上にいきなりAppがいたりする。<br>これ見たら、「他のコンテナからは独立、カーネルは共有、ホストOSから見たら単一のプロセスに見える」って、サンドボックスと勘違いしますわ。少なくとも。<br>多分、従来の仮想OSと差別化して見せたいから、意図的にOSがあることをぼかして、Bin/Libsとか、極端にDockerエンジン-App、っていう図を提示してたんですよ。<br>広告としてはわかりやすいし、魅力的だもんね。<br>素直に、ベースイメージ≓Bin/Libsって書いてくれれば迷わなかったね。</p><h1 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h1><p><strong>Dockerfile</strong>ってあるよね。<br>ちゃんと仕組みを理解すれば、上の疑問なんてありえないけど、Dockerfileの仕組みを早く知りたかった。<br>なんで、「ベースイメージがある」、ってことが確信に変わったかっていうと、このDockerfileを眺めていたから。<br>JenkinsっていうCIのアプリがあるけど、あれのDockerイメージって、冒頭は下記のような記述になっている。</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jdk  </span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get install -y git curl &amp;&amp; rm -rf /var/lib/apt/lists/\*  </span></span><br><span class="line"><span class="keyword">ENV</span> JENKINS\_HOME /var/jenkins\_home <span class="keyword">ENV</span> JENKINS\_SLAVE\_AGENT\_PORT <span class="number">50000</span></span><br></pre></td></tr></table></figure><p><strong>FROM</strong>って見て思いました。これ、他のDockerfileを参照するな、って。<br>だから、Docker Hubでopenjdkを調べました。<br>そしたら、openjdkの8-jdkってなっているDockerfileの冒頭は下記。</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> buildpack-deps:jessie-scm</span><br></pre></td></tr></table></figure><p>次は、buildpack-depsのjessie-scmの冒頭。</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> buildpack-deps:jessie-curl</span><br></pre></td></tr></table></figure><p>次は、buildpack-depsのjessie-curlの冒頭。</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> debian:jessie</span><br></pre></td></tr></table></figure><p>次は、debianのjessieの冒頭。debianは有名なLinuxディストリビューションですね。</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> scratch</span><br></pre></td></tr></table></figure><p><a href="https://hub.docker.com/_/scratch/">scratchのページ</a>にたどり着きました。<br>下記のようにあります。</p><blockquote><p>an explicitly empty image, especially for building images “FROM scratch”</p></blockquote><p>要するに起点ですね。<br>これまで辿ってきて、先述のSlideshareを身をもって理解できたわけですよ。<br>OSはいるんだ、って。</p>]]></content>
      
      
      <categories>
          
          <category> 仮想化 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その52 Red Hat Enterprise Linux 7.2でListenしているポートの一覧を表示する</title>
      <link href="2017/04/22/2102/"/>
      <url>2017/04/22/2102/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>掲題の通り。<strong>netstat</strong>なのはわかるんですけど、引数がわからないのです。<br>まぁRHELだけの話ではないですけど。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>こんな感じ。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ netstat -tanp | grep LISTEN (Not all processes could be identified, non-owned process info will not be shown, you would have to be root to see it all.) tcp 0 0 0.0.0.0:5900 0.0.0.0:\* LISTEN 30587/vino-server tcp 0 0 0.0.0.0:5901 0.0.0.0:\* LISTEN 31497/vino-server tcp 0 0 0.0.0.0:5902 0.0.0.0:\* LISTEN 30335/Xvnc tcp 0 0 0.0.0.0:5903 0.0.0.0:\* LISTEN 31265/Xvnc tcp 0 0 0.0.0.0:111 0.0.0.0:\* LISTEN - tcp 0 0 0.0.0.0:6002 0.0.0.0:\* LISTEN 30335/Xvnc tcp 0 0 0.0.0.0:6003 0.0.0.0:\* LISTEN 31265/Xvnc tcp 0 0 192.168.122.1:53 0.0.0.0:\* LISTEN - tcp 0 0 0.0.0.0:22 0.0.0.0:\* LISTEN - tcp 0 0 127.0.0.1:631 0.0.0.0:\* LISTEN - tcp 0 0 127.0.0.1:25 0.0.0.0:\* LISTEN - tcp6 0 0 :::5900 :::\* LISTEN 30587/vino-server tcp6 0 0 :::5901 :::\* LISTEN 31497/vino-server tcp6 0 0 :::5902 :::\* LISTEN 30335/Xvnc tcp6 0 0 :::5903 :::\* LISTEN 31265/Xvnc tcp6 0 0 :::111 :::\* LISTEN - tcp6 0 0 :::6002 :::\* LISTEN 30335/Xvnc tcp6 0 0 :::6003 :::\* LISTEN 31265/Xvnc tcp6 0 0 :::22 :::\* LISTEN - tcp6 0 0 ::1:631 :::\* LISTEN - tcp6 0 0 ::1:25 :::\* LISTEN - tcp6 20 0 :::2375 :::\* LISTEN - tcp6 0 0 :::9000 :::\* LISTEN - </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> Red Hat Enterprise Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その51 Red Hat Enterprise Linux 7.2にPortainerをインストールする</title>
      <link href="2017/04/22/2093/"/>
      <url>2017/04/22/2093/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p><a href="https://taktak.jp/2017/04/21/2084">開発メモ その49 Red Hat Enterprise Linux 7.2にshipyardをインストールする</a>にて、<strong>shipyard</strong>をインストールしました。<br>けど、結論から言うと使えませんでした。<br>どうやっても管理画面から、コンテナとイメージの一覧が表示されなくて挫折しました。<br>でも諦めずに調査したら、<strong>Portainer</strong>という管理ツールがあることを知りましたのでこれをインストールしました。<br>いや、こうやって試すというのはdockerの実地訓練なんですよね。<br>Portainerの公式は下記です。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://portainer.io/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=portainer.io"></img><div class="hbc-site-name">Portainer.io</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">Simple Container Management | Kubernetes, Docker, Docker Swarm &amp; ACI UI</div><div class="hbc-url">http://portainer.io/</div><div class="hbc-description">Portainer makes managing containerized software environments quick and easy by giving users a simple &#39;click-to-configure&#39; UI that anyone can…</div></div></div></div></a></div></div><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>まずはじめに、<strong>Docker Remote API</strong>の設定を行います。<br>これ、公式ドキュメントに書いて無くて苦労しました。<br>下記のページが参考になりました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://qiita.com/makotoomori@github/items/de0e39c5d67e5c69a741#2-remote-api%E3%81%AE%E8%A8%AD%E5%AE%9A" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=qiita.com"></img><div class="hbc-site-name">Qiita</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.qiita.com%2Fassets%2Fpublic%2Farticle-ogp-background-1150d8b18a7c15795b701a55ae908f94.png?ixlib=rb-1.2.2&w=1200&mark=https%3A%2F%2Fqiita-user-contents.imgix.net%2F~text%3Fixlib%3Drb-1.2.2%26w%3D840%26h%3D380%26txt%3DCoreOS%25E3%2581%25A7Docker%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25BC%25E3%2583%25AB%25E3%2581%2597%25E3%2581%25A6Remote%2520API%25E4%25BD%25BF%25E7%2594%25A8%25E3%2581%2597%25E3%2581%25A6%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2586%25E3%2583%258A%25E3%2582%2592%25E6%2593%258D%25E4%25BD%259C%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%26txt-color%3D%2523333%26txt-font%3DHiragino%2520Sans%2520W6%26txt-size%3D54%26txt-clip%3Dellipsis%26txt-align%3Dcenter%252Cmiddle%26s%3Db1447726aeac3593302867fc098e7f89&mark-align=center%2Cmiddle&blend=https%3A%2F%2Fqiita-user-contents.imgix.net%2F~text%3Fixlib%3Drb-1.2.2%26w%3D840%26h%3D500%26txt%3D%2540makotoomori%2540github%26txt-color%3D%2523333%26txt-font%3DHiragino%2520Sans%2520W6%26txt-size%3D45%26txt-align%3Dright%252Cbottom%26s%3D1805a5f2b8dd49aded120176cae6f1d3&blend-align=center%2Cmiddle&blend-mode=normal&s=31de83bc20aa274868d2198a5ebdf085"></img></div><div class="hbc-text"><div class="hbc-title">CoreOSでDockerインストールしてRemote API使用してコンテナを操作してみる - Qiita</div><div class="hbc-url">http://qiita.com/makotoomori@github/items/de0e39c5d67e5c69a741#2-remote-api%E3%81%AE%E8%A8%AD%E5%AE%9A</div><div class="hbc-description">CoreOSとはDockerを利用してコンテナを動かすことに特化した軽量なLinuxディストリビューションの一つです。コンテナを実行させるためのDocker以外にetcd(設定情報共有)、fleet(クラスタリング)などのツールが標...</div></div></div></div></a></div></div><p>Remote APIを設定したら、下記を入力してインストールします。ポート番号は自由に決定できますが、ここは公式と同じ9000にします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 9000:9000 --privileged -v /var/run/docker.sock:/var/run/docker.sock portainer/portainer</span><br></pre></td></tr></table></figure><p>注意して欲しいのは、<strong>--priviledged</strong>を付けることです。公式ドキュメントに下記のようにこっそり書いてあります。これに気づかず何度も<strong>docker rm</strong>してはインストールを繰り返していました。</p><blockquote><p>Note: If your host is using SELinux, you’ll need to pass the –privileged flag to the Docker run command:</p></blockquote><p>インストール後、ブラウザから<strong>http://&lt;端末のIP&gt;:9000</strong>でアクセスします。<br>初回アクセス時に、パスワードの設定を要求されます。</p><p><a href="../../../../public/2017/04/screencapture-192-168-11-18-9000-1492789248650.png"><img src="../../../../public/2017/04/screencapture-192-168-11-18-9000-1492789248650.png"></a> 設定したパスワードでログインします。<br><a href="../../../../public/2017/04/screencapture-192-168-11-18-9000-1492789271848.png"><img src="../../../../public/2017/04/screencapture-192-168-11-18-9000-1492789271848.png"></a> 今回は、Portainerのインストール先がDockerホストなので、最初の項目を選択します。<br>選択後、<strong>Connect</strong>を押下します。この際、Docker Remote APIが設定してなかったり、–privilegedを付与していないと、Unable to connect to the Docker endpointと怒られます。<br><a href="../../../../public/2017/04/screencapture-192-168-11-18-9000-1492790322083.png"><img src="../../../../public/2017/04/screencapture-192-168-11-18-9000-1492790322083.png"></a> 無事に接続すると、管理画面に移行します。<br>shipyardと異なり、既にコンテナが一つ動いているのがわかります。これはPortainer自身です。<br><a href="../../../../public/2017/04/screencapture-192-168-11-18-9000-1492791754228.png"><img src="../../../../public/2017/04/screencapture-192-168-11-18-9000-1492791754228-1024x662.png"></a> コンテナの一覧画面です。<br>非常にモダンでわかりやすいです。<br><a href="../../../../public/2017/04/screencapture-192-168-11-18-9000-1492791818000.png"><img src="../../../../public/2017/04/screencapture-192-168-11-18-9000-1492791818000-1024x662.png"></a></p><p>以上です。<br>ここまで長かったです。</p>]]></content>
      
      
      <categories>
          
          <category> 仮想化 </category>
          
          <category> Docker </category>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> Red Hat Enterprise Linux </category>
          
          <category> Portainer </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その50 sudoよりsudo -sのが良いらしい</title>
      <link href="2017/04/22/2091/"/>
      <url>2017/04/22/2091/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>Linuxにまだまだ慣れない私は、<strong>sudo</strong>を便利なコマンドだと思って多用していました。<br>「とりあえずsudoつけておけばいいや」的な感じで。<br>でも世間様のblogを見ていると、sudoしている記述例ってあまりないのね。<br>特に<strong>yum install</strong>なんかその例。何か間違っているの?って思って調べてみました。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>下記のページで良くない理由が(ざっくり)書かれている。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://qiita.com/sksmnagisa/items/fb78f2cc4f5ca85a639e" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=qiita.com"></img><div class="hbc-site-name">Qiita</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.qiita.com%2Fassets%2Fpublic%2Farticle-ogp-background-1150d8b18a7c15795b701a55ae908f94.png?ixlib=rb-1.2.2&w=1200&mark=https%3A%2F%2Fqiita-user-contents.imgix.net%2F~text%3Fixlib%3Drb-1.2.2%26w%3D840%26h%3D380%26txt%3D%25E3%2580%2590yum%25E3%2580%2591yum%25E3%2581%258C%25E5%258B%2595%25E3%2581%258B%25E3%2581%25AA%25E3%2581%2584%25E3%2581%25A8%25E3%2581%258D%25E3%2581%25AE%25E7%25B0%25A1%25E6%2598%2593%25E5%25AF%25BE%25E5%2587%25A6%25E6%2596%25B9%25E6%25B3%2595%25E9%259B%2586%25EF%25BC%2588IOError%25E3%2580%2581Trying%2520other%2520mirror%25E3%2580%2581Determining%2520fastest%2520mirrors%25E3%2580%2581%25E3%2583%2595%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%25BA%25E2%2580%25A6%26txt-color%3D%2523333%26txt-font%3DHiragino%2520Sans%2520W6%26txt-size%3D54%26txt-clip%3Dellipsis%26txt-align%3Dcenter%252Cmiddle%26s%3D05d7e6f04eba97c3cd85af7067ab7976&mark-align=center%2Cmiddle&blend=https%3A%2F%2Fqiita-user-contents.imgix.net%2F~text%3Fixlib%3Drb-1.2.2%26w%3D840%26h%3D500%26txt%3D%2540sksmnagisa%26txt-color%3D%2523333%26txt-font%3DHiragino%2520Sans%2520W6%26txt-size%3D45%26txt-align%3Dright%252Cbottom%26s%3Da3e44e073664e70ee84e01c51190cd5e&blend-align=center%2Cmiddle&blend-mode=normal&s=8085a5c22b01cfd859639464f0a7dc4c"></img></div><div class="hbc-text"><div class="hbc-title">【yum】yumが動かないときの簡易対処方法集（IOError、Trying other mirror、Determining fastest mirrors、フリーズ等） - Qiita</div><div class="hbc-url">http://qiita.com/sksmnagisa/items/fb78f2cc4f5ca85a639e</div><div class="hbc-description">何か昔同じタイトルの記事を見たことあるって人へこの記事は昔やってたブログの記事の移植です。昔の内容で有用そうなものをQiitaに少し修正を加えて移植してます(現在進行形で)。概要yumが正常に動作しない場合には様々...</div></div></div></div></a></div></div><p><strong>sudo -s</strong>でrootになってから実行しましょう、ということらしい。<br>なので、<a href="https://taktak.jp/2017/04/21/2084">前回</a>、<a href="https://taktak.jp/2017/04/21/2081">前々回</a>の<strong>Docker</strong>、<strong>shipyard</strong>のインストールで毎回sudoする必要は無かったわけです。<br>難しいなぁ…</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> Red Hat Enterprise Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その49 Red Hat Enterprise Linux 7.2にshipyardをインストールする</title>
      <link href="2017/04/21/2084/"/>
      <url>2017/04/21/2084/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p><a href="https://taktak.jp/2017/04/21/2081">開発メモ その48 Red Hat Enterprise Linux 7.2にDockerをインストールする</a>にて、<strong>Docker</strong>をインストールしました。<br>けど、自分はCLIは苦手だし、コマンド覚えるのが嫌です。<br>GUI万歳!!! というわけで管理ツールを導入します。<br>Dockerの管理ツールはいくつかありますが、Webで管理できるのは下記の2点</p><ul><li>DockerUI</li><li>shipyard</li></ul><p>があります。<br>今回は多機能なshipyardを導入します。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>下記のページにて、**/var/run/docker.sock**をマウントすることに危険性を説いています。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://rimuru.lunanet.gr.jp/notes/post/how-to-root-from-inside-container/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=rimuru.lunanet.gr.jp"></img><div class="hbc-site-name">rimuru.lunanet.gr.jp</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">Dockerコンテナ内からホストマシンのルートを取る具体的な方法（あるいは/var/run/docker.sockを晒すことへの注意喚起） | 48JIGEN *Reloaded*</div><div class="hbc-url">https://rimuru.lunanet.gr.jp/notes/post/how-to-root-from-inside-container/</div></div></div></div></a></div></div><p>特にshipyardについても言及しています。<br>対応策が語られていないのですが、そういうものだと割り切ります。<br>このあたり、本番環境に導入するというのは自己責任ですね。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>インストール方法自体は、非常にシンプルです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -s https://shipyard-project.com/deploy | bash -s</span><br></pre></td></tr></table></figure><p>ですが、上の方法だと、下記のメッセージが表示されてしまい、実行できませんでした。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/docker-current: Cannot connect to the Docker daemon. Is the docker daemon running on this host?. See <span class="string">&#x27;/usr/bin/docker-current run --help&#x27;</span>. Deploying Shipyard -&gt; Starting Database /usr/bin/docker-current: Cannot connect to the Docker daemon. Is the docker daemon running on this host?</span><br></pre></td></tr></table></figure><p>dockerのサービスデーモンが実行されていないのでは？というメッセージですが、<strong>sudo service docker status</strong>を実行すると正しく動作していることは示しています。<br>ですが、<strong>docker ps</strong>だと、同じように<strong>Cannot connect to the Docker daemon. Is the docker daemon running on this host?**を表示されます。<br>そこでふと思ったのが、</strong>sudo<strong>したらどうなる?と思って実行したら、</strong>sudo dcker ps**が成功しました。<br>なので、先述のインストールコマンドも</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -s https://shipyard-project.com/deploy | sudo bash -s</span><br></pre></td></tr></table></figure><p>することで動作しました。<br>気づくのに時間がかかりました。<br>ここで注意するのは、上のコマンド、先述の**/var/run/docker.sock**をマウントするコマンドが実行される点です。<br>これだけは認識しておいてください。<br>さて、上のコマンドでDockerにコンテナが追加されました。<br>shipyard自体がコンテナで実行されるアプリケーションです。<br>それなのに、自分以外のコンテナの状態を管理するツールになり得るのは、/var/run/docker.sockをマウントして色々やっているからとのことです インストールが完了すると、</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Waiting <span class="keyword">for</span> Shipyard on 端末のIP:8080  </span><br><span class="line">Shipyard available at http://&lt;端末のIP&gt;:8080 Username: admin Password: shipyard</span><br></pre></td></tr></table></figure><p>と表示されます。<br>パスワードはデフォルトは危険なのですぐに変えましょう。<br>外部のブラウザから、http://&lt;端末のIP&gt;:8080でアクセスすると、下記の美しいログイン画面が表示されます。</p><p><a href="../../../../public/2017/04/screencapture-192-168-11-18-8080-1492772353772.png"><img src="../../../../public/2017/04/screencapture-192-168-11-18-8080-1492772353772.png"></a> ログイン後の画面。<br><a href="../../../../public/2017/04/screencapture-192-168-11-18-8080-1492772412394.png"><img src="../../../../public/2017/04/screencapture-192-168-11-18-8080-1492772412394.png"></a><br> 以上です。</p>]]></content>
      
      
      <categories>
          
          <category> 仮想化 </category>
          
          <category> Docker </category>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> Red Hat Enterprise Linux </category>
          
          <category> shipyard </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その48 Red Hat Enterprise Linux 7.2にDockerをインストールする</title>
      <link href="2017/04/21/2081/"/>
      <url>2017/04/21/2081/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p><strong>.NET Core</strong>を試したくなったけど、環境を汚すのが嫌なので、<strong>Docker</strong>をインストールし、そこで遊んでみることにしました。<br>とは言っても、Dockerを触ったことはないので、インストール方法含めて、メモを残します。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>インストール方法自体は、Redhatの公式ページに記載してあります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># インストール # RHEL 7 の Extrasチャンネル(rhel-7-server-extras-rpms)を有効化 $ subscription-manager repos --enable=rhel-7-server-extras-rpms $ sudo yum install docker -y  </span></span><br><span class="line">\<span class="comment"># Dockerサービスを開始する # systemd で docker サービスを開始します。初回サービス開始時にコンテナーのデータ領域を確保する処理を行うため、初回のサービス起動には少し時間がかかります。</span></span><br><span class="line">$ sudo systemctl start docker.service $ sudo systemctl <span class="built_in">enable</span> docker.service</span><br></pre></td></tr></table></figure><p>起動状態は下記で確認できます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl status docker.service ● docker.service - Docker Application Container Engine Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled; vendor preset: disabled) Active: active (running) since 金 2017-04-21 00:05:56 JST; 51s ago Docs: http://docs.docker.com Main PID: 5211 (dockerd-current) CGroup: /system.slice/docker.service ├─5211 /usr/bin/dockerd-current --add-runtime docker-runc=/usr/libexec/docker/docker-runc-current --default-runtime=docker-runc --authorization-plugin=rhel-push-plugin... └─5218 /usr/bin/docker-containerd-current -l unix:///var/run/docker/libcontainerd/docker-containerd.sock --shim docker-containerd-shim --metrics-interval=0 --start-tim...  </span><br><span class="line">4月 21 00:05:55 takuya-redhat dockerd-current\[5211\]: time=<span class="string">&quot;2017-04-21T00:05:55.505085195+09:00&quot;</span> level=info msg=<span class="string">&quot;devmapper: Successfully created filesystem xfs on devi...5409-base&quot;</span> 4月 21 00:05:55 takuya-redhat dockerd-current\[5211\]: time=<span class="string">&quot;2017-04-21T00:05:55.877823056+09:00&quot;</span> level=info msg=<span class="string">&quot;Graph migration to content-addressability took 0.00 seconds&quot;</span> 4月 21 00:05:55 takuya-redhat dockerd-current\[5211\]: time=<span class="string">&quot;2017-04-21T00:05:55.879686801+09:00&quot;</span> level=info msg=<span class="string">&quot;Loading containers: start.&quot;</span> 4月 21 00:05:55 takuya-redhat dockerd-current\[5211\]: time=<span class="string">&quot;2017-04-21T00:05:55.965820706+09:00&quot;</span> level=info msg=<span class="string">&quot;Firewalld running: true&quot;</span> 4月 21 00:05:56 takuya-redhat dockerd-current\[5211\]: time=<span class="string">&quot;2017-04-21T00:05:56.449814977+09:00&quot;</span> level=info msg=<span class="string">&quot;Default bridge (docker0) is assigned with an IP addres...P address&quot;</span> 4月 21 00:05:56 takuya-redhat dockerd-current\[5211\]: time=<span class="string">&quot;2017-04-21T00:05:56.911254692+09:00&quot;</span> level=info msg=<span class="string">&quot;Loading containers: done.&quot;</span> 4月 21 00:05:56 takuya-redhat dockerd-current\[5211\]: time=<span class="string">&quot;2017-04-21T00:05:56.912002456+09:00&quot;</span> level=info msg=<span class="string">&quot;Daemon has completed initialization&quot;</span> 4月 21 00:05:56 takuya-redhat dockerd-current\[5211\]: time=<span class="string">&quot;2017-04-21T00:05:56.912069092+09:00&quot;</span> level=info msg=<span class="string">&quot;Docker daemon&quot;</span> commit=<span class="string">&quot;3a094bd/1.12.6&quot;</span> graphdriver=dev...ion=1.12.6 4月 21 00:05:56 takuya-redhat dockerd-current\[5211\]: time=<span class="string">&quot;2017-04-21T00:05:56.927181794+09:00&quot;</span> level=info msg=<span class="string">&quot;API listen on /var/run/docker.sock&quot;</span> 4月 21 00:05:56 takuya-redhat systemd\[1\]: Started Docker Application Container Engine. Hint: Some lines were ellipsized, use -l to show <span class="keyword">in</span> full. </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 仮想化 </category>
          
          <category> Docker </category>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> Red Hat Enterprise Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その47 Red Hat Enterprise Linux 7.2にVNC Serverをインストールする</title>
      <link href="2017/04/20/2079/"/>
      <url>2017/04/20/2079/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p><a href="https://taktak.jp/2017/04/20/2075">開発メモ その46 Redhat上のTeamViewerが反応しない</a>で<strong>TeamViewer</strong>が使えないような状態になったので、TeamViewerに見切りをつけて、<strong>VNC</strong>をインストールすることにする。<br>最短で利用できるメモ。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>想定しているVNCは<strong>tigervnc-server</strong>。<br>2017/04/20時点でバージョンは1.3.1-9.el7。<br>コマンドは下記。適宜sudoするなりする。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ yum install tigervnc-server $ cp -a /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:1.service  </span><br><span class="line">\<span class="comment"># &lt;USER&gt;をログインユーザ名に変更 $ vi /etc/systemd/system/vncserver@:1.service  </span></span><br><span class="line">$ systemctl daemon-reload  </span><br><span class="line">\<span class="comment"># 自動起動の有効化 $ systemctl enable vncserver@:1.service  </span></span><br><span class="line">\<span class="comment"># 起動 $ systemctl start vncserver@:1.service  </span></span><br><span class="line">\<span class="comment"># ファイアウォールの設定を変更してポート開放 firewall-cmd --add-service=vnc-server --permanent firewall-cmd --reload</span></span><br></pre></td></tr></table></figure><p>接続ポートは5901でつなげます。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> Red Hat Enterprise Linux </category>
          
          <category> %e3%83%aa%e3%83%a2%e3%83%bc%e3%83%88%e3%83%87%e3%82%b9%e3%82%af%e3%83%88%e3%83%83%e3%83%97 </category>
          
          <category> VNC </category>
          
          <category> リモートデスクトップ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その46 Redhat上のTeamViewerが反応しない</title>
      <link href="2017/04/20/2075/"/>
      <url>2017/04/20/2075/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p><strong>Redhat</strong>上で起動している<strong>TeamViewer</strong>にWindowsからアクセスすると、パスワード認証は成功するのだが、画面が真っ暗である。</p><p><a href="../../../../public/2017/04/af84a45524f0bf705ede38cbf96fee0b.png"><img src="../../../../public/2017/04/af84a45524f0bf705ede38cbf96fee0b-1024x820.png"></a><br> 何これ?</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>公式のKBに </p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://community.teamviewer.com/t5/Knowledge-Base/Why-do-I-only-see-a-black-screen-after-connection-establishment/ta-p/4773" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=community.teamviewer.com"></img><div class="hbc-site-name">community.teamviewer.com</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">Why do I only see a black screen after connection establishment?</div><div class="hbc-url">https://community.teamviewer.com/t5/Knowledge-Base/Why-do-I-only-see-a-black-screen-after-connection-establishment/ta-p/4773</div><div class="hbc-description">Read this article in Chinese | French | German | Japanese | Spanish   This article applies to all TeamViewer users.   General Occasionally w…</div></div></div></div></a></div></div><blockquote><p>In most cases you can already solve this problem by updating both sides of the connection to the newest release available within your major version.</p></blockquote><p>とあったので、とりあえず、最新のTeamViewerに更新する。<br>sshでログインして下記を実行。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://download.teamviewer.com/download/teamviewer.i686.rpm $ suod yum localinstall teamviewer.i686.rpm 読み込んだプラグイン:langpacks, product-id, search-disabled-repos, subscription-manager teamviewer.i686.rpm を調べています: teamviewer-12.0.76279-0.i686 次のリポジトリーへの更新として teamviewer.i686.rpm を設定します: teamviewer-12.0.71510-0.i686 依存性の解決をしています --&gt; トランザクションの確認を実行しています。</span><br><span class="line">---&gt; パッケージ teamviewer.i686 0:12.0.71510-0 を 更新 ---&gt; パッケージ teamviewer.i686 0:12.0.76279-0 を アップデート --&gt; 依存性解決を終了しました。</span><br><span class="line"> </span><br><span class="line">依存性を解決しました  </span><br><span class="line">\========================================================================================================================================= Package アーキテクチャー バージョン リポジトリー 容量 ========================================================================================================================================= 更新します: teamviewer i686 12.0.76279-0 /teamviewer.i686 143 M  </span><br><span class="line">トランザクションの要約 ========================================================================================================================================= 更新 1 パッケージ  </span><br><span class="line">合計容量: 143 M Is this ok \[y/d/N\]:y Downloading packages: Running transaction check Running transaction <span class="built_in">test</span> Transaction <span class="built_in">test</span> succeeded Running transaction 更新します : teamviewer-12.0.76279-0.i686 1/2 Removed symlink /etc/systemd/system/multi-user.target.wants/teamviewerd.service. gtk-update-icon-cache: Cache file created successfully. 整理中 : teamviewer-12.0.71510-0.i686 2/2 検証中 : teamviewer-12.0.76279-0.i686 1/2 検証中 : teamviewer-12.0.71510-0.i686 2/2  </span><br><span class="line">更新: teamviewer.i686 0:12.0.76279-0  </span><br><span class="line">完了しました! </span><br></pre></td></tr></table></figure><h2 id="でも変わらず真っ黒-ﾟдﾟ"><a href="#でも変わらず真っ黒-ﾟдﾟ" class="headerlink" title="でも変わらず真っ黒(ﾟдﾟ)"></a>でも変わらず真っ黒(ﾟдﾟ)</h2><p>もうTeamViewer止めようかな….</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> Red Hat Enterprise Linux </category>
          
          <category> %e3%83%aa%e3%83%a2%e3%83%bc%e3%83%88%e3%83%87%e3%82%b9%e3%82%af%e3%83%88%e3%83%83%e3%83%97 </category>
          
          <category> TeamViewer </category>
          
          <category> リモートデスクトップ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その45 Repodata is over 2 weeks old. Install yum-cron? Or run: yum makecache fast</title>
      <link href="2017/04/20/2068/"/>
      <url>2017/04/20/2068/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p><strong>yum list</strong>でパッケージの一覧を確認しようと思ったら表示されたのが掲題のメッセージ。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum list 読み込んだプラグイン:langpacks, product-id, search-disabled-repos, subscription-manager Repo rhel-rs-for-rhel-7-server-eus-rpms forced skip\_if\_unavailable=True due to: /etc/pki/entitlement/7836591386407218947-key.pem Repo rhel-ha-for-rhel-7-server-eus-rpms forced skip\_if\_unavailable=True due to: /etc/pki/entitlement/7836591386407218947-key.pem Repo rhel-7-server-eus-rpms forced skip\_if\_unavailable=True due to: /etc/pki/entitlement/7836591386407218947-key.pem Repo rhel-7-server-rt-beta-rpms forced skip\_if\_unavailable=True due to: /etc/pki/entitlement/7836591386407218947-key.pem Repo rhel-rs-for-rhel-7-server-rpms forced skip\_if\_unavailable=True due to: /etc/pki/entitlement/7836591386407218947-key.pem Repo rhel-ha-for-rhel-7-server-rpms forced skip\_if\_unavailable=True due to: /etc/pki/entitlement/7836591386407218947-key.pem Repo rhel-7-server-rpms forced skip\_if\_unavailable=True due to: /etc/pki/entitlement/7836591386407218947-key.pem Repo rhel-7-server-rt-rpms forced skip\_if\_unavailable=True due to: /etc/pki/entitlement/7836591386407218947-key.pem Repodata is over 2 weeks old. Install yum-cron? Or run: yum makecache fast</span><br></pre></td></tr></table></figure><p>何これ?</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>Google先生に確認したところ下記のページを確認。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://coderinthebox.com/howto/repodata-is-2-weeks-old-install-yum-cron-run-or-yum-makecache-fast/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=coderinthebox.com"></img><div class="hbc-site-name">Coder in the Box</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://i0.wp.com/coderinthebox.com/wp-content/uploads/2016/01/server-management-video-series.jpg?fit=1280%2C720&ssl=1"></img></div><div class="hbc-text"><div class="hbc-title">YUM: Repodata is over 2 weeks old. Install yum-cron? Or run: yum makecache fast - Coder in the Box</div><div class="hbc-url">https://coderinthebox.com/howto/repodata-is-2-weeks-old-install-yum-cron-run-or-yum-makecache-fast/</div><div class="hbc-description">Have you ever ecounter this error &quot;Repodata is over 2 weeks old. Install yum-cron? Or run: yum makecache fast&quot;?  If you are running a server…</div></div></div></div></a></div></div><p>数週間、アクティブなリポジトリに接続できなかった場合に表示される模様。<br>解決は下記。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum clean all </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> Red Hat Enterprise Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Raspberry Pi 3をUSBからブートする (失敗)</title>
      <link href="2017/04/19/2033/"/>
      <url>2017/04/19/2033/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>前回、SDカードを使ってマウス、キーボード、ディスプレイなしで<strong>Raspberry Pi 3</strong>のセットアップを完了。<br>でも、SDカードって信用できないのね。<br>USBメモリのがまだましって感じ。<br>USBメモリのが扱いやすいしね。<br>あんな小さい筐体に32GBや64GBとか狂気の沙汰やで。<br>今回は下記を参考にしてセットアップしました。<br>有益な情報ありがとうございます。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://jyn.jp/raspberrypi-usb-only-boot/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=jyn.jp"></img><div class="hbc-site-name">純規の暇人趣味ブログ</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://jyn.jp/wp-core/wp-content/uploads/2016/05/raspberrypi-usb-boot-001.jpg"></img></div><div class="hbc-text"><div class="hbc-title">Raspberry PiをUSB(HDD)だけで動かす(SD不要) | 純規の暇人趣味ブログ</div><div class="hbc-url">https://jyn.jp/raspberrypi-usb-only-boot/</div><div class="hbc-description">「Raspberry PiをUSB(HDD)で起動させる」というやり方は既にあります。しかし、これは単にデータ(OS)の部分をHDDに移しただけであり、依然としてブートローダとなるSDカードは必要でした。比較的新しめのRaspberry Piでは、ブートローダーとなるSDカードす…</div></div></div></div></a></div></div><h1 id="用意するもの"><a href="#用意するもの" class="headerlink" title="用意するもの"></a>用意するもの</h1><ul><li>USBメモリ</li></ul><p>以上。</p><h1 id="ファームウェア更新"><a href="#ファームウェア更新" class="headerlink" title="ファームウェア更新"></a>ファームウェア更新</h1><p>新しいファームでないとUSBブートはできない模様。<br>下記のブログによれば、安易に後述のコマンドで更新するのは非推奨の模様。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://raspberrypi.akaneiro.jp/archives/1431" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=raspberrypi.akaneiro.jp"></img><div class="hbc-site-name">Raspberry Pi</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://s0.wp.com/i/blank.jpg"></img></div><div class="hbc-text"><div class="hbc-title">Raspberry Pi のファームウェアのアップデート</div><div class="hbc-url">https://raspberrypi.akaneiro.jp/archives/1431</div><div class="hbc-description">Raspberry Pi の最新ファームウェアは、Raspbian から rpi-update コマンドでアッ…</div></div></div></div></a></div></div><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># まずはパッケージリストを更新 sudo apt-get update # ファームウェアの最新版を取得 sudo apt-get install -y rpi-update # 更新を実行 sudo rpi-update  </span></span><br><span class="line">\<span class="comment"># USBブートを有効 echo &quot;program\_usb\_boot\_mode=1&quot; | sudo tee -a /boot/config.txt  </span></span><br><span class="line">\<span class="comment"># 再起動 sudo shutdown -r now</span></span><br></pre></td></tr></table></figure><p>再起動後、下記の結果になることを確認。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vcgencmd otp\_dump | grep 17: 17:3020000a </span><br></pre></td></tr></table></figure><h1 id="USBにパーティションを作成"><a href="#USBにパーティションを作成" class="headerlink" title="USBにパーティションを作成"></a>USBにパーティションを作成</h1><p>USBを差し込みます。<br>当然、この後フォーマットするからデータが消えます。<br>差し込んだ後、下記のコマンドで、Deviceに差し込んだUSBが表示されていることを確認。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sudo fdisk -l  </span></span><br><span class="line">Device Boot Start End Sectors Size Id Type /dev/mmcblk0p1 8192 92159 83968 41M c W95 FAT32 (LBA) /dev/mmcblk0p2 92160 62333951 62241792 29.7G 83 Linux  </span><br><span class="line">Disk /dev/sda: 28.9 GiB, 30995906560 bytes, 60538880 sectors Units: sectors of 1 \* 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disklabel <span class="built_in">type</span>: dos Disk identifier: 0x545445f1  </span><br><span class="line">Device Boot Start End Sectors Size Id Type /dev/sda1 \* 8064 60538879 60530816 28.9G c W95 FAT32 (LBA)</span><br></pre></td></tr></table></figure><p><strong>/dev/sda</strong>にデバイスがあることが確認できたので、下記のコマンドでパーティションを作成します。<br>しかし、<strong>sudo fdisk -l</strong>でデバイスが使用中になってしまった模様。<br>なので、再起動します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo parted /dev/sda GNU Parted 3.2 Using /dev/sda Welcome to GNU Parted! Type <span class="string">&#x27;help&#x27;</span> to view a list of commands. (parted) mktable msdos Warning: Partition(s) on /dev/sda are being used. Ignore/Cancel? Ignore Warning: The existing disk label on /dev/sda will be destroyed and all data on this disk will be lost. Do you want to <span class="built_in">continue</span>? Yes/No? Yes Error: Partition(s) 1 on /dev/sda have been written, but we have been unable to inform the kernel of the change, probably because it/they are <span class="keyword">in</span> use. As a result, the old partition(s) will remain <span class="keyword">in</span> use. You should reboot now before making further changes. Ignore/Cancel? Ignore</span><br></pre></td></tr></table></figure><p>再起動後、再度コマンドを実施。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo parted /dev/sda GNU Parted 3.2 Using /dev/sda Welcome to GNU Parted! Type <span class="string">&#x27;help&#x27;</span> to view a list of commands. (parted) mktable msdos Warning: The existing disk label on /dev/sda will be destroyed and all data on this disk will be lost. Do you want to <span class="built_in">continue</span>? Yes/No? Yes (parted) mkpart primary fat32 0% 100M (parted) mkpart primary ext4 100M 100% (parted) <span class="built_in">print</span> Model: TDK LoR TF10 (scsi) Disk /dev/sda: 31.0GB Sector size (logical/physical): 512B/512B Partition Table: msdos Disk Flags:  </span><br><span class="line">Number Start End Size Type File system Flags 1 1049kB 99.6MB 98.6MB primary fat32 lba 2 99.6MB 31.0GB 30.9GB primary ext4 lba  </span><br><span class="line">(parted) quit Information: You may need to update /etc/fstab.</span><br></pre></td></tr></table></figure><p>上記によって、**/dev/sda1<strong>と</strong>/dev/sda2**が作成されます。<br>続いて、フォーマット</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mkfs.vfat -n BOOT -F 32 /dev/sda1 sudo mkfs.ext4 /dev/sda2mkfs.fat 3.0.27 (2014-11-12) $ sudo mkfs.ext4 /dev/sda2 mke2fs 1.42.12 (29-Aug-2014) Creating filesystem with 7543040 4k blocks and 1888656 inodes Filesystem UUID: 4b3bdbe7-f63e-46a4-ad88-7e2a00bd40a1 Superblock backups stored on blocks: 32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, 4096000  </span><br><span class="line">Allocating group tables: <span class="keyword">done</span> Writing inode tables: <span class="keyword">done</span> Creating journal (32768 blocks): <span class="keyword">done</span> Writing superblocks and filesystem accounting information: <span class="keyword">done</span> </span><br></pre></td></tr></table></figure><h1 id="SDカードの複製"><a href="#SDカードの複製" class="headerlink" title="SDカードの複製"></a>SDカードの複製</h1><p>SDカードに全データが入っている状態なので、USBにコピーします。<br><strong>rsync</strong>で複製ができる模様。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install -y rsync</span><br></pre></td></tr></table></figure><p>次に、フォーマットした領域をマウントします。<br>Linuxは直接デバイスにアクセスするのに<strong>mount</strong>が必要なので面倒。<br>いや、Windowsも背後でExplorerに表示するために、ドライブという形でマウントはしているんですけど… 下記は、**/mnt/target<strong>、</strong>/mnt/target/boot<strong>を作成し、そこにそれぞれ</strong>/dev/sda2<strong>と</strong>/dev/sda2**をマウントします。<br>その後、rsyncでコピーを開始します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /mnt/target sudo mount /dev/sda2 /mnt/target/ sudo mkdir /mnt/target/boot sudo mount /dev/sda1 /mnt/target/boot/ sudo rsync -ax --progress / /boot /mnt/target </span><br></pre></td></tr></table></figure><h1 id="ブート情報の編集"><a href="#ブート情報の編集" class="headerlink" title="ブート情報の編集"></a>ブート情報の編集</h1><p>参考ページの手順だと上手くいきませんでしたので、頑張って調べました。<br>まず、デバイスを一意に識別する<strong>PARTUUID</strong>を調べます。<br>これにより、デバイスファイル名が変わっても安心。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo blkid /dev/mmcblk0p1: LABEL=<span class="string">&quot;boot&quot;</span> UUID=<span class="string">&quot;95E0-9AC4&quot;</span> TYPE=<span class="string">&quot;vfat&quot;</span> PARTUUID=<span class="string">&quot;85d563bf-01&quot;</span> /dev/mmcblk0p2: UUID=<span class="string">&quot;b105f9a8-f450-4976-8ac8-69053f57bab4&quot;</span> TYPE=<span class="string">&quot;ext4&quot;</span> PARTUUID=<span class="string">&quot;85d563bf-02&quot;</span> /dev/sda1: LABEL=<span class="string">&quot;BOOT&quot;</span> UUID=<span class="string">&quot;87CD-DAAB&quot;</span> TYPE=<span class="string">&quot;vfat&quot;</span> PARTUUID=<span class="string">&quot;a40eeb1f-01&quot;</span> /dev/mmcblk0: PTUUID=<span class="string">&quot;85d563bf&quot;</span> PTTYPE=<span class="string">&quot;dos&quot;</span> /dev/sda2: UUID=<span class="string">&quot;4b3bdbe7-f63e-46a4-ad88-7e2a00bd40a1&quot;</span> TYPE=<span class="string">&quot;ext4&quot;</span> PARTUUID=<span class="string">&quot;a40eeb1f-02&quot;</span></span><br></pre></td></tr></table></figure><p>次に**/mnt/target/boot/cmdline.txt<strong>を確認します。<br>**cmdline.txt</strong>は、起動時にLinux Kernelに渡されるコマンド引数を記述したテキストとのこと。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://elinux.org/RPi_cmdline.txt" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=elinux.org"></img><div class="hbc-site-name">elinux.org</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">RPi cmdline.txt - eLinux.org</div><div class="hbc-url">http://elinux.org/RPi_cmdline.txt</div></div></div></div></a></div></div><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /mnt/target/boot/cmdline.txt dwc\_otg.lpm\_enable=0 console=serial0,115200 console=tty1 root=PARTUUID=85d563bf-02 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait quiet splash plymouth.ignore-serial-consoles</span><br></pre></td></tr></table></figure><p><strong>root=PARTUUID=85d563bf-02</strong>になっているのを修正する必要があります。<br>そこで先ほどの<strong>blkid</strong>で調べたPARTUUIDを調べます。<br>USBメモリのext4になっているPARTUUIDは<strong>a40eeb1f-02</strong>になります。<br>続いて、**/mnt/target/etc/fstab<strong>を確認します。<br>**fstab</strong>は<strong>file system table</strong>の略らしい。<br>起動時に<strong>mount</strong>に読み込まれるコマンドになります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat /mnt/target/etc/fstab proc /proc proc defaults 0 0 PARTUUID=85d563bf-01 /boot vfat defaults 0 2 PARTUUID=85d563bf-02 / ext4 defaults,noatime 0 1 <span class="comment"># a swapfile is not a swap partition, no line here # use dphys-swapfile swap\[on|off\] for that</span></span><br></pre></td></tr></table></figure><p><strong>PARTUUID=85d563bf</strong>はSDカードを指しています。<br>これを<strong>a40eeb1f</strong>に置換すれば、全部変換できそうです。<br>以上より、下記のコマンドでファイルを書き換えます。<br>当然、上述のPARTUUIDは環境依存ですので適宜書き換えてください。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sed -i.bak <span class="string">&quot;s,85d563bf,a40eeb1f,&quot;</span> /mnt/target/boot/cmdline.txt sudo sed -i.bak <span class="string">&quot;s,85d563bf,a40eeb1f,&quot;</span> /mnt/target/etc/fstab</span><br></pre></td></tr></table></figure><p>ちなみに、<strong>sed</strong>はテキストとかの文字列を編集したりするコマンド。<br>String Editorの略だと思っていたら、<strong>Stream Editor</strong>の略らしい。<br><strong>-i.bak</strong>で拡張子bakで編集前のファイルのバックアップを取ってから**i(in place)**を実行します。</p><h1 id="再起動"><a href="#再起動" class="headerlink" title="再起動"></a>再起動</h1><p>アンマウントして再起動します。<br>再起動と言っても、一度SDカードを抜く必要があるので、電源を落とします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~ sudo umount /mnt/target/boot sudo umount /mnt/target sudo shutdown -h now</span><br></pre></td></tr></table></figure><p>電源が落ちたら、SDカードを抜いて、電源プラグを差し直します。<br>するとまた勝手に起動します。</p><h2 id="起動しない-ﾟдﾟ"><a href="#起動しない-ﾟдﾟ" class="headerlink" title="起動しない(ﾟдﾟ)"></a>起動しない(ﾟдﾟ)</h2><p>なんでやねん。<br>最新版はダメなのか、USBメモリがダメなのか、原因は不明。<br>とりあえず今回はここまで。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> IoT </category>
          
          <category> iot </category>
          
          <category> Raspbian </category>
          
          <category> Raspberry Pi </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MAXPATH</title>
      <link href="2017/04/19/2061/"/>
      <url>2017/04/19/2061/</url>
      
        <content type="html"><![CDATA[<p>[[“”,”\u30ed\u30fc\u30ab\u30eb\u30b0\u30eb\u30fc\u30d7\u30dd\u30ea\u30b7\u30fc\u6709\u52b9”,”#colspan#”,”\u30ed\u30fc\u30ab\u30eb\u30b0\u30eb\u30fc\u30d7\u30dd\u30ea\u30b7\u30fc\u7121\u52b9”,”#colspan#”],[“”,”App.config\u3042\u308a”,”App.config\u306a\u3057”,”App.config\u3042\u308a”,”App.config\u306a\u3057”],[“.NET 4.6.2”,”OK”,”OK”,”DirectoryNotFoundException”,”DirectoryNotFoundException”],[“.NET 4.6.1”,”OK”,”PathTooLongException”,”DirectoryNotFoundException”,”PathTooLongException”]]</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OSS PullRequests</title>
      <link href="2017/04/19/2062/"/>
      <url>2017/04/19/2062/</url>
      
        <content type="html"><![CDATA[<p>[[“Date”,”Site”,”Url”,”Title”,”Result”],[“2017\/08\/20”,”github”,”<a href="%22https://github.com/Terminals-Origin/Terminals/pull/79%22">https:\/\/github.com\/Terminals-Origin\/Terminals\/pull\/79&lt;\/a&gt;”,”Fixed ConnectionLost event blocks thread”,”Merged”],[“2017\/05\/18”,”github”,”</a><a href="%22https://github.com/Terminals-Origin/Terminals/pull/28%22">https:\/\/github.com\/Terminals-Origin\/Terminals\/pull\/28&lt;\/a&gt;”,”Vnc session crashes if click non-client area”,”Merged”],[“2017\/05\/13”,”github”,”</a><a href="%22https://github.com/shimat/opencvsharp/pull/350%22">https:\/\/github.com\/shimat\/opencvsharp\/pull\/350&lt;\/a&gt;”,”Support WhileBalance”,”Merged”],[“2017\/05\/06”,”github”,”</a><a href="%22https://github.com/shimat/opencvsharp/pull/347%22">https:\/\/github.com\/shimat\/opencvsharp\/pull\/347&lt;\/a&gt;”,”Add LshIndexParams”,”Merged”],[“2017\/05\/06”,”github”,”</a><a href="%22https://github.com/shimat/opencvsharp/pull/346%22">https:\/\/github.com\/shimat\/opencvsharp\/pull\/346&lt;\/a&gt;”,”#349: FastFeatureDetector does not work”,”Merged”],[“2017\/05\/06”,”github”,”</a><a href="%22https://github.com/shimat/opencvsharp/pull/344%22">https:\/\/github.com\/shimat\/opencvsharp\/pull\/344&lt;\/a&gt;”,”Support Tracking module”,”Merged”],[“2017\/05\/02”,”github”,”</a><a href="%22https://github.com/shimat/opencvsharp/pull/343%22">https:\/\/github.com\/shimat\/opencvsharp\/pull\/343&lt;\/a&gt;”,”#292: Support ArUco”,”Merged”],[“2017\/03\/30”,”github”,”</a><a href="%22https://github.com/shimat/opencvsharp/pull/336%22">https:\/\/github.com\/shimat\/opencvsharp\/pull\/336&lt;\/a&gt;”,”#331: SURF detector fails”,”Merged”],[“2017\/03\/21”,”github”,”</a><a href="%22https://github.com/shimat/opencvsharp/pull/330%22">https:\/\/github.com\/shimat\/opencvsharp\/pull\/330&lt;\/a&gt;”,”#329: Mat.Diag(Mat) does not reutrn a square diagonal matrix”,”Merged”],[“2016\/03\/24”,”github”,”</a><a href="%22https://github.com/Microsoft/CNTK/pull/237%22">https:\/\/github.com\/Microsoft\/CNTK\/pull\/237&lt;\/a&gt;”,”Fix Missing api-ms-win-core-path-l1-1-0.dll #224”,”Merged”]]</a></p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>紋様</title>
      <link href="2017/04/19/2060/"/>
      <url>2017/04/19/2060/</url>
      
        <content type="html"><![CDATA[<p>[[“\u548c\u540d”,”\u82f1\u8a9e”,”\u7565”],[“\u6e26\u72b6\u7d0b”,”Whorls”,”W”],[“\u5f13\u72b6\u7d0b”,”Arch”,”A”],[“\u8e44\u72b6\u7d0b”,”Loops”,”L”],[“\u7a81\u8d77\u5f13\u72b6\u7d0b”,”Tented Arch”,”T”],[“\u5074\u8e44\u72b6\u7d0b”,”Right Loop”,”R”]]</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Compact</title>
      <link href="2017/04/19/2057/"/>
      <url>2017/04/19/2057/</url>
      
        <content type="html"><![CDATA[<p>[[“\u30c7\u30fc\u30bf\/\u30b3\u30ec\u30af\u30b7\u30e7\u30f3”,”SmallObjectData”,”#colspan#”,”MiddleObjectData”,”#colspan#”,”LargeObjectData”,”#colspan#”,”LargeData”,”#colspan#”,”Data”,”#colspan#”],[“#colspan#”,”Before”,”After”,”Before”,”After”,”Before”,”After”,”Before”,”After”,”Before”,”After”],[“Collections (incl. system.namespaces)”,”1”,”1”,”1”,”1”,”1”,”1”,”1”,”1”,”1”,”1”],[“Data Size”,”51.0 mb”,”51.0 mb”,”80.1 gb”,”80.1 gb”,”100 gb”,”100 gb”,”100 gb”,”100 gb”,”51.0 mb”,”51.0 mb”],[“Storage Size”,”14.4 mb”,”14.4 mb”,”4.12 gb”,”4.12 gb”,”8.22 gb”,”8.22 gb”,”8.22 gb”,”8.22 gb”,”14.4 mb”,”14.3 mb”],[“Avg Obj Size #”,”51.0 bytes”,”51.0 bytes”,”80.1 kb”,”80.1 kb”,”100 kb”,”100 kb”,”100 kb”,”100 kb”,”51.0 bytes”,”51.0 bytes”],[“Objects #”,”1000000”,”1000000”,”1000000”,”1000000”,”1000000”,”1000000”,”1000000”,”1000000”,”1000000”,”1000000”],[“Extents #”,”0”,”0”,”0”,”0”,”0”,”0”,”0”,”0”,”0”,”0”],[“Indexes #”,”2”,”2”,”2”,”2”,”2”,”2”,”1”,”1”,”1”,”1”],[“Index Size”,”19.7 mb”,”19.7 mb”,”19.7 mb”,”19.7 mb”,”19.7 mb”,”19.7 mb”,”8.91 mb”,”8.91 mb”,”8.92 mb”,”8.92 mb”]]</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETで○○○を試してみる 一覧</title>
      <link href="2017/04/19/2058/"/>
      <url>2017/04/19/2058/</url>
      
        <content type="html"><![CDATA[<p>[[“\u30b7\u30ea\u30fc\u30ba\u540d”,”\u958b\u59cb\u6642\u671f”],[“.NET\u3067RPC\u3092\u8a66\u3057\u3066\u307f\u308b Apache Thrift\u7de8”,”2017\u5e744\u6708”],[“.NET\u3067RPC\u3092\u8a66\u3057\u3066\u307f\u308b gRPC\u7de8”,”2017\u5e743\u6708”],[“.NET\u3067\u30d1\u30b1\u30c3\u30c8\u30ad\u30e3\u30d7\u30c1\u30e3\u3092\u8a66\u3057\u3066\u307f\u308b SharpPcap\u7de8”,”2017\u5e743\u6708”],[“.NET\u3067\u30d1\u30b1\u30c3\u30c8\u30ad\u30e3\u30d7\u30c1\u30e3\u3092\u8a66\u3057\u3066\u307f\u308b Pcap.Net\u7de8”,”2017\u5e743\u6708”],[“.NET\u3067\u97f3\u58f0\u51e6\u7406\u3092\u8a66\u3057\u3066\u307f\u308b NAudio\u7de8”,”2017\u5e743\u6708”],[“.NET\u3067Python\u3092\u8a66\u3057\u3066\u307f\u308b”,”2017\u5e742\u6708”],[“.NET\u3067IBM Bluemix\u3092\u8a66\u3057\u3066\u307f\u308b”,”2016\u5e748\u6708”],[“.NET\u3067\u9854\u8a8d\u8b58\u3092\u8a66\u3057\u3066\u307f\u308b Microsoft Cognitive Services Face\u7de8”,”2016\u5e744\u6708”],[“.NET\u3067OneDrive\u3092\u8a66\u3057\u3066\u307f\u308b”,”2016\u5e743\u6708”],[“NET\u3067\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u3092\u8a66\u3057\u3066\u307f\u308b CNTK\u7de8”,”2016\u5e743\u6708”],[“.NET\u3067GPUPU\u3092\u8a66\u3057\u3066\u307f\u308b CUDA\u7de8”,”2016\u5e741\u6708”],[“.NET\u3067NoSQL\u3092\u8a66\u3057\u3066\u307f\u308b MongoDB\u7de8”,”2015\u5e7412\u6708”],[“.NET\u3067\u753b\u50cf\u51e6\u7406\u3092\u8a66\u3057\u3066\u307f\u308b OpenCVSharp\u7de8”,”2015\u5e7412\u6708”],[“.NET\u3067\u96e3\u8aad\u5316\u3092\u8a66\u3057\u3066\u307f\u308b”,”2012\u5e745\u6708”],[“.NET\u3067\u30b3\u30fc\u30c9 \u30e1\u30c8\u30ea\u30c3\u30af\u30b9\u3092\u8a66\u3057\u3066\u307f\u308b”,”2012\u5e744\u6708”]]</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Xamarin.Forms</title>
      <link href="2017/04/19/2059/"/>
      <url>2017/04/19/2059/</url>
      
        <content type="html"><![CDATA[<p>[[“\u7a2e\u985e”,”\u5185\u5bb9”],[“Forms ContentPage”,”cs\u30d5\u30a1\u30a4\u30eb”],[“Forms ContentView”,”cs\u30d5\u30a1\u30a4\u30eb”],[“Forms Xaml Page”,”cs\u30d5\u30a1\u30a4\u30eb\r\nXaml\u30d5\u30a1\u30a4\u30eb”]]</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB パフォーマンス3</title>
      <link href="2017/04/19/2054/"/>
      <url>2017/04/19/2054/</url>
      
        <content type="html"><![CDATA[<p>[[“\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30b5\u30a4\u30ba\/\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6570”,”1,000,000”],[“Small (\t51.0 bytes)”,”420.8 ms”],[“Middle (80.1 kb)”,”221577.1 ms”],[“Large (100 kb)”,”\u8a08\u6e2c\u4e0d\u53ef”]]</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB パフォーマンス4</title>
      <link href="2017/04/19/2055/"/>
      <url>2017/04/19/2055/</url>
      
        <content type="html"><![CDATA[<p>[[“\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30b5\u30a4\u30ba\/\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6570”,”1,000,000”,”1,000,000 (\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u9069\u7528\u5f8c)”],[“Small (51.0 bytes)”,”420.8 ms”,”610.8 ms”],[“Middle (80.1 kb)”,”221577.1 ms”,”586 ms”],[“Large (100 kb)”,”\u8a08\u6e2c\u4e0d\u53ef”,”588 ms”]]</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB パフォーマンス5</title>
      <link href="2017/04/19/2056/"/>
      <url>2017/04/19/2056/</url>
      
        <content type="html"><![CDATA[<p>[[“\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30b5\u30a4\u30ba\/\u691c\u7d22\u7d50\u679c\u6570”,”10”,”100”,”1,000”,”10,000”,”100,000”],[“Small (51.0 bytes)”,”610.8 ms”,”515.6 ms”,”558.5 ms”,”582.8 ms”,”956.2 ms”],[“Middle (80.1 kb)”,”586 ms”,”512 ms”,”1571.4 ms”,”7171.2 ms”,”\u8a08\u6e2c\u4e0d\u53ef”],[“Large (100 kb)”,”588 ms”,”494.7 ms”,”1870.2 ms”,”11292.6 ms”,”\u8a08\u6e2c\u4e0d\u53ef”]]</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB パフォーマンス1</title>
      <link href="2017/04/19/2052/"/>
      <url>2017/04/19/2052/</url>
      
        <content type="html"><![CDATA[<p>[[“\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\/\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6570”,”1,000,000”],[“Drop”,”228.5 ms”],[“Insert (One)”,”132881.25 ms”],[“Insert (Many)”,”131191.67 ms”],[“Select (Count\u3060\u3051)”,”11 ms”]]</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB パフォーマンス2</title>
      <link href="2017/04/19/2053/"/>
      <url>2017/04/19/2053/</url>
      
        <content type="html"><![CDATA[<p>[[“\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\/\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6570”,”25,000”,”1,000,000”],[“Drop”,”235 ms”,”246.3 ms”],[“Insert (One)”,”16815 ms”,”818100 ms”],[“Insert (Many)”,”19671 ms”,”\u8a08\u6e2c\u4e0d\u53ef”],[“Select (Count\u3060\u3051)”,”14.67 ms”,”\u8a08\u6e2c\u4e0d\u53ef”]]</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV2 Performance Test</title>
      <link href="2017/04/19/2051/"/>
      <url>2017/04/19/2051/</url>
      
        <content type="html"><![CDATA[<p>[[“\u7a2e\u5225\/\u30eb\u30fc\u30d7\u6570”,”100”,”1000”,”10000”],[“Sequential”,”228.6666667 ms”,”2270 ms\r\n”,”22841.66667 ms”],[“OpenCV”,”86.66666667 ms”,”853.6666667 ms”,”8483.333333 ms”],[“Optimized”,”128.6666667 ms”,”961.6666667 ms”,”9478 ms”],[“Optimized (Parallel)”,”88 ms”,”979.3333333 ms”,”9556 ms”],[“Optimized (C++\/CLI)”,”69.33333333 ms”,”582 ms”,”5680.333333 ms”]]</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Certifications</title>
      <link href="2017/04/19/2049/"/>
      <url>2017/04/19/2049/</url>
      
        <content type="html"><![CDATA[<p>[[“\u8cc7\u683c\u540d”,”\u767a\u884c\u5143”,”\u53d6\u5f97\u6642\u671f”],[“\u666e\u901a\u81ea\u52d5\u8eca\u514d\u8a311\u7a2e”,”\u516c\u5b89\u59d4\u54e1\u4f1a”,”2005\u5e7410\u6708”],[“\u57fa\u672c\u60c5\u5831\u6280\u8853\u8005”,”\u7d4c\u6e08\u7523\u696d\u7701”,”2007\u5e74”],[“\u5fdc\u7528\u60c5\u5831\u6280\u8853\u8005”,”\u7d4c\u6e08\u7523\u696d\u7701”,”2009\u5e74”],[“MCA Platform”,”Microsoft”,”2009\u5e741\u6708\r\n”],[“MCA Application”,”Microsoft”,”2009\u5e742\u6708”],[“MCA Security”,”Microsoft”,”2009\u5e742\u6708”],[“MCA Database”,”Microsoft”,”2009\u5e742\u6708”],[“Sun Certified Programmer for Java 2 Platform 5.0”,”Oracle”,”2009\u5e745\u6708”],[“UMTP L1”,”UML\u30e2\u30c7\u30ea\u30f3\u30b0\u63a8\u9032\u5354\u8b70\u4f1a”,”2009\u5e7412\u6708”],[“\u60c5\u5831\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b9\u30da\u30b7\u30e3\u30ea\u30b9\u30c8”,”\u7d4c\u6e08\u7523\u696d\u7701”,”2010\u5e74”],[“Exam 70-536 - TS: Microsoft .NET Framework - Application Development Foundation”,”Microsoft”,”2010\u5e7411\u6708”],[“Exam 70-505 - TS - Microsoft .NET Framework 3.5, Windows Forms Application Development”,”Microsoft”,”2012\u5e749\u6708”],[“Exam 70-563 - Pro: Designing and Developing Windows Applications Using the Microsoft .NET Framework 3.5”,”Microsoft”,”2012\u5e7410\u6708”],[“Exam 70-521: Upgrade: Transition your MCPD .NET Framework 3.5 Windows Developer Skills to MCPD .NET 4.0 Windows Applications Developer”,”Microsoft”,”2013\u5e744\u6708”],[“ITIL V3 Foundation”,”EXIN”,”2013\u5e7411\u6708”],[“Exam 70-484: Essentials of Developing Windows Store Apps Using C#”,”Microsoft”,”2016\u5e749\u6708”],[“Exam 70-485: Advanced Windows Store App Development Using C#”,”Microsoft”,”2016\u5e749\u6708”]]</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MVAHistory</title>
      <link href="2017/04/19/2048/"/>
      <url>2017/04/19/2048/</url>
      
        <content type="html"><![CDATA[<p>[[“\u30b3\u30fc\u30b9”,”\u30e2\u30b8\u30e5\u30fc\u30eb”,”\u6559\u6750”,”\u53d7\u8b1b\u65e5\u6642”,”\u30dd\u30a4\u30f3\u30c8”,”\u6642\u9593 (\u5206)”],[“C# \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 \u30b8\u30e3\u30f3\u30d7 \u30b9\u30bf\u30fc\u30c8 (MCP \u8a66\u9a13: 70-483)”,”01 | \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4e2d\u5fc3\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3001\u7ba1\u7406\u3055\u308c\u305f\u8a00\u8a9e\u3001 C#”,”01 | Slide Presentation”,”2014\/04\/27”,”1”,”5”],[“#rowspan#”,”#rowspan#”,”01 | \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4e2d\u5fc3\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3001\u7ba1\u7406\u3055\u308c\u305f\u8a00\u8a9e\u3001 C#”,”2014\/04\/27”,”3”,”59”],[“#rowspan#”,”02 | \u30b3\u30f3\u30d7\u30ec\u30c3\u30af\u30b9\u30bf\u30a4\u30d7\u306e\u69cb\u7bc9\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3084\u7d99\u627f”,”02 | Slide Presentation”,”2014\/04\/27”,”1”,”5”],[“#rowspan#”,”#rowspan#”,”02 | \u30b3\u30f3\u30d7\u30ec\u30c3\u30af\u30b9\u30bf\u30a4\u30d7\u306e\u69cb\u7bc9\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3084\u7d99\u627f”,”2014\/04\/27”,”3”,”62”],[“#rowspan#”,”03 | \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u6d41\u308c\u3092\u3092\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3059\u308b; \u30bf\u30a4\u30d7\u3068\u30b9\u30c8\u30ea\u30f3\u30b0\u3092\u64cd\u308b”,”03 | Slide Presentation”,”2014\/04\/30”,”1”,”3”],[“#rowspan#”,”#rowspan#”,”03 | \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u6d41\u308c\u3092\u3092\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3059\u308b; \u30bf\u30a4\u30d7\u3068\u30b9\u30c8\u30ea\u30f3\u30b0\u3092\u64cd\u308b”,”2014\/04\/30”,”3”,”47”],[“#rowspan#”,”04 | \u30b3\u30fc\u30c9\u306e\u53cd\u6620\u3068\u60c5\u5831\u3001 \u30ac\u30fc\u30d9\u30c3\u30b8\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u4f7f\u3063\u305f\u4f5c\u696d”,”04 | Slide Presentation”,”2014\/04\/30”,”1”,”3”],[“#rowspan#”,”#rowspan#”,”04 | \u30b3\u30fc\u30c9\u306e\u53cd\u6620\u3068\u60c5\u5831\u3001 \u30ac\u30fc\u30d9\u30c3\u30b8\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u4f7f\u3063\u305f\u4f5c\u696d”,”2014\/04\/30”,”3”,”50”],[“#rowspan#”,”05 | \u9ad8\u5ea6\u306eC#\u3001\u30bf\u30a4\u30d7\u3068\u5024\u306e\u691c\u8a3c\u3001 \u6697\u53f7\u5316\u30c6\u30af\u30cb\u30c3\u30af”,”05 | Slide Presentation”,”2014\/04\/30”,”1”,”3”],[“#rowspan#”,”#rowspan#”,”05 | \u9ad8\u5ea6\u306eC#\u3001\u30bf\u30a4\u30d7\u3068\u5024\u306e\u691c\u8a3c\u3001 \u6697\u53f7\u5316\u30c6\u30af\u30cb\u30c3\u30af”,”2014\/04\/30”,”3”,”62”],[“#rowspan#”,”06 | \u30a2\u30bb\u30f3\u30d6\u30ea\u30fc\u3068WinMD\u306e\u5206\u5272\u3001 \u8a3a\u65ad\u3068\u5668\u5177\u7de8\u6210”,”06 | Slide Presentation”,”2014\/05\/01”,”1”,”3”],[“#rowspan#”,”#rowspan#”,”06 | \u30a2\u30bb\u30f3\u30d6\u30ea\u30fc\u3068WinMD\u306e\u5206\u5272\u3001 \u8a3a\u65ad\u3068\u5668\u5177\u7de8\u6210”,”2014\/05\/01”,”3”,”57”],[“#rowspan#”,”07 | \u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u3068\u306e\u76f8\u4e92\u4f5c\u7528\u3001 \u30a6\u30a7\u30d6\u30b5\u30fc\u30d3\u30b9\u306e\u6d3b\u7528”,”07 | Slide Presentation”,”2014\/05\/02”,”1”,”3”],[“#rowspan#”,”#rowspan#”,”07 | \u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u3068\u306e\u76f8\u4e92\u4f5c\u7528\u3001 \u30a6\u30a7\u30d6\u30b5\u30fc\u30d3\u30b9\u306e\u6d3b\u7528”,”2014\/05\/02”,”3”,”46”],[“#rowspan#”,”08 | \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068XML\u306b\u5bfe\u3059\u308bLINQ\u306e\u4f7f\u7528\u3001\u30b7\u30ea\u30a2\u30eb\u5316\u306e\u57fa\u790e”,”08 | Slide Presentation”,”2014\/05\/02”,”1”,”3”],[“#rowspan#”,”#rowspan#”,”08 | \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068XML\u306b\u5bfe\u3059\u308bLINQ\u306e\u4f7f\u7528\u3001\u30b7\u30ea\u30a2\u30eb\u5316\u306e\u57fa\u790e”,”2014\/05\/02”,”3”,”53”],[“#rowspan#”,”C#\u306b\u95a2\u3057\u63a8\u85a6\u3055\u308c\u308b\u30ea\u30bd\u30fc\u30b9\u3068\u6b21\u306e\u30b9\u30c6\u30c3\u30d7”,”Q&amp;A Log | Programming in C# Jump Start”,”2014\/05\/02”,”1”,”0”],[“#rowspan#”,”#rowspan#”,”Sample Code | xamlShow”,”2014\/05\/02”,”1”,”0”],[“#rowspan#”,”#rowspan#”,”Course | Attend a more in-depth course at a location near you”,”2014\/05\/02”,”1”,”0”],[“#rowspan#”,”#rowspan#”,”Book | Microsoft\u00ae Visual C#\u00ae 2012 Step by Step, 1st Edition”,”2014\/05\/02”,”1”,”0”],[“#rowspan#”,”#rowspan#”,”Book | CLR via C#, 4th Edition”,”2014\/05\/02”,”1”,”0”],[“#rowspan#”,”#rowspan#”,”Book | Programming Windows\u00ae, Sixth Edition”,”2014\/05\/02”,”1”,”0”],[“#rowspan#”,”\u30c8\u30e9\u30c3\u30af\u5b8c\u4e86”,”\u30dc\u30fc\u30ca\u30b9\u30dd\u30a4\u30f3\u30c8”,”2014\/05\/02”,”15”,”0”],[“Build 2014 \u901f\u5831”,”Build 2014 \u901f\u5831 \uff5e Windows \u7de8 \uff5e”,”Build 2014 \u901f\u5831 \uff5e Windows \u7de8 \uff5e (Video)”,”2014\/04\/30”,”2”,”14”],[“#rowspan#”,”#rowspan#”,”Build 2014 \u901f\u5831 \uff5e Windows \u7de8 \uff5e (PDF\/1.34 MB)”,”2014\/04\/30”,”1”,”2”],[“#rowspan#”,”Build 2014 \u901f\u5831 \uff5e Azure \u7de8 \uff5e”,”Build 2014 \u901f\u5831 \uff5e Azure \u7de8 \uff5e (Video)”,”2014\/04\/30”,”2”,”5”],[“#rowspan#”,”#rowspan#”,”Build 2014 \u901f\u5831 \uff5e Azure \u7de8 \uff5e (PDF\/1.64 MB)”,”2014\/04\/30”,”1”,”2”],[“#rowspan#”,”\u30105\/29 - 30 \u958b\u50ac\u3011Build \u306e\u5185\u5bb9\u3092\u51dd\u7e2e\u3057\u3066\u304a\u5c4a\u3051! de:code “,”\u30105\/29 - 30 \u958b\u50ac\u3011Build \u306e\u5185\u5bb9\u3092\u51dd\u7e2e\u3057\u3066\u304a\u5c4a\u3051! de:code “,”2014\/04\/30”,”1”,”3”],[“\u3044\u307e\u3055\u3089\u805e\u3051\u306a\u3044 Windows \u30a2\u30d7\u30ea\u958b\u767a\u5165\u9580 XAML\/C# \u7de8”,”Windows \u30b9\u30c8\u30a2 \u30a2\u30d7\u30ea\u958b\u767a\u5165\u9580”,”Windows \u30b9\u30c8\u30a2 \u30a2\u30d7\u30ea\u958b\u767a\u5165\u9580 (Video)”,”2014\/05\/04”,”2”,”6”],[“#rowspan#”,”#rowspan#”,”Windows \u30b9\u30c8\u30a2 \u30a2\u30d7\u30ea\u958b\u767a\u5165\u9580 (PDF \u5f62\u5f0f\/698 KB)”,”2014\/05\/04”,”2”,”1”],[“#rowspan#”,”Hello World \uff5e\u30b9\u30c8\u30a2 \u30a2\u30d7\u30ea\/C# \u7de8\uff5e”,”Hello World \uff5e\u30b9\u30c8\u30a2 \u30a2\u30d7\u30ea\/C# \u7de8\uff5e (Video)”,”2014\/05\/04”,”2”,”5”],[“#rowspan#”,”#rowspan#”,”Hello World \uff5e\u30b9\u30c8\u30a2 \u30a2\u30d7\u30ea\/C# \u7de8\uff5e (PDF \u5f62\u5f0f\/648 KB)”,”2014\/05\/04”,”2”,”1”],[“#rowspan#”,”\u30a2\u30d7\u30ea\u516c\u958b\u307e\u3067\u306e\u9053\u306e\u308a”,”\u30a2\u30d7\u30ea\u516c\u958b\u307e\u3067\u306e\u9053\u306e\u308a (Video)”,”2014\/05\/04”,”2”,”10”],[“#rowspan#”,”#rowspan#”,”\u30a2\u30d7\u30ea\u516c\u958b\u307e\u3067\u306e\u9053\u306e\u308a (PDF \u5f62\u5f0f\/1.00 MB)”,”2014\/05\/04”,”2”,”1”],[“#rowspan#”,”Windows \u30b9\u30c8\u30a2 \u30a2\u30d7\u30ea\u5be9\u67fb\u306e\u6ce8\u610f\u70b9”,”Windows \u30b9\u30c8\u30a2 \u30a2\u30d7\u30ea\u5be9\u67fb\u306e\u6ce8\u610f\u70b9 (Video)”,”2014\/05\/04”,”2”,”7”],[“#rowspan#”,”#rowspan#”,”Windows \u30b9\u30c8\u30a2 \u30a2\u30d7\u30ea\u5be9\u67fb\u306e\u6ce8\u610f\u70b9 (PDF \u5f62\u5f0f\/772 KB)”,”2014\/05\/04”,”2”,”1”],[“\u521d\u3081\u3066\u306e Windows Server 2012”,”Windows Server 2012 \u306e\u5168\u4f53\u50cf “,”Windows Server 2012 \u306e\u5168\u4f53\u50cf”,”2014\/05\/06”,”3”,”50”],[“#rowspan#”,”#rowspan#”,”Windows Server 2012 Release Candidate (RC) \u8a55\u4fa1\u7248\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9”,”2014\/05\/06”,”1”,”3”],[“#rowspan#”,”#rowspan#”,”\u3010\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u8cc7\u6599\u3011Windows Server 2012 \u306e\u5168\u4f53\u50cf”,”2014\/05\/06”,”2”,”3”],[“#rowspan#”,”#rowspan#”,”\u30af\u30e9\u30a6\u30c9\u306b\u3088\u308b IT \u306e\u6700\u9069\u5316 Windows Server 2012 RC”,”2014\/05\/06”,”2”,”3”],[“#rowspan#”,”#rowspan#”,”Windows Server 2012 RC \u88fd\u54c1\u6982\u8981”,”2014\/05\/06”,”2”,”3”],[“#rowspan#”,”#rowspan#”,”Windows Server 2012 RC \u8a55\u4fa1\u30ac\u30a4\u30c9”,”2014\/05\/06”,”2”,”3”],[“#rowspan#”,”#rowspan#”,”\u30c6\u30b9\u30c8”,”2014\/05\/06”,”5”,”5”],[“#rowspan#”,”Windows Server 2012: \u4eee\u60f3\u5316\u3092\u8d85\u3048\u308b\u6a5f\u80fd”,”Beyond Virtualization with Windows Server 2012 Part 1 (\u82f1\u8a9e)”,”2014\/05\/11”,”3”,”24”],[“#rowspan#”,”#rowspan#”,”Beyond Virtualization with Windows Server 2012 Part 2 (\u82f1\u8a9e) “,”2014\/05\/11”,”3”,”25”],[“#rowspan#”,”#rowspan#”,”\u30c6\u30b9\u30c8”,”2014\/05\/11”,”5”,”5”],[“#rowspan#”,”Windows Server 2012: \u591a\u6570\u30b5\u30fc\u30d0\u30fc\u306e\u6a5f\u80fd”,”Windows Server 2012, The Power of Many Servers Part 1 (\u82f1\u8a9e)\r\n”,”2014\/05\/11”,”3”,”21”],[“#rowspan#”,”#rowspan#”,”Windows Server 2012, The Power of Many Servers Part 2 (\u82f1\u8a9e)”,”2014\/05\/11”,”3”,”28”],[“#rowspan#”,”#rowspan#”,”\u3010\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u8cc7\u6599\u3011Windows Server 2012: \u591a\u6570\u30b5\u30fc\u30d0\u30fc\u306e\u6a5f\u80fd”,”2014\/05\/11”,”2”,”10”],[“#rowspan#”,”#rowspan#”,”\u30c6\u30b9\u30c8”,”2014\/05\/11”,”5”,”5”]]</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Profile</title>
      <link href="2017/04/19/2050/"/>
      <url>2017/04/19/2050/</url>
      
        <content type="html"><![CDATA[<p>[[“\u540d\u524d”,”Takuya Takeuchi”,”\u65e5\u672c\u4eba”],[“\u8077\u696d”,”\u30d7\u30ed\u30b0\u30e9\u30de\u30fc”,”PM\u6bd4\u7387\u304c\u591a\u3044\u4e2d\u3001\u6570\u5c11\u306a\u3044\u6280\u8853\u5c02\u653b\u306e\u30a8\u30f3\u30b8\u30cb\u30a2\r\n\u203b\u767a\u8a00\u306f\u3059\u3079\u3066\u500b\u4eba\u306b\u5e30\u5c5e\u3057\u307e\u3059\u3002\u6240\u5c5e\u3059\u308b\u7d44\u7e54\u306e\u516c\u5f0f\u898b\u89e3\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002”],[“\u5834\u6240”,”\u611b\u77e5\u770c”,”\u540d\u53e4\u5c4b\u8fd1\u90ca”],[“\u8da3\u5473”,”\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0”,”C# (WinForms + WPF)”],[“#rowspan#”,”\u30d5\u30a3\u30c3\u30c8\u30cd\u30b9\u30fb\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0”,”\u4f53\u578b\u7dad\u6301\u3068\u4f53\u529b\u7dad\u6301\u304c\u30e1\u30a4\u30f3”],[“Web”,”Blog”,”http:\/\/taktak.jp\/“],[“#rowspan#”,”Github”,”https:\/\/github.com\/takuya-takeuchi”],[“#rowspan#”,”Facebook”,”https:\/\/<a href="http://www.facebook.com///takuya.takeuchi.sns&quot;/],/[&quot;#rowspan#&quot;,&quot;Twitter&quot;,&quot;https:\\/\\/twitter.com\\/takuya\_takeuchi&quot;\]\]">www.facebook.com\\/takuya.takeuchi.sns&quot;\],\[&quot;#rowspan#&quot;,&quot;Twitter&quot;,&quot;https:\\/\\/twitter.com\\/takuya\_takeuchi&quot;\]\]</a></p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Redmine_Log_Level</title>
      <link href="2017/04/19/2047/"/>
      <url>2017/04/19/2047/</url>
      
        <content type="html"><![CDATA[<p>[[“\u30ec\u30d9\u30eb”,”\u610f\u5473”],[“unknown”,”\u4e0d\u660e”],[“fatal”,”\u81f4\u547d\u7684”],[“error”,”\u30a8\u30e9\u30fc”],[“warn”,”\u8b66\u544a”],[“info”,”\u60c5\u5831”],[“debug”,”\u30c7\u30d0\u30c3\u30b0”]]</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CodeMetricsTestReport8</title>
      <link href="2017/04/19/2045/"/>
      <url>2017/04/19/2045/</url>
      
        <content type="html"><![CDATA[<p>[[“\u30e1\u30c8\u30ea\u30c3\u30af\u30b9\u9805\u76ee”,”ForShort”,”ForLong”,”ForEachShort”,”ForEachLong”,”LinqShort”,”LinqLong”],[“MaintainabilityIndex \r\n(\u4fdd\u5b88\u5bb9\u6613\u6027\u6307\u6570)”,”81”,”77”,”82”,”78”,”77”,”77”],[“CyclomaticComplexity\r\n (\u30b5\u30a4\u30af\u30ed\u30de\u30c6\u30a3\u30c3\u30af\u8907\u96d1\u5ea6)”,”2”,”2”,”2”,”2”,”3”,”3”],[“ClassCoupling \r\n(\u30af\u30e9\u30b9\u7d50\u5408\u5ea6)”,”2”,”2”,”2”,”2”,”4”,”4”],[“DepthOfInheritance \r\n(\u7d99\u627f\u306e\u6df1\u3055)”,”-“,”-“,”-“,”-“,”-“,”-“],[“LinesOfCode\r\n (\u30b3\u30fc\u30c9\u884c)”,”2”,”3”,”2”,”3”,”3”,”3”]]</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CodeMetricsTestReport9</title>
      <link href="2017/04/19/2046/"/>
      <url>2017/04/19/2046/</url>
      
        <content type="html"><![CDATA[<p>[[“\u30e1\u30c8\u30ea\u30c3\u30af\u30b9\u9805\u76ee”,”ForShort”,”ForLong”,”ForEachShort”,”ForEachLong”,”LinqShort”,”LinqLong”],[“MaintainabilityIndex \r\n(\u4fdd\u5b88\u5bb9\u6613\u6027\u6307\u6570)”,”72”,”72”,”69”,”69”,”74”,”74”],[“CyclomaticComplexity\r\n (\u30b5\u30a4\u30af\u30ed\u30de\u30c6\u30a3\u30c3\u30af\u8907\u96d1\u5ea6)”,”2”,”2”,”2”,”2”,”3”,”3”],[“ClassCoupling \r\n(\u30af\u30e9\u30b9\u7d50\u5408\u5ea6)”,”2”,”2”,”2”,”2”,”4”,”4”],[“DepthOfInheritance \r\n(\u7d99\u627f\u306e\u6df1\u3055)”,”-“,”-“,”-“,”-“,”-“,”-“],[“LinesOfCode\r\n (\u30b3\u30fc\u30c9\u884c)”,”5”,”5”,”6”,”6”,”4”,”4”]]</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CodeMetricsTestReport5</title>
      <link href="2017/04/19/2042/"/>
      <url>2017/04/19/2042/</url>
      
        <content type="html"><![CDATA[<p>[[“\u30e1\u30c8\u30ea\u30c3\u30af\u30b9\u9805\u76ee”,”IImagineBreaker”,”ISupernaturalPower”,”IAccelerator”,”IMagic”,”IAutoReverse”],[“MaintainabilityIndex \r\n(\u4fdd\u5b88\u5bb9\u6613\u6027\u6307\u6570)”,”100”,”100”,”100”,”100”,”100”],[“CyclomaticComplexity\r\n (\u30b5\u30a4\u30af\u30ed\u30de\u30c6\u30a3\u30c3\u30af\u8907\u96d1\u5ea6)”,”2”,”1”,”0”,”1”,”0”],[“ClassCoupling \r\n(\u30af\u30e9\u30b9\u7d50\u5408\u5ea6)”,”2”,”0”,”1”,”0”,”1”],[“DepthOfInheritance \r\n(\u7d99\u627f\u306e\u6df1\u3055)”,”0”,”0”,”0”,”0”,”0”],[“LinesOfCode\r\n (\u30b3\u30fc\u30c9\u884c)”,”0”,”0”,”0”,”0”,”0”]]</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CodeMetricsTestReport6</title>
      <link href="2017/04/19/2043/"/>
      <url>2017/04/19/2043/</url>
      
        <content type="html"><![CDATA[<p>[[“\u30e1\u30c8\u30ea\u30c3\u30af\u30b9\u9805\u76ee”,”Family”,”FireVampire”],[“MaintainabilityIndex \r\n(\u4fdd\u5b88\u5bb9\u6613\u6027\u6307\u6570)”,”100”,”100”],[“CyclomaticComplexity\r\n (\u30b5\u30a4\u30af\u30ed\u30de\u30c6\u30a3\u30c3\u30af\u8907\u96d1\u5ea6)”,”1”,”1”],[“ClassCoupling \r\n(\u30af\u30e9\u30b9\u7d50\u5408\u5ea6)”,”0”,”1”],[“DepthOfInheritance \r\n(\u7d99\u627f\u306e\u6df1\u3055)”,”1”,”2”],[“LinesOfCode\r\n (\u30b3\u30fc\u30c9\u884c)”,”1”,”1”]]</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CodeMetricsTestReport7</title>
      <link href="2017/04/19/2044/"/>
      <url>2017/04/19/2044/</url>
      
        <content type="html"><![CDATA[<p>[[“\u30e1\u30c8\u30ea\u30c3\u30af\u30b9\u9805\u76ee”,”Cthugha”,”Nyarlathotep”],[“MaintainabilityIndex \r\n(\u4fdd\u5b88\u5bb9\u6613\u6027\u6307\u6570)”,”97”,”97”],[“CyclomaticComplexity\r\n (\u30b5\u30a4\u30af\u30ed\u30de\u30c6\u30a3\u30c3\u30af\u8907\u96d1\u5ea6)”,”2”,”2”],[“ClassCoupling \r\n(\u30af\u30e9\u30b9\u7d50\u5408\u5ea6)”,”2”,”1”],[“DepthOfInheritance \r\n(\u7d99\u627f\u306e\u6df1\u3055)”,”2”,”2”],[“LinesOfCode\r\n (\u30b3\u30fc\u30c9\u884c)”,”2”,”2”]]</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CodeMetricsTestReport2</title>
      <link href="2017/04/19/2039/"/>
      <url>2017/04/19/2039/</url>
      
        <content type="html"><![CDATA[<p>[[“\u30e1\u30c8\u30ea\u30c3\u30af\u30b9\u9805\u76ee”,”CodeMetricsTest.exe”,”CodeMetricsTest”,”Program”,”Main(string[]) : void”,”Program()”],[“MaintainabilityIndex \r\n(\u4fdd\u5b88\u5bb9\u6613\u6027\u6307\u6570)”,”23”,”23”,”23”,”15”,”100”],[“CyclomaticComplexity\r\n (\u30b5\u30a4\u30af\u30ed\u30de\u30c6\u30a3\u30c3\u30af\u8907\u96d1\u5ea6)”,”2”,”2”,”2”,”1”,”1”],[“ClassCoupling \r\n(\u30af\u30e9\u30b9\u7d50\u5408\u5ea6)”,”0”,”0”,”0”,”0”,”0”],[“DepthOfInheritance \r\n(\u7d99\u627f\u306e\u6df1\u3055)”,”1”,”1”,”1”,”-“,”-“],[“LinesOfCode\r\n (\u30b3\u30fc\u30c9\u884c)”,”502”,”502”,”502”,”501”,”1”]]</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CodeMetricsTestReport3</title>
      <link href="2017/04/19/2040/"/>
      <url>2017/04/19/2040/</url>
      
        <content type="html"><![CDATA[<p>[[“\u30e1\u30c8\u30ea\u30c3\u30af\u30b9\u9805\u76ee”,”Case1”,”Case2”,”Case3”,”Case4”,”Case5”,”Case6”],[“MaintainabilityIndex \r\n(\u4fdd\u5b88\u5bb9\u6613\u6027\u6307\u6570)”,”71”,”66”,”67”,”67”,”78”,”70”],[“CyclomaticComplexity\r\n (\u30b5\u30a4\u30af\u30ed\u30de\u30c6\u30a3\u30c3\u30af\u8907\u96d1\u5ea6)”,”4”,”7”,”4”,”4”,”2”,”4”],[“ClassCoupling \r\n(\u30af\u30e9\u30b9\u7d50\u5408\u5ea6)”,”2”,”2”,”2”,”2”,”1”,”1”],[“DepthOfInheritance \r\n(\u7d99\u627f\u306e\u6df1\u3055)”,”-“,”-“,”-“,”-“,”-“,”-“],[“LinesOfCode\r\n (\u30b3\u30fc\u30c9\u884c)”,”5”,”8”,”7”,”7”,”3”,”5”]]</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CodeMetricsTestReport4</title>
      <link href="2017/04/19/2041/"/>
      <url>2017/04/19/2041/</url>
      
        <content type="html"><![CDATA[<p>[[“\u30e1\u30c8\u30ea\u30c3\u30af\u30b9\u9805\u76ee”,”Human”,”Student”,”KamijoToma”,”Accelerator”,”TsuchimikadoMotoharu”],[“MaintainabilityIndex \r\n(\u4fdd\u5b88\u5bb9\u6613\u6027\u6307\u6570)”,”100”,”100”,”95”,”96”,”95”],[“CyclomaticComplexity\r\n (\u30b5\u30a4\u30af\u30ed\u30de\u30c6\u30a3\u30c3\u30af\u8907\u96d1\u5ea6)”,”1”,”1”,”5”,”3”,”4”],[“ClassCoupling \r\n(\u30af\u30e9\u30b9\u7d50\u5408\u5ea6)”,”0”,”1”,”5”,”4”,”5”],[“DepthOfInheritance \r\n(\u7d99\u627f\u306e\u6df1\u3055)”,”1”,”2”,”3”,”3”,”3”],[“LinesOfCode\r\n (\u30b3\u30fc\u30c9\u884c)”,”1”,”1”,”5”,”3”,”4”]]</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CodeMetricsTestReport</title>
      <link href="2017/04/19/2038/"/>
      <url>2017/04/19/2038/</url>
      
        <content type="html"><![CDATA[<p>[[“\u30e1\u30c8\u30ea\u30c3\u30af\u30b9\u9805\u76ee”,”CodeMetricsTest.exe”,”CodeMetricsTest”,”Program”,”Main(string[]) : void”,”Program()”],[“MaintainabilityIndex \r\n(\u4fdd\u5b88\u5bb9\u6613\u6027\u6307\u6570)”,”100”,”100”,”100”,”100”,”100”],[“CyclomaticComplexity\r\n (\u30b5\u30a4\u30af\u30ed\u30de\u30c6\u30a3\u30c3\u30af\u8907\u96d1\u5ea6)”,”2”,”2”,”2”,”1”,”1”],[“ClassCoupling \r\n(\u30af\u30e9\u30b9\u7d50\u5408\u5ea6)”,”0”,”0”,”0”,”0”,”0”],[“DepthOfInheritance \r\n(\u7d99\u627f\u306e\u6df1\u3055)”,”1”,”1”,”1”,”-“,”-“],[“LinesOfCode\r\n (\u30b3\u30fc\u30c9\u884c)”,”1”,”1”,”1”,”0”,”1”]]</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Raspberry Pi 3をマウス、キーボード、ディスプレイなしでセットアップ</title>
      <link href="2017/04/14/2021/"/>
      <url>2017/04/14/2021/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>ようやくIoTデビューです。<br>やがては、<strong>Windows 10 IoT</strong>とか使って何かしたいです。<br>が、Raspberry Piは初めてなので、下記を参考にしてセットアップしました。<br>有益な情報ありがとうございます。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://karaage.hatenadiary.jp/entry/2015/07/15/080000" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=karaage.hatenadiary.jp"></img><div class="hbc-site-name">karaage. [からあげ]</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/k/karaage/20150428/20150428225756.jpg"></img></div><div class="hbc-text"><div class="hbc-title">Raspberry Piをディスプレイ・キーボード・マウス無しの三重苦でもセットアップする方法 - karaage. [からあげ]</div><div class="hbc-url">http://karaage.hatenadiary.jp/entry/2015/07/15/080000</div><div class="hbc-description">おらの村にはディスプレイもねぇ！キーボードもねぇ！マウスもねぇ！ 色々な事情で、モニタやキーボードがないところでRaspberry Piをセットアップしたくなることありますよね？（私はあります）。sshにさえアクセスできれば！ファイルに直接アクセスできればなんとかなるのに！という…</div></div></div></div></a></div></div><h1 id="用意するもの"><a href="#用意するもの" class="headerlink" title="用意するもの"></a>用意するもの</h1><ul><li>Raspberry Pi 3 Model B</li><li>マイクロSDカード</li><li>OS</li><li>電源アダプタ</li><li>LANケーブル</li></ul><p>以上。<br>マウスとキーボード、ディスプレイは使いません。<br>接続が面倒なので。</p><h1 id="Raspbianのダウンロード"><a href="#Raspbianのダウンロード" class="headerlink" title="Raspbianのダウンロード"></a>Raspbianのダウンロード</h1><p>何はともあれ、OSを入手。<br>公式サイトである下記から入手できます。<br>2017/04/14の時点で、最新版は2017-04-10です。<br><strong>RASPBIAN JJESSIE WITH PIXEL</strong>と<strong>RASPBIAN JESSIE LITE</strong>と違いは初期状態で入っているパッケージの違いです。<br>大きいのはGUIの有無です。<br>今回はRASPBIAN JJESSIE WITH PIXELを選択。<br>約1.5GBあります。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://www.raspberrypi.org/downloads/raspbian/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=www.raspberrypi.org"></img><div class="hbc-site-name">Raspberry Pi</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://www.raspberrypi.org/homepage-9df4b/homepage-9df4b/static/opengraph-a81a510f26ed85d2045617c0084b71c8.png"></img></div><div class="hbc-text"><div class="hbc-title">Operating system images – Raspberry Pi</div><div class="hbc-url">https://www.raspberrypi.org/downloads/raspbian/</div><div class="hbc-description">The Raspberry Pi is a tiny and affordable computer that you can use to learn programming through fun, practical projects. Join the global Ra…</div></div></div></div></a></div></div><p>混雑しているので、ミラーサイトを利用したほうが無難です。ほとんどつながりませんでしたし、回線激重でした。<br>混雑しているとこんなお詫びが。</p><p><a href="../../../../public/2017/04/screencapture-director-downloads-raspberrypi-org-raspbian-images-raspbian-2017-04-10-2017-04-10-raspbian-jessie-zip-1492171127206.png"><img src="../../../../public/2017/04/screencapture-director-downloads-raspberrypi-org-raspbian-images-raspbian-2017-04-10-2017-04-10-raspbian-jessie-zip-1492171127206.png"></a> ミラーサイトは<a href="http://ftp.jaist.ac.jp/pub/raspberrypi/raspbian/images/">こちら</a><br>。</p><h1 id="SDカードの初期化"><a href="#SDカードの初期化" class="headerlink" title="SDカードの初期化"></a>SDカードの初期化</h1><p>WindowsのExplorerからでも初期化できますが、最適な性能を得るために専用ソフトを使いましょう、とGoogle先生に言われたので従います。<br>でも下記のツールでフォーマットしてもFAT32だった。意味なくね? ダウンロードは<a href="https://www.sdcard.org/jp/downloads/formatter_4/eula_windows/index.html">SDカードフォーマッター Windows用</a>から。<br>Install Sheildのセットアップが始まるので、粛々と進めます。<br>初期化は特に説明は不要なほど簡単なので省略。</p><h1 id="OSの書き込み"><a href="#OSの書き込み" class="headerlink" title="OSの書き込み"></a>OSの書き込み</h1><p><strong>Etcher</strong>という非常にUIの美しい書き込みツールがあるので、それを使いましょう。しかもポータブル版があるのが最高。<br>公式サイトは下記。<br>2017/04/14の時点で、最新版は1.0.0-beta.19です。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://etcher.io/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=etcher.io"></img><div class="hbc-site-name">balenaEtcher</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://www.balena.io/etcher/avatar.png"></img></div><div class="hbc-text"><div class="hbc-title">balenaEtcher - Flash OS images to SD cards &amp; USB drives</div><div class="hbc-url">https://etcher.io/</div><div class="hbc-description">A cross-platform tool to flash OS images onto SD cards and USB drives safely and easily. Free and open source for makers around the world.</div></div></div></div></a></div></div><p>画面はこんなの。</p><p><a href="../../../../public/2017/04/30b083ca07e7a59f1bb1edbe3cbf8b6b.png"><img src="../../../../public/2017/04/30b083ca07e7a59f1bb1edbe3cbf8b6b.png"></a><br> 使い方は簡単。</p><ol><li>左端の<strong>Select image</strong>でダウンロードしたRASPBIANのzipを選択</li><li>中央の<strong>Select drive</strong>でSDカードを挿入したドライブを選択</li><li>右端の**Flash!**で書き込み</li></ol><p>以上。簡単です。素晴らしい。</p><h1 id="SSHを有効にする"><a href="#SSHを有効にする" class="headerlink" title="SSHを有効にする"></a>SSHを有効にする</h1><p>マウスやキーボードはつなぎたくないので、SSHをデフォルトで有効にします。<br>が、途中のバージョンでSSHが初期状態で無効になった模様。<br>以下の記事を参考に回避します。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://www.raspi.jp/2016/12/raspbian-2016-11-25-release/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=www.raspi.jp"></img><div class="hbc-site-name">Japanese Raspberry Pi Users Group</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">Raspbian 2016-11-25リリース</div><div class="hbc-url">http://www.raspi.jp/2016/12/raspbian-2016-11-25-release/</div><div class="hbc-description">Raspbian 2016-11-25がリリースされました。https://www.raspberrypi.org/blog/a-security-update-for-raspbian-pixel/昨今のIoTデバイスへの攻撃を考慮して、SSHサーバーがデフォルトで無効…</div></div></div></div></a></div></div><p>要するに、作成したSDカードの**/boot<strong>に</strong>ssh**という空のフォルダを作成する、というだけです。<br>下記のような感じ。</p><p><a href="../../../../public/2017/04/ad82d3a67a89eaceec5b047735f92f25.png"><img src="../../../../public/2017/04/ad82d3a67a89eaceec5b047735f92f25-1024x611.png"></a><br> 作成が終わったら、SDカード、LANケーブルをRaspberry Piに差し込み、電源アダプタを接続します。<br>すると自動で起動します。</p><h1 id="IPを探索"><a href="#IPを探索" class="headerlink" title="IPを探索"></a>IPを探索</h1><p>SSHで接続するには、IPが必要ですが、まだログインしていないし、マウス、キーボードはおろか、ディスプレイもないのでIPがわかりません。<br>なので、ルータのログとか情報、または何かしらツールでIPを調べます。<br>有線NICのMACアドレスは<strong>B8:27:EB</strong>で始まる値のようです。<br>下記を参考にしました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://boysenberrypi.hatenadiary.jp/entry/2014/03/29/222028" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=boysenberrypi.hatenadiary.jp"></img><div class="hbc-site-name">落書き以上、技術メモ以下</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://ogimage.blog.st-hatena.com/12921228815712697031/12921228815720713163/1396099350"></img></div><div class="hbc-text"><div class="hbc-title">Raspberry PiのMACアドレスはROMから読んでいない件 - 落書き以上、技術メモ以下</div><div class="hbc-url">http://boysenberrypi.hatenadiary.jp/entry/2014/03/29/222028</div><div class="hbc-description">Raspberry PiのMACアドレスはEEPROMなどから読み込んではいないようです。 xinu/docs/arm/rpi/SMSC-LAN9512.rst at master · xinu-os/xinu · GitHub には次のように書いています。 To have a …</div></div></div></div></a></div></div><p>ですので、ルータからの接続情報を見たら<br><a href="../../../../public/2017/04/screencapture-192-168-11-1-cgi-bin-cgi-1492175093310.png"><img src="../../../../public/2017/04/screencapture-192-168-11-1-cgi-bin-cgi-1492175093310.png"></a><br> みたいになります。</p><h1 id="SSHでログイン"><a href="#SSHでログイン" class="headerlink" title="SSHでログイン"></a>SSHでログイン</h1><p><strong>Windows 10 Anniversary Update</strong>があったので、<strong>Bash on Ubuntu on Windows</strong>でログイン。<br>こんな感じ。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">XXXXXX@YYYYYYY:~$ ssh pi@192.168.11.17 The authenticity of host <span class="string">&#x27;192.168.11.17 (192.168.11.17)&#x27;</span> can<span class="string">&#x27;t be established. ECDSA key fingerprint is 86:1a:cd:e6:fc:d2:85:70:42:1c:0d:a2:6f:82:88:77. Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added &#x27;</span>192.168.11.17<span class="string">&#x27; (ECDSA) to the list of known hosts. pi@192.168.11.17&#x27;</span>s password:  </span><br><span class="line">The programs included with the Debian GNU/Linux system are free software; the exact distribution terms <span class="keyword">for</span> each program are described <span class="keyword">in</span> the individual files <span class="keyword">in</span> /usr/share/doc/\*/copyright.  </span><br><span class="line">Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. Last login: Mon Apr 10 10:09:47 2017  </span><br><span class="line">SSH is enabled and the default password <span class="keyword">for</span> the <span class="string">&#x27;pi&#x27;</span> user has not been changed. This is a security risk - please login as the <span class="string">&#x27;pi&#x27;</span> user and <span class="built_in">type</span> <span class="string">&#x27;passwd&#x27;</span> to <span class="built_in">set</span> a new password.  </span><br><span class="line">pi@raspberrypi:~ $</span><br></pre></td></tr></table></figure><p>初期パスワードは<strong>raspberry</strong>です。<br>ログインが終わったら変更しましょう。<br>変更手順はいつか….</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> IoT </category>
          
          <category> iot </category>
          
          <category> Raspbian </category>
          
          <category> Raspberry Pi </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その44 thriftファイルからドキュメントを生成する</title>
      <link href="2017/04/14/2016/"/>
      <url>2017/04/14/2016/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p><a href="https://taktak.jp/2017/03/27/1947">開発メモ その35 protoファイルからドキュメントを生成する</a>と同じように、APIドキュメントを生成できないか、と思って調べてみました。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>なんと、<strong>Thrift.exe</strong>自体がドキュメントを生成できる模様。<br>構文は簡単で</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thrift.exe --gen html &lt;thriftファイル&gt;</span><br></pre></td></tr></table></figure><p>です。<br>これにより、カレントディレクトリ内部に、<strong>gen-html</strong>フォルダが生成され、</p><ul><li>index.html</li><li>style.css</li><li>&lt;thriftファイル内のサービス&gt;.html</li></ul><p>という感じのファイルが出来ます。<br><strong>index.html</strong>は、普通に目次ですね。</p><figure class="highlight thrift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TestStruct</span> </span>&#123; /\*\* Unique id \*/ <span class="number">1</span>: <span class="built_in">string</span> id, /\*\* Value \*/ <span class="number">2</span>: <span class="built_in">i32</span> value = <span class="number">10</span>, &#125;  </span><br><span class="line">/\*\* Image manipulation <span class="class"><span class="keyword">service</span> \*/ <span class="title">service</span> imageProcService </span>&#123; /\*\* \* Invert passed image <span class="built_in">binary</span> \*/ <span class="built_in">binary</span> Revert(<span class="number">1</span>:<span class="built_in">binary</span> image,<span class="number">2</span>:<span class="built_in">i32</span> width,<span class="number">3</span>:<span class="built_in">i32</span> height, <span class="number">4</span>:TestStruct test), &#125;</span><br></pre></td></tr></table></figure><p>上記の<strong>thriftファイル</strong>を渡せば下記のようなドキュメントが生成されます。</p><p><a href="../../../../public/2017/04/screencapture-file-D-Works-Demo-RPC-ApacheTrift1-gen-html-ImageProcService-html-1492099378398.png"><img src="../../../../public/2017/04/screencapture-file-D-Works-Demo-RPC-ApacheTrift1-gen-html-ImageProcService-html-1492099378398.png"></a><br> コメントや既定値もきちんと反映されます。</p>]]></content>
      
      
      <categories>
          
          <category> remote-procedure-call </category>
          
          <category> Apache Thrift </category>
          
          <category> Remote Procedure Call </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その43 OpenCvSharp.MatからROIを指定してRawを抜き出す</title>
      <link href="2017/04/12/2014/"/>
      <url>2017/04/12/2014/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>掲題の件、普通は下記のような形でRAWデータ **(ここでは、画素値だけを格納したデータ形式)**だけを抜き出す。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mat = Cv2.ImRead(<span class="string">@&quot;Test.png&quot;</span>, ImreadModes.GrayScale); <span class="keyword">var</span> raw = <span class="keyword">new</span> <span class="keyword">byte</span>\[mat.Total()\]; Marshal.Copy(mat.Data, raw, <span class="number">0</span>, raw.Length);</span><br></pre></td></tr></table></figure><p>問題は、あるMatから<strong>ROI</strong>を指定した後に、ROIで抽出されたMatをRAWデータを抜き出す場合。<br>つまり下記のようなケース。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mat = Cv2.ImRead(<span class="string">@&quot;Test.png&quot;</span>, ImreadModes.GrayScale);  </span><br><span class="line"><span class="comment">// ROIを設定 var cropped = new Mat(mat, new Rect(50, 50, 100, 100));  </span></span><br><span class="line"><span class="keyword">var</span> raw = <span class="keyword">new</span> <span class="keyword">byte</span>\[cropped.Total()\]; Marshal.Copy(cropped.Data, raw, <span class="number">0</span>, raw.Length);</span><br></pre></td></tr></table></figure><p>上記のケースで抜き出されるRAWデータは壊れているようなデータになる。<br>ROIを指定した場合、抜き出されたMatは、元のMatのデータ領域を指し示しているだけで、コピーでは無い。<br>そのため、抜き出されたMatのDataプロパティからポインタを介してメモリ領域から連続したデータを抜き出しても意味が無い。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>回答は下記。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mat = Cv2.ImRead(<span class="string">@&quot;Test.png&quot;</span>, ImreadModes.GrayScale);  </span><br><span class="line"><span class="comment">// ROIを設定 var temp = new Mat(mat, new Rect(50, 50, 100, 100));  </span></span><br><span class="line"><span class="comment">// ROIを設定した領域を新しいMatとして切り出す var cropped = new Mat(100, 100, MatType.CV\_8U); temp.CopyTo(cropped);  </span></span><br><span class="line"><span class="keyword">var</span> raw = <span class="keyword">new</span> <span class="keyword">byte</span>\[cropped.Total()\]; Marshal.Copy(cropped.Data, raw, <span class="number">0</span>, raw.Length);</span><br></pre></td></tr></table></figure><p><strong>OpenCvSharp.Mat.CopyToメソッド</strong>を利用して、ROIで切り出したMatを新しく確保したMatにコピーしています。<br>これで意図した結果になります。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> C# </category>
          
          <category> マルチメディア </category>
          
          <category> OpenCV </category>
          
          <category> OpenCvSharp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その42 環境変数PATHの最大長を2047から4095に緩和する</title>
      <link href="2017/04/11/2011/"/>
      <url>2017/04/11/2011/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>開発環境に<strong>Visual Studio</strong>、<strong>SQL Server</strong>、<strong>Intel製品</strong>、<strong>CUDA</strong>とかインストールしていると、環境変数PAHTの長さが恐ろしいことになる。今数えてみたら、2400を超えていた。<br>試しに整理してみたら、</p><ul><li>C:\Intel\INDE\code_builder_5.2.0.65\bin\GTPin</li><li>C:\Intel\INDE\code_builder_5.2.0.65\bin\Pin</li><li>C:\Intel\INDE\code_builder_5.2.0.65\bin\x64</li><li>C:\Intel\INDE\code_builder_5.2.0.65\bin\x86</li><li>C:\Intel\INDE\IDEintegration\ANT</li><li>C:\Intel\INDE\IDEintegration\NDK</li><li>C:\Intel\INDE\IDEintegration\NDK\build\tools</li><li>C:\Intel\INDE\IDEintegration\SDK\platform-tools</li><li>C:\Intel\INDE\IDEintegration\SDK\tools</li><li>C:\Intel\INDE\media_sdk_6.0.0.388\bin\win32</li><li>C:\Intel\INDE\media_sdk_6.0.0.388\bin\x64</li><li>C:\Program Files (x86)\Calibre2\</li><li>C:\Program Files (x86)\Common Files\Acronis\SnapAPI\</li><li>C:\Program Files (x86)\Common Files\Microsoft Shared\Windows Live</li><li>C:\Program Files (x86)\GtkSharp\2.12\bin</li><li>C:\Program Files (x86)\Microsoft ASP.NET\ASP.NET Web Pages\v1.0\</li><li>C:\Program Files (x86)\Microsoft SDKs\TypeScript\1.0\</li><li>C:\Program Files (x86)\Microsoft SQL Server\90\Tools\binn\</li><li>C:\Program Files (x86)\nodejs\</li><li>C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common</li><li>C:\Program Files (x86)\Skype\Phone\</li><li>C:\Program Files (x86)\Windows Kits\10\Windows Performance Toolkit\</li><li>C:\Program Files (x86)\Windows Kits\8.0\Windows Performance Toolkit\</li><li>C:\Program Files (x86)\Windows Kits\8.1\Windows Performance Toolkit\</li><li>C:\Program Files (x86)\Windows Live\Shared</li><li>C:\Program Files\CloudFoundry</li><li>C:\Program Files\Common Files\Microsoft Shared\Windows Live</li><li>C:\Program Files\dotnet\</li><li>C:\Program Files\Git\cmd</li><li>C:\Program Files\IBM\Bluemix\bin</li><li>C:\Program Files\Microsoft DNX\Dnvm\</li><li>C:\Program Files\Microsoft MPI\Bin\</li><li>C:\Program Files\Microsoft SQL Server\110\Tools\Binn\</li><li>C:\Program Files\Microsoft SQL Server\120\Tools\Binn\</li><li>C:\Program Files\Microsoft SQL Server\130\Tools\Binn\</li><li>C:\Program Files\Microsoft Windows Performance Toolkit\</li><li>C:\Program Files\Microsoft\Web Platform Installer\</li><li>C:\Program Files\Miniconda2</li><li>C:\Program Files\Miniconda2\Library\bin</li><li>C:\Program Files\Miniconda2\Scripts</li><li>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.0\bin</li><li>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.0\libnvvp</li><li>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5\bin</li><li>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5\libnvvp</li><li>C:\Program Files\TortoiseGit\bin</li><li>C:\Program Files\TortoiseSVN\bin</li><li>C:\Program Files\WinMerge</li><li>C:\ProgramData\Oracle\Java\javapath</li><li>C:\Users\XXXXXX.dnx\bin</li><li>C:\Users\XXXXXX\AppData\Roaming\npm</li><li>C:\Windows</li><li>C:\Windows\system32</li><li>C:\Windows\System32\Wbem</li><li>C:\Windows\System32\WindowsPowerShell\v1.0\</li><li>C:\Windows\System32\WindowsPowerShell\v1.0\</li><li>C:\Windows\System32\WindowsPowerShell\v1.0\</li><li>C:\Windows\System32\WindowsPowerShell\v1.0\</li><li>C:\Windows\System32\WindowsPowerShell\v1.0\</li><li>C:\Windows\System32\WindowsPowerShell\v1.0\</li></ul><p>になっていた。<br>何でPowerShellは重複しているんですかねぇ…<br>とりあえず不要なパスを削りましたが、まだ2290…多すぎます。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>で、どうもひっそりと環境変数PATHの最大長を伸ばすパッチがWindows7用に公開されているとのこと。<br>パッチは下記から入手可能。</p><p><a href="https://support.microsoft.com/en-us/help/2685893/error-messages-after-you-change-the-2047-character-limit-in-an-environment-variable-on-a-computer-that-is-running-windows-vista,-windows-7,-windows-server-2008-or-windows-server-2008-r2">Error messages after you change the 2047 character limit in an environment variable on a computer that is running Windows Vista, Windows 7, Windows Server 2008 or Windows Server 2008 R2</a></p><p>ページ上部の<strong>Hotfix download available</strong>からダウンロードできます。<br>ダウンロードはメールアドレスを入力してから、そのアドレスにダウンロード先が転送される方式です。</p><p>対象は</p><ul><li>Windows Vista Service Pack 2 (SP2)</li><li>Windows Server 2008 Service Pack 2 (SP2)</li><li>Windows 7</li><li>Windows 7 Service Pack 1 (SP1)</li><li>Windows Server 2008 R2</li><li>Windows Server 2008 R2 Service Pack 1 (SP1)</li></ul><p>になります。<br>ただし注意として</p><blockquote><p>A supported hotfix is available from Microsoft. However, this hotfix is intended to correct only the problem that is described in this article. Apply this hotfix only to systems that are experiencing the problem described in this article. This hotfix might receive additional testing. Therefore, if you are not severely affected by this problem, we recommend that you wait for the next software update that contains this hotfix.</p></blockquote><p><strong>サポートするHotfixはMicrosoftから利用できます。しかしながら、このHotfixはこの記事で記載している問題のみを是正することを意図しています。この記事で記載している問題に遭遇しているシステムに対してのみ、このHotfixを適用します。このHotfixは追加のテストを受けているでしょう、そのため、この問題で深刻な問題を受けていないならば、(Microsoftは)このHotfixが含まれる次のソフトウェアのアップデートを待つことをお勧めします。</strong></p><p>とあります。<br>自己責任でお願いします。<br>パッチ適用後は再起動が必須。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> Windows </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでRPCを試してみる Apache Thrift編 第1回</title>
      <link href="2017/04/09/2004/"/>
      <url>2017/04/09/2004/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><a href="https://taktak.jp/2017/04/09/1991">前回</a>は、<strong>Apache Thrift</strong>のビルドを実施しました。<br>今回は、C++のサーバーとC#のクライアントを作成します。<br>今回のソースは下記になります。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/takuya-takeuchi/Demo/tree/master/RPC-ApacheTrift1" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/6241854?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">takuya-takeuchi/Demo</div><div class="hbc-url">https://github.com/takuya-takeuchi/Demo/tree/master/RPC-ApacheTrift1</div><div class="hbc-description">Sample source code for Demonstration, Experiment and Test - takuya-takeuchi/Demo</div></div></div></div></a></div></div><h1 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h1><p>順番に作成していきます。</p><h2 id="Win32コンソールアプリ"><a href="#Win32コンソールアプリ" class="headerlink" title="Win32コンソールアプリ"></a>Win32コンソールアプリ</h2><p>Visual Stuidoで、Win32コンソールアプリを作成します。</p><h3 id="追加のインクルード-ディレクトリ"><a href="#追加のインクルード-ディレクトリ" class="headerlink" title="追加のインクルード ディレクトリ"></a>追加のインクルード ディレクトリ</h3><p>作成したプロジェクトのプロパティから<code>C/C++ -&gt; 全般</code>を開き、<strong>追加のインクルード ディレクトリ</strong>に下記を追加します。</p><ul><li>{boost_install_dir}</li><li>{thrift_install_dir}\lib\cpp\src\thrift\windows</li><li>{thrift_install_dir}\lib\cpp\src\thrift</li><li>{thrift_install_dir}\lib\cpp\src</li></ul><h3 id="追加の依存ファイル"><a href="#追加の依存ファイル" class="headerlink" title="追加の依存ファイル"></a>追加の依存ファイル</h3><p><code>ライブラリアン -&gt; 入力</code>を開き、<strong>追加の依存ファイル</strong>に下記を追加します。</p><ul><li>libboost_thread-vc140-mt-gd-1_59.lib</li><li>libboost_chrono-vc140-mt-gd-1_59.lib</li><li>libthrift.lib</li><li>libthriftnb.lib</li><li>libeay32.lib</li><li>ssleay32.lib</li></ul><h3 id="追加のライブラリ-ディレクトリ"><a href="#追加のライブラリ-ディレクトリ" class="headerlink" title="追加のライブラリ ディレクトリ"></a>追加のライブラリ ディレクトリ</h3><p><code>ライブラリアン -&gt; 全般</code>を開き、<strong>追加のライブラリ ディレクトリ</strong>に下記を追加します。</p><ul><li>{boost_install_dir}\lib64-msvc-14.0</li><li>{thrift_install_dir}\lib\cpp\Debug</li><li>{openssll_install_dir}\lib</li></ul><p>lib64-msvc-14.0は、インストールしたboostのVCのバージョンに依存します。<strong>lib64-msvc-12.0</strong>かもしれません。<br>最後の、<strong>Debug</strong>の部分は、<strong>Release, Release-mt, Debug, Debug-mt</strong>から好きなのを選んでください。つまり、libthriftビルド時の出力先です。</p><h2 id="thriftファイル"><a href="#thriftファイル" class="headerlink" title=".thriftファイル"></a>.thriftファイル</h2><p>クライアントとサーバーを生成するための定義ファイルです。<br>今回は下記のようなファイル<strong>ImageProcService.thrift</strong>です。</p><figure class="highlight thrift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">service</span> <span class="title">imageProcService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="built_in">binary</span> Revert(<span class="number">1</span>:<span class="built_in">binary</span> image,<span class="number">2</span>:<span class="built_in">i32</span> width,<span class="number">3</span>:<span class="built_in">i32</span> height),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Revert</strong>は渡されたバイナリ(RAW画像データ)の画素を反転させます。</p><h2 id="コード生成"><a href="#コード生成" class="headerlink" title="コード生成"></a>コード生成</h2><p>前回ダウンロードしたThriftのコンパイラーを使ってコードを生成します。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thrift-<span class="number">0</span>.<span class="number">10</span>.<span class="number">0</span>.exe-r --gen cpp ImageProcService.thrift</span><br></pre></td></tr></table></figure><p>上記のコマンドで、<strong>gen-cpp</strong>というフォルダが生成され、その中に、</p><ul><li>imageProcService.cpp</li><li>imageProcService.h</li><li>imageProcService_server.skeleton.cpp</li><li>Server_constants.cpp</li><li>Server_constants.h</li><li>Server_types.cpp</li><li>Server_types.h</li></ul><p>が作成されます。</p><h2 id="for-C"><a href="#for-C" class="headerlink" title="for C++"></a>for C++</h2><p>サーバー側です。<br>前項の、<strong>imageProcService_server.skeleton.cpp</strong>がサーバー側の実装のスケルトンコードなので、そのまま流用します。<br>下記がソースです。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Server.cpp : コンソール アプリケーションのエントリ ポイントを定義します。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;gen-cpp/imageProcService.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thrift/protocol/TBinaryProtocol.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thrift/server/TSimpleServer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thrift/transport/TServerSocket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thrift/transport/TBufferTransports.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> ::apache::thrift;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> ::apache::thrift::protocol;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> ::apache::thrift::transport;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> ::apache::thrift::server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> boost::<span class="built_in">shared_ptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">imageProcServiceHandler</span> :</span> <span class="keyword">virtual</span> <span class="keyword">public</span> imageProcServiceIf &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    imageProcServiceHandler() &#123;</span><br><span class="line">        <span class="comment">// Your initialization goes here</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Revert</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span>&amp; _return, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; image, <span class="keyword">const</span> <span class="keyword">int32_t</span> width, <span class="keyword">const</span> <span class="keyword">int32_t</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span>* tmp = <span class="keyword">static_cast</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>*&gt;(<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">char</span>) * image.length()));</span><br><span class="line">        copy(image.begin(), image.end(), tmp);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;image length: %llu\n&quot;</span>, image.length());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; image.length(); index++)</span><br><span class="line">            tmp[index] = <span class="number">255</span> - tmp[index];</span><br><span class="line"></span><br><span class="line">        _return.append(tmp, tmp + image.length());</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;_return length: %llu\n&quot;</span>, image.length());</span><br><span class="line">        <span class="built_in">free</span>(tmp);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Revert\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> port = <span class="number">9090</span>;</span><br><span class="line">    <span class="function"><span class="built_in">shared_ptr</span>&lt;imageProcServiceHandler&gt; <span class="title">handler</span><span class="params">(<span class="keyword">new</span> imageProcServiceHandler())</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">shared_ptr</span>&lt;TProcessor&gt; <span class="title">processor</span><span class="params">(<span class="keyword">new</span> imageProcServiceProcessor(handler))</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">shared_ptr</span>&lt;TServerTransport&gt; <span class="title">serverTransport</span><span class="params">(<span class="keyword">new</span> TServerSocket(port))</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">shared_ptr</span>&lt;TTransportFactory&gt; <span class="title">transportFactory</span><span class="params">(<span class="keyword">new</span> TBufferedTransportFactory())</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">shared_ptr</span>&lt;TProtocolFactory&gt; <span class="title">protocolFactory</span><span class="params">(<span class="keyword">new</span> TBinaryProtocolFactory())</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">TSimpleServer <span class="title">server</span><span class="params">(processor, serverTransport, transportFactory, protocolFactory)</span></span>;</span><br><span class="line">    server.serve();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 注意するのは、*<em>.thrift<strong>で指定したimageの型がbinaryなのに、</strong>std::string<strong>になっていることでしょう。<br>これはバグではなく仕様です。</strong>unsigned char**</em> になることを期待していましたが仕方ありません。<br>なので、うまく型を変換して内部のデータにアクセスします。<br>戻りもstd::stringなので、操作したデータを格納するようにします。</p><p>しかし、ビルドが通りません。<br>どうも調べてみると<strong>libthrift</strong>のソースでいくつか必要なファイルがプロジェクトから除外されていることが原因の模様。<br>そのため、libthriftのプロジェクトに下記を追加します。</p><ul><li>src\thrift\server\TConnectedClient.cpp</li><li>src\thrift\server\TConnectedClient.h</li><li>src\thrift\server\TNonblockingServer.cpp</li><li>src\thrift\server\TNonblockingServer.h</li><li>src\thrift\server\TServer.cpp</li><li>src\thrift\server\TServerFramework.cpp</li><li>src\thrift\server\TServerFramework.h</li></ul><p>次に、libthriftのプロパティを開きます。<br>C/C++ -&gt; 全般を開き、追加のインクルード ディレクトリに下記を追加します。</p><ul><li>{libevent_install_dir}</li><li>{libevent_install_dir}\include</li><li>{libevent_install_dir}\WIN32-Code\nmake</li></ul><p>これで、libthriftを再度ビルドし、利用する側もリビルドします。<br>今度は成功するはずです。</p><h2 id="for-C-1"><a href="#for-C-1" class="headerlink" title="for C"></a>for C</h2><p>クライアント側のソースです。<br>C++側と異なり、Thriftのビルドは不要でNugetで完結します。</p><p>パッケージマネージャー コンソールから下記のコマンドでインストールします。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Install-Package ApacheThrift -Pre</span><br></pre></td></tr></table></figure><p>2017/04/09現在、安定版は、0.9.3が最新で、C++の最新版である0.10.0とは異なるので不安ですが、これしかないので、これを使います。</p><p>クライアントである、C#側は、<a href="https://taktak.jp/2017/03/27/1929">.NETでRPCを試してみる gRPC編 第1回</a>と同じ感じです。</p><p>クライアントのソースは、Thriftのコンパイラーを使ってコードを生成します。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thrift-<span class="number">0</span>.<span class="number">10</span>.<span class="number">0</span>.exe-r --gen csharp ImageProcService.thrift</span><br></pre></td></tr></table></figure><p>で生成できます。<strong>gen-csharp</strong>というフォルダが生成され、その中に、</p><ul><li>imageProcService.cs</li></ul><p>だけ生成されます。<br>上記のファイルをC#プロジェクトの適切なフォルダに移動します。<br>サーバーへアクセスするソースだけ記載します。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Windows;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Media;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Media.Imaging;</span><br><span class="line"><span class="keyword">using</span> GalaSoft.MvvmLight;</span><br><span class="line"><span class="keyword">using</span> GalaSoft.MvvmLight.Command;</span><br><span class="line"><span class="keyword">using</span> ImageProcClient.Contracts;</span><br><span class="line"><span class="keyword">using</span> ImageProcClient.ViewModels.Interfaces;</span><br><span class="line"><span class="keyword">using</span> Microsoft.WindowsAPICodePack.Dialogs;</span><br><span class="line"><span class="keyword">using</span> Thrift.Protocol;</span><br><span class="line"><span class="keyword">using</span> Thrift.Transport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ImageProcClient.ViewModels</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">MainViewModel</span> : <span class="title">ViewModelBase</span>, <span class="title">IMainViewModel</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> Properties</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> RelayCommand _OpenFileCommand;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> RelayCommand OpenFileCommand</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._OpenFileCommand ?? (<span class="keyword">this</span>._OpenFileCommand = <span class="keyword">new</span> RelayCommand(() =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">using</span> (<span class="keyword">var</span> dlg = <span class="keyword">new</span> CommonOpenFileDialog())</span><br><span class="line">                    &#123;</span><br><span class="line">                        dlg.IsFolderPicker = <span class="literal">false</span>;</span><br><span class="line">                        dlg.AddToMostRecentlyUsedList = <span class="literal">false</span>;</span><br><span class="line">                        dlg.AllowNonFileSystemItems = <span class="literal">false</span>;</span><br><span class="line">                        dlg.EnsureFileExists = <span class="literal">true</span>;</span><br><span class="line">                        dlg.EnsurePathExists = <span class="literal">true</span>;</span><br><span class="line">                        dlg.EnsureReadOnly = <span class="literal">false</span>;</span><br><span class="line">                        dlg.EnsureValidNames = <span class="literal">true</span>;</span><br><span class="line">                        dlg.Multiselect = <span class="literal">false</span>;</span><br><span class="line">                        dlg.ShowPlacesList = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">var</span> dialogResult = dlg.ShowDialog();</span><br><span class="line">                        <span class="keyword">if</span> (dialogResult != CommonFileDialogResult.Ok)</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">var</span> bitmap = <span class="keyword">new</span> BitmapImage();</span><br><span class="line">                        <span class="keyword">try</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            bitmap.BeginInit();</span><br><span class="line">                            bitmap.UriSource = <span class="keyword">new</span> Uri(dlg.FileName);</span><br><span class="line">                            bitmap.EndInit();</span><br><span class="line">                            <span class="keyword">this</span>.SourceImage = bitmap;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">                        &#123;</span><br><span class="line">                            MessageBox.Show(ex.Message);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">this</span>._ServerRequestCommand?.RaiseCanExecuteChanged();</span><br><span class="line">                &#125;, () =&gt; <span class="literal">true</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> ImageSource _ResultImage;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ImageSource ResultImage</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._ResultImage;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>._ResultImage = <span class="keyword">value</span>;</span><br><span class="line">                <span class="keyword">this</span>.RaisePropertyChanged();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> RelayCommand _ServerRequestCommand;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> RelayCommand ServerRequestCommand</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._ServerRequestCommand ?? (<span class="keyword">this</span>._ServerRequestCommand = <span class="keyword">new</span> RelayCommand(() =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> bitmap = <span class="keyword">this</span>._SourceImage <span class="keyword">as</span> BitmapImage;</span><br><span class="line">                    <span class="keyword">if</span> (bitmap == <span class="literal">null</span>)</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">var</span> width = bitmap.PixelWidth;</span><br><span class="line">                    <span class="keyword">var</span> height = bitmap.PixelHeight;</span><br><span class="line">                    <span class="keyword">var</span> stride = (width * bitmap.Format.BitsPerPixel + <span class="number">7</span>) / <span class="number">8</span>;</span><br><span class="line">                    <span class="keyword">var</span> bitsPerPixel = bitmap.Format.BitsPerPixel;</span><br><span class="line">                    <span class="keyword">var</span> bytesPerPixel = bitsPerPixel / <span class="number">8</span>;</span><br><span class="line">                    <span class="keyword">var</span> originalPixels = <span class="keyword">new</span> <span class="keyword">byte</span>[width * height * bytesPerPixel];</span><br><span class="line">                    bitmap.CopyPixels(originalPixels, stride, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        TTransport transport = <span class="keyword">new</span> TSocket(<span class="string">&quot;localhost&quot;</span>, <span class="number">9090</span>);</span><br><span class="line">                        TProtocol protocol = <span class="keyword">new</span> TBinaryProtocol(transport);</span><br><span class="line">                        imageProcService.Client client = <span class="keyword">new</span> imageProcService.Client(protocol);</span><br><span class="line"></span><br><span class="line">                        transport.Open();</span><br><span class="line">                        <span class="keyword">try</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            client.send_Revert(originalPixels, width, height);</span><br><span class="line">                            <span class="keyword">var</span> resultPixels = client.recv_Revert();</span><br><span class="line">                            <span class="keyword">if</span> (resultPixels != <span class="literal">null</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="keyword">var</span> bmpSource = BitmapSource.Create(</span><br><span class="line">                                    width,</span><br><span class="line">                                    height,</span><br><span class="line">                                    bitmap.DpiX,</span><br><span class="line">                                    bitmap.DpiY,</span><br><span class="line">                                    bitmap.Format,</span><br><span class="line">                                    <span class="literal">null</span>,</span><br><span class="line">                                    resultPixels,</span><br><span class="line">                                    stride);</span><br><span class="line">                                <span class="keyword">if</span> (bmpSource.CanFreeze)</span><br><span class="line">                                    bmpSource.Freeze();</span><br><span class="line"></span><br><span class="line">                                <span class="keyword">this</span>.ResultImage = bmpSource;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">finally</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            transport.Close();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">catch</span> (Exception x)</span><br><span class="line">                    &#123;</span><br><span class="line">                        Console.WriteLine(x.StackTrace);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;, () =&gt; <span class="keyword">this</span>._SourceImage != <span class="literal">null</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> ImageSource _SourceImage;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ImageSource SourceImage</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._SourceImage;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>._SourceImage = <span class="keyword">value</span>;</span><br><span class="line">                <span class="keyword">this</span>.RaisePropertyChanged();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>gRPC</strong>と異なり、メソッドの呼び出し(<strong>send_XXXX</strong>)で即座に結果を返すわけでなく、<strong>recv_XXXX</strong>を追加で呼ぶ必要があります。<br>こうなると、余計な通信が発生する気がしますが…そういう仕様なので仕方ないのでしょう。</p><h1 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h1><p>実行結果です。<br>入力画像が反転しているのがわかります。</p><p><a href="../../../../public/2017/04/test.gif"><img src="../../../../public/2017/04/test-1024x419.gif"></a></p><p>別マシンでサーバーを起動して、IPを変更してもきちんと動きます。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>C++側が面倒でしたが、それ以外はgRPCと大差ありません。<br>一度ライブラリを作ってしまえば後は流用できますので、導入コストが少し高いだけです。<br>その後は、マシン間通信がこれでもか、というくらい楽になります。<br>C++でサーバー側を実装するなら、gRPCよりもThriftのがおすすめな感じはします(gRPCのC++は試していませんが…)</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/RPC-ApacheTrift1">https://github.com/takuya-takeuchi/Demo/tree/master/RPC-ApacheTrift1</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> remote-procedure-call </category>
          
          <category> .NETでRPCを試してみる </category>
          
          <category> Apache Thrift </category>
          
          <category> Remote Procedure Call </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでRPCを試してみる Apache Thrift編 第0回</title>
      <link href="2017/04/09/1991/"/>
      <url>2017/04/09/1991/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><a href="https://taktak.jp/2017/03/26/1924">.NETでRPCを試してみる gRPC編 第0回</a>のように、最新のRPCとして<strong>gRPC</strong>を試しました。<br>さまざまな言語をサポートしているので、C++でしか動かない (C#のP/InvokeやC++/CLIからも動作しない) ライブラリをRPCで動かそうと思いました。<br>ところが、C++でgRPCを動かすのは面倒な模様。</p><ul><li>CMake</li><li>Active State Perl</li><li>Ninja</li><li>Go</li><li>yasm</li></ul><p>といったモジュールのインストールが必要のため断念。</p><p>かわりに見つけたのが<strong>Apache Thrift</strong>。<br>こちらも、クライアント/サーバーのコードを生成して利用するため、ロジックの実装に注力できるRPCフレームワーク。<br>公式は下記。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://thrift.apache.org/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=thrift.apache.org"></img><div class="hbc-site-name">thrift.apache.org</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">Apache Thrift - Home</div><div class="hbc-url">https://thrift.apache.org/</div></div></div></div></a></div></div><p>今回は、クライアントをC#、サーバーをC++として試してみます。</p><h1 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h1><p>Thriftのライブラリは自分でビルドする必要があります。<br>そのために、下記の手順で、関連ライブラリなどを入手していきます。</p><h2 id="boost"><a href="#boost" class="headerlink" title="boost"></a>boost</h2><p><a href="https://sourceforge.net/projects/boost/">Boost C++ Libraries</a>からインストーラを落としてきて展開します。<br>2017/04/09時点で、1.63が安定版の最新です。</p><h2 id="OpenSSL"><a href="#OpenSSL" class="headerlink" title="OpenSSL"></a>OpenSSL</h2><p><strong>Heartbleed</strong>でも有名になったSSLのライブラリですね。公式ページは下記。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://www.openssl.org/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=www.openssl.org"></img><div class="hbc-site-name">www.openssl.org</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">  /index.html  </div><div class="hbc-url">https://www.openssl.org/</div></div></div></div></a></div></div><p>OpenSSLは、2017/04/09時点で、1.1.0eが安定版の最新ですが、1.1.0系はネット上で転がっている情報が少ないし、ビルド方法が違っていて、ビルドできなかったので、1.0.2系を使います。<br>2017/04/09時点で、1.0.2jが1.0.2系の最新です。</p><p>一応説明すると、バイナリの入手は2通りあります。</p><ul><li>有志が配布しているバイナリの入手<ul><li>現在有志が配布していて、最新版はインストーラのみで環境が汚れてしまう、かつ寄付を求められます。</li></ul></li><li>自分でビルド<ul><li>Perlのインストールが必要で、環境が汚れてしまう。</li><li>Perlの有名どころの<strong>ActivePerl</strong>は無償と有償がある。企業利用でも、<strong>pre-production development and prototyping</strong> なら無償版が使える。<pre><code>* ビルドのためだけなので無償版でOK?</code></pre></li><li>最近は、<a href="http://strawberryperl.com/">Strawberry Perl</a>というのがあり、かつzipのようなポータブル版もある。</li></ul></li></ul><p>というわけで、インストーラは嫌なので、今回は自分でビルドするために、Strawberry PerlのPortable版を入手しました。<br>2017/04/09時点で、Strawberry Perlは、5.24.1.1が安定版の最新です。</p><p>Portable版でも123MBあります。展開後は、400MBを超えますのでディスク容量には注意。<br>Strawberry Perlを展開後、<code>スタート &gt; 全てのプログラム &gt; Visual Studio 2015 &gt; Windows Desktop Command Prompts &gt; VS2015 x64 Native Tools コマンド プロンプト</code>を起動、そしてStrawberry Perlの展開先まで移動し、下記のように実行します。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">Works</span>\<span class="title">Lib</span>\<span class="title">Strawberry</span> <span class="title">Perl</span>\5.24.1.1&gt;<span class="title">portableshell.bat</span></span></span><br><span class="line"><span class="function">----------------------------------------------</span></span><br><span class="line"><span class="function"> <span class="title">Welcome</span> <span class="title">to</span> <span class="title">Strawberry</span> <span class="title">Perl</span> <span class="title">Portable</span> <span class="title">Edition</span>!</span></span><br><span class="line"><span class="function"> * <span class="title">URL</span> - <span class="title">http</span>://<span class="title">www.strawberryperl.com</span>/</span></span><br><span class="line"><span class="function"> * <span class="title">see</span> <span class="title">README.TXT</span> <span class="title">for</span> <span class="title">more</span> <span class="title">info</span></span></span><br><span class="line"><span class="function">----------------------------------------------</span></span><br><span class="line"><span class="function"><span class="title">Perl</span> <span class="title">executable</span>: <span class="title">D</span>:\<span class="title">Works</span>\<span class="title">Lib</span>\<span class="title">Strawberry</span> <span class="title">Perl</span>\5.24.1.1\<span class="title">perl</span>\<span class="title">bin</span>\<span class="title">perl.exe</span></span></span><br><span class="line"><span class="function"><span class="title">Perl</span> <span class="title">version</span>   : 5.24.1 / <span class="title">MSWin32</span>-<span class="title">x64</span>-<span class="title">multi</span>-<span class="title">thread</span></span></span><br></pre></td></tr></table></figure><p>続いて、OpenSSLの展開先まで移動します。そして、下記のように実行します。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">c:\<span class="title">openssl</span>-1.0.2<span class="title">j</span>&gt;<span class="title">mkdir</span> &quot;<span class="title">openssl</span>-1.0.2<span class="title">j_x64_VC</span>-<span class="title">WIN</span>&quot;</span></span><br><span class="line"><span class="function"><span class="title">c</span>:\<span class="title">openssl</span>-1.0.2<span class="title">j</span>&gt;<span class="title">set</span> <span class="title">TARGET</span>=%<span class="title">CD</span>%\<span class="title">openssl</span>-1.0.2<span class="title">j_x64_VC</span>-<span class="title">WIN</span></span></span><br><span class="line"><span class="function"><span class="title">c</span>:\<span class="title">openssl</span>-1.0.2<span class="title">j</span>&gt;<span class="title">perl</span> <span class="title">Configure</span> <span class="title">VC</span>-<span class="title">WIN64A</span> --<span class="title">prefix</span>=&quot;%<span class="title">TARGET</span>%&quot;</span></span><br><span class="line"><span class="function"> <span class="title">no</span>-<span class="title">asm</span></span></span><br><span class="line"><span class="function"><span class="title">Configuring</span> <span class="title">for</span> <span class="title">VC</span>-<span class="title">WIN64A</span></span></span><br><span class="line"><span class="function">    <span class="title">no</span>-<span class="title">asm</span>          [<span class="title">option</span>]   <span class="title">OPENSSL_NO_ASM</span></span></span><br><span class="line"><span class="function">    <span class="title">no</span>-<span class="title">ec_nistp_64_gcc_128</span> [<span class="title">default</span>]  <span class="title">OPENSSL_NO_EC_NISTP_64_GCC_128</span> (<span class="title">skip</span> <span class="title">dir</span>)</span></span><br><span class="line"><span class="function">    <span class="title">no</span>-<span class="title">gmp</span>          [<span class="title">default</span>]  <span class="title">OPENSSL_NO_GMP</span> (<span class="title">skip</span> <span class="title">dir</span>)</span></span><br><span class="line"><span class="function">    <span class="title">no</span>-<span class="title">jpake</span>        [<span class="title">experimental</span>] <span class="title">OPENSSL_NO_JPAKE</span> (<span class="title">skip</span> <span class="title">dir</span>)</span></span><br><span class="line"><span class="function">    <span class="title">no</span>-<span class="title">krb5</span>         [<span class="title">krb5</span>-<span class="title">flavor</span> <span class="title">not</span> <span class="title">specified</span>] <span class="title">OPENSSL_NO_KRB5</span></span></span><br><span class="line"><span class="function">    <span class="title">no</span>-<span class="title">libunbound</span>   [<span class="title">experimental</span>] <span class="title">OPENSSL_NO_LIBUNBOUND</span> (<span class="title">skip</span> <span class="title">dir</span>)</span></span><br><span class="line"><span class="function">    <span class="title">no</span>-<span class="title">md2</span>          [<span class="title">default</span>]  <span class="title">OPENSSL_NO_MD2</span> (<span class="title">skip</span> <span class="title">dir</span>)</span></span><br><span class="line"><span class="function">    <span class="title">no</span>-<span class="title">rc5</span>          [<span class="title">default</span>]  <span class="title">OPENSSL_NO_RC5</span> (<span class="title">skip</span> <span class="title">dir</span>)</span></span><br><span class="line"><span class="function">    <span class="title">no</span>-<span class="title">rfc3779</span>      [<span class="title">default</span>]  <span class="title">OPENSSL_NO_RFC3779</span> (<span class="title">skip</span> <span class="title">dir</span>)</span></span><br><span class="line"><span class="function">    <span class="title">no</span>-<span class="title">sctp</span>         [<span class="title">default</span>]  <span class="title">OPENSSL_NO_SCTP</span> (<span class="title">skip</span> <span class="title">dir</span>)</span></span><br><span class="line"><span class="function">    <span class="title">no</span>-<span class="title">shared</span>       [<span class="title">default</span>]</span></span><br><span class="line"><span class="function">    <span class="title">no</span>-<span class="title">ssl</span>-<span class="title">trace</span>    [<span class="title">default</span>]  <span class="title">OPENSSL_NO_SSL_TRACE</span> (<span class="title">skip</span> <span class="title">dir</span>)</span></span><br><span class="line"><span class="function">    <span class="title">no</span>-<span class="title">ssl2</span>         [<span class="title">default</span>]  <span class="title">OPENSSL_NO_SSL2</span> (<span class="title">skip</span> <span class="title">dir</span>)</span></span><br><span class="line"><span class="function">    <span class="title">no</span>-<span class="title">store</span>        [<span class="title">experimental</span>] <span class="title">OPENSSL_NO_STORE</span> (<span class="title">skip</span> <span class="title">dir</span>)</span></span><br><span class="line"><span class="function">    <span class="title">no</span>-<span class="title">unit</span>-<span class="title">test</span>    [<span class="title">default</span>]  <span class="title">OPENSSL_NO_UNIT_TEST</span> (<span class="title">skip</span> <span class="title">dir</span>)</span></span><br><span class="line"><span class="function">    <span class="title">no</span>-<span class="title">weak</span>-<span class="title">ssl</span>-<span class="title">ciphers</span> [<span class="title">default</span>]  <span class="title">OPENSSL_NO_WEAK_SSL_CIPHERS</span> (<span class="title">skip</span> <span class="title">dir</span>)</span></span><br><span class="line"><span class="function">    <span class="title">no</span>-<span class="title">zlib</span>         [<span class="title">default</span>]</span></span><br><span class="line"><span class="function">    <span class="title">no</span>-<span class="title">zlib</span>-<span class="title">dynamic</span> [<span class="title">default</span>]</span></span><br><span class="line"><span class="function"><span class="title">IsMK1MF</span>=1</span></span><br><span class="line"><span class="function"><span class="title">CC</span>            =<span class="title">cl</span></span></span><br><span class="line"><span class="function"><span class="title">CFLAG</span>         =-<span class="title">DOPENSSL_THREADS</span>  -<span class="title">DDSO_WIN32</span> -<span class="title">W3</span> -<span class="title">Gs0</span> -<span class="title">Gy</span> -<span class="title">nologo</span> -<span class="title">DOPENSSL_SYS</span></span></span><br><span class="line"><span class="function"><span class="title">NAME_WIN32</span> -<span class="title">DWIN32_LEAN_AND_MEAN</span> -<span class="title">DL_ENDIAN</span> -<span class="title">DUNICODE</span> -<span class="title">D_UNICODE</span> -<span class="title">D_CRT_SECURE_NO_DEPRECATE</span></span></span><br><span class="line"><span class="function"><span class="title">EX_LIBS</span>       =</span></span><br><span class="line"><span class="function"><span class="title">CPUID_OBJ</span>     =<span class="title">mem_clr.o</span></span></span><br><span class="line"><span class="function"><span class="title">BN_ASM</span>        =<span class="title">bn_asm.o</span></span></span><br><span class="line"><span class="function"><span class="title">EC_ASM</span>        =</span></span><br><span class="line"><span class="function"><span class="title">DES_ENC</span>       =<span class="title">des_enc.o</span> <span class="title">fcrypt_b.o</span></span></span><br><span class="line"><span class="function"><span class="title">AES_ENC</span>       =<span class="title">aes_core.o</span> <span class="title">aes_cbc.o</span></span></span><br><span class="line"><span class="function"><span class="title">BF_ENC</span>        =<span class="title">bf_enc.o</span></span></span><br><span class="line"><span class="function"><span class="title">CAST_ENC</span>      =<span class="title">c_enc.o</span></span></span><br><span class="line"><span class="function"><span class="title">RC4_ENC</span>       =<span class="title">rc4_enc.o</span> <span class="title">rc4_skey.o</span></span></span><br><span class="line"><span class="function"><span class="title">RC5_ENC</span>       =<span class="title">rc5_enc.o</span></span></span><br><span class="line"><span class="function"><span class="title">MD5_OBJ_ASM</span>   =</span></span><br><span class="line"><span class="function"><span class="title">SHA1_OBJ_ASM</span>  =</span></span><br><span class="line"><span class="function"><span class="title">RMD160_OBJ_ASM</span>=</span></span><br><span class="line"><span class="function"><span class="title">CMLL_ENC</span>      =<span class="title">camellia.o</span> <span class="title">cmll_misc.o</span> <span class="title">cmll_cbc.o</span></span></span><br><span class="line"><span class="function"><span class="title">MODES_OBJ</span>     =</span></span><br><span class="line"><span class="function"><span class="title">ENGINES_OBJ</span>   =</span></span><br><span class="line"><span class="function"><span class="title">PROCESSOR</span>     =</span></span><br><span class="line"><span class="function"><span class="title">RANLIB</span>        =<span class="title">true</span></span></span><br><span class="line"><span class="function"><span class="title">ARFLAGS</span>       =</span></span><br><span class="line"><span class="function"><span class="title">PERL</span>          =<span class="title">perl</span></span></span><br><span class="line"><span class="function"><span class="title">SIXTY_FOUR_BIT</span> <span class="title">mode</span></span></span><br><span class="line"><span class="function"><span class="title">DES_INT</span> <span class="title">used</span></span></span><br><span class="line"><span class="function"><span class="title">RC4_CHUNK</span> <span class="title">is</span> <span class="title">unsigned</span> <span class="title">long</span> <span class="title">long</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Configured</span> <span class="title">for</span> <span class="title">VC</span>-<span class="title">WIN64A</span>.</span></span><br></pre></td></tr></table></figure><p>次に、<strong>do_win64a.bat</strong>というバッチを実行します。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">openssl</span>-1.0.2<span class="title">j</span>&gt;<span class="title">ms</span>\<span class="title">do_win64a.bat</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">openssl</span>-1.0.2<span class="title">j</span>&gt;<span class="title">perl</span> <span class="title">util</span>\<span class="title">mkfiles.pl</span>  1&gt;<span class="title">MINFO</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">openssl</span>-1.0.2<span class="title">j</span>&gt;<span class="title">cmd</span> /<span class="title">c</span> &quot;<span class="title">nasm</span> -<span class="title">f</span> <span class="title">win64</span> -<span class="title">v</span>&quot;  1&gt;<span class="title">NUL</span> 2&gt;&amp;1</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">openssl</span>-1.0.2<span class="title">j</span>&gt;<span class="title">if</span> 0 <span class="title">NEQ</span> 0 <span class="title">goto</span> <span class="title">ml64</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">openssl</span>-1.0.2<span class="title">j</span>&gt;<span class="title">perl</span> <span class="title">ms</span>\<span class="title">uplink</span>-<span class="title">x86_64.pl</span> <span class="title">nasm</span>  1&gt;<span class="title">ms</span>\<span class="title">uptable.asm</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">openssl</span>-1.0.2<span class="title">j</span>&gt;<span class="title">nasm</span> -<span class="title">f</span> <span class="title">win64</span> -<span class="title">o</span> <span class="title">ms</span>\<span class="title">uptable.obj</span> <span class="title">ms</span>\<span class="title">uptable.asm</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:17: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:24: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:37: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:44: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:57: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:64: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:77: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:84: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:97: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:104: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:117: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:124: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:137: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:144: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:157: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:164: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:177: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:184: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:197: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:204: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:217: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:224: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:237: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:244: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:257: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:264: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:277: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:284: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:297: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:304: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:317: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:324: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:337: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:344: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:357: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:364: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:377: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:384: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:397: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:404: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:417: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:424: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:437: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"><span class="title">ms</span>\<span class="title">uptable.asm</span>:444: <span class="title">warning</span>: <span class="title">absolute</span> <span class="title">address</span> <span class="title">can</span> <span class="title">not</span> <span class="title">be</span> <span class="title">RIP</span>-<span class="title">relative</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">openssl</span>-1.0.2<span class="title">j</span>&gt;<span class="title">goto</span> <span class="title">proceed</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">openssl</span>-1.0.2<span class="title">j</span>&gt;<span class="title">perl</span> <span class="title">util</span>\<span class="title">mk1mf.pl</span> <span class="title">VC</span>-<span class="title">WIN64A</span>  1&gt;<span class="title">ms</span>\<span class="title">nt.mak</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">openssl</span>-1.0.2<span class="title">j</span>&gt;<span class="title">perl</span> <span class="title">util</span>\<span class="title">mk1mf.pl</span> <span class="title">dll</span> <span class="title">VC</span>-<span class="title">WIN64A</span>  1&gt;<span class="title">ms</span>\<span class="title">ntdll.mak</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">openssl</span>-1.0.2<span class="title">j</span>&gt;<span class="title">perl</span> <span class="title">util</span>\<span class="title">mkdef.pl</span> 32 <span class="title">libeay</span>  1&gt;<span class="title">ms</span>\<span class="title">libeay32.def</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">openssl</span>-1.0.2<span class="title">j</span>&gt;<span class="title">perl</span> <span class="title">util</span>\<span class="title">mkdef.pl</span> 32 <span class="title">ssleay</span>  1&gt;<span class="title">ms</span>\<span class="title">ssleay32.def</span></span></span><br></pre></td></tr></table></figure><p>以上で、ビルドの準備ができました。<br>そして、下記のコマンドを実行することで、<strong>openssl-1.0.2j_x64_VC-WIN</strong> に成果物が出来上がります。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">openssl</span>-1.0.2<span class="title">j</span>&gt;<span class="title">nmake</span> -<span class="title">f</span> <span class="title">ms</span>\<span class="title">nt.mak</span></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">openssl</span>-1.0.2<span class="title">j</span>&gt;<span class="title">nmake</span> -<span class="title">f</span> <span class="title">ms</span>\<span class="title">nt.mak</span> <span class="title">install</span></span></span><br></pre></td></tr></table></figure><p>成功すると、</p><ul><li>openssl-1.0.2j_x64_VC-WIN\bin</li><li>openssl-1.0.2j_x64_VC-WIN\include</li><li>openssl-1.0.2j_x64_VC-WIN\lib</li><li>openssl-1.0.2j_x64_VC-WIN\ssl</li></ul><p>というフォルダができています。</p><h2 id="libevent"><a href="#libevent" class="headerlink" title="libevent"></a>libevent</h2><p>聞きなれないライブラリですが、公式ページ </p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://libevent.org/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=libevent.org"></img><div class="hbc-site-name">libevent.org</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">libevent</div><div class="hbc-url">http://libevent.org/</div></div></div></div></a></div></div><p>によれば、</p><blockquote><p>The libevent API provides a mechanism to execute a callback function when a specific event occurs on a file descriptor or after a timeout has been reached. Furthermore, libevent also support callbacks due to signals or regular timeouts. libevent is meant to replace the event loop found in event driven network servers</p></blockquote><p>とのこと。つまり、特定のイベントが発生したりしたら、コールバック関数を実行するメカニズムを提供するAPIがlibeventであり、イベントドリブンなネットワークサービス内のイベントループを置き換えるもの、とのこと。<br>確かに、C++ってイベントみたいな機構って、コールバックしかないし、それらをモジュールで積極的に使うってシーンがないから、こういうライブラリはありがたいのかも。<br>詳しい説明は例のごとくWikipedia。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://en.wikipedia.org/wiki/Libevent" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=en.wikipedia.org"></img><div class="hbc-site-name">en.wikipedia.org</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">libevent - Wikipedia</div><div class="hbc-url">https://en.wikipedia.org/wiki/Libevent</div></div></div></div></a></div></div><p>入手先は、公式ページの<strong>Download–Stable releases</strong>から。<br>2017/04/09時点で、2.1.8が安定版の最新です。<br>ソースからビルドするタイプです。<br>ビルドは簡単で、</p><ol><li><code>スタート &gt; 全てのプログラム &gt; Visual Studio 2015 &gt; 開発者コマンド プロンプト for VS2015</code> を開く</li><li>libeventの展開先フォルダに移動</li><li><strong>nmake -f Makefile.nmake</strong> を実行</li></ol><p>以上です。</p><p>終了時に、</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NMAKE : fatal error U1073: &#x27;<span class="built_in">print</span>-winsock-errors.obj&#x27; のビルド方法が指定されていません。</span><br><span class="line">Stop.</span><br><span class="line">NMAKE : fatal error U1077: &#x27;&quot;C:\Program Files (x86)\Microsoft Visual Studio <span class="number">14</span>.<span class="number">0</span>\VC\BIN\nmake.exe&quot;&#x27; : リターン コード &#x27;<span class="number">0</span>x2&#x27;</span><br><span class="line">Stop.</span><br></pre></td></tr></table></figure><p>と表示されますが、</p><ul><li>libevent.lib</li><li>libevent_core.lib</li><li>libevent_extras.lib</li></ul><p>が、フォルダに出来上がっています。</p><h2 id="Apache-Thrift-amp-Compiler"><a href="#Apache-Thrift-amp-Compiler" class="headerlink" title="Apache Thrift &amp; Compiler"></a>Apache Thrift &amp; Compiler</h2><p>ソースとコンパイラーを入手します。<br><a href="https://thrift.apache.org/download">Download</a>から、<strong>thrift-0.10.0.tar.gz</strong>、<strong>Thrift compiler for Windows</strong>をダウンロードします。<br>2017/04/09時点で、0.10.0が最新です。<br>コンパイラーといっても、<strong>gRPC tool</strong>のように、定義ファイルからコードを生成するだけのものです。<br>ソースは、任意の場所に展開します。<br>展開先の<strong>lib\cpp</strong>に<strong>thrift.sln</strong>があるので、Visual Studioで起動します。</p><h3 id="libthrift"><a href="#libthrift" class="headerlink" title="libthrift"></a>libthrift</h3><p>libthriftのプロパティを開きます。<br><code>C/C++ -&gt; 全般</code>を開き、<strong>追加のインクルード ディレクトリ</strong>に下記を追加します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;boost_install_dir&#125;\boost_X_YZ_0</span><br><span class="line">&#123;boost_install_dir&#125;\boost_X_YZ_0\boost</span><br><span class="line">&#123;openssl_install_dir&#125;\include</span><br></pre></td></tr></table></figure><p><code>ライブラリアン -&gt; 全般</code>を開き、<strong>追加のライブラリ ディレクトリ</strong>に下記を追加します。&gt;を開き、<strong>追加のライブラリ ディレクトリ</strong>に下記を追加します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;openss_install_dir&#125;\lib</span><br></pre></td></tr></table></figure><p>最後に、libthrift\concurrency\BoostThreadFactory.cppを<strong>プロジェクトから除外</strong>します。</p><h3 id="libthriftnb"><a href="#libthriftnb" class="headerlink" title="libthriftnb"></a>libthriftnb</h3><p>libthriftのプロパティを開きます。<br><code>C/C++ -&gt; 全般</code>を開き、<strong>追加のインクルード ディレクトリ</strong>に下記を追加します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;boost_install_dir&#125;</span><br><span class="line">&#123;libevent_install_dir&#125;</span><br><span class="line">&#123;libevent_install_dir&#125;\include</span><br><span class="line">&#123;libevent_install_dir&#125;\WIN32-Code\nmake</span><br></pre></td></tr></table></figure><p>以上の設定を終えたら、ビルドが可能になります。<br>ソリューションでDebug/Release/Debug-mt/Release-mt、ターゲットプラットフォーム(x64/Win32)を選択してビルドします。</p><ul><li>libthriftnb.lib</li><li>libthrift.lib</li></ul><p>が生成されているはずです。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>今回は導入のみ。<br>次回は、C#-C++で通信してみます。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> remote-procedure-call </category>
          
          <category> .NETでRPCを試してみる </category>
          
          <category> Apache Thrift </category>
          
          <category> Remote Procedure Call </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その41 OpenCVで非ユニコード文字列ファイル名を扱う</title>
      <link href="2017/04/06/1981/"/>
      <url>2017/04/06/1981/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p><strong>OpenCVSharp</strong>の<strong>OpenCVSharp.Cv2.ImReadメソッド</strong>は、内部的には、<strong>OpenCV</strong>の<strong>cv::imread関数</strong>を呼んでいます。<br>問題は、OpenCVがユニコード文字列を扱えないため、<strong>ANSI文字列</strong>しか受け取れないことです。<br>より正確には、OpenCVSharpからネイティブに自動的にマーシャリングされる際に、<strong>System.String</strong>、つまり<strong>UTF-16</strong>からANSI文字列に変換されています。</p><p>その際、非ユニコードに変換できない文字列を含むと以下の例外を投げます。</p><p><a href="../../../../public/2017/04/1074ec724367dd0925df33536aa3376a.png"><img src="../../../../public/2017/04/1074ec724367dd0925df33536aa3376a.png"></a><br>マーシャリングできません: マップできない文字を検出しました。</p><p>UTF-16から、ANSIへのマーシャリングは、.NETのソースを見ると、<strong>System.String.ConvertToAnsiメソッド</strong>を経由し、<strong>WideCharToMultiByte関数</strong>が呼ばれています。<br>なので、どうしようもありません。</p><br><p>本当に?</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>問題は、下記にように、ファイルパスを渡しているから問題が起きるわけです。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mat = OpenCvSharp.Cv2.ImRead(filepath);</span><br></pre></td></tr></table></figure><p>つまり、下記のように、メモリデータを直接渡し、デコードすれば良いわけです。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = File.ReadAllBytes(filepath);</span><br><span class="line"><span class="keyword">var</span> mat = Cv2.ImDecode(array, ImreadModes.Color);</span><br></pre></td></tr></table></figure><p><strong>Cv2.ImDecode</strong>の第2引数は指定が必須です。OpenCvSharp.Cv2.ImReadは本来第2引数がありますが、既定で<strong>ImreadModes.Color</strong>が設定されるので、同じ値にしておきました。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> C# </category>
          
          <category> マルチメディア </category>
          
          <category> OpenCV </category>
          
          <category> OpenCvSharp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その40 DEP0700 : アプリケーションの登録に失敗しました</title>
      <link href="2017/04/04/1976/"/>
      <url>2017/04/04/1976/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p><a href="../../../../public/2017/04/10d4564c607d12d78e9df6bdb413548a.png"><img src="../../../../public/2017/04/10d4564c607d12d78e9df6bdb413548a.png"></a></p><blockquote><p>DEP0700 : アプリケーションの登録に失敗しました。エラー 0x80070005: エラー アクセスが拒否されました。<br>が発生したため、場所 AppxManifest.xml からファイルを開くことができませんでした。<br>(0x80070005)</p></blockquote><p>なんともわかりにくいですが…こんな問題が発生しました。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>原因はプロジェクトが存在している親ディレクトリのアクセス権がおかしくなっていたからでした。<br>フォルダのプロパティ内のセキュリティタブに、<strong>Authenticated Users</strong>グループが存在していなかったため、追加して、再度展開したらうまくいきました。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> C# </category>
          
          <category> Universal Windows Platform </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その39 外部プロセスからUWPAppにメッセージを送信できるか?</title>
      <link href="2017/04/03/1970/"/>
      <url>2017/04/03/1970/</url>
      
        <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h1><p><a href="https://taktak.jp/2017/04/02/1960">開発メモ その38 プロセスIDからUWPAppのHWNDは取得できるか?</a>からの追加調査というか本題。<br>ウィンドウハンドルが取得できれば、たいていのことはできるのがWindows。<br><strong>WinForms</strong>でも<strong>WPF</strong>でも、結局かゆいところは<strong>Win32API</strong>様を三顧の礼で迎え入れる必要がある。</p><p>で、サンドボックス環境で動作するUWPアプリに対して、ウィンドウハンドルを経由して操作ができるか。<br>これができるかどうかは結構大きい。</p><p><a href="http://stackoverflow.com/questions/34935077/getting-hwnd-off-of-corewindow-object-in-uwp">Getting HWND off of CoreWindow object in UWP</a>にで、<strong>Microsoft</strong>の人間がこのようにコメントしている。</p><blockquote><p>Please note there are no supported APIs for UWP that accept an HWND. Any API you call will fail Windows Store certification, and even if you avoid the Windows Store (eg, side-load or go through an Enterprise deployment) there is no guarantee the app will work in the future.</p></blockquote><p>パッと見、Win32APIの呼び出しがダメ、みたいに見えるけど、よく読むと、**(APIを呼び出すと)ストア認証に失敗する**って言っているだけで、APIそのものの成否ついては言及していない。<br>なので、試してみた。</p><h1 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h1><h2 id="一部成功。"><a href="#一部成功。" class="headerlink" title="一部成功。"></a>一部成功。</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> DWORD = System.UInt32;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">delegate</span> <span class="keyword">bool</span> <span class="title">Win32Callback</span>(<span class="params">IntPtr hWnd, <span class="keyword">ref</span> IntPtr lParam</span>)</span>;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">DllImport(<span class="meta-string">&quot;user32.dll&quot;</span>)</span>]</span><br><span class="line">        [<span class="meta">return: MarshalAs(UnmanagedType.Bool)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">bool</span> <span class="title">EnumWindows</span>(<span class="params">Win32Callback lpEnumFunc, <span class="keyword">ref</span> IntPtr lParam</span>)</span>;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">DllImport(<span class="meta-string">&quot;user32.dll&quot;</span>, SetLastError = true)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">extern</span> IntPtr <span class="title">FindWindowEx</span>(<span class="params">IntPtr hwndParent, IntPtr hwndChildAfter, <span class="keyword">string</span> lpszClass, <span class="keyword">string</span> lpszWindow</span>)</span>;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">DllImport(<span class="meta-string">&quot;user32.dll&quot;</span>, CharSet = CharSet.Auto)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">GetClassName</span>(<span class="params">IntPtr hWnd, StringBuilder lpClassName, <span class="keyword">int</span> nMaxCount</span>)</span>;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">DllImport(<span class="meta-string">&quot;user32.dll&quot;</span>, SetLastError = true)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">uint</span> <span class="title">GetWindowThreadProcessId</span>(<span class="params">IntPtr hWnd, <span class="keyword">out</span> <span class="keyword">uint</span> lpdwProcessId</span>)</span>;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">DllImport(<span class="meta-string">&quot;user32.dll&quot;</span>, EntryPoint = <span class="meta-string">&quot;MapVirtualKeyA&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">MapVirtualKey</span>(<span class="params"><span class="keyword">int</span> wCode, <span class="keyword">int</span> wMapType</span>)</span>;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">DllImport(<span class="meta-string">&quot;user32.dll&quot;</span>, SetLastError = true)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">uint</span> <span class="title">SendInput</span>(<span class="params"><span class="keyword">uint</span> cInputs, KEYBOARDINPUT[] inputs, <span class="keyword">int</span> cbSize</span>)</span>;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">DllImport(<span class="meta-string">&quot;user32.dll&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">SetForegroundWindow</span>(<span class="params">IntPtr hWnd</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">uint</span> INPUT_KEYBOARD = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">uint</span> KEYEVENTF_KEYDOWN = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">uint</span> KEYEVENTF_KEYUP = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">ushort</span> VK_DELETE = <span class="number">0x2E</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> KBD_UNICODE = <span class="number">0x0004</span>;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">StructLayout(LayoutKind.Sequential)</span>]</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">struct</span> KEYBOARDINPUT</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">uint</span> type;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">ushort</span> wVk;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">ushort</span> wScan;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">uint</span> dwFlags;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">uint</span> time;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">uint</span> dwExtraInfo;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">uint</span> unused1;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">uint</span> unused2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">uint</span> GW_HWNDNEXT = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">int</span> GWL_HWNDPARENT = <span class="number">-8</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">readonly</span> IntPtr NULL = System.IntPtr.Zero;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> hTarget = IntPtr.Zero;</span><br><span class="line">            <span class="keyword">var</span> ps = System.Diagnostics.Process.GetProcesses().Where(process =&gt; process.ProcessName == <span class="string">&quot;Calculator&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!ps.Any())</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> calc = ps.First();</span><br><span class="line">            <span class="keyword">var</span> pid = calc.Id;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;プロセス名: &#123;0&#125;&quot;</span>, calc.ProcessName);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;ID: &#123;0&#125;&quot;</span>, calc.Id);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// EnumWindowsProc で探索対象のプロセスIDを設定</span></span><br><span class="line">            TargetProcessId = (<span class="keyword">uint</span>)pid;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> proc = <span class="keyword">new</span> Win32Callback(EnumWindowsProc);</span><br><span class="line"></span><br><span class="line">            EnumWindows(proc, <span class="keyword">ref</span> hTarget);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;HWND: &#123;0&#125;&quot;</span>, hTarget.ToString(<span class="string">&quot;X&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (hTarget == NULL)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;EnumWindows fails&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            SendDelKey(hTarget);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SendDelKey</span>(<span class="params">IntPtr hwnd</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// フォアグラウンドに移動</span></span><br><span class="line">            <span class="keyword">if</span> (SetForegroundWindow(hwnd) == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;SetForegroundWindow fails&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Delキーを送って、電卓の数字を0にする</span></span><br><span class="line">            KEYBOARDINPUT[] inputs;</span><br><span class="line">            <span class="keyword">uint</span> retVal;</span><br><span class="line">            inputs = <span class="keyword">new</span> KEYBOARDINPUT[<span class="number">2</span>];</span><br><span class="line">            inputs[<span class="number">0</span>].type = INPUT_KEYBOARD;</span><br><span class="line">            inputs[<span class="number">0</span>].wVk = VK_DELETE;</span><br><span class="line">            inputs[<span class="number">0</span>].wScan = (<span class="keyword">ushort</span>)MapVirtualKey(VK_DELETE, <span class="number">0</span>);</span><br><span class="line">            inputs[<span class="number">0</span>].dwFlags = (KEYEVENTF_KEYDOWN | KBD_UNICODE);</span><br><span class="line"></span><br><span class="line">            inputs[<span class="number">1</span>].type = INPUT_KEYBOARD;</span><br><span class="line">            inputs[<span class="number">1</span>].wVk = VK_DELETE;</span><br><span class="line">            inputs[<span class="number">1</span>].wScan = (<span class="keyword">ushort</span>)MapVirtualKey(VK_DELETE, <span class="number">0</span>);</span><br><span class="line">            inputs[<span class="number">1</span>].dwFlags = (KEYEVENTF_KEYUP | KBD_UNICODE);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> cbSize = Marshal.SizeOf&lt;KEYBOARDINPUT&gt;();</span><br><span class="line">            <span class="keyword">if</span> (SendInput(<span class="number">2</span>, inputs, cbSize) == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;SendInput fails&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">uint</span> TargetProcessId;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">EnumWindowsProc</span>(<span class="params">IntPtr hWnd, <span class="keyword">ref</span> IntPtr lParam</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> hChild = IntPtr.Zero;</span><br><span class="line">            <span class="keyword">var</span> buf = <span class="keyword">new</span> StringBuilder(<span class="number">1024</span>);</span><br><span class="line">            GetClassName(hWnd, buf, buf.Capacity);</span><br><span class="line">            <span class="keyword">switch</span> (buf.ToString())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;ApplicationFrameWindow&quot;</span>:</span><br><span class="line">                    hChild = FindWindowEx(hWnd, IntPtr.Zero, <span class="string">&quot;Windows.UI.Core.CoreWindow&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">                    DWORD processId;</span><br><span class="line">                    GetWindowThreadProcessId(hChild, <span class="keyword">out</span> processId);</span><br><span class="line">                    <span class="keyword">if</span> (TargetProcessId == processId)</span><br><span class="line">                    &#123;</span><br><span class="line">                        lParam = hChild;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>電卓に対してDELキーを送信し、数字を消すだけ。<br>でも、電卓は<strong>SetForegroundWindow</strong>で前面には来たけど、<strong>SendInput</strong>が失敗する。<br>Win7の電卓アプリで、似たようなコードが成功するかは確認済み。</p><h1 id="Supplement"><a href="#Supplement" class="headerlink" title="Supplement"></a>Supplement</h1><p>結局、<a href="http://stackoverflow.com/questions/33026109/windows-10-universal-app-key-press-simulation-what-os-context/33027256#33027256">Windows 10 Universal App Key Press Simulation, what OS Context?</a>という記事で、Microsoftの人間が</p><blockquote><p>There is no way to synthesize input in a Universal app. The SendInput API (and equivalents) that InputSimulator uses to inject input is available only to classic Win32 desktop apps, not to Windows Runtime apps.</p></blockquote><p>と発言しているから無理なんでしょう。<br>全てのWin32APIが無効、というわけではないが、入出力系は全滅かもしれない。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> C# </category>
          
          <category> Universal Windows Platform </category>
          
          <category> WinRT </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その38 プロセスIDからUWPAppのHWNDは取得できるか?</title>
      <link href="2017/04/02/1960/"/>
      <url>2017/04/02/1960/</url>
      
        <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h1><p>またまたつまらない疑問。<br><a href="https://taktak.jp/2017/04/02/1953">開発メモ その36 UWPAppはSystem.Diagnostics.Process.GetProcessesで列挙されるか?</a>で試したように、プロセスIDがわかれば<strong>Win32API</strong>を駆使してHWNDを取得できるか?という件。</p><h1 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h1><p>ちょっと面倒な模様。<br><a href="https://taktak.jp/2017/04/02/1956">開発メモ その37 UWPAppはどういうウィンドウ構造をしているか?</a>で書いたように、UWPアプリは、</p><ul><li>ApplicationFrameWindow<ul><li>Windows.UI.Core.CoreWindow</li></ul></li></ul><p>という構造になっている状態。<br>で、<strong>Spy++</strong> で調べた結果、先の<strong>System.Diagnostics.Process.GetProcessesメソッド</strong>で取得できるプロセスIDは<strong>Windows.UI.Core.CoreWindow</strong>のものであることがわかった。<br>つまり、 </p><p><a href="../../../../public/2017/04/eb9b61e54967a2b697bd592c0f22fb40.png"><img src="../../../../public/2017/04/eb9b61e54967a2b697bd592c0f22fb40.png"></a></p><p><a href="../../../../public/2017/04/41d12a955711c9847aa105f4dde27a91.png"><img src="../../../../public/2017/04/41d12a955711c9847aa105f4dde27a91.png"></a></p><p>プロセスIDが違うのである。<br>なので、<a href="https://msdn.microsoft.com/ja-jp/library/windows/desktop/ms633514(v=vs.85).aspx">GetTopWindow</a>、<a href="https://msdn.microsoft.com/ja-jp/library/windows/desktop/ms633522(v=vs.85).aspx">GetWindowThreadProcessId</a>、<a href="https://msdn.microsoft.com/ja-jp/library/windows/desktop/ms633515(v=vs.85).aspx">GetWindow</a><br>を駆使して、トップレベルウィンドウから対象のプロセスIDを探す方法ではダメ。</p><p>面倒だが、トップレベルウィンドウのクラス名がApplicationFrameWindowかつ子ウィンドウのクラス名がWindows.UI.Core.CoreWindowになっているウィンドウを探し出し、そのプロセスIDと比較する必要がありそう。</p><p>具体的には、</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> HWND = System.IntPtr;</span><br><span class="line"><span class="keyword">using</span> DWORD = System.UInt32;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">delegate</span> <span class="keyword">bool</span> <span class="title">Win32Callback</span>(<span class="params">IntPtr hWnd, <span class="keyword">ref</span> IntPtr lParam</span>)</span>;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">DllImport(<span class="meta-string">&quot;user32.dll&quot;</span>)</span>]</span><br><span class="line">        [<span class="meta">return: MarshalAs(UnmanagedType.Bool)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">bool</span> <span class="title">EnumWindows</span>(<span class="params">Win32Callback lpEnumFunc, <span class="keyword">ref</span> IntPtr lParam</span>)</span>;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">DllImport(<span class="meta-string">&quot;user32.dll&quot;</span>, SetLastError = true)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">extern</span> IntPtr <span class="title">FindWindowEx</span>(<span class="params">IntPtr hwndParent, IntPtr hwndChildAfter, <span class="keyword">string</span> lpszClass, <span class="keyword">string</span> lpszWindow</span>)</span>;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">DllImport(<span class="meta-string">&quot;user32.dll&quot;</span>, CharSet = CharSet.Auto)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">GetClassName</span>(<span class="params">IntPtr hWnd, StringBuilder lpClassName, <span class="keyword">int</span> nMaxCount</span>)</span>;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">DllImport(<span class="meta-string">&quot;user32.dll&quot;</span>, SetLastError = true)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">uint</span> <span class="title">GetWindowThreadProcessId</span>(<span class="params">IntPtr hWnd, <span class="keyword">out</span> <span class="keyword">uint</span> lpdwProcessId</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">uint</span> GW_HWNDNEXT = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">int</span> GWL_HWNDPARENT = <span class="number">-8</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">readonly</span> IntPtr NULL = System.IntPtr.Zero;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> ps = System.Diagnostics.Process.GetProcesses().Where(process =&gt; process.ProcessName == <span class="string">&quot;Calculator&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!ps.Any())</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> calc = ps.First();</span><br><span class="line">            <span class="keyword">var</span> pid = calc.Id;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;プロセス名: &#123;0&#125;&quot;</span>, calc.ProcessName);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;ID: &#123;0&#125;&quot;</span>, calc.Id);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// EnumWindowsProc で探索対象のプロセスIDを設定</span></span><br><span class="line">            TargetProcessId = (<span class="keyword">uint</span>)pid;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> proc = <span class="keyword">new</span> Win32Callback(EnumWindowsProc);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> hTarget = IntPtr.Zero;</span><br><span class="line">            EnumWindows(proc, <span class="keyword">ref</span> hTarget);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;HWND: &#123;0&#125;&quot;</span>, hTarget.ToString(<span class="string">&quot;X&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">uint</span> TargetProcessId;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">EnumWindowsProc</span>(<span class="params">IntPtr hWnd, <span class="keyword">ref</span> IntPtr lParam</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> hChild = IntPtr.Zero;</span><br><span class="line">            <span class="keyword">var</span> buf = <span class="keyword">new</span> StringBuilder(<span class="number">1024</span>);</span><br><span class="line">            GetClassName(hWnd, buf, buf.Capacity);</span><br><span class="line">            <span class="keyword">switch</span> (buf.ToString())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;ApplicationFrameWindow&quot;</span>:</span><br><span class="line">                    hChild = FindWindowEx(hWnd, IntPtr.Zero, <span class="string">&quot;Windows.UI.Core.CoreWindow&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">                    DWORD processId;</span><br><span class="line">                    GetWindowThreadProcessId(hChild, <span class="keyword">out</span> processId);</span><br><span class="line">                    <span class="keyword">if</span> (TargetProcessId == processId)</span><br><span class="line">                    &#123;</span><br><span class="line">                        lParam = hChild;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これで、電卓のウィンドウハンドルを取得できる。</p><p><a href="../../../../public/2017/04/a2712cf3558c2556384502efa76ee838.png"><img src="../../../../public/2017/04/a2712cf3558c2556384502efa76ee838.png"></a></p><p><a href="../../../../public/2017/04/761cb6a027065618b3ec41be0f7e7c25.png"><img src="../../../../public/2017/04/761cb6a027065618b3ec41be0f7e7c25.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> C# </category>
          
          <category> Universal Windows Platform </category>
          
          <category> WinRT </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その37 UWPAppはどういうウィンドウ構造をしているか?</title>
      <link href="2017/04/02/1956/"/>
      <url>2017/04/02/1956/</url>
      
        <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h1><p>またもつまらない疑問。<br>単純にGoogleで <strong>“UWP” “Spy++”</strong> って検索してもなかなかどうして意図した結果が見つからない。<br>なので、試してみた。</p><h1 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h1><p><strong>Spy++</strong> でチェックしてみた。</p><p><a href="../../../../public/2017/04/fd7811306d0495d36c96177f16b148ad.png"><img src="../../../../public/2017/04/fd7811306d0495d36c96177f16b148ad.png"></a> <a href="https://msdn.microsoft.com/library/windows/apps/Windows.UI.Core.CoreWindow">Windows.UI.Core.CoreWindow</a><br>はわかります。<br><strong>UWP</strong>で<strong>HWND</strong>にアクセスすするためのI/Fですね。<br><strong>ApplicationFrameWindow</strong>って何さ?って感じですが、ストアアプリをラップしているだけなのか? このあたりは、<strong>MVP</strong>の<strong>Tomoaki Masuda氏</strong>が記事にしていました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://www.moonmile.net/blog/archives/6433" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=www.moonmile.net"></img><div class="hbc-site-name">www.moonmile.net</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">Windows 10 Technical Preview を Hyper-V で試す | Moonmile Solutions Blog</div><div class="hbc-url">http://www.moonmile.net/blog/archives/6433</div></div></div></div></a></div></div><p>MSDNでも記事が無いですね….</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> C# </category>
          
          <category> Universal Windows Platform </category>
          
          <category> WinRT </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その36 UWPAppはSystem.Diagnostics.Process.GetProcessesで列挙されるか?</title>
      <link href="2017/04/02/1953/"/>
      <url>2017/04/02/1953/</url>
      
        <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h1><p><strong>System.Diagnostics.Process.GetProcesses メソッド</strong>は、<strong>UWPアプリ</strong>を列挙するのか? というつまらない疑問。<br>ネット上見ても、出来る、出来ない、すら書いてない。<br>自明のことだから書いてないだけなの?</p><h1 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h1><h2 id="できる。"><a href="#できる。" class="headerlink" title="できる。"></a>できる。</h2><p>電卓を起動し、下記のプログラムを実行する。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> ps = System.Diagnostics.Process.GetProcesses();</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> p <span class="keyword">in</span> ps.Where(process =&gt; process.ProcessName == <span class="string">&quot;Calculator&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;プロセス名: &#123;0&#125;&quot;</span>, p.ProcessName);</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;ID: &#123;0&#125;&quot;</span>, p.Id);</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;ファイル名: &#123;0&#125;&quot;</span>, p.MainModule.FileName);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;エラー: &#123;0&#125;&quot;</span>, ex.Message);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Console.WriteLine();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実行結果は、</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">プロセス名: Calculator</span><br><span class="line"><span class="function">ID: 49308</span></span><br><span class="line"><span class="function">ファイル名: <span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">WindowsApps</span>\<span class="title">Microsoft.WindowsCalculator_10</span>.1703.601.0<span class="title">_x64__8wekyb3d8bbwe</span>\<span class="title">Calculator.exe</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> C# </category>
          
          <category> Universal Windows Platform </category>
          
          <category> WinRT </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その35 protoファイルからドキュメントを生成する</title>
      <link href="2017/03/27/1947/"/>
      <url>2017/03/27/1947/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p><a href="http://www.grpc.io/">gRPC</a>は非常に良い技術です。<br>protoファイルから、クライアント側とサーバー側のコードを自動で生成してくれます。</p><p>つまり、protoファイルそのものが仕様書になるわけです。<br>でも、その仕様書からドキュメントを作成できたら、さらに良くないですか? コーディングをしているエンジニアの大半は、ドキュメント化が苦手ではないでしょうか？(偏見)</p><p>ソースにコメントを書くのは好きですけど、WordまたはExcelで、見栄えの良いドキュメントを作るのはしんどいです。<br>ましてや、ソースにある、メソッド名やクラス名を、もう一度書くとか苦行です。</p><p>そんな苦行から私たちを解放してくれるのが、<strong>protoc-gen-doc</strong>です。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/estan/protoc-gen-doc" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars2.githubusercontent.com/u/4748863?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">pseudomuto/protoc-gen-doc</div><div class="hbc-url">https://github.com/estan/protoc-gen-doc</div><div class="hbc-description">Documentation generator plugin for Google Protocol Buffers - pseudomuto/protoc-gen-doc</div></div></div></div></a></div></div><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p><a href="https://github.com/estan/protoc-gen-doc#invoking-the-plugin">githubでの説明</a>が、かなり端折っていてげんなりしますが、実行は簡単です。<br><a href="https://github.com/estan/protoc-gen-doc/releases">protoc-gen-doc</a>からWindows版がリリースされていますので、ダウンロードして、展開します。<br>次に、<a href="https://github.com/google/protobuf">Protocol Buffers</a>から<strong>protoc.exe</strong>を入手します。<br>または、NugetでgRPC toolsを入手していれば、</p><ul><li>%USERPROFILE%.nuget\packages\grpc.tools\X.Y.Z\tools\windows_x64\protoc.exe</li><li>%USERPROFILE%.nuget\packages\grpc.tools\X.Y.Z\tools\windows_x86\protoc.exe</li></ul><p>が展開されていますので、それを利用します。<br>X.Y.Zはバージョン部分ですので、入手時期によって、変わります。</p><p>試しに、<a href="https://taktak.jp/2017/03/27/1929">.NETでgRPCを試してみる 第1回</a>で使った、protoファイルからドキュメントを生成してみます。<br>そして、下記のバッチを作成し、<strong>PLUGIN_PROTOC_GEN_DOC</strong>や<strong>PROTOC</strong>等を適切な場所に変更します。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> PROTOC=<span class="variable">%USERPROFILE%</span>\.nuget\packages\grpc.tools\<span class="number">1</span>.<span class="number">2</span>.<span class="number">0</span>\tools\windows_x64\protoc.exe</span><br><span class="line"><span class="built_in">set</span> OUT_FILENAME=index.html</span><br><span class="line"><span class="built_in">set</span> OUT_DIR=doc</span><br><span class="line"><span class="built_in">set</span> PLUGIN_PROTOC_GEN_DOC=<span class="variable">%USERPROFILE%</span>\Downloads\protoc-gen-doc-v0.<span class="number">9</span>-win32\protoc-gen-doc.exe</span><br><span class="line"><span class="built_in">set</span> PROTOC_FILE=imageProc.proto</span><br><span class="line"><span class="built_in">mkdir</span> <span class="variable">%OUT_DIR%</span></span><br><span class="line">&quot;<span class="variable">%PROTOC%</span>&quot; --doc_out=html,<span class="variable">%OUT_FILENAME%</span>:<span class="variable">%OUT_DIR%</span> <span class="variable">%PROTOC_FILE%</span> --plugin=protoc-gen-doc=&quot;<span class="variable">%PLUGIN_PROTOC_GEN_DOC%</span>&quot;</span><br><span class="line">PROTO_FILE</span><br></pre></td></tr></table></figure><p><strong>PROTO_FILE</strong>の場所も変更します。上のバッチファイルは、PROTO_FILEがある場所をカレントディレクトリにしていますので、適宜変更してください。<br>実行すると、カレントディレクトリに<strong>doc\index.html</strong>が作成されます。<br>こんな感じです。</p><p><a href="../../../../public/2017/03/index.png"><img src="../../../../public/2017/03/index-1017x1024.png"></a></p><p> 基本英語なので、ドキュメント生成時点から、日本語にしたい場合は、ソースコードから変更する必要がありそうです。</p>]]></content>
      
      
      <categories>
          
          <category> remote-procedure-call </category>
          
          <category> gRPC </category>
          
          <category> Remote Procedure Call </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでRPCを試してみる gRPC編 第1回</title>
      <link href="2017/03/27/1929/"/>
      <url>2017/03/27/1929/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><a href="https://taktak.jp/2017/03/26/1924">前回</a>は導入手順の紹介しました。<br>C#をサポートしているので、試してみないわけにはいきません。<br>Pythonもサポートしており、簡単にテストできそうです。<br>内容としては、C#(クライアント)-Python(サーバー)とし、クライアントから送信した画像をサーバー側で反転して返すというプログラムになります。<br>今回のソースは下記になります。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/takuya-takeuchi/Demo/tree/master/gRPC1" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/6241854?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">takuya-takeuchi/Demo</div><div class="hbc-url">https://github.com/takuya-takeuchi/Demo/tree/master/gRPC1</div><div class="hbc-description">Sample source code for Demonstration, Experiment and Test - takuya-takeuchi/Demo</div></div></div></div></a></div></div><h1 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h1><p>C#側は前回インストールしましたので省略します。</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p>Pythonにもインストールしておきます。<br>Pythonインタープリターは、いつも通り<strong>Miniconda</strong>になります。<br>pipでインストールする場合は、pipのバージョンが8以降であることが条件です。<br>バージョンは下記の手順で確認。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">Miniconda2</span>&gt;<span class="title">python</span> -<span class="title">m</span> <span class="title">pip</span> --<span class="title">version</span></span></span><br><span class="line"><span class="function"><span class="title">pip</span> 9.0.1 <span class="title">from</span> <span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">Miniconda2</span>\<span class="title">lib</span>\<span class="title">site</span>-<span class="title">packages</span> (<span class="title">python</span> 2.7)</span></span><br></pre></td></tr></table></figure><p><strong>gRPC</strong>をインストールします。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">Miniconda2</span>&gt;<span class="title">python</span> -<span class="title">m</span> <span class="title">pip</span> <span class="title">install</span> <span class="title">grpcio</span></span></span><br><span class="line"><span class="function"><span class="title">Collecting</span> <span class="title">grpcio</span></span></span><br><span class="line"><span class="function">  <span class="title">Downloading</span> <span class="title">grpcio</span>-1.2.0-<span class="title">cp27</span>-<span class="title">cp27m</span>-<span class="title">win_amd64.whl</span> (1.1<span class="title">MB</span>)</span></span><br><span class="line"><span class="function">    100% |################################| 1.1<span class="title">MB</span> 846<span class="title">kB</span>/<span class="title">s</span></span></span><br><span class="line"><span class="function"><span class="title">Requirement</span> <span class="title">already</span> <span class="title">satisfied</span>: <span class="title">six</span>&gt;=1.5.2 <span class="title">in</span> <span class="title">c</span>:\<span class="title">program</span> <span class="title">files</span>\<span class="title">miniconda2</span>\<span class="title">lib</span>\<span class="title">site</span>-<span class="title">packages</span> (<span class="title">from</span> <span class="title">grpcio</span>)</span></span><br><span class="line"><span class="function"><span class="title">Collecting</span> <span class="title">protobuf</span>&gt;=3.2.0 (<span class="title">from</span> <span class="title">grpcio</span>)</span></span><br><span class="line"><span class="function">  <span class="title">Downloading</span> <span class="title">protobuf</span>-3.2.0-<span class="title">py2.py3</span>-<span class="title">none</span>-<span class="title">any.whl</span> (360<span class="title">kB</span>)</span></span><br><span class="line"><span class="function">    100% |################################| 368<span class="title">kB</span> 1.8<span class="title">MB</span>/<span class="title">s</span></span></span><br><span class="line"><span class="function"><span class="title">Requirement</span> <span class="title">already</span> <span class="title">satisfied</span>: <span class="title">enum34</span>&gt;=1.0.4 <span class="title">in</span> <span class="title">c</span>:\<span class="title">program</span> <span class="title">files</span>\<span class="title">miniconda2</span>\<span class="title">lib</span>\<span class="title">site</span>-<span class="title">packages</span> (<span class="title">from</span> <span class="title">grpcio</span>)</span></span><br><span class="line"><span class="function"><span class="title">Collecting</span> <span class="title">futures</span>&gt;=2.2.0 (<span class="title">from</span> <span class="title">grpcio</span>)</span></span><br><span class="line"><span class="function">  <span class="title">Downloading</span> <span class="title">futures</span>-3.0.5-<span class="title">py2</span>-<span class="title">none</span>-<span class="title">any.whl</span></span></span><br><span class="line"><span class="function"><span class="title">Requirement</span> <span class="title">already</span> <span class="title">satisfied</span>: <span class="title">setuptools</span> <span class="title">in</span> <span class="title">c</span>:\<span class="title">program</span> <span class="title">files</span>\<span class="title">miniconda2</span>\<span class="title">lib</span>\<span class="title">site</span>-<span class="title">packages</span>\<span class="title">setuptools</span>-20.3-<span class="title">py2</span>.7.<span class="title">egg</span> (<span class="title">from</span> <span class="title">protobuf</span>&gt;=3.2.0-&gt;<span class="title">grpcio</span>)</span></span><br><span class="line"><span class="function"><span class="title">Installing</span> <span class="title">collected</span> <span class="title">packages</span>: <span class="title">protobuf</span>, <span class="title">futures</span>, <span class="title">grpcio</span></span></span><br><span class="line"><span class="function">  <span class="title">Found</span> <span class="title">existing</span> <span class="title">installation</span>: <span class="title">protobuf</span> 2.6.1</span></span><br><span class="line"><span class="function">    <span class="title">Uninstalling</span> <span class="title">protobuf</span>-2.6.1:</span></span><br><span class="line"><span class="function">      <span class="title">Successfully</span> <span class="title">uninstalled</span> <span class="title">protobuf</span>-2.6.1</span></span><br><span class="line"><span class="function"><span class="title">Successfully</span> <span class="title">installed</span> <span class="title">futures</span>-3.0.5 <span class="title">grpcio</span>-1.2.0 <span class="title">protobuf</span>-3.2.0</span></span><br></pre></td></tr></table></figure><p>続いて、<strong>gRPC tools</strong>をインストールします。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">Miniconda2</span>&gt;<span class="title">python</span> -<span class="title">m</span> <span class="title">pip</span> <span class="title">install</span> <span class="title">grpcio</span>-<span class="title">tools</span></span></span><br><span class="line"><span class="function"><span class="title">Collecting</span> <span class="title">grpcio</span>-<span class="title">tools</span></span></span><br><span class="line"><span class="function">  <span class="title">Downloading</span> <span class="title">grpcio_tools</span>-1.2.0-<span class="title">cp27</span>-<span class="title">cp27m</span>-<span class="title">win_amd64.whl</span> (1.5<span class="title">MB</span>)</span></span><br><span class="line"><span class="function">    100% |################################| 1.5<span class="title">MB</span> 687<span class="title">kB</span>/<span class="title">s</span></span></span><br><span class="line"><span class="function"><span class="title">Requirement</span> <span class="title">already</span> <span class="title">satisfied</span>: <span class="title">grpcio</span>&gt;=1.2.0 <span class="title">in</span> <span class="title">c</span>:\<span class="title">program</span> <span class="title">files</span>\<span class="title">miniconda2</span>\<span class="title">lib</span>\<span class="title">site</span>-<span class="title">packages</span> (<span class="title">from</span> <span class="title">grpcio</span>-<span class="title">tools</span>)</span></span><br><span class="line"><span class="function"><span class="title">Requirement</span> <span class="title">already</span> <span class="title">satisfied</span>: <span class="title">protobuf</span>&gt;=3.2.0 <span class="title">in</span> <span class="title">c</span>:\<span class="title">program</span> <span class="title">files</span>\<span class="title">miniconda2</span>\<span class="title">lib</span>\<span class="title">site</span>-<span class="title">packages</span> (<span class="title">from</span> <span class="title">grpcio</span>-<span class="title">tools</span>)</span></span><br><span class="line"><span class="function"><span class="title">Requirement</span> <span class="title">already</span> <span class="title">satisfied</span>: <span class="title">six</span>&gt;=1.5.2 <span class="title">in</span> <span class="title">c</span>:\<span class="title">program</span> <span class="title">files</span>\<span class="title">miniconda2</span>\<span class="title">lib</span>\<span class="title">site</span>-<span class="title">packages</span> (<span class="title">from</span> <span class="title">grpcio</span>&gt;=1.2.0-&gt;<span class="title">grpcio</span>-<span class="title">tools</span>)</span></span><br><span class="line"><span class="function"><span class="title">Requirement</span> <span class="title">already</span> <span class="title">satisfied</span>: <span class="title">enum34</span>&gt;=1.0.4 <span class="title">in</span> <span class="title">c</span>:\<span class="title">program</span> <span class="title">files</span>\<span class="title">miniconda2</span>\<span class="title">lib</span>\<span class="title">site</span>-<span class="title">packages</span> (<span class="title">from</span> <span class="title">grpcio</span>&gt;=1.2.0-&gt;<span class="title">grpcio</span>-<span class="title">tools</span>)</span></span><br><span class="line"><span class="function"><span class="title">Requirement</span> <span class="title">already</span> <span class="title">satisfied</span>: <span class="title">futures</span>&gt;=2.2.0 <span class="title">in</span> <span class="title">c</span>:\<span class="title">program</span> <span class="title">files</span>\<span class="title">miniconda2</span>\<span class="title">lib</span>\<span class="title">site</span>-<span class="title">packages</span> (<span class="title">from</span> <span class="title">grpcio</span>&gt;=1.2.0-&gt;<span class="title">grpcio</span>-<span class="title">tools</span>)</span></span><br><span class="line"><span class="function"><span class="title">Requirement</span> <span class="title">already</span> <span class="title">satisfied</span>: <span class="title">setuptools</span> <span class="title">in</span> <span class="title">c</span>:\<span class="title">program</span> <span class="title">files</span>\<span class="title">miniconda2</span>\<span class="title">lib</span>\<span class="title">site</span>-<span class="title">packages</span>\<span class="title">setuptools</span>-20.3-<span class="title">py2</span>.7.<span class="title">egg</span> (<span class="title">from</span> <span class="title">protobuf</span>&gt;=3.2.0-&gt;<span class="title">grpcio</span>-<span class="title">tools</span>)</span></span><br><span class="line"><span class="function"><span class="title">Installing</span> <span class="title">collected</span> <span class="title">packages</span>: <span class="title">grpcio</span>-<span class="title">tools</span></span></span><br><span class="line"><span class="function"><span class="title">Successfully</span> <span class="title">installed</span> <span class="title">grpcio</span>-<span class="title">tools</span>-1.2.0</span></span><br></pre></td></tr></table></figure><p>gRPC toolsは <strong>proto</strong> というファイルから、サーバー、クライアント側のコードを生成するためのジェネレーターになります。</p><h1 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h1><h2 id="gRPC-tools"><a href="#gRPC-tools" class="headerlink" title="gRPC tools"></a>gRPC tools</h2><p>protoファイルを用意して、サーバー、クライアントのコードを生成します。</p><h3 id="imageProc-proto"><a href="#imageProc-proto" class="headerlink" title="imageProc.proto"></a>imageProc.proto</h3><p>サンプルが <a href="https://github.com/grpc/grpc/blob/master/examples/protos/helloworld.proto">github</a> にありますが、面白くないので、手を加えます。</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> imageProc;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">service</span> <span class="title">ImageProc</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> Enhancement (EnhancementRequest) <span class="keyword">returns</span> (EnhancementReply) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">EnhancementRequest</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int32</span>  width = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">int32</span>  height = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">int32</span>  channel = <span class="number">3</span>;</span><br><span class="line">  <span class="built_in">bytes</span>  image = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">EnhancementReply</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int32</span>  result = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">int32</span>  width = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">int32</span>  height = <span class="number">3</span>;</span><br><span class="line">  <span class="built_in">int32</span>  channel = <span class="number">4</span>;</span><br><span class="line">  <span class="built_in">bytes</span>  image = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>続いて、imageProc.protoからコードを生成します。<br>gRPC toolsから生成しますが、PythonとC#側でそれぞれ生成する必要があります。<br>また、言語用にそれぞれgRPC toolsがあるので、それぞれ入手します。</p><h3 id="for-Python"><a href="#for-Python" class="headerlink" title="for Python"></a>for Python</h3><p>PythonでのgRPC toolsは下記のように使います。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m grpc_tools.protoc -I&lt;protoファイルの存在ディレクトリ&gt; --python_out=&lt;出力先のパス&gt; --grpc_python_out=&lt;出力先のパス&gt; &lt;protoファイルのパス&gt; </span><br></pre></td></tr></table></figure><p>今回のソース構成では、gRPC1フォルダにimageProc.protoがありますので、そこをカレントディレクトリにして下記を実行します。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m grpc_tools.protoc -I. --python_out=python --grpc_python_out=python imageProc.proto </span><br></pre></td></tr></table></figure><p>これにより、<strong>Python\imageProc_pb2.py</strong>と<strong>Python\imageProc_pb2_grpc.py</strong> が生成されます。</p><h3 id="for-C"><a href="#for-C" class="headerlink" title="for C#"></a>for C#</h3><p>C#側は少し面倒です。<br>まず、nugetを入手します。<br>これはVisual Studioから実行できるものではなく、スタンドアロンのコマンドラインツールです。<br><a href="https://dist.nuget.org/index.html">Available NuGet Distribution Versions</a>から、**nuget.exe - recommended latest (v3.5.0)**を選択します。<br>ダウンロードしたnuget.exeを適切な場所に展開し、ソースフォルダのpackagesフォルダをカレントディレクトにして、次のコマンドを入力します。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">Works</span>\<span class="title">Demo</span>\<span class="title">gRPC1</span>\<span class="title">packages</span>&gt;&quot;<span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">NuGet</span>\<span class="title">nuget.exe</span>&quot; <span class="title">install</span> <span class="title">Grpc.Tools</span></span></span><br><span class="line"><span class="function"><span class="title">Feeds</span> <span class="title">used</span>:</span></span><br><span class="line"><span class="function">  <span class="title">https</span>://<span class="title">api.nuget.org</span>/<span class="title">v3</span>/<span class="title">index.json</span></span></span><br><span class="line"><span class="function">  <span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span> (<span class="title">x86</span>)\<span class="title">Microsoft</span> <span class="title">SDKs</span>\<span class="title">NuGetPackages</span>\</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  <span class="title">GET</span> <span class="title">https</span>://<span class="title">api.nuget.org</span>/<span class="title">v3</span>/<span class="title">registration1</span>-<span class="title">gz</span>/<span class="title">grpc.tools</span>/<span class="title">index.json</span></span></span><br><span class="line"><span class="function">  <span class="title">OK</span> <span class="title">https</span>://<span class="title">api.nuget.org</span>/<span class="title">v3</span>/<span class="title">registration1</span>-<span class="title">gz</span>/<span class="title">grpc.tools</span>/<span class="title">index.json</span> 672<span class="title">ms</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Attempting</span> <span class="title">to</span> <span class="title">gather</span> <span class="title">dependency</span> <span class="title">information</span> <span class="title">for</span> <span class="title">package</span> &#x27;<span class="title">Grpc.Tools</span>.1.2.0&#x27; <span class="title">with</span></span></span><br><span class="line"><span class="function"><span class="title">respect</span> <span class="title">to</span> <span class="title">project</span> &#x27;<span class="title">D</span>:\<span class="title">Works</span>\<span class="title">Demo</span>\<span class="title">gRPC1</span>\<span class="title">packages</span>&#x27;, <span class="title">targeting</span> &#x27;<span class="title">Any</span>,<span class="title">Version</span>=<span class="title">v0</span>.0&#x27;</span></span><br><span class="line"><span class="function"><span class="title">Gathering</span> <span class="title">dependency</span> <span class="title">information</span> <span class="title">took</span> 15.35 <span class="title">ms</span></span></span><br><span class="line"><span class="function"><span class="title">Attempting</span> <span class="title">to</span> <span class="title">resolve</span> <span class="title">dependencies</span> <span class="title">for</span> <span class="title">package</span> &#x27;<span class="title">Grpc.Tools</span>.1.2.0&#x27; <span class="title">with</span> <span class="title">DependencyBehavior</span> &#x27;<span class="title">Lowest</span>&#x27;</span></span><br><span class="line"><span class="function"><span class="title">Resolving</span> <span class="title">dependency</span> <span class="title">information</span> <span class="title">took</span> 0 <span class="title">ms</span></span></span><br><span class="line"><span class="function"><span class="title">Resolving</span> <span class="title">actions</span> <span class="title">to</span> <span class="title">install</span> <span class="title">package</span> &#x27;<span class="title">Grpc.Tools</span>.1.2.0&#x27;</span></span><br><span class="line"><span class="function"><span class="title">Resolved</span> <span class="title">actions</span> <span class="title">to</span> <span class="title">install</span> <span class="title">package</span> &#x27;<span class="title">Grpc.Tools</span>.1.2.0&#x27;</span></span><br><span class="line"><span class="function"><span class="title">Retrieving</span> <span class="title">package</span> &#x27;<span class="title">Grpc.Tools</span> 1.2.0&#x27; <span class="title">from</span> &#x27;<span class="title">nuget.org</span>&#x27;.</span></span><br><span class="line"><span class="function"><span class="title">Adding</span> <span class="title">package</span> &#x27;<span class="title">Grpc.Tools</span>.1.2.0&#x27; <span class="title">to</span> <span class="title">folder</span> &#x27;<span class="title">D</span>:\<span class="title">Works</span>\<span class="title">Demo</span>\<span class="title">gRPC1</span>\<span class="title">packages</span>&#x27;</span></span><br><span class="line"><span class="function"><span class="title">Added</span> <span class="title">package</span> &#x27;<span class="title">Grpc.Tools</span>.1.2.0&#x27; <span class="title">to</span> <span class="title">folder</span> &#x27;<span class="title">D</span>:\<span class="title">Works</span>\<span class="title">Demo</span>\<span class="title">gRPC1</span>\<span class="title">packages</span>&#x27;</span></span><br><span class="line"><span class="function"><span class="title">Successfully</span> <span class="title">installed</span> &#x27;<span class="title">Grpc.Tools</span> 1.2.0&#x27; <span class="title">to</span> <span class="title">D</span>:\<span class="title">Works</span>\<span class="title">Demo</span>\<span class="title">gRPC1</span>\<span class="title">packages</span></span></span><br><span class="line"><span class="function"><span class="title">Executing</span> <span class="title">nuget</span> <span class="title">actions</span> <span class="title">took</span> 176.33 <span class="title">ms</span> </span></span><br></pre></td></tr></table></figure><p>カレントディレクトリに<strong>Grpc.Tools.1.2.0</strong>が作成されます。<br>続いて、コードを生成します。<br>構文はPythonと似ています。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc.exe -I&lt;protpファイルの存在ディレクトリ&gt; --csharp_out &lt;出力先のパス&gt; --grpc_out &lt;出力先のパス&gt; &lt;protoファイルのパス&gt; --plugin=protoc-gen-grpc=&lt;grpc_csharp_plugin.exeのパス&gt; </span><br></pre></td></tr></table></figure><p>grpc_csharp_plugin.exeは先ほどのnuget.exeでGrpc.Toolsをインストールした際に、同時にインストールされます。<br>ですので、下記のようにしてimageProc.protoからコードを生成します。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">Works</span>\<span class="title">Demo</span>\<span class="title">gRPC1</span>&gt;<span class="title">mkdir</span> <span class="title">gRPC</span>\<span class="title">Contracts</span> <span class="title">D</span>:\<span class="title">Works</span>\<span class="title">Demo</span>\<span class="title">gRPC1</span>&gt;<span class="title">packages</span>\<span class="title">Grpc.Tools</span>.1.2.0\<span class="title">tools</span>\<span class="title">windows_x86</span>\<span class="title">protoc.exe</span> -<span class="title">I</span>. --<span class="title">csharp_out</span> <span class="title">gRPC</span>\<span class="title">Contracts</span> --<span class="title">grpc_out</span> <span class="title">gRPC</span>\<span class="title">Contracts</span> <span class="title">imageProc.proto</span> --<span class="title">plugin</span>=<span class="title">protoc</span>-<span class="title">gen</span>-<span class="title">grpc</span>=<span class="title">packages</span>\<span class="title">Grpc.Tools</span>.1.2.0\<span class="title">tools</span>\<span class="title">windows_x86</span>\<span class="title">grpc_csharp_plugin.exe</span> </span></span><br></pre></td></tr></table></figure><p>これにより、<strong>gRPC\Contracts\ImageProc.cs</strong>と<strong>gRPC\Contracts\ImageProcGrpc.cs</strong> が生成されます。</p><h2 id="Python-1"><a href="#Python-1" class="headerlink" title="Python"></a>Python</h2><p>コードの生成が完了したので、Python側でgRPCを利用するコードを記述していきます。</p><h3 id="imageProc-server-py"><a href="#imageProc-server-py" class="headerlink" title="imageProc_server.py"></a>imageProc_server.py</h3><p><strong>xxx_pb2_grpc.py</strong> というファイルにて、クライアント、サービスの基底クラスが定義されていますので、これらから派生したクラスを実装していきます。<br>Python側がサーバーになるので、<strong>ImageProcServicer</strong>から派生します。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent <span class="keyword">import</span> futures</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> grpc</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> PIL.ImageOps</span><br><span class="line"><span class="keyword">import</span> imageProc_pb2</span><br><span class="line"><span class="keyword">import</span> imageProc_pb2_grpc</span><br><span class="line"></span><br><span class="line">_ONE_DAY_IN_SECONDS = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImageProc</span>(<span class="params">imageProc_pb2_grpc.ImageProcServicer</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Enhancement</span>(<span class="params">self, request, context</span>):</span></span><br><span class="line">        reply = imageProc_pb2.EnhancementReply()</span><br><span class="line">        reply.width = request.width</span><br><span class="line">        reply.height = request.height</span><br><span class="line">        reply.channel = request.channel</span><br><span class="line"></span><br><span class="line">        imageSize = request.width, request.height</span><br><span class="line">        <span class="comment"># 1 (1-bit pixels, black and white, stored with one pixel per byte)</span></span><br><span class="line">        <span class="comment"># L (8-bit pixels, black and white)</span></span><br><span class="line">        <span class="comment"># P (8-bit pixels, mapped to any other mode using a colour palette)</span></span><br><span class="line">        <span class="comment"># RGB (3x8-bit pixels, true colour)</span></span><br><span class="line">        <span class="comment"># RGBA (4x8-bit pixels, true colour with transparency mask)</span></span><br><span class="line">        <span class="comment"># CMYK (4x8-bit pixels, colour separation)</span></span><br><span class="line">        <span class="comment"># YCbCr (3x8-bit pixels, colour video format)</span></span><br><span class="line">        <span class="comment"># I (32-bit signed integer pixels)</span></span><br><span class="line">        <span class="comment"># F (32-bit floating point pixels)</span></span><br><span class="line">        channel = request.channel</span><br><span class="line">        <span class="keyword">if</span> channel == <span class="number">4</span>:</span><br><span class="line">            print(<span class="string">&#x27;channel is 4&#x27;</span>)</span><br><span class="line">            <span class="comment"># PIL.ImageOps.invert does NOT support RGBA</span></span><br><span class="line">            tmp = Image.frombytes(<span class="string">&#x27;RGBA&#x27;</span>,  imageSize, request.image)</span><br><span class="line">            r, g, b, a = tmp.split()</span><br><span class="line">            rgb = Image.merge(<span class="string">&quot;RGB&quot;</span>, (b, g, r))</span><br><span class="line">            inverted = PIL.ImageOps.invert(rgb)</span><br><span class="line">            r, g, b = inverted.split()</span><br><span class="line">            reply.image = Image.merge(<span class="string">&quot;RGBA&quot;</span>, (r, g, b, a)).tobytes()</span><br><span class="line">        <span class="keyword">elif</span> channel == <span class="number">3</span>:</span><br><span class="line">            print(<span class="string">&#x27;channel is 3&#x27;</span>)</span><br><span class="line">            reply.image = PIL.ImageOps.invert(Image.frombytes(<span class="string">&#x27;RGB&#x27;</span>, imageSize, request.image)).tobytes()</span><br><span class="line">        <span class="keyword">elif</span> channel == <span class="number">1</span>:</span><br><span class="line">            print(<span class="string">&#x27;channel is 1&#x27;</span>)</span><br><span class="line">            reply.image = PIL.ImageOps.invert(Image.frombytes(<span class="string">&#x27;1&#x27;</span>, imageSize, request.image)).tobytes()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&#x27;channel is unknown&#x27;</span>)</span><br><span class="line">            reply.image = PIL.ImageOps.invert(Image.frombytes(<span class="string">&#x27;L&#x27;</span>, imageSize, request.image)).tobytes()</span><br><span class="line"></span><br><span class="line">        reply.result = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> reply</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">serve</span>():</span></span><br><span class="line">    server = grpc.server(futures.ThreadPoolExecutor(max_workers=<span class="number">10</span>))</span><br><span class="line">    imageProc_pb2_grpc.add_ImageProcServicer_to_server(ImageProc(), server)</span><br><span class="line">    server.add_insecure_port(<span class="string">&#x27;[::]:50051&#x27;</span>)</span><br><span class="line">    server.start()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            time.sleep(_ONE_DAY_IN_SECONDS)</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        server.stop(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  serve()</span><br></pre></td></tr></table></figure><p><strong>ImageProc</strong>は自動生成された<strong>ImageProcServicer</strong>から派生して適宜実装します。<br>今回は、入力されたバイナリデータを反転する処理を書いています。<br>main関数はserve関数を呼び出しています。<br>serve関数は、<a href="https://github.com/grpc/grpc/blob/master/examples/python/helloworld/greeter_server.py">https://github.com/grpc/grpc/blob/master/examples/python/helloworld/greeter_server.py</a>を参考に記述しますので簡単です。</p><h2 id="C"><a href="#C" class="headerlink" title="C#"></a>C#</h2><p>MVVMで実装します。<br>画像ファイルを読み込むボタン、読み込んだ画像を表示するパネル、サーバーと通信するための送信ボタン、サーバーからの結果を表示するためのパネルを備えています。<br>また、実装を開始する前に、nugetで<strong>Google.Protobuf</strong>をインストールします。</p><h3 id="MainViewModel-cs"><a href="#MainViewModel-cs" class="headerlink" title="MainViewModel.cs"></a>MainViewModel.cs</h3><p>まずは、interfaceです。<br>Xaml上のButtonに対応するCommandと、Imgaeに対応するImageSourceを備えているだけです。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Windows.Media;</span><br><span class="line"><span class="keyword">using</span> GalaSoft.MvvmLight.Command;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Grpc1.ViewModels.Interfaces</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IMainViewModel</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> Properties</span></span><br><span class="line"></span><br><span class="line">        RelayCommand OpenFileCommand</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ImageSource ResultImage</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        RelayCommand ServerRequestCommand</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ImageSource SourceImage</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="IMainViewModel-cs"><a href="#IMainViewModel-cs" class="headerlink" title="IMainViewModel.cs"></a>IMainViewModel.cs</h3><p><strong>IMainViewModel</strong>を継承しています。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Windows;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Media;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Media.Imaging;</span><br><span class="line"><span class="keyword">using</span> GalaSoft.MvvmLight;</span><br><span class="line"><span class="keyword">using</span> GalaSoft.MvvmLight.Command;</span><br><span class="line"><span class="keyword">using</span> Google.Protobuf;</span><br><span class="line"><span class="keyword">using</span> Grpc1.ViewModels.Interfaces;</span><br><span class="line"><span class="keyword">using</span> ImageProc;</span><br><span class="line"><span class="keyword">using</span> Microsoft.WindowsAPICodePack.Dialogs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Grpc1.ViewModels</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">MainViewModel</span> : <span class="title">ViewModelBase</span>, <span class="title">IMainViewModel</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> Properties</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> RelayCommand _OpenFileCommand;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> RelayCommand OpenFileCommand</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._OpenFileCommand ?? (<span class="keyword">this</span>._OpenFileCommand = <span class="keyword">new</span> RelayCommand(() =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">using</span> (<span class="keyword">var</span> dlg = <span class="keyword">new</span> CommonOpenFileDialog())</span><br><span class="line">                    &#123;</span><br><span class="line">                        dlg.IsFolderPicker = <span class="literal">false</span>;</span><br><span class="line">                        dlg.AddToMostRecentlyUsedList = <span class="literal">false</span>;</span><br><span class="line">                        dlg.AllowNonFileSystemItems = <span class="literal">false</span>;</span><br><span class="line">                        dlg.EnsureFileExists = <span class="literal">true</span>;</span><br><span class="line">                        dlg.EnsurePathExists = <span class="literal">true</span>;</span><br><span class="line">                        dlg.EnsureReadOnly = <span class="literal">false</span>;</span><br><span class="line">                        dlg.EnsureValidNames = <span class="literal">true</span>;</span><br><span class="line">                        dlg.Multiselect = <span class="literal">false</span>;</span><br><span class="line">                        dlg.ShowPlacesList = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">var</span> dialogResult = dlg.ShowDialog();</span><br><span class="line">                        <span class="keyword">if</span> (dialogResult != CommonFileDialogResult.Ok)</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">var</span> bitmap = <span class="keyword">new</span> BitmapImage();</span><br><span class="line">                        <span class="keyword">try</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            bitmap.BeginInit();</span><br><span class="line">                            bitmap.UriSource = <span class="keyword">new</span> Uri(dlg.FileName);</span><br><span class="line">                            bitmap.EndInit();</span><br><span class="line">                            <span class="keyword">this</span>.SourceImage = bitmap;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">                        &#123;</span><br><span class="line">                            MessageBox.Show(ex.Message);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">this</span>._ServerRequestCommand?.RaiseCanExecuteChanged();</span><br><span class="line">                &#125;, () =&gt; <span class="literal">true</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> ImageSource _ResultImage;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ImageSource ResultImage</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._ResultImage;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>._ResultImage = <span class="keyword">value</span>;</span><br><span class="line">                <span class="keyword">this</span>.RaisePropertyChanged();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> RelayCommand _ServerRequestCommand;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> RelayCommand ServerRequestCommand</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._ServerRequestCommand ?? (<span class="keyword">this</span>._ServerRequestCommand = <span class="keyword">new</span> RelayCommand(<span class="keyword">async</span> () =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> bitmap = <span class="keyword">this</span>._SourceImage <span class="keyword">as</span> BitmapImage;</span><br><span class="line">                    <span class="keyword">if</span> (bitmap == <span class="literal">null</span>)</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">var</span> width = bitmap.PixelWidth;</span><br><span class="line">                    <span class="keyword">var</span> height = bitmap.PixelHeight;</span><br><span class="line">                    <span class="keyword">var</span> stride = (width * bitmap.Format.BitsPerPixel + <span class="number">7</span>) / <span class="number">8</span>;</span><br><span class="line">                    <span class="keyword">var</span> bitsPerPixel = bitmap.Format.BitsPerPixel;</span><br><span class="line">                    <span class="keyword">var</span> bytesPerPixel = bitsPerPixel / <span class="number">8</span>;</span><br><span class="line">                    <span class="keyword">var</span> originalPixels = <span class="keyword">new</span> <span class="keyword">byte</span>[width * height * bytesPerPixel];</span><br><span class="line">                    bitmap.CopyPixels(originalPixels, stride, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">var</span> channel = <span class="keyword">new</span> Grpc.Core.Channel(<span class="string">&quot;127.0.0.1:50051&quot;</span>, Grpc.Core.ChannelCredentials.Insecure);</span><br><span class="line">                        <span class="keyword">var</span> client = <span class="keyword">new</span> ImageProc.ImageProc.ImageProcClient(channel);</span><br><span class="line">                        <span class="keyword">var</span> reply = <span class="keyword">await</span> client.EnhancementAsync(<span class="keyword">new</span> EnhancementRequest</span><br><span class="line">                        &#123;</span><br><span class="line">                            Height = height,</span><br><span class="line">                            Width = width,</span><br><span class="line">                            Channel = bytesPerPixel,</span><br><span class="line">                            Image = ByteString.CopyFrom(originalPixels)</span><br><span class="line">                        &#125;);</span><br><span class="line">                        channel.ShutdownAsync().Wait();</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">var</span> resultPixels = reply.Image.ToByteArray();</span><br><span class="line">                        <span class="keyword">if</span> (resultPixels != <span class="literal">null</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">var</span> bmpSource = BitmapSource.Create(</span><br><span class="line">                                width,</span><br><span class="line">                                height,</span><br><span class="line">                                bitmap.DpiX,</span><br><span class="line">                                bitmap.DpiY,</span><br><span class="line">                                bitmap.Format,</span><br><span class="line">                                <span class="literal">null</span>,</span><br><span class="line">                                resultPixels,</span><br><span class="line">                                stride);</span><br><span class="line">                            <span class="keyword">if</span> (bmpSource.CanFreeze)</span><br><span class="line">                                bmpSource.Freeze();</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">this</span>.ResultImage = bmpSource;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">catch</span></span><br><span class="line">                    &#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, () =&gt; <span class="keyword">this</span>._SourceImage != <span class="literal">null</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> ImageSource _SourceImage;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ImageSource SourceImage</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._SourceImage;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>._SourceImage = <span class="keyword">value</span>;</span><br><span class="line">                <span class="keyword">this</span>.RaisePropertyChanged();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>OpenFileCommand</strong>は、画像ファイルを<strong>System.Windows.Media.Imaging.BitmapImage</strong>に変換して、<strong>SourceImage</strong>に設定するだけです。<br>注目は、<strong>ServerRequestCommand</strong>の下記の部分です。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> channel = <span class="keyword">new</span> Grpc.Core.Channel(<span class="string">&quot;127.0.0.1:50051&quot;</span>, Grpc.Core.ChannelCredentials.Insecure);</span><br><span class="line"><span class="keyword">var</span> client = <span class="keyword">new</span> ImageProc.ImageProc.ImageProcClient(channel);</span><br><span class="line"><span class="keyword">var</span> reply = <span class="keyword">await</span> client.EnhancementAsync(<span class="keyword">new</span> EnhancementRequest</span><br><span class="line">&#123;</span><br><span class="line">    Height = height,</span><br><span class="line">    Width = width,</span><br><span class="line">    Channel = bytesPerPixel,</span><br><span class="line">    Image = ByteString.CopyFrom(originalPixels)</span><br><span class="line">&#125;);</span><br><span class="line">channel.ShutdownAsync().Wait();</span><br></pre></td></tr></table></figure><p>ローカル(127.0.0.1)のポート50051に対して、gRPCで通信を確立し、APIを呼び出しています。<br><strong>ImageProc.ImageProc.ImageProcClient</strong>は、gRPC toolsで自動生成しているものです。<br>通信に関係するコードはすべて自動で生成されるので、クライアント側は、ちょっとした呼び出しのコードを記述するだけで、簡単にサーバー側のAPIを呼び出せるわけです。</p><h1 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h1><p>サーバー側とクライアント側をテストしてみます。<br>サーバー側(<strong>imageProc_server.py</strong>)を起動し、任意の画像ファイルを読み込み、サーバー側APIを呼び出すと、反転した画像が返ってきます。</p><p><a href="../../../../public/2017/03/test-2.gif"><img src="../../../../public/2017/03/test-2-1024x417.gif"></a></p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>通信周りはすべて自動生成に任せ、ビジネスロジックの実装に注力できるのは、本当に楽です。<br>今時、ソケットだのコールバックだの考えるのは本当に面倒です。</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/gRPC1">https://github.com/takuya-takeuchi/Demo/tree/master/gRPC1</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> remote-procedure-call </category>
          
          <category> gRPC </category>
          
          <category> .NETでRPCを試してみる </category>
          
          <category> Remote Procedure Call </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでRPCを試してみる gRPC編 第0回</title>
      <link href="2017/03/26/1924/"/>
      <url>2017/03/26/1924/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>RESTを使って、簡単なクラサバアプリを構築したのですが、</p><ul><li>バイナリの転送が重い<ul><li>jsonまたはxmlで返すから、BASE64で通信量が増える</li></ul></li></ul><p>というのが、制約になって食指が動きません。</p><p>そんな中、<strong>gRPC</strong> なるGoogleが作った<strong>HTTP/2</strong>を標準でサポートした新しいRPC (Remote Procedure Call ) フレームワークを見つけました。<br>2015年2月に発表されたらしいので、今さら感が漂いますが… </p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://www.grpc.io/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=www.grpc.io"></img><div class="hbc-site-name">gRPC</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://grpc.io/img/logos/grpc-icon-color.png"></img></div><div class="hbc-text"><div class="hbc-title">gRPC</div><div class="hbc-url">http://www.grpc.io/</div><div class="hbc-description">A high-performance, open source universal RPC framework</div></div></div></div></a></div></div><p><strong>HTTP/2</strong>を基礎としており、<strong>Protocol Buffers</strong>を使ってサービスを定義するので高速な通信が可能、と最新技術を使っているのも、カッコいい。<br>素晴らしいのは、言語サポートが広く、<a href="http://www.grpc.io/">公式ページ</a>によれば、</p><ul><li>C++</li><li>Java</li><li>Python</li><li>Go</li><li>Ruby</li><li>Node.js</li><li>C#</li><li>Objective-C</li><li>Android</li><li>Java</li><li>PHP</li></ul><p>をサポートしています。<br>C#をサポートしているので、試してみないわけにはいきません。<br>Pythonもサポートしており、簡単にテストできそうです。</p><h1 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h1><p>自分でビルドするか、nugetでインストールもできます。<br>お手軽に nuget でインストールします。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://www.nuget.org/packages/Grpc/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=www.nuget.org"></img><div class="hbc-site-name">www.nuget.org</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://api.nuget.org/v3-flatcontainer/grpc/2.34.0/icon"></img></div><div class="hbc-text"><div class="hbc-title">Grpc 2.34.0</div><div class="hbc-url">https://www.nuget.org/packages/Grpc/</div><div class="hbc-description">Metapackage for gRPC C#</div></div></div></div></a></div></div><p>簡単ですね。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>今回は導入のみ。<br>次回は、C#-Pythonで通信してみます。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> remote-procedure-call </category>
          
          <category> gRPC </category>
          
          <category> .NETでRPCを試してみる </category>
          
          <category> Remote Procedure Call </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでパケットキャプチャを試してみる SharpPcap編 第1回</title>
      <link href="2017/03/24/1921/"/>
      <url>2017/03/24/1921/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2017/03/23/1912">前回</a>はPcap.Netでキャプチャを実施しました。</p><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>今回は<strong>SharpPcap</strong>を使います。ライセンスは<strong>LGPL</strong>です。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/chmorgan/sharppcap" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars1.githubusercontent.com/u/1211904?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">chmorgan/sharppcap</div><div class="hbc-url">https://github.com/chmorgan/sharppcap</div><div class="hbc-description">Official repository - Fully managed, cross platform (Windows, Mac, Linux) .NET library for capturing packets - chmorgan/sharppcap</div></div></div></div></a></div></div><p>Nugetにパッケージはありますが、またも公式では無い様子。<br>githubに公式ページがありますが、Nugetについて言及が無いので、野良配布でしょう。<br>なので、githubのリリースページから最新版を入手します。<br>2017年3月末時点で4.2.0が最新版です。</p><p>Pcap.Netとは異なり、バイナリにx86版とx64版はありません。</p><ul><li>SharpPcap.dll</li><li>PacketDotNet.dll</li></ul><p>なので、前回と違って気にすることは少ないです。<br>また、SharpPcapは<strong>Packet.Net</strong>というライブラリに依存しています。こちらもLGPLです。<br>今回のソースは下記になります </p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/takuya-takeuchi/Demo/tree/master/WPF.SharpPcap1" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/6241854?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">takuya-takeuchi/Demo</div><div class="hbc-url">https://github.com/takuya-takeuchi/Demo/tree/master/WPF.SharpPcap1</div><div class="hbc-description">Sample source code for Demonstration, Experiment and Test - takuya-takeuchi/Demo</div></div></div></div></a></div></div><h1 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h1><p>前回と同じ、Xamlです。<br>また、前回はinterfaceを駆使しているため、編集するソースは1ファイルだけになります。<br>実装をinterfaceで分離したかいがありました。<br>SharpPcapのライブラリは、<strong>sln</strong> ファイルと同じ階層にあるlibフォルダに、下記のように配置してください。</p><ul><li>lib\SharpPcap-4.2.0\Release\SharpPcap.dll</li><li>lib\SharpPcap-4.2.0\Release\PacketDotNet.dll</li></ul><h2 id="PacketCaptureService"><a href="#PacketCaptureService" class="headerlink" title="PacketCaptureService"></a>PacketCaptureService</h2><p>前回のソースを基準にしますので、interfaceは一切変更しません。<br>Pcap.NetのクラスをSharpPcapのクラスに置換したりするだけです。<br>修正ファイルは、<strong>PacketCaptureService.cs</strong> のみです。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> PacketDotNet;</span><br><span class="line"><span class="keyword">using</span> SharpPcap;</span><br><span class="line"><span class="keyword">using</span> WPF.PacketCapture.Models.Interfaces;</span><br><span class="line"><span class="keyword">using</span> WPF.PacketCapture.Services.Interfaces;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WPF.PacketCapture.Services</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">PacketCaptureService</span> : <span class="title">IPacketCaptureService</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> Methods</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> IEnumerable&lt;IPacketCaptureDeviceModel&gt; <span class="title">GetAllDevices</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> CaptureDeviceList.Instance.Select(device =&gt; <span class="keyword">new</span> PacketCaptureDeviceModel(device));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">PacketCaptureDeviceModel</span> : <span class="title">IPacketCaptureDeviceModel</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">region</span> Events</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">event</span> EventHandler&lt;IPacketModel&gt; PacketReceived;</span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">region</span> Fields</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">readonly</span> ICaptureDevice _Device;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> Task _Task;</span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">region</span> Constructors</span></span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">PacketCaptureDeviceModel</span>(<span class="params">ICaptureDevice device</span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                <span class="keyword">this</span>._Device = device;</span><br><span class="line">                <span class="keyword">this</span>._Device.OnPacketArrival += <span class="keyword">this</span>.OnPacketReceived;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">region</span> Properties</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">string</span> Description =&gt; <span class="keyword">this</span>._Device.Description;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">string</span> Name =&gt; <span class="keyword">this</span>._Device.Name;</span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">region</span> Methods</span></span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StartCapture</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                <span class="keyword">this</span>._Device.StopCapture();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// read timeout</span></span><br><span class="line">                <span class="keyword">var</span> timeout = <span class="number">1000</span>;</span><br><span class="line">                <span class="keyword">this</span>._Device.Open(DeviceMode.Promiscuous, timeout);</span><br><span class="line">                <span class="keyword">this</span>._Device.Filter = <span class="string">&quot;ip and tcp and port http&quot;</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>._Task?.Dispose();</span><br><span class="line">                <span class="keyword">this</span>._Task = Task.Run(() =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">try</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">this</span>._Device.StartCapture();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">catch</span> (Exception e)</span><br><span class="line">                    &#123;</span><br><span class="line">                        Console.WriteLine(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StopCapture</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 停止時に例外を投げるが原因が不明</span></span><br><span class="line">                    <span class="keyword">this</span>._Device.StopCapture();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (Exception e)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(e);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>._Task?.Dispose();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">region</span> Helper Methods</span></span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnPacketReceived</span>(<span class="params"><span class="keyword">object</span> sender, CaptureEventArgs captureEventArgs</span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                <span class="keyword">this</span>.PacketReceived?.Invoke(<span class="keyword">this</span>, <span class="keyword">new</span> PacketModel(captureEventArgs.Packet));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">PacketModel</span> : <span class="title">IPacketModel</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">region</span> Fields</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">readonly</span> Packet _Packet;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">readonly</span> RawCapture _RawCapture;</span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">region</span> Constructors</span></span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">PacketModel</span>(<span class="params">RawCapture rawPacket</span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                <span class="keyword">this</span>._RawCapture = rawPacket;</span><br><span class="line">                <span class="keyword">this</span>._Packet = Packet.ParsePacket(rawPacket.LinkLayerType, rawPacket.Data);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">region</span> Properties</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">string</span> Destination =&gt; (<span class="keyword">this</span>._Packet.PayloadPacket <span class="keyword">as</span> IPv4Packet)?.DestinationAddress?.ToString();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">int</span> Length =&gt; <span class="keyword">this</span>._Packet.Bytes.Length;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> DateTime Timestamp =&gt; <span class="keyword">this</span>._RawCapture.Timeval.Date;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">string</span> Source =&gt; (<span class="keyword">this</span>._Packet.PayloadPacket <span class="keyword">as</span> IPv4Packet)?.SourceAddress?.ToString();</span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Pcap.Netと異なり、DestnationやSourceを取得する際に、型のキャストが必要になるのが面倒かな。<br>パケットはデータリンク層かもしれないので、アドレスがない可能性があるのはわかりますが。<br>フィルタの構文はPcap.Netと同じです。<br>これは、WinPcapを使っているためです。</p><h1 id="テスト"><a href="#テスト" class="headerlink" title="テスト"></a>テスト</h1><p>実際に実行してみます。<br>お好きなキャプチャデバイスを選択してStart Captureを押下することでキャプチャが実行されます。<br>HTTPのみ許容しているので、Webブラウザでどこかにアクセスしてみてください。<br>前回と全く同じです。</p><p><a href="../../../../public/2017/03/test-1.gif"><img src="../../../../public/2017/03/test-1.gif"></a></p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>今回も簡単にキャプチャできました。<br>基本的にWinPcapのラッパーなので、似た使い方になるので、移植も簡単でしたね。</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/WPF.SharpPcap1">https://github.com/takuya-takeuchi/Demo/tree/master/WPF.SharpPcap1</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> C# </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> Windows Presentation Foundation </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> .NETでパケットキャプチャを試してみる </category>
          
          <category> %e3%83%91%e3%82%b1%e3%83%83%e3%83%88%e3%82%ad%e3%83%a3%e3%83%97%e3%83%81%e3%83%a3 </category>
          
          <category> SharpPcap </category>
          
          <category> WinPcap </category>
          
          <category> パケットキャプチャ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでパケットキャプチャを試してみる Pcap.Net編 第1回</title>
      <link href="2017/03/23/1912/"/>
      <url>2017/03/23/1912/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2017/03/22/1893">前回</a>は下準備でした。</p><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>まずは、Pcap.Netを入手します。<br>Nugetにパッケージはありますが、公式では無い様子。<br>githubに公式ページがありますが、そこでNugetについて言及が無いので、野良配布でしょう。<br>なので、githubのリリースページから最新版を入手します。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/PcapDotNet/Pcap.Net" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars1.githubusercontent.com/u/11466079?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">PcapDotNet/Pcap.Net</div><div class="hbc-url">https://github.com/PcapDotNet/Pcap.Net</div><div class="hbc-description">.NET wrapper for WinPcap written in C++/CLI and C#, which features almost all WinPcap features and includes a packet interpretation framewor…</div></div></div></div></a></div></div><p>注意して欲しいのは、解凍後の中身にx86版とx64版が存在することです。<br>正確には、</p><ul><li>PcapDotNet.Core.dll</li><li>PcapDotNet.Core.Extensions.dll</li></ul><p>の2つが、x86またはx64でビルドされており、残りはAnyでビルドされています。<br>つまり、配布時には、これらを切り替えて実行フォルダに配置しないと <strong>System.BadImageFormatException</strong> で落ちます。<br>そのため、ソリューションの構成にAnyは含みませんが、参照dllはやむなくx64のPcap.Netを参照しています。<br>実行時にdllを適切に配置すれば良いのですが、若干気持ち悪いかな…</p><p>ソースは下記になります </p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/takuya-takeuchi/Demo/tree/master/WPF.Pcap.Net1" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/6241854?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">takuya-takeuchi/Demo</div><div class="hbc-url">https://github.com/takuya-takeuchi/Demo/tree/master/WPF.Pcap.Net1</div><div class="hbc-description">Sample source code for Demonstration, Experiment and Test - takuya-takeuchi/Demo</div></div></div></div></a></div></div><h1 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h1><p>いつも通り、簡単にMVVMを使用して簡単なプロジェクトを作成します。<br>ネットワークアダプタを選択するリストボックス、選択したリストボックスに流れるHTTPトラフィックを表示するグリッドマップ、キャプチャの開始ボタンを備えています。<br>Xaml側は省略します。</p><p>Pcap.Netのライブラリは、<strong>sln</strong> ファイルと同じ階層にあるlibフォルダに、下記のように配置してください。</p><ul><li>\lib\PcapDotNet\PcapDotNet.Binaries.1.0.4.x64\PcapDotNet.Base.dll</li><li>\lib\PcapDotNet\PcapDotNet.Binaries.1.0.4.x64\PcapDotNet.Base.pdb</li><li>\lib\PcapDotNet\PcapDotNet.Binaries.1.0.4.x64\PcapDotNet.Base.xml</li><li>\lib\PcapDotNet\PcapDotNet.Binaries.1.0.4.x64\PcapDotNet.Core.dll</li><li>\lib\PcapDotNet\PcapDotNet.Binaries.1.0.4.x64\PcapDotNet.Core.Extensions.dll</li><li>\lib\PcapDotNet\PcapDotNet.Binaries.1.0.4.x64\PcapDotNet.Core.Extensions.pdb</li><li>\lib\PcapDotNet\PcapDotNet.Binaries.1.0.4.x64\PcapDotNet.Core.Extensions.XML</li><li>\lib\PcapDotNet\PcapDotNet.Binaries.1.0.4.x64\PcapDotNet.Core.pdb</li><li>\lib\PcapDotNet\PcapDotNet.Binaries.1.0.4.x64\PcapDotNet.Core.xml</li><li>\lib\PcapDotNet\PcapDotNet.Binaries.1.0.4.x64\PcapDotNet.Packets.dll</li><li>\lib\PcapDotNet\PcapDotNet.Binaries.1.0.4.x64\PcapDotNet.Packets.pdb</li><li>\lib\PcapDotNet\PcapDotNet.Binaries.1.0.4.x64\PcapDotNet.Packets.xml</li></ul><h2 id="IPacketCaptureService"><a href="#IPacketCaptureService" class="headerlink" title="IPacketCaptureService"></a>IPacketCaptureService</h2><p>まず、DI(依存性注入)のため、パケットキャプチャを担当するinterfaceを定義します。<br>Pcap.Netとの依存性を極力減らすために、入出力の型もinterfaceに限定しています。<br>つまり、interface実装側で具象クラスを生成しますが、サービスの利用側は実際の型を意識しなくて済むので、依存性を断ち切れます。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> WPF.PcapNet.Models.Interfaces;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WPF.PcapNet.Services.Interfaces</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPacketCaptureService</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="function">IEnumerable&lt;IPacketCaptureDeviceModel&gt; <span class="title">GetAllDevices</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="IPacketCaptureDeviceModel"><a href="#IPacketCaptureDeviceModel" class="headerlink" title="IPacketCaptureDeviceModel"></a>IPacketCaptureDeviceModel</h2><p><strong>IPacketCaptureService.GetAllDevices</strong> の戻りの要素である、ネットワークキャプチャデバイスを表現します。<br>このinterfaceからパケットのキャプチャの開始、停止を指示します。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WPF.PcapNet.Models.Interfaces</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPacketCaptureDeviceModel</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> Events</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">event</span> EventHandler&lt;IPacketModel&gt; PacketReceived;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> Properties</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">string</span> Description</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">string</span> Name</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> Methods</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">StartCapture</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">StopCapture</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="IPacketModel"><a href="#IPacketModel" class="headerlink" title="IPacketModel"></a>IPacketModel</h2><p>パケットデータを表現します。<br>今回は、送信元アドレス、送信先アドレス、パケット長、送受信日時のみ用意します。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WPF.PcapNet.Models.Interfaces</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPacketModel</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> Properties</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">string</span> Destination</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> Length</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        DateTime Timestamp</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">string</span> Source</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="PacketCaptureService"><a href="#PacketCaptureService" class="headerlink" title="PacketCaptureService"></a>PacketCaptureService</h1><p>今回の肝です。<br>型をネストしているのは、型の情報を外部が知る必要は無いですし、無関係のクラスが型を使用しないようにすることを意識させやすくするためです。<br>まぁprivateだからアクセスできませんが。<br>必要な情報は、interfaceを経由し、Pcap.Netの具体的なデータにアクセスします。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> PcapDotNet.Core;</span><br><span class="line"><span class="keyword">using</span> PcapDotNet.Packets;</span><br><span class="line"><span class="keyword">using</span> WPF.PcapNet.Models.Interfaces;</span><br><span class="line"><span class="keyword">using</span> WPF.PcapNet.Services.Interfaces;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WPF.PcapNet.Services</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">PacketCaptureService</span> : <span class="title">IPacketCaptureService</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> Methods</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> IEnumerable&lt;IPacketCaptureDeviceModel&gt; <span class="title">GetAllDevices</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> LivePacketDevice.AllLocalMachine.Select(device =&gt; <span class="keyword">new</span> PacketCaptureDeviceModel(device));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">PacketCaptureDeviceModel</span> : <span class="title">IPacketCaptureDeviceModel</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">region</span> Events</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">event</span> EventHandler&lt;IPacketModel&gt; PacketReceived;</span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">region</span> Fields</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">readonly</span> LivePacketDevice _Device;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> BerkeleyPacketFilter _Filter;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> PacketCommunicator _PacketCommunicator;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> Task _Task;</span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">region</span> Constructors</span></span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">PacketCaptureDeviceModel</span>(<span class="params">LivePacketDevice device</span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                <span class="keyword">this</span>._Device = device;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">region</span> Properties</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">string</span> Description =&gt; <span class="keyword">this</span>._Device.Description;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">string</span> Name =&gt; <span class="keyword">this</span>._Device.Name;</span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">region</span> Methods</span></span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StartCapture</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                <span class="comment">// portion of the packet to capture</span></span><br><span class="line">                <span class="comment">// 65536 guarantees that the whole packet will be captured on all the link layers</span></span><br><span class="line">                <span class="keyword">var</span> snapshotLength = <span class="number">65536</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// promiscuous mode</span></span><br><span class="line">                <span class="keyword">var</span> packetDeviceOpenAttributes = PacketDeviceOpenAttributes.Promiscuous;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// read timeout</span></span><br><span class="line">                <span class="keyword">var</span> timeout = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>._PacketCommunicator?.Break();</span><br><span class="line">                <span class="keyword">this</span>._PacketCommunicator?.Dispose();</span><br><span class="line">                <span class="keyword">this</span>._PacketCommunicator = <span class="keyword">this</span>._Device.Open(snapshotLength, packetDeviceOpenAttributes, timeout);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>._Filter?.Dispose();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>._Filter = <span class="keyword">this</span>._PacketCommunicator.CreateFilter(<span class="string">&quot;ip and tcp and port http&quot;</span>);</span><br><span class="line">                <span class="keyword">this</span>._PacketCommunicator.SetFilter(<span class="keyword">this</span>._Filter);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>._Task?.Dispose();</span><br><span class="line">                <span class="keyword">this</span>._Task = Task.Run(() =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">try</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 停止時に例外を投げるが、原因不明</span></span><br><span class="line">                        <span class="keyword">this</span>._PacketCommunicator.ReceivePackets(<span class="number">0</span>, <span class="keyword">this</span>.OnPacketReceived);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">catch</span> (Exception e)</span><br><span class="line">                    &#123;</span><br><span class="line">                        Console.WriteLine(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StopCapture</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                <span class="keyword">this</span>._PacketCommunicator?.Break();</span><br><span class="line">                <span class="keyword">this</span>._PacketCommunicator?.Dispose();</span><br><span class="line">                <span class="keyword">this</span>._Filter?.Dispose();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>._PacketCommunicator = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">this</span>._Filter = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">region</span> Helper Methods</span></span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnPacketReceived</span>(<span class="params">Packet packet</span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                <span class="keyword">this</span>.PacketReceived?.Invoke(<span class="keyword">this</span>, <span class="keyword">new</span> PacketModel(packet));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">PacketModel</span> : <span class="title">IPacketModel</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">region</span> Fields</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">readonly</span> Packet _Packet;</span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">region</span> Constructors</span></span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">PacketModel</span>(<span class="params">Packet packet</span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                <span class="keyword">this</span>._Packet = packet;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">region</span> Properties</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">string</span> Destination =&gt; <span class="keyword">this</span>._Packet.IpV4.Destination.ToString();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">int</span> Length =&gt; <span class="keyword">this</span>._Packet.Length;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> DateTime Timestamp =&gt; <span class="keyword">this</span>._Packet.Timestamp;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">string</span> Source =&gt; <span class="keyword">this</span>._Packet.IpV4.Source.ToString();</span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>StartCapture</strong> が重要です。<br><strong>LivePacketDevice.Open</strong>でパケットのキャプチャを開始するオブジェクトを取得します。<br>その後、フィルターを設定し、IPかつTCPかつHTTP以外を弾きます。<br>最後に、<strong>PacketCommunicator.ReceivePackets</strong> で、コールバック関数を指定してキャプチャを開始します。<br>注意してほしいのは、このメソッドはスレッドをブロックします。<br>よって、Taskによる非同期実行しています。</p><p>本当は、StartCaptureをasyncすれば良かったのですが、これで動くので良いです。<br>停止は、<strong>PacketCommunicator.Break</strong> を呼びます。<br>ただし、Task内で、<strong>InvalidOpeationException</strong>を投げる原因がわかりませんので、try-catchで囲っています。<br>キャプチャ中に停止しているのが不味いのだと思いますが…</p><h1 id="テスト"><a href="#テスト" class="headerlink" title="テスト"></a>テスト</h1><p>実際に実行してみます。<br>お好きなキャプチャデバイスを選択してStart Captureを押下することでキャプチャが実行されます。<br>HTTPのみ許容しているので、Webブラウザでどこかにアクセスしてみてください。</p><p><a href="../../../../public/2017/03/test.gif"><img src="../../../../public/2017/03/test-300x215.gif"></a></p><p> ちょっとマウスカーソルが途中でどこか行ったのは、Webブラウザを操作しに行ったからです。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>簡単にキャプチャできました。<br>フィルタ条件が若干覚えないといけないですが、このあたりを自分が理解できやすいUIにすることで、グッと使いやすくなると思います。</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/WPF.Pcap.Net1">https://github.com/takuya-takeuchi/Demo/tree/master/WPF.Pcap.Net1</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> C# </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> Windows Presentation Foundation </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> .NETでパケットキャプチャを試してみる </category>
          
          <category> %e3%83%91%e3%82%b1%e3%83%83%e3%83%88%e3%82%ad%e3%83%a3%e3%83%97%e3%83%81%e3%83%a3 </category>
          
          <category> Pcap.net </category>
          
          <category> WinPcap </category>
          
          <category> パケットキャプチャ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでパケットキャプチャを試してみる 第0回</title>
      <link href="2017/03/22/1893/"/>
      <url>2017/03/22/1893/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>キャプチャアプリケーションと銘打って、画像、動画、音声をキャプチャして、色々なフィルタを適用するアプリを個人的に作っています。<br>現在、テキストデータを連続するフィルタに通して加工する仕組みを考えています。</p><p>それと同時に、ネットワークを流れるパケットもキャプチャできたら面白いなぁ、って思っています。</p><p>パケットキャプチャを使う機会はそう多くは無いのですが、どれも重たいし、複雑すぎる印象があります。<br>代表的なのは</p><ul><li>Wireshark</li><li>Fiddler</li><li>Microsoft Message Analyzer (旧Microsoft Network Monitor)</li></ul><p>です。</p><p>そんなパケットキャプチャを.NETで使ってみようという趣旨です。</p><p>パケットキャプチャは大抵 <strong>WinPcap.dll</strong> というパケットキャプチャライブラリを使っています。<br>WinPcap.dllはLinuxの <strong>libpcap</strong> をWindowsに移植したものです。<br>WinPcap.dllは高水準APIであり、低水準APIである <strong>Packet.dll</strong> を使っています。<br>さらに、Packet.dllは <strong>Npf.sys</strong> というフィルタドライバを使います。Npfはきっと <strong>Network Packet Filter</strong> の略でしょう。</p><p>で、当然これらは <strong>C/C++</strong> で記述されたネイティブライブラリなので、.NETから呼ぶのは、P/Invokeを定義し、使いやすいようにラップする必要があります。<br>幸い、.NETのラッパーが存在しています。</p><ul><li>SharpPcap</li><li>Pcap.net</li></ul><p>がある模様。<br><a href="http://stackoverflow.com/questions/6650754/pcap-net-vs-sharppcap" title="Pcap.net vs Sharppcap">Pcap.net vs Sharppcap</a>にて、この2つのどちらがよいか、という質問がありました。<br>Acceptedにはなっていないコメントですが、Pcap.netはC++/CLIが使われていて、パフォーマンスも考慮されているし、機能的にも優れている、とありました。<br>なので、次回からPcap.netを使います。</p><h1 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h1><p>先ほど話したとおり、パケットキャプチャはWinPcapを使っています。Microsoftのパケットキャプチャはそんなの使っていないでしょうが。<br>まずはWinPcapをインストールします。<br>なお、Windows 10と互換性のある <a href="http://www.win10pcap.org/ja/download/" title="Win10Pcap">Win10Pcap</a> もありますが、今回は割愛。<br>なぜなら、Win10Pcapは <strong>GNUライセンス</strong> だから… ちなみに、WinPcapは <strong>BSDライセンス</strong> です。</p><h2 id="WinPcapのインストール"><a href="#WinPcapのインストール" class="headerlink" title="WinPcapのインストール"></a>WinPcapのインストール</h2><p><a href="http://www.winpcap.org/" title="WinPcap">公式ページ</a>からダウンロードします。最新版は4.1.3になります。<br>インストールはexeを実行するだけです。</p><p><a href="../../../../public/2017/03/4fc6cc22f63a0359c4b9a07bef9a17b2.png"><img src="../../../../public/2017/03/4fc6cc22f63a0359c4b9a07bef9a17b2-300x232.png"></a></p><p><a href="../../../../public/2017/03/80554133c8d1e6856e46168bb311d72e.png"><img src="../../../../public/2017/03/80554133c8d1e6856e46168bb311d72e-300x232.png"></a></p><p>Windows起動時にWinPcapを起動するかというチェックですが、そのままにしておきます。</p><p><a href="../../../../public/2017/03/8bf828acc64c1d794783a9db3ef152f6.png"><img src="../../../../public/2017/03/8bf828acc64c1d794783a9db3ef152f6-300x232.png"></a></p><p><a href="../../../../public/2017/03/c153d9beaf0c314e8046505603939a2a.png"><img src="../../../../public/2017/03/c153d9beaf0c314e8046505603939a2a-300x232.png"></a></p><p><a href="../../../../public/2017/03/fb1f5e86f9a862d193d9e17ff8e9ca4c.png"><img src="../../../../public/2017/03/fb1f5e86f9a862d193d9e17ff8e9ca4c-300x232.png"></a></p><p>以上で完了。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>次回から、実際にPcap.netを使ってパケットキャプチャを実施していきます。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> .NETでパケットキャプチャを試してみる </category>
          
          <category> %e3%83%91%e3%82%b1%e3%83%83%e3%83%88%e3%82%ad%e3%83%a3%e3%83%97%e3%83%81%e3%83%a3 </category>
          
          <category> Pcap.net </category>
          
          <category> WinPcap </category>
          
          <category> パケットキャプチャ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その34 OxyPlotのグラフ境界線を非表示にする</title>
      <link href="2017/03/21/1884/"/>
      <url>2017/03/21/1884/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p><a href="http://www.oxyplot.org/">OxyPlot</a> は、.NETで簡単にグラフを描画できるライブラリです。<br>ライセンスもMITで非常に使い勝手が良いです。</p><p>グラフの描画が簡単なのですが、Xamlとの連携で、「あれ？」と思う箇所がありました。<br>グラフ表示領域の枠線をXamlから非表示にしようとしたところ、非表示にできなくて困りました。<br>下記のような感じですね。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;oxy:PlotView BorderThickness&#x3D;&quot;0&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>これでは消えないので、メモとして残します。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>コードから実行します。<br>通常、<strong>OxyPlot.Wpf.PlotView.Model プロパティ</strong>に <strong>OxyPlot.PlotModel クラス</strong>をバインディングします。<br>そのPlotModelで境界線を制御します。<br>下記のような感じです。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> model = <span class="keyword">new</span> PlotModel &#123; PlotAreaBorderThickness = <span class="keyword">new</span> OxyThickness(<span class="number">0</span>), &#125;; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> グラフ </category>
          
          <category> OxyPlot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その33 GitKrakenからPull Requestを投げる</title>
      <link href="2017/03/20/1869/"/>
      <url>2017/03/20/1869/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p><a href="https://www.gitkraken.com/">GitKraken</a> いいですね。<br>直感的で美しいGUIで、SourceTreeとちがって、非常にさくさく動きます。<br><strong>gitflow</strong> に対応しているのも良いです。</p><p>で、GitKrakenからGithubにPull Requestを投げる方法の日本語資料がなかったので、メモしておきます。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>今回は、<a href="https://github.com/shimat/opencvsharp">OpenCVSharp</a>に実際にPull Requestしましたので、その画像で説明します。</p><h2 id="Fork"><a href="#Fork" class="headerlink" title="Fork"></a>Fork</h2><p>Forkします。<br>ForkはGithubから直接実施します。</p><h2 id="Clone"><a href="#Clone" class="headerlink" title="Clone"></a>Clone</h2><p>ForkしたリポジトリをローカルにCloneし、GitKrakenで開きます。</p><p><a href="../../../../public/2017/03/8c896128533338806aa30e2cbc25a510.png"><img src="../../../../public/2017/03/8c896128533338806aa30e2cbc25a510-300x181.png"></a></p><p>次に、gitflowの初期化を行います。<br>これ、いちいち設定画面を開くのが面倒なんですよね。</p><p><a href="../../../../public/2017/03/a332d484c66f703172c6ed73a0342e74.png"><img src="../../../../public/2017/03/a332d484c66f703172c6ed73a0342e74-300x181.png"></a></p><p><a href="../../../../public/2017/03/3c989d5d33328a8b9aabbbabf0173736-1.png"><img src="../../../../public/2017/03/3c989d5d33328a8b9aabbbabf0173736-1-300x181.png"></a></p><h2 id="feature"><a href="#feature" class="headerlink" title="feature"></a>feature</h2><p>トピックブランチ、すなわちgitflowでいうfeatureブランチを作成します。<br>ここでは、MatDiagFixという名前にしてあります。</p><p><a href="../../../../public/2017/03/883a708ab987ba7866c961e429a79211.png"><img src="../../../../public/2017/03/883a708ab987ba7866c961e429a79211-300x181.png"></a></p><p><a href="../../../../public/2017/03/7619ea8fa7f90bf656243fc7020abd64.png"><img src="../../../../public/2017/03/7619ea8fa7f90bf656243fc7020abd64-300x181.png"></a></p><h2 id="Commit"><a href="#Commit" class="headerlink" title="Commit"></a>Commit</h2><p>普通に編集してコミットまで実施します。<br><strong>まだ、finishはしないでください。</strong></p><h2 id="Push"><a href="#Push" class="headerlink" title="Push"></a>Push</h2><p><strong>Finishはしないでください。</strong><br>Pull RequestをGitKrakenから投げる場合、リモートにトピックブランチ(この場合、MatDiagFix)をプッシュすると同時にPull Requestを作成する機能があります。</p><p><a href="../../../../public/2017/03/e69f11d30b7e77d48ac96c861fc7eeba.png"><img src="../../../../public/2017/03/e69f11d30b7e77d48ac96c861fc7eeba-300x182.png"></a></p><p>Push先はそのままでOKなので、Submitを押下します。</p><p><a href="../../../../public/2017/03/2533ef056aa9138004b306bc6fc38fe5.png"><img src="../../../../public/2017/03/2533ef056aa9138004b306bc6fc38fe5-300x181.png"></a></p><h2 id="Create-Pull-Request"><a href="#Create-Pull-Request" class="headerlink" title="Create Pull Request"></a>Create Pull Request</h2><p>Pushが完了すると、Pull Requestを作成するダイアログが表示されます。<br>右側の To Repoのコンボボックスで、Fork元、つまり今回はOpenCVSharpのリポジトリを選択します。<br>ブランチはmasterしかないので、masterを選びます。</p><p>Pull Requestのタイトルは、コミットメッセージが既定で挿入されていますので、必要に応じて修正します。<br>確認が終わったら、Create Pull Requestを押下して完了です。</p><p><a href="../../../../public/2017/03/23217d628d93aaa339a299511c114b8f.png"><img src="../../../../public/2017/03/23217d628d93aaa339a299511c114b8f-300x181.png"></a></p><h2 id="Githubでは"><a href="#Githubでは" class="headerlink" title="Githubでは?"></a>Githubでは?</h2><p>GithubでPull Requestを確認してみます。<br>Fork元のPull Requestsを見てみると、<a href="https://github.com/shimat/opencvsharp/pull/330">#329: Mat.Diag(Mat) does not reutrn a square diagonal matrix</a> がきちんと追加されていることがわかります。</p>]]></content>
      
      
      <categories>
          
          <category> バージョン管理システム </category>
          
          <category> git </category>
          
          <category> GitKraken </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>雑記 「書き込み」ボタンを消す</title>
      <link href="2017/03/14/1864/"/>
      <url>2017/03/14/1864/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><a href="../../../../public/2017/03/334e27d4e5abd45f78c6b34784448599.png"><img src="../../../../public/2017/03/334e27d4e5abd45f78c6b34784448599-300x222.png"></a><br> これが邪魔です。</p><h1 id="Get-out-here"><a href="#Get-out-here" class="headerlink" title="Get out here!!"></a>Get out here!!</h1><p>レジストリエディタを開き、以下のキーを開きます。</p><p><strong>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer</strong></p><p>続いて、<strong>NoCDBurning</strong>をいうキーを<strong>DWORD (32ビット) 値</strong>で作成し、値を <strong>1</strong> にします。<br>そして、再起動またはログオフすれば消えます。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> 雑記 </category>
          
          <category> Windows </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>WordPressの高速化</title>
      <link href="2017/03/12/1854/"/>
      <url>2017/03/12/1854/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>このサイトのレスポンスが悪くなってきたので、サーバーの移転とかを検討しています。<br>しかしその前に、設定の見直しなどで高速化できないか、と調べてみました。</p><h1 id="Google-PageSpeed-Insights"><a href="#Google-PageSpeed-Insights" class="headerlink" title="Google PageSpeed Insights"></a>Google PageSpeed Insights</h1><p><a href="https://developers.google.com/speed/pagespeed/insights/">Google PageSpeed Insights</a> は、携帯端末やデスクトップ端末向けのページのパフォーマンスを測定します。<br>計測後、点数(100点満点)で評価付けを行い、パフォーマンスの改善施策を提案してくれます。<br>下記は、このサイトを計測してみた結果になります。</p><p><a href="../../../../public/2017/03/screencapture-developers-google-speed-pagespeed-insights-1489314827990.png"><img src="../../../../public/2017/03/screencapture-developers-google-speed-pagespeed-insights-1489314827990-282x300.png"></a> スコアが<strong>59/100</strong>とあまり芳しくないご様子。</p><p>修正として <strong>gzip や deflate を使用してリソースを圧縮することで、ネットワークで送信されるバイト数を減らすことができます。</strong> という提案があります。<br>この修正案を全部適用すれば、<strong>転送サイズを 509 KB (71%)<br> 削減できます。</strong> とあります。これは大きい。<br>ですので、リソースの圧縮を適用することにします。</p><h2 id="圧縮を有効"><a href="#圧縮を有効" class="headerlink" title="圧縮を有効"></a>圧縮を有効</h2><p><a href="http://webkaru.net/wordpress/">WordPressの使い方と設定</a> というサイト様で、<a href="http://webkaru.net/wordpress/pagespeed-insights-deflate/">圧縮を有効にする - PageSpeed Insights</a> という記事がありましたので、それを参考に設定を実施します。</p><p>まず、FTPでWordPressにアクセスします。<br>その際、FTPクライアントの設定によっては、**.htaccess** が表示されません。<br>例えば、WinSCP では、下記のように隠しファイルを表示する設定を有効にしないと表示されません。</p><p><a href="../../../../public/2017/03/1956b52021231e12487d67234161afe7.png"><img src="../../../../public/2017/03/1956b52021231e12487d67234161afe7-300x254.png"></a></p><p>設定を有効後、**/home//www/wordpress/.htaccess** が表示されるはずです。<br>.htaccessをダウンロードして適当なエディタで開きます。<br>その後、下記の記述を追加します。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;IfModule mod_deflate.c&gt;</span></span><br><span class="line"><span class="attribute">AddOutputFilterByType</span> DEFLATE text/plain</span><br><span class="line"><span class="attribute">AddOutputFilterByType</span> DEFLATE text/html</span><br><span class="line"><span class="attribute">AddOutputFilterByType</span> DEFLATE text/xml</span><br><span class="line"><span class="attribute">AddOutputFilterByType</span> DEFLATE text/css</span><br><span class="line"><span class="attribute">AddOutputFilterByType</span> DEFLATE application/xml</span><br><span class="line"><span class="attribute">AddOutputFilterByType</span> DEFLATE application/xhtml+xml</span><br><span class="line"><span class="attribute">AddOutputFilterByType</span> DEFLATE application/rss+xml</span><br><span class="line"><span class="attribute">AddOutputFilterByType</span> DEFLATE application/javascript</span><br><span class="line"><span class="attribute">AddOutputFilterByType</span> DEFLATE application/x-javascript</span><br><span class="line"><span class="section">&lt;/IfModule&gt;</span></span><br></pre></td></tr></table></figure><p>追加後、.htaccessファイルを転送し上書きします。<br>特にApacheの再起動などは不要です。<br>再度、PageSpeed Insightsで計測し、<strong>gzip や deflate を使用してリソースを圧縮することで、ネットワークで送信されるバイト数を減らすことができます。</strong> という提案が無くなっていることを確認します。</p><p><a href="../../../../public/2017/03/screencapture-developers-google-speed-pagespeed-insights-1489316921379.png"><img src="../../../../public/2017/03/screencapture-developers-google-speed-pagespeed-insights-1489316921379-300x210.png"></a></p><p>スコアが<strong>85/100</strong>と大幅に改善しました。</p><h2 id="ブラウザキャッシュを有効"><a href="#ブラウザキャッシュを有効" class="headerlink" title="ブラウザキャッシュを有効"></a>ブラウザキャッシュを有効</h2><p>続いて、下記の記述を追加して、ブラウザのキャッシュを有効にします。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;IfModule mod_expires.c&gt;</span></span><br><span class="line"><span class="attribute">ExpiresActive</span> <span class="literal">On</span></span><br><span class="line"><span class="attribute">ExpiresByType</span> image/png <span class="string">&quot;access plus 1 months&quot;</span></span><br><span class="line"><span class="attribute">ExpiresByType</span> image/jpeg <span class="string">&quot;access plus 1 months&quot;</span></span><br><span class="line"><span class="attribute">ExpiresByType</span> application/x-javascript <span class="string">&quot;access plus 1 months&quot;</span></span><br><span class="line"><span class="attribute">ExpiresByType</span> application/x-font-ttf <span class="string">&quot;access plus 1 months&quot;</span></span><br><span class="line"><span class="attribute">ExpiresByType</span> application/x-font-woff <span class="string">&quot;access plus 1 months&quot;</span></span><br><span class="line"><span class="attribute">ExpiresByType</span> text/javascript <span class="string">&quot;access plus 1 months&quot;</span></span><br><span class="line"><span class="attribute">ExpiresByType</span> text/css <span class="string">&quot;access plus 1 months&quot;</span></span><br><span class="line"><span class="section">&lt;/IfModule&gt;</span></span><br></pre></td></tr></table></figure><p>こちらも再度パフォーマンス計測しなおします。</p><p><a href="../../../../public/2017/03/screencapture-developers-google-speed-pagespeed-insights-1489319008466.png"><img src="../../../../public/2017/03/screencapture-developers-google-speed-pagespeed-insights-1489319008466-300x199.png"></a></p><p>スコアが<strong>91/100</strong>と改善しました。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>数値的に大幅に改善したことがわかると、精神的に楽になります。<br>確かにブラウザでアクセスすると、ページの表示が速くなったのが目に見えて体感できました。</p>]]></content>
      
      
      <categories>
          
          <category> その他 </category>
          
          <category> 雑記 </category>
          
          <category> WordPress </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでPythonを試してみる 第5回</title>
      <link href="2017/03/12/1849/"/>
      <url>2017/03/12/1849/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2017/03/12/1824">前回</a>はIronPythonを捨てて、RESTを使ってPythonと連携しました。</p><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>C#からPythonで公開したREST APIを呼び出すことには成功しました。<br>逆にC#で公開したREST APIを呼び出すことも可能です。<br>定期的にPython側での処理結果をC#側にプッシュするような形態のシステムもあり得ますので、PythonからC#への通信方法を知ることも有用でしょう。</p><p>今回のソースは下記になります </p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/takuya-takeuchi/Demo/tree/master/WPF.Python5" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/6241854?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">takuya-takeuchi/Demo</div><div class="hbc-url">https://github.com/takuya-takeuchi/Demo/tree/master/WPF.Python5</div><div class="hbc-description">Sample source code for Demonstration, Experiment and Test - takuya-takeuchi/Demo</div></div></div></div></a></div></div><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><h2 id="requestsインストール"><a href="#requestsインストール" class="headerlink" title="requestsインストール"></a>requestsインストール</h2><p>requestsは「人間のためのHTTP」と銘打った、極めてシンプルで洗練されたHTTPライブラリです。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://docs.python-requests.org/en/master/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=docs.python-requests.org"></img><div class="hbc-site-name">docs.python-requests.org</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">Requests: HTTP for Humans™ — Requests 2.25.1 documentation</div><div class="hbc-url">http://docs.python-requests.org/en/master/</div></div></div></div></a></div></div><p>インストールもお馴染みのpipで簡単。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ python -m pip install requests</span><br><span class="line">Collecting requests</span><br><span class="line">  Downloading requests-<span class="number">2</span>.<span class="number">13</span>.<span class="number">0</span>-py2.py3-none-any.whl (<span class="number">584</span>kB)</span><br><span class="line">    <span class="number">100</span>% |################################| <span class="number">593</span>kB <span class="number">1</span>.<span class="number">1</span>MB/s</span><br><span class="line">Installing collected packages: requests</span><br><span class="line">Successfully installed requests-<span class="number">2</span>.<span class="number">13</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure><p>以上でインストールは完了です。</p><h2 id="ソース"><a href="#ソース" class="headerlink" title="ソース"></a>ソース</h2><p>前回のソースに手を加えた感じです。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_restful <span class="keyword">import</span> Resource, Api</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime <span class="keyword">as</span> dt</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">api = Api(app)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DateTimeServiceClient</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_send</span>(<span class="params">self, datetime</span>):</span></span><br><span class="line">        s = requests.session()</span><br><span class="line"></span><br><span class="line">        tstr = datetime.strftime(<span class="string">&quot;%Y/%m/%d %H:%M:%S.&quot;</span>) + <span class="string">&quot;%03d&quot;</span> % (datetime.microsecond // <span class="number">1000</span>)</span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">&#x27;dateTime&#x27;</span>: tstr,</span><br><span class="line">        &#125;</span><br><span class="line">        headers = &#123;<span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;</span><br><span class="line">        r =  s.post(<span class="string">&#x27;http://localhost:5002/DateTimeService/Send&#x27;</span>, params=params, headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span>(<span class="params">Resource</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        dtsc = DateTimeServiceClient();</span><br><span class="line">        tdatetime = dt.now()</span><br><span class="line">        dtsc._send(tdatetime);</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;hello&#x27;</span>: <span class="string">&#x27;world&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">api.add_resource(HelloWorld, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>getメソッド内で、<strong>DateTimeServiceClient._sendメソッド</strong>を呼び出します。<br>_sendメソッドは、外部のREST APIに対してPOSTで現在時刻を渡します。<br>つまり、外部(C#)から自身のREST APIを呼ばれている最中に、外部(C#)のREST APIを呼び出します。</p><p>重要なことですが、</p><ul><li><strong>headers</strong>は<strong>postメソッド</strong>に渡してください</li><li><strong>params</strong>の<strong>dateTimeキー</strong>の文字列を間違えないでください</li><li><strong>postメソッド</strong>の第一引数はC#側ときちんと一致させること</li></ul><p>これらが守られないと、クラッシュしたり、正しく動きません。<br>Python側は以上です。</p><h1 id="C"><a href="#C" class="headerlink" title="C#"></a>C#</h1><p>インストールするライブラリは前回と同じです。</p><h2 id="ソース-1"><a href="#ソース-1" class="headerlink" title="ソース"></a>ソース</h2><p>WPFです。Xaml側は省略します。<br>Xamlは、Python側のREST APIを呼び出すButton、Python側から受け取る現在時刻情報を追加するListBoxです。<br>ViewModelもButtonに対応するコマンドと現在時刻のコレクションだけです。</p><p>まずは、公開するREST APIです。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.ServiceModel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WPFPython.Contracts.Service</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">ServiceContract</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IDateTimeService</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">event</span> EventHandler&lt;DateTime&gt; DateTimeReceived;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">OperationContract</span>]</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Send</span>(<span class="params"><span class="keyword">string</span> paramDateTime</span>)</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.ServiceModel;</span><br><span class="line"><span class="keyword">using</span> System.ServiceModel.Web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WPFPython.Contracts.Service</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">ServiceBehavior(InstanceContextMode = InstanceContextMode.Single)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">DateTimeService</span> : <span class="title">IDateTimeService</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> イベント</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">event</span> EventHandler&lt;DateTime&gt; DateTimeReceived;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> メソッド</span></span><br><span class="line"></span><br><span class="line">        [<span class="meta">WebInvoke(Method = <span class="meta-string">&quot;POST&quot;</span>, UriTemplate = <span class="meta-string">&quot;Send?dateTime=&#123;paramDateTime&#125;&quot;</span>,</span></span><br><span class="line"><span class="meta">          RequestFormat = WebMessageFormat.Json)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span>(<span class="params"><span class="keyword">string</span> paramDateTime</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> dt = DateTime.Parse(paramDateTime);</span><br><span class="line">            <span class="keyword">this</span>.DateTimeReceived?.Invoke(<span class="keyword">this</span>, dt);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>肝はSendメソッドに付与された<strong>WebInvoke属性</strong>です。<br>プロパティは重要ですが、<strong>UriTemplateプロパティ</strong>の値は特に重要です。<br>Sendメソッドの名前と、UriTemplateプロパティのSendは一致させる必要はありませんが、UriTemplateプロパティのSendはPython側で、postメソッドで指定した値と一致させます。<br>同様に、dateTimeもPython側のparamsのキーと一致させます。<br>ちなみに、UriTemplateプロパティのparamDateTimeの部分は、Sendメソッドの引数、paramDateTimeと一致させないと、アプリ起動時にクラッシュします。<br>Sendメソッドの中身は単純で、渡ってきた文字列をDateTime型に変換し、イベントを呼び出すだけです。</p><p>次にViewModelです。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.ObjectModel;</span><br><span class="line"><span class="keyword">using</span> System.Net.Http;</span><br><span class="line"><span class="keyword">using</span> GalaSoft.MvvmLight;</span><br><span class="line"><span class="keyword">using</span> GalaSoft.MvvmLight.Command;</span><br><span class="line"><span class="keyword">using</span> WPFPython.Contracts.Service;</span><br><span class="line"><span class="keyword">using</span> WPFPython.ViewModels.Interfaces;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WPFPython.ViewModels</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">MainViewModel</span> : <span class="title">ViewModelBase</span>, <span class="title">IMainViewModel</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> フィールド</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> IDateTimeService _DateTimeService;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> コンストラクタ</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MainViewModel</span>(<span class="params">IDateTimeService dateTimeService</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (dateTimeService == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(dateTimeService));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>._DateTimeService = dateTimeService;</span><br><span class="line">            <span class="keyword">this</span>._DateTimeService.DateTimeReceived += (sender, time) =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>._Responses.Insert(<span class="number">0</span>, time.ToString(<span class="string">&quot;yyyy/MM/dd hh:mm:ss.fff&quot;</span>));</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>._Responses = <span class="keyword">new</span> ObservableCollection&lt;<span class="keyword">string</span>&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> プロパティ</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> RelayCommand _MessageCommand;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> RelayCommand MessageCommand</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._MessageCommand ?? <span class="keyword">new</span> RelayCommand(<span class="keyword">async</span> () =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> httpClient = <span class="keyword">new</span> HttpClient();</span><br><span class="line">                    <span class="keyword">await</span> httpClient.GetStringAsync(<span class="string">&quot;http://127.0.0.1:5000/&quot;</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> ObservableCollection&lt;<span class="keyword">string</span>&gt; _Responses;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ObservableCollection&lt;<span class="keyword">string</span>&gt; Responses</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._Responses;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MessageCommandがPython側のREST APIを呼び出します。<br>また、その呼び出しで、C#側のREST APIがPython側から実行され、Python側から渡ってきた時刻がResponsesコレクションに追加されます。<br>最後にViewModelLocatorです。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  In App.xaml:</span></span><br><span class="line"><span class="comment">  &lt;Application.Resources&gt;</span></span><br><span class="line"><span class="comment">      &lt;vm:ViewModelLocator xmlns:vm=&quot;clr-namespace:WPF1&quot;</span></span><br><span class="line"><span class="comment">                                   x:Key=&quot;Locator&quot; /&gt;</span></span><br><span class="line"><span class="comment">  &lt;/Application.Resources&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  In the View:</span></span><br><span class="line"><span class="comment">  DataContext=&quot;&#123;Binding Source=&#123;StaticResource Locator&#125;, Path=ViewModelName&#125;&quot;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.ServiceModel;</span><br><span class="line"><span class="keyword">using</span> System.ServiceModel.Web;</span><br><span class="line"><span class="keyword">using</span> System.Windows;</span><br><span class="line"><span class="keyword">using</span> GalaSoft.MvvmLight;</span><br><span class="line"><span class="keyword">using</span> GalaSoft.MvvmLight.Ioc;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Practices.ServiceLocation;</span><br><span class="line"><span class="keyword">using</span> WPFPython.Contracts.Service;</span><br><span class="line"><span class="keyword">using</span> WPFPython.ViewModels;</span><br><span class="line"><span class="keyword">using</span> WPFPython.ViewModels.Interfaces;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WPFPython</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> This class contains static references to all the view models in the</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> application and provides an entry point for the bindings.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> See http://www.galasoft.ch/mvvm</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ViewModelLocator</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> ServiceHost _ServiceHost;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="title">ViewModelLocator</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            ServiceLocator.SetLocatorProvider(() =&gt; SimpleIoc.Default);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ViewModelBase.IsInDesignModeStatic)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// SimpleIoc.Default.Register&lt;IDataService, Design.DesignDataService&gt;();</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// SimpleIoc.Default.Register&lt;IDataService, DataService&gt;();</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> port = <span class="number">5002</span>;</span><br><span class="line">            <span class="keyword">var</span> baseAddress = <span class="string">&quot;http://&quot;</span> + Environment.MachineName + <span class="string">$&quot;:<span class="subst">&#123;port&#125;</span>/<span class="subst">&#123;<span class="keyword">typeof</span>(DateTimeService).Name&#125;</span>&quot;</span>;</span><br><span class="line">            <span class="keyword">var</span> dateTimeService = <span class="keyword">new</span> DateTimeService();</span><br><span class="line">            _ServiceHost = <span class="keyword">new</span> WebServiceHost(dateTimeService, <span class="keyword">new</span> Uri(baseAddress));</span><br><span class="line">            _ServiceHost.Open();</span><br><span class="line"></span><br><span class="line">            SimpleIoc.Default.Register&lt;IDateTimeService&gt;(() =&gt; dateTimeService);</span><br><span class="line">            SimpleIoc.Default.Register&lt;IMainViewModel, MainViewModel&gt;();</span><br><span class="line"></span><br><span class="line">            Application.Current.Exit += CurrentOnExit;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CurrentOnExit</span>(<span class="params"><span class="keyword">object</span> sender, ExitEventArgs exitEventArgs</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                _ServiceHost.Close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> Gets the Main property.</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        [<span class="meta">System.Diagnostics.CodeAnalysis.SuppressMessage(<span class="meta-string">&quot;Microsoft.Performance&quot;</span>,</span></span><br><span class="line"><span class="meta">            <span class="meta-string">&quot;CA1822:MarkMembersAsStatic&quot;</span>,</span></span><br><span class="line"><span class="meta">            Justification = <span class="meta-string">&quot;This non-static member is needed for data binding purposes.&quot;</span>)</span>]</span><br><span class="line">        <span class="keyword">public</span> IMainViewModel Main</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> ServiceLocator.Current.GetInstance&lt;IMainViewModel&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WebServiceHostインスタンス生成時のUrlに注意するのと、IDateTimeServiceに対応する実際の型は、MinaViewModelに保持するインスタンスと、WebServiceHostで保持するインスタンスは同一であることに注意します。<br>ポート番号も一致させます。<br>C#は以上です。</p><h1 id="テスト"><a href="#テスト" class="headerlink" title="テスト"></a>テスト</h1><p>実際に実行してみます。<br>C#側を起動する前に、PythonでRESTサービス側を起動しておいてください。<br>ボタンを押下すると、Python側から受け取った現在時刻が画面下部のListBoxに追加されていきます。</p><p><a href="../../../../public/2017/03/39abe2940aaa28bb948b44bcd1277838.png"><img src="../../../../public/2017/03/39abe2940aaa28bb948b44bcd1277838-173x300.png"></a></p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>C#側のRESTを活用して、C#とPythonで双方向通信が可能になりました。<br>実はRESTを使用したアプリを作るのは初めてでした。<br>WebInvoke属性の値の設定で苦労しましたが、良い経験になりました。</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/WPF.Python5">https://github.com/takuya-takeuchi/Demo/tree/master/WPF.Python5</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> %e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%e8%a8%80%e8%aa%9e </category>
          
          <category> .NET Framework </category>
          
          <category> Python </category>
          
          <category> net-framework </category>
          
          <category> C# </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> Windows Presentation Foundation </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> .NETでPythonを試してみる </category>
          
          <category> web-framework </category>
          
          <category> Flask </category>
          
          <category> Web Framework </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでPythonを試してみる 第4回</title>
      <link href="2017/03/12/1824/"/>
      <url>2017/03/12/1824/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2017/03/09/1792">前回</a>はパッケージのインストールに失敗しました。</p><a id="more"></a><h1 id="謝罪"><a href="#謝罪" class="headerlink" title="謝罪"></a>謝罪</h1><p>まずはじめに。<br><strong>IronPython</strong> の使用を諦めることにしました。<br>理由はモジュールのインストールができなかったことです。<br>一番シンプルだと思っていた <strong>simplejson</strong> すらまともにできませんでした。<br>正確には、インストールはできましたが、いざ import simplejson すると、動かない。<br>他にも、</p><ul><li>CPythonと同じ方法でC言語ベースのライブラリと相互運用が<strong>できない</strong></li><li>2017/03/11時点で、<a href="https://github.com/IronLanguages/main/issues">Issue</a>の数が700越え。あまりにも利用者の声に応える余裕がない。</li></ul><p>結局、ネット上で調べると、動かないという情報ばかり、でこれ以上貴重な時間を費やすことはできない、という判断に至りました。<br>4日以上使いましたが、本当に無駄骨に終わりました。</p><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>なので、方針を変えます。<br><strong>「.NETからPythonを使う」</strong> という目的を達するなら、思いつく限り、</p><ul><li>Pythonをコマンドプロンプトで呼び出し、標準出力で結果を受け取り解析</li><li>Pythonをコマンドプロンプトで呼び出し、ファイルで結果を受け取り解析</li><li>Pythonで動作しているWebサービスのAPIを叩く</li></ul><p>あたりでしょうか。<br>1,2番目は面倒ですし、なによりださいので、3番目を利用します。<br>Webサービスなら、WCFによって簡単に.NETから呼び出せます。<br>というのも、Pythonをコマンドプロンプトで呼ぶと、呼び出しのコストが大きいと思います。<br>試してみた限り、Pythonの起動は遅いです。おそらく必要なモジュールなどを読み込んでいるからだと思うのですが、無視できない間隔で待たされます。<br>なので、起動コストを無視するために、常に起動しっぱなしにして、必要なときに必要な演算結果を受け取る形式がベスト。</p><p>ですので、今回はPythonでシンプルなRESTfulサービスを作成し、C#アプリからアクセスします。<br>そのために軽量なWebフレームワークであるPythonモジュール <strong>Flask</strong> を使用します。<br>Flaskについては下記を。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://ja.wikipedia.org/wiki/Flask" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=ja.wikipedia.org"></img><div class="hbc-site-name">ja.wikipedia.org</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">Flask - Wikipedia</div><div class="hbc-url">https://ja.wikipedia.org/wiki/Flask</div></div></div></div></a></div></div><p>また、使用するPythonはMinicondaを使用します。<br>今回のソースは下記になります </p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/takuya-takeuchi/Demo/tree/master/WPF.Python4" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/6241854?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">takuya-takeuchi/Demo</div><div class="hbc-url">https://github.com/takuya-takeuchi/Demo/tree/master/WPF.Python4</div><div class="hbc-description">Sample source code for Demonstration, Experiment and Test - takuya-takeuchi/Demo</div></div></div></div></a></div></div><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><h2 id="Flaskインストール"><a href="#Flaskインストール" class="headerlink" title="Flaskインストール"></a>Flaskインストール</h2><p>さくっとインストールします。<br>下記に従うだけです。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">$ python -m pip install flask-restful</span><br><span class="line">Collecting flask-restful</span><br><span class="line">  Downloading Flask_RESTful-<span class="number">0</span>.<span class="number">3</span>.<span class="number">5</span>-py2.py3-none-any.whl</span><br><span class="line">Collecting aniso8601&gt;=<span class="number">0</span>.<span class="number">82</span> (from flask-restful)</span><br><span class="line">  Downloading aniso8601-<span class="number">1</span>.<span class="number">2</span>.<span class="number">0</span>.tar.gz (<span class="number">59</span>kB)</span><br><span class="line">    <span class="number">100</span>% |################################| <span class="number">61</span>kB <span class="number">503</span>kB/s</span><br><span class="line">Requirement already satisfied: pytz <span class="keyword">in</span> c:\program files\miniconda2\lib\site-packages (from flask-restful)</span><br><span class="line">Requirement already satisfied: six&gt;=<span class="number">1</span>.<span class="number">3</span>.<span class="number">0</span> <span class="keyword">in</span> c:\program files\miniconda2\lib\site-packages (from flask-restful)</span><br><span class="line">Collecting Flask&gt;=<span class="number">0</span>.<span class="number">8</span> (from flask-restful)</span><br><span class="line">  Downloading Flask-<span class="number">0</span>.<span class="number">12</span>-py2.py3-none-any.whl (<span class="number">82</span>kB)</span><br><span class="line">    <span class="number">100</span>% |################################| <span class="number">92</span>kB <span class="number">1</span>.<span class="number">1</span>MB/s</span><br><span class="line">Requirement already satisfied: python-dateutil <span class="keyword">in</span> c:\program files\miniconda2\lib\site-packages (from aniso8601&gt;=<span class="number">0</span>.<span class="number">82</span>-&gt;flask-restful)</span><br><span class="line">Collecting Jinja2&gt;=<span class="number">2</span>.<span class="number">4</span> (from Flask&gt;=<span class="number">0</span>.<span class="number">8</span>-&gt;flask-restful)</span><br><span class="line">  Downloading Jinja2-<span class="number">2</span>.<span class="number">9</span>.<span class="number">5</span>-py2.py3-none-any.whl (<span class="number">340</span>kB)</span><br><span class="line">    <span class="number">100</span>% |################################| <span class="number">348</span>kB <span class="number">1</span>.<span class="number">5</span>MB/s</span><br><span class="line">Collecting Werkzeug&gt;=<span class="number">0</span>.<span class="number">7</span> (from Flask&gt;=<span class="number">0</span>.<span class="number">8</span>-&gt;flask-restful)</span><br><span class="line">  Downloading Werkzeug-<span class="number">0</span>.<span class="number">12</span>-py2.py3-none-any.whl (<span class="number">312</span>kB)</span><br><span class="line">    <span class="number">100</span>% |################################| <span class="number">317</span>kB <span class="number">1</span>.<span class="number">6</span>MB/s</span><br><span class="line">Collecting click&gt;=<span class="number">2</span>.<span class="number">0</span> (from Flask&gt;=<span class="number">0</span>.<span class="number">8</span>-&gt;flask-restful)</span><br><span class="line">  Downloading click-<span class="number">6</span>.<span class="number">7</span>-py2.py3-none-any.whl (<span class="number">71</span>kB)</span><br><span class="line">    <span class="number">100</span>% |################################| <span class="number">71</span>kB <span class="number">2</span>.<span class="number">3</span>MB/s</span><br><span class="line">Collecting itsdangerous&gt;=<span class="number">0</span>.<span class="number">21</span> (from Flask&gt;=<span class="number">0</span>.<span class="number">8</span>-&gt;flask-restful)</span><br><span class="line">  Downloading itsdangerous-<span class="number">0</span>.<span class="number">24</span>.tar.gz (<span class="number">46</span>kB)</span><br><span class="line">    <span class="number">100</span>% |################################| <span class="number">51</span>kB <span class="number">2</span>.<span class="number">3</span>MB/s</span><br><span class="line">Collecting MarkupSafe&gt;=<span class="number">0</span>.<span class="number">23</span> (from Jinja2&gt;=<span class="number">2</span>.<span class="number">4</span>-&gt;Flask&gt;=<span class="number">0</span>.<span class="number">8</span>-&gt;flask-restful)</span><br><span class="line">  Downloading MarkupSafe-<span class="number">1</span>.<span class="number">0</span>.tar.gz</span><br><span class="line">Building wheels <span class="keyword">for</span> collected packages: aniso8601, itsdangerous, MarkupSafe</span><br><span class="line">  Running setup.py bdist_wheel <span class="keyword">for</span> aniso8601 ... done</span><br><span class="line">  Stored <span class="keyword">in</span> directory: C:\Users\TAKUYA\AppData\Local\pip\Cache\wheels\<span class="number">9</span>e\<span class="number">75</span>\c1\aa2de49c0d1ade4893e73009c0b7792ce89bc6c903a31f854b</span><br><span class="line">  Running setup.py bdist_wheel <span class="keyword">for</span> itsdangerous ... done</span><br><span class="line">  Stored <span class="keyword">in</span> directory: C:\Users\TAKUYA\AppData\Local\pip\Cache\wheels\fc\a8\<span class="number">66</span>\<span class="number">24</span>d655233c757e178d45dea2de22a04c6d92766abfb741129a</span><br><span class="line">  Running setup.py bdist_wheel <span class="keyword">for</span> MarkupSafe ... done</span><br><span class="line">  Stored <span class="keyword">in</span> directory: C:\Users\TAKUYA\AppData\Local\pip\Cache\wheels\<span class="number">88</span>\a7\<span class="number">30</span>\e39a54a87bcbe25308fa3ca64e8ddc75d9b3e5afa21ee32d57</span><br><span class="line">Successfully built aniso8601 itsdangerous MarkupSafe</span><br><span class="line">Installing collected packages: aniso8601, MarkupSafe, Jinja2, Werkzeug, click, itsdangerous, Flask, flask-restful</span><br><span class="line">Successfully installed Flask-<span class="number">0</span>.<span class="number">12</span> Jinja2-<span class="number">2</span>.<span class="number">9</span>.<span class="number">5</span> MarkupSafe-<span class="number">1</span>.<span class="number">0</span> Werkzeug-<span class="number">0</span>.<span class="number">12</span> aniso8601-<span class="number">1</span>.<span class="number">2</span>.<span class="number">0</span> click-<span class="number">6</span>.<span class="number">7</span> flask-restful-<span class="number">0</span>.<span class="number">3</span>.<span class="number">5</span> itsdangerous-<span class="number">0</span>.<span class="number">24</span></span><br></pre></td></tr></table></figure><p>以上でインストールは完了です。</p><h2 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h2><p>最小のRESTfulなアプリが下記ドキュメントにあるのでファイルに保存します。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_restful <span class="keyword">import</span> Resource, Api</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">api = Api(app)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span>(<span class="params">Resource</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;hello&#x27;</span>: <span class="string">&#x27;world&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">api.add_resource(HelloWorld, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>以上のソースを下記で起動します。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ python Python.py</span><br><span class="line"> * Restarting with stat</span><br><span class="line"> * Debugger is active!</span><br><span class="line"> * Debugger PIN: <span class="number">177</span>-<span class="number">715</span>-<span class="number">949</span></span><br><span class="line"> * Running on http://<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">5000</span>/ (Press CTRL+C to quit) </span><br></pre></td></tr></table></figure><p>Webブラウザで <strong><a href="http://127.0.0.1:5000/">http://127.0.0.1:5000/</a></strong> へアクセスすると、下記が表示されます。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;hello&quot;</span>: <span class="string">&quot;world&quot;</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>jsonで返ってきています。<br>以上でFlaskのテストは完了です。</p><h1 id="C"><a href="#C" class="headerlink" title="C#"></a>C#</h1><p>SOAPであるならば、エンドポイントを参照して、クライアントクラス等の生成が自動でできますが、RESTにそんな便利機能はありません。</p><h2 id="Microsoft-Net-Http"><a href="#Microsoft-Net-Http" class="headerlink" title="Microsoft.Net.Http"></a>Microsoft.Net.Http</h2><p>RESTful APIへのアクセスです。RESTful APIへのアクセスはライブラリを使って簡略化します。<br>幸い<strong>Microsoft.Net.Http</strong>というライブラリがあるのでNuGetで導入します。</p><h2 id="Newtonsoft-Json"><a href="#Newtonsoft-Json" class="headerlink" title="Newtonsoft.Json"></a>Newtonsoft.Json</h2><p>RESTful APIから返ってきたjsonの逆シリアライズを<strong>Newtonsoft.Json</strong>で実行します。<br>こちらもNuGetで導入します。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://www.newtonsoft.com/json" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=www.newtonsoft.com"></img><div class="hbc-site-name">www.newtonsoft.com</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">Json.NET - Newtonsoft</div><div class="hbc-url">http://www.newtonsoft.com/json</div><div class="hbc-description">Json.NET is a popular high-performance JSON framework for .NET</div></div></div></div></a></div></div><h2 id="ソース"><a href="#ソース" class="headerlink" title="ソース"></a>ソース</h2><p>WPFです。Xaml側は省略します。<br>Xamlは、結果を表示するためのメッセージボックスを呼び出すButtonだけです。<br>ViewModelもButtonに対応するコマンドだけです。<br>まずは、先ほどのjsonに対するModelクラスです。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Newtonsoft.Json;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WPFPython.Models</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    [<span class="meta">JsonObject(<span class="meta-string">&quot;message&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">MessageModel</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">JsonProperty(<span class="meta-string">&quot;hello&quot;</span>)</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Hello &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>次はViewModelです。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.ObjectModel;</span><br><span class="line"><span class="keyword">using</span> System.Net.Http;</span><br><span class="line"><span class="keyword">using</span> GalaSoft.MvvmLight;</span><br><span class="line"><span class="keyword">using</span> GalaSoft.MvvmLight.Command;</span><br><span class="line"><span class="keyword">using</span> WPFPython.Models;</span><br><span class="line"><span class="keyword">using</span> WPFPython.ViewModels.Interfaces;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WPFPython.ViewModels</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">MainViewModel</span> : <span class="title">ViewModelBase</span>, <span class="title">IMainViewModel</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> フィールド</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> IMessageDialog _MessageDialog;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> コンストラクタ</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MainViewModel</span>(<span class="params">IMessageDialog messageDialog</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (messageDialog == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(messageDialog));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>._MessageDialog = messageDialog;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> プロパティ</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> RelayCommand _MessageCommand;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> RelayCommand MessageCommand</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._MessageCommand ?? <span class="keyword">new</span> RelayCommand(<span class="keyword">async</span> () =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> httpClient = <span class="keyword">new</span> HttpClient();</span><br><span class="line">                    <span class="keyword">var</span> stringAsync = httpClient.GetStringAsync(<span class="string">&quot;http://127.0.0.1:5000/&quot;</span>);</span><br><span class="line">                    <span class="keyword">string</span> result = <span class="keyword">await</span> stringAsync;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">var</span> messageModel = Newtonsoft.Json.JsonConvert.DeserializeObject&lt;MessageModel&gt;(result);</span><br><span class="line">                    <span class="keyword">this</span>._MessageDialog.ShowMessage(messageModel.Hello);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="テスト"><a href="#テスト" class="headerlink" title="テスト"></a>テスト</h1><p>実際に実行してみます。<br>C#側を起動する前に、PythonでRESTサービス側を起動しておいてください。<br>ボタンを押下すると、REST APIのjsonを受け取り、そのjson唯一のメンバーである、Helloキーに対応する値をメッセージボックスで表示します。</p><p><a href="../../../../public/2017/03/8a4025a85ae44b8c3ffc267797049cd1.png"><img src="../../../../public/2017/03/8a4025a85ae44b8c3ffc267797049cd1.png"></a></p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>IronPythonが期待外れに終わった今、Pythonの既存資産を生かす方法として、Webサービス化は有用な手段です。<br>単純に結果を呼び出すだけならRESTful APIは簡単で魅力的です。</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/WPF.Python4">https://github.com/takuya-takeuchi/Demo/tree/master/WPF.Python4</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> %e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%e8%a8%80%e8%aa%9e </category>
          
          <category> .NET Framework </category>
          
          <category> Python </category>
          
          <category> net-framework </category>
          
          <category> C# </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> Windows Presentation Foundation </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> .NETでPythonを試してみる </category>
          
          <category> web-framework </category>
          
          <category> Flask </category>
          
          <category> Web Framework </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでPythonを試してみる 第3回</title>
      <link href="2017/03/09/1792/"/>
      <url>2017/03/09/1792/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2017/02/13/1786">前回</a>は配列を引数で渡し、戻りを配列で受け取る関数を呼び出してみました。</p><a id="more"></a><p>&lt;style=”margin-top: 40px;”/&gt;</p><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>今回の目的は、パッケージを使います。<br>PythonもNuget、npm、apt-getよろしくパッケージ管理マネージャー <strong>pip</strong> が存在します。<br>英語版Wikiによれば、pipとは、再帰的頭字語で、<strong>Pip Installs Packages</strong> または <strong>Pip Installs Python</strong> とのこと。<br>昔あったLAMEとかと同じですね。古い。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://en.wikipedia.org/wiki/Pip_(package_manager)" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=en.wikipedia.org"></img><div class="hbc-site-name">en.wikipedia.org</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://upload.wikimedia.org/wikipedia/commons/0/02/Pip_help.png"></img></div><div class="hbc-text"><div class="hbc-title">pip (package manager) - Wikipedia</div><div class="hbc-url">https://en.wikipedia.org/wiki/Pip_(package_manager)</div></div></div></div></a></div></div><p>IronPythonからPythonを呼ぶにしても、Python単独でできることは限られます。<br>画像処理とかグラフの描画など、豊富なパッケージを利用して、開発工数を削減できますし、高品質なアプリを構築できます。</p><p>しかしながら、Pythonを使うときは、普通 <strong>Python.exe</strong> からスクリプトを呼び出しますし、そこでパッケージのインストールを行います。<br>つまり、今実行している場所が基盤であることが意識できます。</p><p>対して、IronPython、つまり.NETで動作しているときは、このあたりが意識しづらいです。<br>バックエンドでPythonがごにょごにょしているのはわかるのですが、もやもやします。</p><p>なので、実際にパッケージを使って見ます。</p><p>使うパッケージは簡単で、<a href="https://pypi.python.org/pypi/simplejson/">simplejson</a> を使います。<br>その名の通り、jsonファイルを扱います。<br>.NETは標準で.jsonを扱えるのでわざわざこれを使う必要性は薄いのですが…<br>軽量なパッケージでわかりやすいのがこれだったので… 今回のソースは下記になります </p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/takuya-takeuchi/Demo/tree/master/WPF.Python3" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/6241854?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">takuya-takeuchi/Demo</div><div class="hbc-url">https://github.com/takuya-takeuchi/Demo/tree/master/WPF.Python3</div><div class="hbc-description">Sample source code for Demonstration, Experiment and Test - takuya-takeuchi/Demo</div></div></div></div></a></div></div><p>ただし、今回は最終的には</p><p><strong>失敗</strong></p><p>です。<br>忘備録として残してあります。</p><h1 id="Python側"><a href="#Python側" class="headerlink" title="Python側"></a>Python側</h1><p>Pythonのソースは下記になります。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> simplejson</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PythonTest</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load</span>(<span class="params">self, path</span>):</span></span><br><span class="line">        f = open(path, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">        data = json.load(f)</span><br><span class="line">        f.close()</span><br><span class="line">        <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure><p>jsonのファイルパスを読み込んで、辞書データを返すだけです。<br>ここでは、パッケージの利用と、辞書形式クラスの扱いが肝になります。</p><h1 id="C-側"><a href="#C-側" class="headerlink" title="C#側"></a>C#側</h1><p>WPFです。Xaml側は省略します。<br>jsonファイルから値を読み込むキーを指定するComboBox、結果を表示するためのメッセージボックスを呼び出すButtonだけです。<br>PythonWrapperのメソッドを呼び出す<strong>RelayCommand</strong>です。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> RelayCommand MessageCommand</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._MessageCommand ?? <span class="keyword">new</span> RelayCommand(() =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> array = Enumerable.Range(<span class="keyword">this</span>._Start, <span class="keyword">this</span>._End - <span class="keyword">this</span>._Start + <span class="number">1</span>).ToArray();</span><br><span class="line">            <span class="keyword">var</span> sum = array.Sum();</span><br><span class="line">            <span class="keyword">var</span> list = <span class="keyword">this</span>._PythonWrapper.Twice(array);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> message = <span class="string">$&quot;Initial total:<span class="subst">&#123;sum&#125;</span>, final total:<span class="subst">&#123;list.Sum()&#125;</span>&quot;</span>;</span><br><span class="line">            <span class="keyword">this</span>._MessageDialog.ShowMessage(message);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PythonWrapperの中身です。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Scripting.Hosting;</span><br><span class="line"><span class="keyword">using</span> WPFPython.ViewModels.Interfaces;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WPFPython.ViewModels</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">PythonWrapper</span> : <span class="title">IPythonWrapper</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> フィールド</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> ScriptRuntime _ScriptRuntime;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">dynamic</span> _PythonObject;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">dynamic</span> _PythonTest;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="keyword">string</span> _Path;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> コンストラクタ</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PythonWrapper</span>(<span class="params">ScriptRuntime scriptRuntime, <span class="keyword">string</span> path</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (scriptRuntime == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(scriptRuntime));</span><br><span class="line">            <span class="keyword">if</span> (path == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(path));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!File.Exists(path))</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(path);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>._ScriptRuntime = scriptRuntime;</span><br><span class="line">            <span class="keyword">this</span>._Path = path;</span><br><span class="line">            <span class="keyword">this</span>._PythonObject = <span class="keyword">this</span>._ScriptRuntime.UseFile(<span class="keyword">this</span>._Path);</span><br><span class="line">            <span class="keyword">this</span>._PythonTest = <span class="keyword">this</span>._PythonObject.PythonTest();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> メソッド</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt; <span class="title">load</span>(<span class="params"><span class="keyword">string</span> path</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>._PythonTest.load(path);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引数に読み出したいjsonファイルのパスを渡すloadメソッドだけです。<br>戻りは Dicrionary&lt;string, object&gt; を返します。<br>Pythonが得意とする辞書をそのまま返すということです。</p><h1 id="テスト-パッケージインストール前"><a href="#テスト-パッケージインストール前" class="headerlink" title="テスト (パッケージインストール前)"></a>テスト (パッケージインストール前)</h1><p>さて、ためしにこれを実行してみます。<br>simplejsonパッケージをインストールする前です。<br>通常のPythonなら <strong>No module named XXX</strong> というお馴染みのメッセージが出ます。<br>IronPythonだとどうなるでしょう。</p><p><a href="../../../../public/2017/03/b8bbf21eb9da042e3413685afbff54ea.png"><img src="../../../../public/2017/03/b8bbf21eb9da042e3413685afbff54ea-300x265.png"></a></p><p> Microsoft.Scripting.Hosting.ScriptRuntime.UseFile メソッドでpyファイルを渡した瞬間に例外を投げました。<br><strong>IronPython.Runtime.Exceptions.ImportException</strong> がスローされるようです。</p><h1 id="テスト-パッケージインストール-失敗編"><a href="#テスト-パッケージインストール-失敗編" class="headerlink" title="テスト (パッケージインストール 失敗編)"></a>テスト (パッケージインストール 失敗編)</h1><h2 id="Visual-Studio-からインストール"><a href="#Visual-Studio-からインストール" class="headerlink" title="Visual Studio からインストール"></a>Visual Studio からインストール</h2><p>パッケージをインストールします。<br>モジュールのインストールは、VisualStudioから実行できます。</p><p><a href="../../../../public/2017/03/0d40a5e4a645fc6b96e767d64ac0878e.png"><img src="../../../../public/2017/03/0d40a5e4a645fc6b96e767d64ac0878e-300x221.png"></a></p><p><strong>Python Environments</strong> から IronPythonを選択します。今回は 64bit 環境なので、<strong>IronPython 64bit 2.7</strong> を右クリック。</p><p><a href="../../../../public/2017/03/bfe555476f58150c92828373aa3519db.png"><img src="../../../../public/2017/03/bfe555476f58150c92828373aa3519db-300x248.png"></a></p><p><strong>Install Python Package…</strong> を選択します。</p><p><a href="../../../../public/2017/03/7b5b57db814f433f49437c32d4dc75a8.png"><img src="../../../../public/2017/03/7b5b57db814f433f49437c32d4dc75a8-300x147.png"></a></p><p>インストールするパッケージ名を入力して、OKを押下します。</p><p><a href="../../../../public/2017/03/cef9d1a7e2d9d659cd3f3c1aeb171afa.png"><img src="../../../../public/2017/03/cef9d1a7e2d9d659cd3f3c1aeb171afa-300x144.png"></a></p><p>OK</p><p><a href="../../../../public/2017/03/8c9b9c40e55b3b8505eb48c815c302a0.png"><img src="../../../../public/2017/03/8c9b9c40e55b3b8505eb48c815c302a0-300x90.png"></a></p><p>しかし失敗してしまいます。<br>ログを見ると、 </p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Installing &#x27;pip&#x27; package manager.</span><br><span class="line">Restarting IronPython with -X:Frames</span><br><span class="line">Downloading pip from https://go.microsoft.com/fwlink/?LinkId=<span class="number">616663</span></span><br><span class="line">Failed to install. Attempting direct download.</span><br><span class="line">Downloading setuptools from http://go.microsoft.com/fwlink/?LinkId=<span class="number">317603</span></span><br><span class="line">Traceback (most recent <span class="keyword">call</span> last):</span><br></pre></td></tr></table></figure><p>とあります。<br>そもそも pip が入っていない様子。</p><h2 id="ensurepip"><a href="#ensurepip" class="headerlink" title="ensurepip"></a>ensurepip</h2><p>手動でpipの導入が必要らしいので、<a href="http://ironpython.net/blog/2014/12/07/pip-in-ironpython-275.html">Pip in IronPython 2.7.5</a> に従って、pipをインストールします。<br>ipy.exe がある場所 (デフォルトは <strong>C:\Program Files (x86)\IronPython 2.7</strong>、以下 IronPythonディレクトリ) を管理者権限をつけたコマンドプロンプトで開きます。<br>そして下記コマンドを入力します。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Program</span> <span class="title">Files</span> (<span class="title">x86</span>)\<span class="title">IronPython</span> 2.7&gt;<span class="title">ipy.exe</span> -<span class="title">X:Frames</span> -<span class="title">m</span> <span class="title">ensurepip</span></span></span><br><span class="line"><span class="function"><span class="title">Unhandled</span> <span class="title">exception</span>:</span></span><br><span class="line"><span class="function"><span class="title">Traceback</span> (<span class="title">most</span> <span class="title">recent</span> <span class="title">call</span> <span class="title">last</span>):</span></span><br><span class="line"><span class="function">  <span class="title">File</span> &quot;<span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span> (<span class="title">x86</span>)\<span class="title">IronPython</span> 2.7\<span class="title">Lib</span>\<span class="title">runpy.py</span>&quot;, <span class="title">line</span> 170, <span class="title">in</span> <span class="title">run_module</span></span></span><br><span class="line"><span class="function">  <span class="title">File</span> &quot;<span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span> (<span class="title">x86</span>)\<span class="title">IronPython</span> 2.7\<span class="title">Lib</span>\<span class="title">runpy.py</span>&quot;, <span class="title">line</span> 103, <span class="title">in</span> <span class="title">_get_module_details</span></span></span><br><span class="line"><span class="function"><span class="title">ImportError</span>: <span class="title">No</span> <span class="title">module</span> <span class="title">named</span> <span class="title">ensurepip</span></span></span><br></pre></td></tr></table></figure><p>が、失敗します。<br>ensurepip が無いって言っています。</p><h2 id="get-pip-py"><a href="#get-pip-py" class="headerlink" title="get-pip.py"></a>get-pip.py</h2><p>ensurepipのインストールがダメでした。<br>次の施策として、上のメッセージにある、<strong><a href="https://go.microsoft.com/fwlink/?LinkId=616663">https://go.microsoft.com/fwlink/?LinkId=616663</a></strong> にアクセスし、<strong>get-pip.py</strong> をダウンロードし、IronPythonディレクトリへコピーします。<br>管理者権限をつけたコマンドプロンプトで、IronPythonディレクトリを開き、下記コマンドを入力します。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Program</span> <span class="title">Files</span> (<span class="title">x86</span>)\<span class="title">IronPython</span> 2.7&gt;<span class="title">ipy.exe</span> <span class="title">get</span>-<span class="title">pip.py</span></span></span><br><span class="line"><span class="function"><span class="title">Traceback</span> (<span class="title">most</span> <span class="title">recent</span> <span class="title">call</span> <span class="title">last</span>):</span></span><br><span class="line"><span class="function">  <span class="title">File</span> &quot;<span class="title">get</span>-<span class="title">pip.py</span>&quot;, <span class="title">line</span> 20061, <span class="title">in</span> &lt;<span class="title">module</span>&gt;</span></span><br><span class="line"><span class="function">  <span class="title">File</span> &quot;<span class="title">get</span>-<span class="title">pip.py</span>&quot;, <span class="title">line</span> 188, <span class="title">in</span> <span class="title">main</span></span></span><br><span class="line"><span class="function">  <span class="title">File</span> &quot;<span class="title">get</span>-<span class="title">pip.py</span>&quot;, <span class="title">line</span> 74, <span class="title">in</span> <span class="title">b85decode</span></span></span><br><span class="line"><span class="function"><span class="title">TypeError</span>: <span class="title">sequence</span> <span class="title">item</span> 0: <span class="title">expected</span> <span class="title">bytes</span> <span class="title">or</span> <span class="title">byte</span> <span class="title">array</span>, <span class="title">str</span> <span class="title">found</span></span></span><br></pre></td></tr></table></figure><p>が、これも失敗します。</p><h2 id="バージョンアップ"><a href="#バージョンアップ" class="headerlink" title="バージョンアップ"></a>バージョンアップ</h2><p>ここでふと気づきます。<br>システムに入っているIronPythonのバージョンが <strong>2.7.4</strong> でした。<br>上のensurepipに関するBlogは<strong>2.7.5</strong>に関する記事で、上の問題は<strong>2.7.4</strong>で発生していました。<br>ですので、古いバージョンを削除し、2.7.7を再度インストールします。<br>アップデートし終わって、再度ensurepipの導入を試みます。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Program</span> <span class="title">Files</span> (<span class="title">x86</span>)\<span class="title">IronPython</span> 2.7&gt;<span class="title">ipy.exe</span> -<span class="title">X:Frames</span> -<span class="title">m</span> <span class="title">ensurepip</span></span></span><br><span class="line"><span class="function"><span class="title">Ignoring</span> <span class="title">indexes</span>: <span class="title">https</span>://<span class="title">pypi.python.org</span>/<span class="title">simple</span></span></span><br><span class="line"><span class="function"><span class="title">Collecting</span> <span class="title">setuptools</span></span></span><br><span class="line"><span class="function"><span class="title">Collecting</span> <span class="title">pip</span></span></span><br><span class="line"><span class="function"><span class="title">Installing</span> <span class="title">collected</span> <span class="title">packages</span>: <span class="title">setuptools</span>, <span class="title">pip</span></span></span><br><span class="line"><span class="function"><span class="title">Successfully</span> <span class="title">installed</span> <span class="title">pip</span>-8.1.1 <span class="title">setuptools</span>-20.10.1</span></span><br></pre></td></tr></table></figure><p>上手くいきました。<br>では、お待ちかねのsimplejsonをインストールします。<br>前の同じように、Visual Studioからインストールします。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Installing &#x27;simplejson&#x27;</span><br><span class="line">Unhandled exception:</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> last):</span><br><span class="line">  File &quot;C:\Program Files (x86)\IronPython <span class="number">2</span>.<span class="number">7</span>\Lib\runpy.py&quot;, line <span class="number">182</span>, <span class="keyword">in</span> run_module</span><br><span class="line">  File &quot;C:\Program Files (x86)\IronPython <span class="number">2</span>.<span class="number">7</span>\Lib\runpy.py&quot;, line <span class="number">111</span>, <span class="keyword">in</span> _get_module_details</span><br><span class="line">  File &quot;C:\Program Files (x86)\IronPython <span class="number">2</span>.<span class="number">7</span>\Lib\site-packages\pip\__init__.py&quot;, line <span class="number">13</span>, <span class="keyword">in</span> </span><br><span class="line">  File &quot;C:\Program Files (x86)\IronPython <span class="number">2</span>.<span class="number">7</span>\Lib\site-packages\pip\exceptions.py&quot;, line <span class="number">6</span>, <span class="keyword">in</span> </span><br><span class="line">  File &quot;C:\Program Files (x86)\IronPython <span class="number">2</span>.<span class="number">7</span>\Lib\site-packages\pip\_vendor\six.py&quot;, line <span class="number">701</span>, <span class="keyword">in</span> </span><br><span class="line">  File &quot;C:\Program Files (x86)\IronPython <span class="number">2</span>.<span class="number">7</span>\Lib\site-packages\pip\_vendor\six.py&quot;, line <span class="number">692</span>, <span class="keyword">in</span> exec_</span><br><span class="line"><span class="function">AttributeError: &#x27;<span class="title">module</span>&#x27; <span class="title">object</span> <span class="title">has</span> <span class="title">no</span> <span class="title">attribute</span> &#x27;<span class="title">_getframe</span>&#x27;</span></span><br></pre></td></tr></table></figure><p>またしても失敗です。<br>この <strong>_getframe</strong> という単語を足掛かりに検索してみます。<br>すると下記の記事が見つかりました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://stackoverflow.com/questions/37370537/pip-in-visual-studio-not-installing-packages" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=stackoverflow.com"></img><div class="hbc-site-name">Stack Overflow</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded"></img></div><div class="hbc-text"><div class="hbc-title">Pip in Visual Studio not installing packages</div><div class="hbc-url">http://stackoverflow.com/questions/37370537/pip-in-visual-studio-not-installing-packages</div><div class="hbc-description">Whenever I try to install a package (&#39;theano&#39;, in this case) it gives me this:----- Installing &#39;theano&#39; -----Unhandled exception:Traceba…</div></div></div></div></a></div></div><p>しかし、結論から言うと、ここに書いてある方法もダメでした。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>今回はまさかの失敗です。<br>モジュールがインストールできないなんて、Pythonを使う意味が全くありません。</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/WPF.Python3">https://github.com/takuya-takeuchi/Demo/tree/master/WPF.Python3</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> %e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%e8%a8%80%e8%aa%9e </category>
          
          <category> .NET Framework </category>
          
          <category> Python </category>
          
          <category> net-framework </category>
          
          <category> C# </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> Windows Presentation Foundation </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> python-2 </category>
          
          <category> .NETでPythonを試してみる </category>
          
          <category> IronPython </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETで音声処理を試してみる NAudio編 第1回</title>
      <link href="2017/03/07/1800/"/>
      <url>2017/03/07/1800/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>仕事の絡みで音響認識をすることになったのですが、画像処理なら <strong>OpenCV</strong> 使うなりして、それなりに対応できますが、音声となるとまったく…です。<br>それで、自分の引き出しを増やすために、音声処理系のライブラリを試してみました。<br>今回は <strong>Microsoft Public License</strong> で開発が進められている <strong>NAudio</strong> を試しました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://naudio.codeplex.com/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=naudio.codeplex.com"></img><div class="hbc-site-name">CodePlex Archive</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://archive.codeplex.com/codeplex.png"></img></div><div class="hbc-text"><div class="hbc-title">CodePlex Archive</div><div class="hbc-url">https://naudio.codeplex.com/</div><div class="hbc-description">An archive of the CodePlex open source hosting site</div></div></div></div></a></div></div><p>NAudioはマイクからの入力やスピーカーへの出力をキャプチャしてファイルに出力したりできます。<br>そうです。録音ソフトを作成できます。<br>今回は、ヘッドフォンやスピーカーへの出力をファイルに書き出すサンプルを作りました。</p><p>ソースは下記になります </p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/takuya-takeuchi/Demo/tree/master/NAudio1" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/6241854?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">takuya-takeuchi/Demo</div><div class="hbc-url">https://github.com/takuya-takeuchi/Demo/tree/master/NAudio1</div><div class="hbc-description">Sample source code for Demonstration, Experiment and Test - takuya-takeuchi/Demo</div></div></div></div></a></div></div><h1 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h1><p>いつも通り、MVVMを利用します。<br><strong>MainWindow</strong> に対応する <strong>MainViewModel</strong>、音声の出力デバイスを取得する <strong>AudioService</strong>、デバイスからの音声データをファイルに書き込む <strong>AudioOutputWriter</strong> から成り立ちます。</p><h2 id="AudioService"><a href="#AudioService" class="headerlink" title="AudioService"></a>AudioService</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> NAudio.CoreAudioApi;</span><br><span class="line"><span class="keyword">using</span> NAudioDemo.Services.Interfaces;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">NAudioDemo.Services</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">AudioService</span> : <span class="title">IAudioService</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> MMDeviceCollection <span class="title">GetActiveRender</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> collection = <span class="keyword">new</span> MMDeviceEnumerator().EnumerateAudioEndPoints(DataFlow.Render, DeviceState.Active);</span><br><span class="line">            <span class="keyword">return</span> collection;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>GetActiveRender</strong> は、PCに接続されているアクティブな出力デバイス一覧を取得します。<br>NAudioの用語で、<strong>Render</strong> は出力、<strong>Capture</strong> は入力を表します。<br><strong>MMDeviceEnumerator</strong> は、<strong>Multimedia Device</strong> であり、<a href="https://msdn.microsoft.com/ja-jp/library/windows/desktop/dd371399(v=vs.85).aspx">IMMDeviceEnumerator</a> のラッパーでしょう。</p><h2 id="AudioOutputWriter"><a href="#AudioOutputWriter" class="headerlink" title="AudioOutputWriter"></a>AudioOutputWriter</h2><p>今回の肝です。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> NAudio.CoreAudioApi;</span><br><span class="line"><span class="keyword">using</span> NAudio.Wave;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">NAudioDemo.Models</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">AudioOutputWriter</span> : <span class="title">IDisposable</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> イベント</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">event</span> EventHandler&lt;WaveInEventArgs&gt; DataAvailable;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> フィールド</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="keyword">string</span> _FileName;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> WasapiLoopbackCapture _WaveIn;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Stream _Stream;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> WaveFileWriter _WaveFileWriter;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> コンストラクタ</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">AudioOutputWriter</span>(<span class="params"><span class="keyword">string</span> fileName, MMDevice device</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (device == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(device));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>._FileName = fileName;</span><br><span class="line">            <span class="keyword">this</span>._WaveIn = <span class="keyword">new</span> WasapiLoopbackCapture(device);</span><br><span class="line">            <span class="keyword">this</span>._WaveIn.DataAvailable += <span class="keyword">this</span>.WaveInOnDataAvailable;</span><br><span class="line">            <span class="keyword">this</span>._WaveIn.RecordingStopped += <span class="keyword">this</span>.WaveInOnRecordingStopped;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>._Stream = <span class="keyword">new</span> FileStream(fileName, FileMode.Create, FileAccess.Write, FileShare.Write);</span><br><span class="line">            <span class="keyword">this</span>._WaveFileWriter = <span class="keyword">new</span> WaveFileWriter(<span class="keyword">this</span>._Stream, <span class="keyword">this</span>._WaveIn.WaveFormat);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> プロパティ</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">bool</span> IsRecording</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> メソッド</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.IsRecording = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">this</span>._WaveIn.StartRecording();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Stop</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.IsRecording = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">this</span>._WaveIn.StopRecording();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> オーバーライド</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> イベントハンドラ</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">WaveInOnRecordingStopped</span>(<span class="params"><span class="keyword">object</span> sender, StoppedEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>._WaveFileWriter != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>._WaveFileWriter.Close();</span><br><span class="line">                <span class="keyword">this</span>._WaveFileWriter = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>._Stream != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>._Stream.Close();</span><br><span class="line">                <span class="keyword">this</span>._Stream = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.Dispose();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">WaveInOnDataAvailable</span>(<span class="params"><span class="keyword">object</span> sender, WaveInEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>._WaveFileWriter.Write(e.Buffer, <span class="number">0</span>, e.BytesRecorded);</span><br><span class="line">            <span class="keyword">this</span>.DataAvailable?.Invoke(<span class="keyword">this</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> ヘルパーメソッド</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> IDisposable メンバー</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>._WaveIn.DataAvailable -= <span class="keyword">this</span>.WaveInOnDataAvailable;</span><br><span class="line">            <span class="keyword">this</span>._WaveIn.RecordingStopped -= <span class="keyword">this</span>.WaveInOnRecordingStopped;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>._WaveIn?.Dispose();</span><br><span class="line">            <span class="keyword">this</span>._WaveFileWriter?.Dispose();</span><br><span class="line">            <span class="keyword">this</span>._Stream?.Dispose();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>コンストラクタが全ての重要なことを行っています。<br><strong>WasapiLoopbackCapture</strong> は、WASAPI、つまり <strong>Windows Audio Session API</strong> のオーディオ処理をループバックさせキャプチャするためのクラスです。つまり、MMDeviceで指定したデバイスをキャプチャします。<br>WASAPI については、Wikipediaを見てください。といっても、日本語の記事は情報がないですが。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://ja.wikipedia.org/wiki/WASAPI" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=ja.wikipedia.org"></img><div class="hbc-site-name">ja.wikipedia.org</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">WASAPI - Wikipedia</div><div class="hbc-url">https://ja.wikipedia.org/wiki/WASAPI</div></div></div></div></a></div></div><p>次は、<strong>DataAvailable</strong> イベントをサブスクライブします。<br>これは、キャプチャした生のバイトデータを処理できます。<br>このイベントでファイルへの出力を実行しています。</p><p>このファイルへの出力は、<strong>WaveFileWriter</strong> クラスが担っています。<br>今回は、同一ファイルが存在したら上書きする形でストリームを生成し、第一引数に渡しています。<br>第二引数は、出力する WAVE ファイルのフォーマットを指定します。<br>これは、ループバックからキャプチャされる形式と同一にしています。</p><p>あとは、任意のタイミングで、<strong>WasapiLoopbackCapture.StartRecording メソッド</strong>で録音を開始し、<strong>WasapiLoopbackCapture.StopRecording メソッド</strong>で録音を停止するだけです。</p><h1 id="テスト"><a href="#テスト" class="headerlink" title="テスト"></a>テスト</h1><p>実行するアプリは、左側に出力デバイス一覧、右側には出力先ファイルを指定するテキストボックス、録音の開始ボタン、録音の停止ボタン、キャプチャデータのキャプチャタイミングのログを表示するリストから成り立っています。</p><p><a href="../../../../public/2017/03/550b56b8f5f914bdb0dfaf698267cdc7.png"><img src="../../../../public/2017/03/550b56b8f5f914bdb0dfaf698267cdc7-300x200.png"></a></p><p>ファイルを指定して、Startボタンを押下するとPCで再生される音声をファイルに書き出し始めます。<br>Stopを押下して録音を停止し、出力されたファイルをメディアプレイヤーで再生すると、録音された音声が再生されるのがわかるはずです。<br>また、録音中、音声データが細切れになってファイルに書き込まれていくことがログからわかります。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>長くなりましたが、それなりに簡単にできました。<br>NAudio の音声処理の向き等、理解することは多いですが、基本さえつかめれば、入力データの加工等もできるのでしょう。</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/NAudio1">https://github.com/takuya-takeuchi/Demo/tree/master/NAudio1</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> マルチメディア </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> オープンソース </category>
          
          <category> .NETで音声処理を試してみる NAudio編 </category>
          
          <category> NAudio </category>
          
          <category> 音声処理 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その32 NLogで既存の設定を流用しファイルパスだけ動的に変更する</title>
      <link href="2017/02/27/1797/"/>
      <url>2017/02/27/1797/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p><a href="https://taktak.jp/2017/02/26/1795">前回</a>はログの出力パスを動的に設定する方法を書きました。<br>ですが、あの方法は <strong>Variablesプロパティ</strong> に設定した値がロガー全体で共有されてしまいます。<br>私がやりたかったのは、ログの設定は同一の設定を使うがファイルパスだけ変更したい。ただし、ファイルパスは、プロセスやインスタンス毎に変更したい、という要求でした。</p><p>プロセスやインスタンスが常に一定であるならば、<strong>NLog.config</strong> に必要な数だけ設定を追加すれば済みますが、ファイルパスだけ異なるのに、似たような記述を増やすのは、面倒です。</p><p>ここでは、ロガー毎に<strong>Variablesプロパティ</strong>の値を独立して設定する方法を記します。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>まずは、<strong>NLog.config</strong>を変更します。</p><script src="https://gist.github.com/takuya-takeuchi/6e2705884ee48064efc617c4c433b2db.js"></script><p>ここは<a href="https://taktak.jp/2017/02/26/1795">前回</a>と同じです。</p><p>次に、ソース部分です。</p><script src="https://gist.github.com/takuya-takeuchi/494c7223ac78d74f771edd812774068c.js"></script><p>前回と異なるのは、<strong>LogManager.GetLogger メソッド</strong>を使うのではなく、LogFactoryのインスタンスを自分で生成し、<strong>LogFactory.GetLogger メソッド</strong>を呼び出している箇所です。<br><strong>logger.Factory プロパティ</strong>を見るとわかりますが、このプロパティは、<strong>LogFactory.GetLogger メソッド</strong>から取得している場合、常に同一の値を指すため、当然<strong>Configuration.Variables プロパティ</strong>の中身も一致してしまいます。</p><p>これにより、下記のように、Loggerのインスタンス毎に出力先を簡単に切り替えることができます。</p><script src="https://gist.github.com/takuya-takeuchi/6ea9d0a91500fcd93f678bc6d62c15f4.js"></script>]]></content>
      
      
      <categories>
          
          <category> Logging </category>
          
          <category> logging </category>
          
          <category> NLog </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その31 NLogで動的にファイル名を設定する</title>
      <link href="2017/02/26/1795/"/>
      <url>2017/02/26/1795/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>NLogは動的にファイル名を設定する機能があります。<br>ここでは、ファイルパスを設定するプレースホルダーを解析するのではなく、独自のプレースホルダーを設定し、そのプレースホルダーに任意のテキストを設定する方法でファイル名を変更します。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>まずは、<strong>NLog.config</strong>を変更します。</p><script src="https://gist.github.com/takuya-takeuchi/28f92cceb888c666248e5db3a0c18b1f.js"></script><p>上記の <strong>${var:runtime}</strong> に注目です。<br>ここが、プログラム実行中に変化する部分です。<strong>runtime</strong> の部分は任意の文字列を設定できます。<br>次に、ソース部分<br>です。</p><script src="https://gist.github.com/takuya-takeuchi/4af743eda971f9dd2b117d892bd8852c.js"></script><p><strong>Variablesプロパティ</strong>に、先ほどの runtime をキーにして、任意の値を設定しています。<br>そして、設定を反映させるために、<strong>ReconfigExistingLoggers メソッド</strong>を呼び出しています。</p><p>以上で、出力先の実際のパスが <strong>実行フォルダのパス\Logs\test\yyyyMMdd.log</strong> というログとして解釈されるようになります。</p>]]></content>
      
      
      <categories>
          
          <category> Logging </category>
          
          <category> logging </category>
          
          <category> NLog </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでPythonを試してみる 第2回</title>
      <link href="2017/02/13/1786/"/>
      <url>2017/02/13/1786/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2017/02/13/1777">前回</a>は簡単な関数を呼び出してみました。</p><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>今回の目的は、引数を渡し、その戻りを表示します。<br>ただ、単純に文字列や数値を渡すのは面白くありません。<br>今回は配列を渡して、配列を返します。<br>なんと言っても、Pythonは配列、リスト、タップルの操作を得意としており、またそれらを操作するライブラリが豊富です。<br>すなわち、配列をPythonで処理させ、その結果をC#で受け取ることができれば、より実践的なアプリが作成できます。<br>今回は、2つの数値を指定し、その数値を数列の先頭、末尾として扱い、差が1の階差数列を生成します。<br>その階差数列をPythonに渡し、各要素を2倍にした配列をC#に返し、最終的に配列内の要素の総和を返すアプリです。<br>例えば、1、10を指定すれば、1,2,…9,10が生成され、最終的な値は55*2の110と表示されます。<br>今回のソースは下記になります </p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/takuya-takeuchi/Demo/tree/master/WPF.Python2" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/6241854?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">takuya-takeuchi/Demo</div><div class="hbc-url">https://github.com/takuya-takeuchi/Demo/tree/master/WPF.Python2</div><div class="hbc-description">Sample source code for Demonstration, Experiment and Test - takuya-takeuchi/Demo</div></div></div></div></a></div></div><h1 id="Python側"><a href="#Python側" class="headerlink" title="Python側"></a>Python側</h1><p>Python側のプロジェクトを作成します。<br>Pythonのソースは下記になります。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PythonTest</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twice</span>(<span class="params">selt, array</span>):</span></span><br><span class="line">        list = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(array))]</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> array:</span><br><span class="line">            list[i] = x * <span class="number">2</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> list;</span><br></pre></td></tr></table></figure><p>Pythonの文法をかなり忘れているので、ググりながら作成しました。情けない。<br>まず、list変数は、引数に渡ってきた配列arrayの長さの個数を持ち、かつ各要素は0で初期化されます。<br>次に、渡ってきた配列arrayをループで各要素、つまりxにアクセス、そのxを2倍にし、先頭から順にlistに格納します。<br>そして、listを返します。</p><h1 id="C-側"><a href="#C-側" class="headerlink" title="C#側"></a>C#側</h1><p>今回もWPFです。Xaml側は省略します。<br>数列の開始数値と終了数値を入力できるTextBox、結果を表示するメッセージボックスを表示するボタンだけです。<br>IronPythonの参照方法、<strong>Microsoft.Scripting.Hosting.ScriptRuntime 型</strong>、<strong>IronPython.Hosting.Python.CreateRuntime メソッド</strong>、<strong>UseFile メソッド</strong>の説明は前回の記事を参照してください。<br>今回は、Pythonと配列をやりとりする箇所のみ説明します。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> RelayCommand MessageCommand</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._MessageCommand ?? <span class="keyword">new</span> RelayCommand(() =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> array = Enumerable.Range(<span class="keyword">this</span>._Start, <span class="keyword">this</span>._End - <span class="keyword">this</span>._Start + <span class="number">1</span>).ToArray();</span><br><span class="line">            <span class="keyword">var</span> sum = array.Sum();</span><br><span class="line">            <span class="keyword">var</span> list = <span class="keyword">this</span>._PythonWrapper.Twice(array);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> message = <span class="string">$&quot;Initial total:<span class="subst">&#123;sum&#125;</span>, final total:<span class="subst">&#123;list.Sum()&#125;</span>&quot;</span>;</span><br><span class="line">            <span class="keyword">this</span>._MessageDialog.ShowMessage(message);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>_PythonWrapper.Twiceが今回、Pythonスクリプトの関数を呼び出します。<br>arrayはint[]です。<br>そしてlistもint[]です。<br>では、PythonWrapperの中身です。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Scripting.Hosting;</span><br><span class="line"><span class="keyword">using</span> WPFPython2.ViewModels.Interfaces;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WPFPython2.ViewModels</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">PythonWrapper</span> : <span class="title">IPythonWrapper</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> フィールド</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> ScriptRuntime _ScriptRuntime;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">dynamic</span> _PythonObject;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">dynamic</span> _PythonTest;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="keyword">string</span> _Path;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> コンストラクタ</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PythonWrapper</span>(<span class="params">ScriptRuntime scriptRuntime, <span class="keyword">string</span> path</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (scriptRuntime == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(scriptRuntime));</span><br><span class="line">            <span class="keyword">if</span> (path == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(path));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!File.Exists(path))</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(path);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>._ScriptRuntime = scriptRuntime;</span><br><span class="line">            <span class="keyword">this</span>._Path = path;</span><br><span class="line">            <span class="keyword">this</span>._PythonObject = <span class="keyword">this</span>._ScriptRuntime.UseFile(<span class="keyword">this</span>._Path);</span><br><span class="line">            <span class="keyword">this</span>._PythonTest = <span class="keyword">this</span>._PythonObject.PythonTest();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> メソッド</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span>[] <span class="title">Twice</span>(<span class="params"><span class="keyword">int</span>[] array</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> list = <span class="keyword">this</span>._PythonTest.twice(array);</span><br><span class="line">            <span class="keyword">return</span> ((IList&lt;<span class="keyword">object</span>&gt;)list).Cast&lt;<span class="keyword">int</span>&gt;().ToArray();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>コンストラクタは前回と同じです。Twiceメソッドだけが肝です。<br>まず、普通にint[]をPython側に渡しています。<br>しかし、戻ってきたlist変数はそのまま返すことはできません。<br>この変数の正確な型は、<strong>IronPython.Runtime.List</strong> という型です。<br>この変数を <strong>GetType().GetMembers()</strong> するとわかるのですが、 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">Void set_Item(IronPython.Runtime.Slice, System.Object)</span><br><span class="line">Void set_Item(Int32, System.Object)</span><br><span class="line">Void set_Item(System.Numerics.BigInteger, System.Object)</span><br><span class="line">Void set_Item(System.Object, System.Object)</span><br><span class="line">Void __init__()</span><br><span class="line">Void __init__(System.Collections.IEnumerable)</span><br><span class="line">Void __init__(System.Collections.ICollection)</span><br><span class="line">Void __init__(IronPython.Runtime.SetCollection)</span><br><span class="line">Void __init__(IronPython.Runtime.FrozenSetCollection)</span><br><span class="line">Void __init__(IronPython.Runtime.List)</span><br><span class="line">Void __init__(System.String)</span><br><span class="line">Void __init__(IronPython.Runtime.CodeContext, System.Object)</span><br><span class="line">System.Object __new__(IronPython.Runtime.CodeContext, IronPython.Runtime.Types.PythonType)</span><br><span class="line">System.Object __new__(IronPython.Runtime.CodeContext, IronPython.Runtime.Types.PythonType, System.Object)</span><br><span class="line">System.Object __new__(IronPython.Runtime.CodeContext, IronPython.Runtime.Types.PythonType, System.Object[])</span><br><span class="line">System.Object __new__(IronPython.Runtime.CodeContext, IronPython.Runtime.Types.PythonType, System.Collections.Generic.IDictionary&#96;2[System.Object,System.Object], System.Object[])</span><br><span class="line">IronPython.Runtime.List op_Addition(IronPython.Runtime.List, IronPython.Runtime.List)</span><br><span class="line">IronPython.Runtime.List op_Multiply(IronPython.Runtime.List, Int32)</span><br><span class="line">IronPython.Runtime.List op_Multiply(Int32, IronPython.Runtime.List)</span><br><span class="line">System.Object op_Multiply(IronPython.Runtime.List, IronPython.Runtime.Index)</span><br><span class="line">System.Object op_Multiply(IronPython.Runtime.Index, IronPython.Runtime.List)</span><br><span class="line">System.Object op_Multiply(IronPython.Runtime.List, System.Object)</span><br><span class="line">System.Object op_Multiply(System.Object, IronPython.Runtime.List)</span><br><span class="line">Int32 __len__()</span><br><span class="line">System.Collections.IEnumerator __iter__()</span><br><span class="line">System.Collections.IEnumerator __reversed__()</span><br><span class="line">Boolean __contains__(System.Object)</span><br><span class="line">System.Object InPlaceAdd(System.Object)</span><br><span class="line">IronPython.Runtime.List InPlaceMultiply(Int32)</span><br><span class="line">System.Object InPlaceMultiply(IronPython.Runtime.Index)</span><br><span class="line">System.Object InPlaceMultiply(System.Object)</span><br><span class="line">System.Object __getslice__(Int32, Int32)</span><br><span class="line">Void __setslice__(Int32, Int32, System.Object)</span><br><span class="line">Void __delslice__(Int32, Int32)</span><br><span class="line">System.Object get_Item(IronPython.Runtime.Slice)</span><br><span class="line">Void __delitem__(Int32)</span><br><span class="line">Void __delitem__(System.Object)</span><br><span class="line">Void __delitem__(IronPython.Runtime.Slice)</span><br><span class="line">Void append(System.Object)</span><br><span class="line">Int32 count(System.Object)</span><br><span class="line">Void extend(IronPython.Runtime.List)</span><br><span class="line">Void extend(IronPython.Runtime.PythonTuple)</span><br><span class="line">Void extend(System.Object)</span><br><span class="line">Int32 index(System.Object)</span><br><span class="line">Int32 index(System.Object, Int32)</span><br><span class="line">Int32 index(System.Object, Int32, Int32)</span><br><span class="line">Int32 index(System.Object, System.Object)</span><br><span class="line">Int32 index(System.Object, System.Object, System.Object)</span><br><span class="line">Void insert(Int32, System.Object)</span><br><span class="line">Void Insert(Int32, System.Object)</span><br><span class="line">System.Object pop()</span><br><span class="line">System.Object pop(Int32)</span><br><span class="line">Void remove(System.Object)</span><br><span class="line">Void reverse()</span><br><span class="line">Void sort(IronPython.Runtime.CodeContext)</span><br><span class="line">Void sort(IronPython.Runtime.CodeContext, System.Object)</span><br><span class="line">Void sort(IronPython.Runtime.CodeContext, System.Object, System.Object)</span><br><span class="line">Void sort(IronPython.Runtime.CodeContext, System.Object, System.Object, Boolean)</span><br><span class="line">System.Object get_Item(Int32)</span><br><span class="line">System.Object get_Item(System.Numerics.BigInteger)</span><br><span class="line">System.Object get_Item(System.Object)</span><br><span class="line">Void RemoveAt(Int32)</span><br><span class="line">Boolean Contains(System.Object)</span><br><span class="line">Void Clear()</span><br><span class="line">Int32 IndexOf(System.Object)</span><br><span class="line">Int32 Add(System.Object)</span><br><span class="line">Int32 get_Count()</span><br><span class="line">Void CopyTo(System.Array, Int32)</span><br><span class="line">System.Collections.IEnumerator GetEnumerator()</span><br><span class="line">System.String __repr__(IronPython.Runtime.CodeContext)</span><br><span class="line">Void CopyTo(System.Object[], Int32)</span><br><span class="line">Boolean Remove(System.Object)</span><br><span class="line">System.Object op_GreaterThan(IronPython.Runtime.List, System.Object)</span><br><span class="line">System.Object op_LessThan(IronPython.Runtime.List, System.Object)</span><br><span class="line">System.Object op_GreaterThanOrEqual(IronPython.Runtime.List, System.Object)</span><br><span class="line">System.Object op_LessThanOrEqual(IronPython.Runtime.List, System.Object)</span><br><span class="line">System.String ToString()</span><br><span class="line">Boolean Equals(System.Object)</span><br><span class="line">Int32 GetHashCode()</span><br><span class="line">System.Type GetType()</span><br><span class="line">Void .ctor()</span><br><span class="line">System.Object Item [IronPython.Runtime.Slice]</span><br><span class="line">System.Object Item [Int32]</span><br><span class="line">System.Object Item [System.Numerics.BigInteger]</span><br><span class="line">System.Object Item [System.Object]</span><br><span class="line">Int32 Count</span><br><span class="line">System.Object __hash__</span><br></pre></td></tr></table></figure><p>ところどころ、Pythonで提供している関数名が見つかります。また、Int32 Countやインデクサがあることから、System.Collections.IListを実装していそうなことはわかります。<br>実際にキャストもできます。<br>ですが、Pythonでは型はあってないようなものですし、要素の型がわからないため、明示的にキャストして呼び出し元に返しています。<br>キャストこそ面倒ですが、配列を渡す、呼び出すことに全く問題はありません。</p><h1 id="テスト"><a href="#テスト" class="headerlink" title="テスト"></a>テスト</h1><p>実際に実行してみます。<br>サンプルソースをビルドすると実行ディレクトリに、pythonsフォルダが生成され、<strong>Python2.py</strong>ファイルがコピーされます。<br>このファイルはPythonプロジェクトのファイルそのものです。<br>実行するとButtonが1つとTextBoxが2つ。。</p><p><a href="../../../../public/2017/02/2f18568491823fb77999e5278edfd49f.png"><img src="../../../../public/2017/02/2f18568491823fb77999e5278edfd49f.png"></a></p><p>ボタンを押すと、Python2.pyのtwiceの戻りの内容の総和が表示されます。</p><p><a href="../../../../public/2017/02/b797a53aff385fe3fc1e790f3515fd10.png"><img src="../../../../public/2017/02/b797a53aff385fe3fc1e790f3515fd10.png"></a></p><p>アプリを終了し、Python2.pyのtwice関数内の、2倍の部分を3に変更したりすれば、今回も内容が変わることがわかります。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>今回も簡単に実行できました。<br>異なる言語間のやりとりで面倒なことの筆頭は配列の扱いだと思います。例えば、C#とC/C++におけるポインタとか。<br>しかし、そんな面倒なところを感じさせないところは、Pythonがグルー言語と言われるところでしょう。</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/WPF.Python2">https://github.com/takuya-takeuchi/Demo/tree/master/WPF.Python2</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> %e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%e8%a8%80%e8%aa%9e </category>
          
          <category> .NET Framework </category>
          
          <category> Python </category>
          
          <category> net-framework </category>
          
          <category> C# </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> Windows Presentation Foundation </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> python-2 </category>
          
          <category> .NETでPythonを試してみる </category>
          
          <category> IronPython </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでPythonを試してみる 第1回</title>
      <link href="2017/02/13/1777/"/>
      <url>2017/02/13/1777/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2017/02/13/1765">前回</a>は下準備でした。</p><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>今回の目的は、WPFからPythonスクリプト、つまり**.py<strong>ファイルを呼び出します。<br>また、WPFなので、MVVMを使います。MVVMフレームワークは **MVVM Light Toolkit</strong> ですが、そのあたりは自由に適宜選択してください。<br>ソースは下記になります </p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/takuya-takeuchi/Demo/tree/master/WPF.Python1" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/6241854?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">takuya-takeuchi/Demo</div><div class="hbc-url">https://github.com/takuya-takeuchi/Demo/tree/master/WPF.Python1</div><div class="hbc-description">Sample source code for Demonstration, Experiment and Test - takuya-takeuchi/Demo</div></div></div></div></a></div></div><h1 id="Python側"><a href="#Python側" class="headerlink" title="Python側"></a>Python側</h1><p>Python側のプロジェクトを作成します。<br>と言っても、Python側はソースを管理し、コーディングの際にインテリセンスを有効にするためだけで、C#側から直接プロジェクトを参照するというわけではありません。<br>Pythonのプロジェクトは、<strong>Python Tools for Visual Studio</strong>をインストールした上で、ソリューションに対してプロジェクトを追加する際、下記のテンプレートを選択します。</p><p><a href="../../../../public/2017/02/bb8a5a21d0fcc4492415c1f43f23d530.png"><img src="../../../../public/2017/02/bb8a5a21d0fcc4492415c1f43f23d530-300x207.png"></a></p><p>追加したプロジェクトには、<strong>python1.py</strong>だけが存在します。<br>エクスプローラ上には、<strong>Python1.pyproj</strong>と<strong>python1.py</strong>というシンプル構成です。<br>次に、Pythonのソースを。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PythonTest</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showMessage</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello world from Python&quot;</span></span><br></pre></td></tr></table></figure><p>PythonTestというクラスが、showMessageというメソッドを持っているだけです。<br>目的は、C#側から、このメソッドを呼び出すことです。<br>つまり、クラスのインスタンス化、クラスメソッドの呼び出し、戻り値の表示、という3つの基礎的な題材をテストできます。</p><h1 id="C-側"><a href="#C-側" class="headerlink" title="C#側"></a>C#側</h1><p>いつも通り、簡単にMVVMを使用して簡単なプロジェクトを作成します。<br>今回はボタンを押すと、メッセージボックスが表示され、pythonスクリプトに書かれた、つまりshowMessageメソッドの戻りの値が表示されるというアプリケーションになります。<br>Xaml側は省略します。<br>最初に、IronPythonを利用するために、参照を追加します。<br><strong>C:\Program Files (x86)\IronPython 2.7\Platforms</strong> に <strong>Net35</strong>、<strong>Net40</strong>、<strong>Sl5</strong> というフォルダが存在します。<br>それらのうちの一つを選び配下から、<strong>IronPython.dll</strong>、<strong>Microsoft.Scripting.dll</strong>、<strong>Microsoft.Dynamic.dll</strong> をプロジェクトに追加します。<br>これでプロジェクトの設定は終了です。<br>次に、Pythonを呼び出す側のコードです。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">WPFPython1.ViewModels.Interfaces</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPythonWrapper</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">string</span> <span class="title">ShowMessage</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Scripting.Hosting;</span><br><span class="line"><span class="keyword">using</span> WPFPython1.ViewModels.Interfaces;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WPFPython1.ViewModels</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">PythonWrapper</span> : <span class="title">IPythonWrapper</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> フィールド</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> ScriptRuntime _ScriptRuntime;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">dynamic</span> _PythonObject;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">dynamic</span> _PythonTest;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="keyword">string</span> _Path;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> コンストラクタ</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PythonWrapper</span>(<span class="params">ScriptRuntime scriptRuntime, <span class="keyword">string</span> path</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (scriptRuntime == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(scriptRuntime));</span><br><span class="line">            <span class="keyword">if</span> (path == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(path));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!File.Exists(path))</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(path);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>._ScriptRuntime = scriptRuntime;</span><br><span class="line">            <span class="keyword">this</span>._Path = path;</span><br><span class="line">            <span class="keyword">this</span>._PythonObject = <span class="keyword">this</span>._ScriptRuntime.UseFile(<span class="keyword">this</span>._Path);</span><br><span class="line">            <span class="keyword">this</span>._PythonTest = <span class="keyword">this</span>._PythonObject.PythonTest();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> メソッド</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">ShowMessage</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>._PythonTest.showMessage();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ScriptRuntime 変数</strong>は、<strong>Microsoft.Scripting.Hosting.ScriptRuntime 型</strong>で、Pythonの実行環境を表します。<br>次のソースの <strong>IronPython.Hosting.Python.CreateRuntime メソッド</strong>の戻りでもあります。<br><strong>UseFile メソッド</strong>には呼び出したいPythonファイルを指定します。戻りを <strong>dynamic 型</strong>にして、メンバ変数に格納します。<br><strong>_PythonObject メンバ変数</strong>から <strong>PythonTest クラス</strong>をインスタンス化して、<strong>_PythonTest メンバ変数</strong>に格納します。</p><p>そして、ShowMessage メソッドで、pythonの <strong>showMessage 関数</strong>を呼び出します。<br>dynamic型なので、コンパイル時にエラーは解決できませんので、記述が間違っていてもエラーになりませんので注意が必要です。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Windows;</span><br><span class="line"><span class="keyword">using</span> GalaSoft.MvvmLight;</span><br><span class="line"><span class="keyword">using</span> GalaSoft.MvvmLight.Ioc;</span><br><span class="line"><span class="keyword">using</span> IronPython.Hosting;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Practices.ServiceLocation;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Scripting.Hosting;</span><br><span class="line"><span class="keyword">using</span> WPFPython1.ViewModels;</span><br><span class="line"><span class="keyword">using</span> WPFPython1.ViewModels.Interfaces;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WPFPython1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> This class contains static references to all the view models in the</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> application and provides an entry point for the bindings.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> See http://www.galasoft.ch/mvvm</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ViewModelLocator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="title">ViewModelLocator</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            ServiceLocator.SetLocatorProvider(() =&gt; SimpleIoc.Default);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ViewModelBase.IsInDesignModeStatic)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// SimpleIoc.Default.Register&lt;IDataService, Design.DesignDataService&gt;();</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// SimpleIoc.Default.Register&lt;IDataService, DataService&gt;();</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            SimpleIoc.Default.Register&lt;IMessageDialog&gt;(() =&gt; <span class="keyword">new</span> MessageDialog(Application.Current.MainWindow));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> py = Python.CreateRuntime();</span><br><span class="line">            SimpleIoc.Default.Register&lt;IPythonWrapper&gt;(()=&gt; <span class="keyword">new</span> PythonWrapper(py, <span class="string">@&quot;pythons\Python1.py&quot;</span>));</span><br><span class="line">            SimpleIoc.Default.Register&lt;IMainViewModel, MainViewModel&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> Gets the Main property.</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        [<span class="meta">System.Diagnostics.CodeAnalysis.SuppressMessage(<span class="meta-string">&quot;Microsoft.Performance&quot;</span>,</span></span><br><span class="line"><span class="meta">            <span class="meta-string">&quot;CA1822:MarkMembersAsStatic&quot;</span>,</span></span><br><span class="line"><span class="meta">            Justification = <span class="meta-string">&quot;This non-static member is needed for data binding purposes.&quot;</span>)</span>]</span><br><span class="line">        <span class="keyword">public</span> IMainViewModel Main</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> ServiceLocator.Current.GetInstance&lt;IMainViewModel&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>見たままです。<br>ScriptRuntimeを生成し、実行したいPythonスクリプトをパス指定しているだけです。<br>MessageDialogは単純に <strong>System.Windows.MessageBox.Show メソッド</strong>を呼ぶためだけのinterfaceです。</p><h1 id="テスト"><a href="#テスト" class="headerlink" title="テスト"></a>テスト</h1><p>実際に実行してみます。<br>サンプルソースをビルドすると実行ディレクトリに、pythonsフォルダが生成され、<strong>Python1.py</strong>ファイルがコピーされます。<br>このファイルはPythonプロジェクトのファイルそのものです。<br>実行するとボタンが一つ。</p><p><a href="../../../../public/2017/02/5686f2a0827b903d38955a1c956295f7.png"><img src="../../../../public/2017/02/5686f2a0827b903d38955a1c956295f7-300x186.png"></a></p><p>ボタンを押すと、Python1.pyのshowMessageの戻りの内容が表示されます。</p><p><a href="../../../../public/2017/02/ca0bd229563208221d0d5897057a48f2.png"><img src="../../../../public/2017/02/ca0bd229563208221d0d5897057a48f2.png"></a></p><p>アプリを終了し、Python1.pyのshowMessage の内容を書き換え、再度実行するとメッセージの内容が書き換わっているのがわかります。</p><p><a href="../../../../public/2017/02/603886d29b4ebbf98af1a05e3c8e9ca7.png"><img src="../../../../public/2017/02/603886d29b4ebbf98af1a05e3c8e9ca7.png"></a></p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>簡単に実行できました。<br>Pythonの実行処理を分離したので、I/Fさえ維持すれば、呼び出す対象のライブラリをPythonからC++にする！！とかいう選択も可能になるでしょう。<br>このあたり、MVVMできちんと分離してあるのが良い感じです。</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/WPF.Python1">https://github.com/takuya-takeuchi/Demo/tree/master/WPF.Python1</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> %e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%e8%a8%80%e8%aa%9e </category>
          
          <category> .NET Framework </category>
          
          <category> Python </category>
          
          <category> net-framework </category>
          
          <category> C# </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> Windows Presentation Foundation </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> python-2 </category>
          
          <category> .NETでPythonを試してみる </category>
          
          <category> IronPython </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでPythonを試してみる 第0回</title>
      <link href="2017/02/13/1765/"/>
      <url>2017/02/13/1765/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>仕事でPythonを使う機会が再び訪れ、そのPythonをGUIから使えたらいいなぁ、って感じで調べたら<strong>IronPython</strong>があることを思い出して、実際に試してみようと思ったのがきっかけ。<br>IronPythonについてはWikipediaで調べてください。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://ja.wikipedia.org/wiki/IronPython" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=ja.wikipedia.org"></img><div class="hbc-site-name">ja.wikipedia.org</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">IronPython - Wikipedia</div><div class="hbc-url">https://ja.wikipedia.org/wiki/IronPython</div></div></div></div></a></div></div><p>で、確かにIronPythonを使っている記事は各所にあるのですが、大抵はコンソールアプリで味気なく、実務に即していない。<br>なので、WPFから使ってみようというのが目的です。</p><h1 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h1><p>何はともあれ、IronPythonのインストールです。<br>公式サイトからダウンロードしてインストールするだけです。<br>なお、Pythonのインストールは既に完了しているものとします。<br>Python環境の構築は<a href="https://taktak.jp/2016/05/28/1372">ディープラーニング Caffe for Windows その1 環境構築</a>を参考にしてください。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://ironpython.net/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=ironpython.net"></img><div class="hbc-site-name">ironpython.net</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">IronPython.net / </div><div class="hbc-url">http://ironpython.net/</div></div></div></div></a></div></div><p>公式サイトにアクセスすると、<strong>Download Python 2.7</strong> とあるので、クリックすると github のページ飛ぶので、zip か msi ファイルをダウンロードします。</p><p><a href="../../../../public/2017/02/screencapture-ironpython-net-1486911382563.png"><img src="../../../../public/2017/02/screencapture-ironpython-net-1486911382563-1024x416.png"></a></p><p>今回は下記のようにmsiを使ってインストールします。<br>インストール自体は、ウィザードに従っていくだけです。</p><p><a href="../../../../public/2017/02/b8bcd77b3be586509c2b6d74a66d0c13.png"><img src="../../../../public/2017/02/b8bcd77b3be586509c2b6d74a66d0c13.png"></a></p><p><a href="../../../../public/2017/02/b81a9b50f24a78edc563e1d46932ae74.png"><img src="../../../../public/2017/02/b81a9b50f24a78edc563e1d46932ae74.png"></a></p><p><a href="../../../../public/2017/02/948e17965a90a7a2300f60f0b740e73d.png"><img src="../../../../public/2017/02/948e17965a90a7a2300f60f0b740e73d.png"></a></p><p><a href="../../../../public/2017/02/827fc6dc9a130067b2281a40e582d35b.png"><img src="../../../../public/2017/02/827fc6dc9a130067b2281a40e582d35b.png"></a></p><p><a href="../../../../public/2017/02/0c15ffc277b617632a37cd7eac720e2f.png"><img src="../../../../public/2017/02/0c15ffc277b617632a37cd7eac720e2f.png"></a></p><p><a href="../../../../public/2017/02/b09a006b0bb8da92ded603c96a10e738.png"><img src="../../../../public/2017/02/b09a006b0bb8da92ded603c96a10e738.png"></a></p><p><a href="../../../../public/2017/02/151633eb8118d6e5b711b0c9c38c456a.png"><img src="../../../../public/2017/02/151633eb8118d6e5b711b0c9c38c456a.png"></a></p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>まずは下準備が終わりました。<br>次回は実際にWPFからPythonスクリプトを呼び出してみます。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> %e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%e8%a8%80%e8%aa%9e </category>
          
          <category> .NET Framework </category>
          
          <category> Python </category>
          
          <category> net-framework </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> python-2 </category>
          
          <category> .NETでPythonを試してみる </category>
          
          <category> IronPython </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その30 LoggerServiceを実装する</title>
      <link href="2017/01/22/1760/"/>
      <url>2017/01/22/1760/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>世の中にロギングライブラリはたくさんあります。有名どころでは <a href="https://logging.apache.org/log4net/">log4net</a>, <a href="http://nlog-project.org/">NLog</a> とかです。</p><p>単純にこれらのロギングライブラリをアプリにリンクすると、万が一ロギングライブラリに問題が生じたり、ログの出力先をWebServiceに投げたい、とかなったらログ出力を記述している個所を全部書き換える必要があります。<br>(NLogはWebServiceとかDatabaseへ出力することもできますが…)</p><p>なので、これらのライブラリとの依存性を減らすべく、ラップするなりします。ましてや、Dependency Injectionならなおさらです。<br>でも、ここで気づきます。</p><br><br><p><strong>あれ？ログに出力される呼び出し元メソッド名が全部ラッパーになる＼(^o^)／</strong></p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>幸いにして、log4net、NLogともに解決策があります。<br>問題は、ログ出力メソッドの呼び出し元を正しく出力することです。</p><p>通常は、各ライブラリのメソッドをダイレクトに呼び出しているメソッドのクラスが基点になります。<br>ですが、ラッパーをかましている場合は、ライブラリのログ出力メソッドを呼び出している箇所との間にラッパーが存在します。</p><h4 id="NLogの場合"><a href="#NLogの場合" class="headerlink" title="NLogの場合"></a>NLogの場合</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ILogService</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Info</span>(<span class="params"><span class="keyword">string</span> message</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Info</span>(<span class="params">Exception exception, IFormatProvider formatProvider, <span class="keyword">string</span> message</span>)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ILogFactoryService</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">ILogService <span class="title">Create</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ILogService <span class="title">Create</span>(<span class="params"><span class="keyword">string</span> name</span>)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">NLogLogService</span> : <span class="title">ILogService</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">region</span> フィールド</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Logger _Logger;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">region</span> コンストラクタ</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">internal</span> <span class="title">NLogLogService</span>(<span class="params">Logger logger</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">this</span>._Logger = logger;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">region</span> メソッド</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Write</span>(<span class="params">LogLevel logLevel, <span class="keyword">string</span> message</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">this</span>._Logger.Log(<span class="keyword">typeof</span>(NLogLogService), LogEventInfo.Create(logLevel, <span class="keyword">this</span>._Logger.Name, message));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Write</span>(<span class="params">LogLevel logLevel, Exception exception, IFormatProvider formatProvider, <span class="keyword">string</span> message</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">this</span>._Logger.Log(<span class="keyword">typeof</span>(NLogLogService), LogEventInfo.Create(logLevel, <span class="keyword">this</span>._Logger.Name, exception, formatProvider, message));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">region</span> ILogService メンバー</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Info</span>(<span class="params"><span class="keyword">string</span> message</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Write(LogLevel.Info, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Info</span>(<span class="params">Exception exception, IFormatProvider formatProvider, <span class="keyword">string</span> message</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Write(LogLevel.Info, exception, formatProvider, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">NLogLogFactoryService</span> : <span class="title">ILogFactoryService</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">region</span> ILogFactoryService メンバー</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ILogService <span class="title">Create</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> NLogLogService(LogManager.GetCurrentClassLogger());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ILogService <span class="title">Create</span>(<span class="params"><span class="keyword">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> NLogLogService(LogManager.GetLogger(name));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上がラッパーになります。<br>ポイントは、<strong>Logメソッド</strong>になります。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://nlog-project.org/documentation/v2.0.1/html/M_NLog_Logger_Log_35.htm" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=nlog-project.org"></img><div class="hbc-site-name">nlog-project.org</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">Log Method (, LogEventInfo)</div><div class="hbc-url">http://nlog-project.org/documentation/v2.0.1/html/M_NLog_Logger_Log_35.htm</div></div></div></div></a></div></div><p>第一引数にラッパークラスの型を渡します。これにより、呼び出し元のメソッドを本来の意図した場所に訂正できます。<br>スタックトレースを辿っていき、第一引数に渡したクラスの直前の箇所を呼び出し元として判定しているのでしょう。</p><p>使い方は下記のようになります。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">TestService</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">region</span> フィールド</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ILogService _LogService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">region</span> コンストラクタ</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestService</span>(<span class="params">ILogFactoryService logFactoryService</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">this</span>._LogService = logFactoryService.Create(<span class="string">&quot;MainLogger&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">region</span> メソッド</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">this</span>._LogService.Info(<span class="string">&quot;Test start&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ログを出力したいクラスのコンストラクタでILogFactoryService.Createメソッドを呼び出し、ILogServiceを生成します。<br>実際には内部でNLogのロガーが生成されていますが、それらを隠蔽しています。</p><h4 id="log4net"><a href="#log4net" class="headerlink" title="log4net"></a>log4net</h4><p>同じように、Logメソッドでラッパーを指定します。<br>詳細は下記を参照。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://logging.apache.org/log4net/release/sdk/html/M_log4net_Repository_Hierarchy_Logger_Log_2.htm" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=logging.apache.org"></img><div class="hbc-site-name">logging.apache.org</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">Logger.Log Method (Type, Level, Object, Exception)</div><div class="hbc-url">http://logging.apache.org/log4net/release/sdk/html/M_log4net_Repository_Hierarchy_Logger_Log_2.htm</div></div></div></div></a></div></div>]]></content>
      
      
      <categories>
          
          <category> Logging </category>
          
          <category> logging </category>
          
          <category> log4net </category>
          
          <category> NLog </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETで画像処理を試してみる OpenCVSharp編 第5回</title>
      <link href="2017/01/18/1753/"/>
      <url>2017/01/18/1753/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2017/01/02/1726">前回</a>は3.Xへの更新について説明を行いました。</p><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>現状の.NETのUIといえば、UWPがメインに据えられ(Microsoft的な意味で)、WPFが微妙な立ち位置になり、WinFormsがレガシーとなっていますが、UI以外の面では System.Drawing 名前空間は、GDIという太古からのレガシーを受け継いでいたため、WPFでは互換性維持程度のAPIサポートしかなくなりました。</p><p>でも、いつ解放されるかわからない <strong>System.Windows.Media.Imaging.BitmapSource</strong> よりも、<strong>System.IDisposable</strong> を実装している <strong>System.Drawing.Bitmap</strong> のが、メモリ管理という点では管理しやすいのは事実です。</p><p>なので、Bitmapを使っている既存ライブラリを活用するため、BitmapSourceから、あるいはその逆変換を行う必要は結構あると思います。<br>そういう事情を反映してか、OpenCVSharpも便利な拡張メソッド <strong>BitmapSource OpenCvSharp.Extensions.ToBitmapSource</strong> を提供しています。<br>これはBitmapをBitmapSourceに変換する拡張メソッドですが、BitmapSourceに変換したいだけなら、ちょっと一手間加えるだけで、速度面で改善を加えることができます。</p><p>それは下記のソースになります。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">System.Security.SuppressUnmanagedCodeSecurity</span>]</span><br><span class="line">[<span class="meta">DllImport(<span class="meta-string">&quot;gdi32.dll&quot;</span>, EntryPoint = <span class="meta-string">&quot;DeleteObject&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">return: MarshalAs(UnmanagedType.Bool)</span>]</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">bool</span> <span class="title">DeleteObject</span>(<span class="params">[In] IntPtr hObject</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> BitmapSource <span class="title">ToBetterBitmapSource</span>(<span class="params">Bitmap source</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> handle = source.GetHbitmap();</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Imaging.CreateBitmapSourceFromHBitmap(</span><br><span class="line">            handle,</span><br><span class="line">            IntPtr.Zero,</span><br><span class="line">            Int32Rect.Empty,</span><br><span class="line">            BitmapSizeOptions.FromEmptyOptions());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span></span><br><span class="line">    &#123;</span><br><span class="line">        DeleteObject(handle);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これを使って、OpenCVと比較しました。<br>以下サンプルソースです。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Drawing.Imaging;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Interop;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Media.Imaging;</span><br><span class="line"><span class="keyword">using</span> OpenCvSharp.Extensions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">OpenCV4</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">int</span> width = <span class="number">600</span>;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">int</span> height = <span class="number">400</span>;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">int</span> repeat = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line">            BitmapSource bitmapSource;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> sp = <span class="keyword">new</span> Stopwatch();</span><br><span class="line">            sp.Start();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> TRUE</span></span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> bitmap = <span class="keyword">new</span> Bitmap(width, height, PixelFormat.Format32bppArgb))</span><br><span class="line">            &#123;</span><br><span class="line">                Enumerable.Repeat(<span class="number">0</span>, repeat).ToList().ForEach(i =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    bitmapSource = bitmap.ToBitmapSource();</span><br><span class="line">                    Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;bitmapSource&#125;</span>&quot;</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> bitmap = <span class="keyword">new</span> Bitmap(width, height, PixelFormat.Format32bppArgb))</span><br><span class="line">            &#123;</span><br><span class="line">                Enumerable.Repeat(<span class="number">0</span>, repeat).ToList().ForEach(i =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    bitmapSource = ToNativeBitmapSource(bitmap);</span><br><span class="line">                    Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;bitmapSource&#125;</span>&quot;</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">            sp.Stop();</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;Total: <span class="subst">&#123;sp.ElapsedMilliseconds&#125;</span> ms. Average: <span class="subst">&#123;sp.ElapsedMilliseconds/repeat&#125;</span> ms&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">System.Security.SuppressUnmanagedCodeSecurity</span>]</span><br><span class="line">        [<span class="meta">DllImport(<span class="meta-string">&quot;gdi32.dll&quot;</span>, EntryPoint = <span class="meta-string">&quot;DeleteObject&quot;</span>)</span>]</span><br><span class="line">        [<span class="meta">return: MarshalAs(UnmanagedType.Bool)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">bool</span> <span class="title">DeleteObject</span>(<span class="params">[In] IntPtr hObject</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> BitmapSource <span class="title">ToNativeBitmapSource</span>(<span class="params">Bitmap source</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> handle = source.GetHbitmap();</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// フリーズされていない</span></span><br><span class="line">                <span class="keyword">return</span> Imaging.CreateBitmapSourceFromHBitmap(</span><br><span class="line">                    handle,</span><br><span class="line">                    IntPtr.Zero,</span><br><span class="line">                    Int32Rect.Empty,</span><br><span class="line">                    BitmapSizeOptions.FromEmptyOptions());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span></span><br><span class="line">            &#123;</span><br><span class="line">                DeleteObject(handle);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>600x400の32bit画像を10000回BitmapSourceに変換するだけです。<br>以下テスト結果です。</p><ul><li>OpenCVSharp: Total: 55023 ms. Average: 5.5 ms</li><li>better: Total: 16843 ms. Average: 1.6 ms</li></ul><p>結果は圧勝です。</p><p>BitmapSourceにして、<strong>System.Windows.Controls.Image</strong> に表示したいだけなら、断然後者です。</p><h1 id="性能差の原因は"><a href="#性能差の原因は" class="headerlink" title="性能差の原因は?"></a>性能差の原因は?</h1><p>OpenCVSharpの<a href="https://github.com/shimat/opencvsharp/blob/master/src/OpenCvSharp.Extensions/BitmapSourceConverter.cs">ToBitmapSourceのソース</a>を見ればわかりますが、けっこう色々やっています。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BitmapSource <span class="title">ToBitmapSource</span>(<span class="params"><span class="keyword">this</span> Bitmap src</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (src == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(src));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Application.Current?.Dispatcher == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> memoryStream = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">        &#123;</span><br><span class="line">            src.Save(memoryStream, ImageFormat.Png);</span><br><span class="line">            <span class="keyword">return</span> CreateBitmapSourceFromBitmap(memoryStream);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> memoryStream = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// You need to specify the image format to fill the stream.</span></span><br><span class="line">            <span class="comment">// I&#x27;m assuming it is PNG</span></span><br><span class="line">            src.Save(memoryStream, ImageFormat.Png);</span><br><span class="line">            memoryStream.Seek(<span class="number">0</span>, SeekOrigin.Begin);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Make sure to create the bitmap in the UI thread</span></span><br><span class="line">            <span class="keyword">if</span> (IsInvokeRequired())</span><br><span class="line">                <span class="keyword">return</span> (BitmapSource)Application.Current.Dispatcher.Invoke(</span><br><span class="line">                    <span class="keyword">new</span> Func&lt;Stream, BitmapSource&gt;(CreateBitmapSourceFromBitmap),</span><br><span class="line">                    DispatcherPriority.Normal,</span><br><span class="line">                    memoryStream);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> CreateBitmapSourceFromBitmap(memoryStream);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> BitmapSource <span class="title">CreateBitmapSourceFromBitmap</span>(<span class="params">Stream stream</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bitmapDecoder = BitmapDecoder.Create(</span><br><span class="line">        stream,</span><br><span class="line">        BitmapCreateOptions.PreservePixelFormat,</span><br><span class="line">        BitmapCacheOption.OnLoad);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This will disconnect the stream from the image completely...</span></span><br><span class="line">    <span class="keyword">var</span> writable = <span class="keyword">new</span> WriteableBitmap(bitmapDecoder.Frames.Single());</span><br><span class="line">    writable.Freeze();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> writable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ざっくりと説明すると、BitmapをMemoryStreamにSaveし、MemoryStreamからBitmapSourceを生成しています。<br>MemoryStreamへ保存している時点で全バイトデータのコピーが走るでしょうし、WritableBitmapSourceを作成するときも、MemoryStreamからメモリデータの転送が実行されるわけです。<br>そりゃ時間がかかるでしょう。CPUのキャッシュに乗る量なら良いですが、画像データのメモリコピーは(CPUからすれば)遅いです。<br><strong>CreateBitmapSourceFromHBitmap</strong> もメモリのコピーはあるはずでしょう。</p><p>また、ToBitmapSourceは戻ってくるBitmapSourceが最初からFreezeされています。<br>なので、編集したい場合は使えないです。</p><p>こうすると、ToBitmapSourceを使うメリットが無いですねぇ..</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>性能が出ないとき、全てを疑うのは時間の無駄ですが、一番ボトルネックになりそう、っていう勘どころをつかめると楽ですね。<br>今回はそれが理由でパフォーマンスを調査したのが始まりでした。</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/OpenCV4">https://github.com/takuya-takeuchi/Demo/tree/OpenCV4</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> C# </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> マルチメディア </category>
          
          <category> 画像処理 </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> OpenCV </category>
          
          <category> .NETで画像処理を試してみる OpenCVSharp編 </category>
          
          <category> OpenCvSharp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>WPF メモ その3 VisualStateManagerとBehaviorの位置関係に注意</title>
      <link href="2017/01/14/1748/"/>
      <url>2017/01/14/1748/</url>
      
        <content type="html"><![CDATA[<h1 id="What-does-it-mean"><a href="#What-does-it-mean" class="headerlink" title="What does it mean?"></a>What does it mean?</h1><p>MVVMの場合、コードビハインドにロジックを書くことを厭い、Behaviorを使って、UIとロジックの分離を試みることも多いでしょう。<br>Behaviorの場合、<strong>System.Windows.Interactivity.Behavior</strong> を継承し、型パラメータは <strong>System.Windows.DependencyObject</strong> の派生型である <strong>System.Windows.FrameworkElement</strong> を指定することがほとんどです。少なくとも私は。<br>そのため、任意のプロパティのコールバックイベントで、引数に渡ってくる DependencyObject の AssociatedObject プロパティから、コールバックの呼び出し元を取り出します。<br>すなわち、<strong>Behaviorを追加した箇所</strong> の FrameworkElement です。</p><p>その後、<strong>System.Windows.VisualStateManager.GoToElementState</strong> メソッドで状態名を指定してUIの状態を変化させます。<br>ここまでは普通です。</p><h1 id="GoToElementState-does-Not-work"><a href="#GoToElementState-does-Not-work" class="headerlink" title="GoToElementState does Not work!!!"></a>GoToElementState does Not work!!!</h1><p>ところが、GoToElementStateがfalseを返すことがあります。<br>例外を返してくれるか、エラーコードが返るなら良いのですが、bool値を返されても原因がわかりません。</p><p>そもそも<a href="https://msdn.microsoft.com/ja-jp/library/system.windows.visualstatemanager.gotoelementstate(v=vs.110).aspx">MSDNのGoToElementStateの説明</a>でも</p><blockquote><p>true コントロールが正常に新しい状態に遷移した場合それ以外の場合、 falseです。</p></blockquote><p>という有様。不親切すぎる。</p><h1 id="VisualStateはありますか"><a href="#VisualStateはありますか" class="headerlink" title="VisualStateはありますか?"></a>VisualStateはありますか?</h1><p>ここで原因ですが、GoToElementStateの第一引数は、FrameworkElementです。つまり、状態を遷移させる対象となる要素になります。<br>失敗していたのは、VisualStateを定義していない位置にBehaviorを定義していたからです。</p><p>以下サンプルソースです。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/takuya-takeuchi/Demo/tree/develop/WPF3" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/6241854?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">takuya-takeuchi/Demo</div><div class="hbc-url">https://github.com/takuya-takeuchi/Demo/tree/develop/WPF3</div><div class="hbc-description">Sample source code for Demonstration, Experiment and Test - takuya-takeuchi/Demo</div></div></div></div></a></div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">&lt;Window x:Class&#x3D;&quot;WPF3.Views.MainView&quot;</span><br><span class="line">        xmlns&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&#x2F;presentation&quot;</span><br><span class="line">        xmlns:x&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&quot;</span><br><span class="line">        xmlns:behaviors&#x3D;&quot;clr-namespace:WPF3.Behaviors&quot;</span><br><span class="line">        xmlns:d&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;expression&#x2F;blend&#x2F;2008&quot;</span><br><span class="line">        xmlns:i&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;expression&#x2F;2010&#x2F;interactivity&quot;</span><br><span class="line">        xmlns:mc&#x3D;&quot;http:&#x2F;&#x2F;schemas.openxmlformats.org&#x2F;markup-compatibility&#x2F;2006&quot;</span><br><span class="line">        Title&#x3D;&quot;MainView&quot;</span><br><span class="line">        Width&#x3D;&quot;525&quot;</span><br><span class="line">        Height&#x3D;&quot;350&quot;</span><br><span class="line">        DataContext&#x3D;&quot;&#123;Binding Source&#x3D;&#123;StaticResource Locator&#125;,</span><br><span class="line">                              Path&#x3D;Main&#125;&quot;</span><br><span class="line">        mc:Ignorable&#x3D;&quot;d&quot;&gt;</span><br><span class="line">    &lt;i:Interaction.Behaviors&gt;</span><br><span class="line">        &lt;behaviors:BooleanVisualStateBehavior x:Name&#x3D;&quot;State1Change&quot;</span><br><span class="line">                                              FalseState&#x3D;&quot;False1&quot;</span><br><span class="line">                                              State&#x3D;&quot;&#123;Binding State1&#125;&quot;</span><br><span class="line">                                              TrueState&#x3D;&quot;True1&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;i:Interaction.Behaviors&gt;</span><br><span class="line">    &lt;Grid&gt;</span><br><span class="line"></span><br><span class="line">        &lt;i:Interaction.Behaviors&gt;</span><br><span class="line">            &lt;behaviors:BooleanVisualStateBehavior x:Name&#x3D;&quot;State2Change&quot;</span><br><span class="line">                                                  FalseState&#x3D;&quot;False2&quot;</span><br><span class="line">                                                  State&#x3D;&quot;&#123;Binding State2&#125;&quot;</span><br><span class="line">                                                  TrueState&#x3D;&quot;True2&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;i:Interaction.Behaviors&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Grid.ColumnDefinitions&gt;</span><br><span class="line">            &lt;ColumnDefinition Width&#x3D;&quot;*&quot; &#x2F;&gt;</span><br><span class="line">            &lt;ColumnDefinition Width&#x3D;&quot;Auto&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;Grid.ColumnDefinitions&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Rectangle x:Name&#x3D;&quot;_Rectangle&quot;</span><br><span class="line">                   Margin&#x3D;&quot;10&quot;</span><br><span class="line">                   HorizontalAlignment&#x3D;&quot;Stretch&quot;</span><br><span class="line">                   VerticalAlignment&#x3D;&quot;Stretch&quot;</span><br><span class="line">                   Fill&#x3D;&quot;Black&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;StackPanel Grid.Column&#x3D;&quot;1&quot; Margin&#x3D;&quot;10&quot;&gt;</span><br><span class="line">            &lt;CheckBox Margin&#x3D;&quot;0 5 0 0&quot; Content&#x3D;&quot;Switch State1&quot; IsChecked&#x3D;&quot;&#123;Binding State1&#125;&quot; &#x2F;&gt;</span><br><span class="line">            &lt;CheckBox Margin&#x3D;&quot;0 5 0 0&quot; Content&#x3D;&quot;Switch State2 (Fail)&quot; IsChecked&#x3D;&quot;&#123;Binding State2&#125;&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;StackPanel&gt;</span><br><span class="line">    &lt;&#x2F;Grid&gt;</span><br><span class="line"></span><br><span class="line">    &lt;VisualStateManager.VisualStateGroups&gt;</span><br><span class="line">        &lt;VisualStateGroup x:Name&#x3D;&quot;State1&quot;&gt;</span><br><span class="line">            &lt;VisualState x:Name&#x3D;&quot;True1&quot;&gt;</span><br><span class="line">                &lt;Storyboard&gt;</span><br><span class="line">                    &lt;ObjectAnimationUsingKeyFrames Storyboard.TargetName&#x3D;&quot;_Rectangle&quot; Storyboard.TargetProperty&#x3D;&quot;Fill&quot;&gt;</span><br><span class="line">                        &lt;DiscreteObjectKeyFrame KeyTime&#x3D;&quot;00:00:00&quot;&gt;</span><br><span class="line">                            &lt;DiscreteObjectKeyFrame.Value&gt;</span><br><span class="line">                                &lt;SolidColorBrush&gt;Red&lt;&#x2F;SolidColorBrush&gt;</span><br><span class="line">                            &lt;&#x2F;DiscreteObjectKeyFrame.Value&gt;</span><br><span class="line">                        &lt;&#x2F;DiscreteObjectKeyFrame&gt;</span><br><span class="line">                    &lt;&#x2F;ObjectAnimationUsingKeyFrames&gt;</span><br><span class="line">                &lt;&#x2F;Storyboard&gt;</span><br><span class="line">            &lt;&#x2F;VisualState&gt;</span><br><span class="line">            &lt;VisualState x:Name&#x3D;&quot;False1&quot;&gt;</span><br><span class="line">                &lt;Storyboard&gt;</span><br><span class="line">                    &lt;ObjectAnimationUsingKeyFrames Storyboard.TargetName&#x3D;&quot;_Rectangle&quot; Storyboard.TargetProperty&#x3D;&quot;Fill&quot;&gt;</span><br><span class="line">                        &lt;DiscreteObjectKeyFrame KeyTime&#x3D;&quot;00:00:00&quot;&gt;</span><br><span class="line">                            &lt;DiscreteObjectKeyFrame.Value&gt;</span><br><span class="line">                                &lt;SolidColorBrush&gt;Blue&lt;&#x2F;SolidColorBrush&gt;</span><br><span class="line">                            &lt;&#x2F;DiscreteObjectKeyFrame.Value&gt;</span><br><span class="line">                        &lt;&#x2F;DiscreteObjectKeyFrame&gt;</span><br><span class="line">                    &lt;&#x2F;ObjectAnimationUsingKeyFrames&gt;</span><br><span class="line">                &lt;&#x2F;Storyboard&gt;</span><br><span class="line">            &lt;&#x2F;VisualState&gt;</span><br><span class="line">        &lt;&#x2F;VisualStateGroup&gt;</span><br><span class="line">        &lt;VisualStateGroup x:Name&#x3D;&quot;State2&quot;&gt;</span><br><span class="line">            &lt;VisualState x:Name&#x3D;&quot;True2&quot;&gt;</span><br><span class="line">                &lt;Storyboard&gt;</span><br><span class="line">                    &lt;ObjectAnimationUsingKeyFrames Storyboard.TargetName&#x3D;&quot;_Rectangle&quot; Storyboard.TargetProperty&#x3D;&quot;Fill&quot;&gt;</span><br><span class="line">                        &lt;DiscreteObjectKeyFrame KeyTime&#x3D;&quot;00:00:00&quot;&gt;</span><br><span class="line">                            &lt;DiscreteObjectKeyFrame.Value&gt;</span><br><span class="line">                                &lt;SolidColorBrush&gt;DarkRed&lt;&#x2F;SolidColorBrush&gt;</span><br><span class="line">                            &lt;&#x2F;DiscreteObjectKeyFrame.Value&gt;</span><br><span class="line">                        &lt;&#x2F;DiscreteObjectKeyFrame&gt;</span><br><span class="line">                    &lt;&#x2F;ObjectAnimationUsingKeyFrames&gt;</span><br><span class="line">                &lt;&#x2F;Storyboard&gt;</span><br><span class="line">            &lt;&#x2F;VisualState&gt;</span><br><span class="line">            &lt;VisualState x:Name&#x3D;&quot;False2&quot;&gt;</span><br><span class="line">                &lt;Storyboard&gt;</span><br><span class="line">                    &lt;ObjectAnimationUsingKeyFrames Storyboard.TargetName&#x3D;&quot;_Rectangle&quot; Storyboard.TargetProperty&#x3D;&quot;Fill&quot;&gt;</span><br><span class="line">                        &lt;DiscreteObjectKeyFrame KeyTime&#x3D;&quot;00:00:00&quot;&gt;</span><br><span class="line">                            &lt;DiscreteObjectKeyFrame.Value&gt;</span><br><span class="line">                                &lt;SolidColorBrush&gt;DarkBlue&lt;&#x2F;SolidColorBrush&gt;</span><br><span class="line">                            &lt;&#x2F;DiscreteObjectKeyFrame.Value&gt;</span><br><span class="line">                        &lt;&#x2F;DiscreteObjectKeyFrame&gt;</span><br><span class="line">                    &lt;&#x2F;ObjectAnimationUsingKeyFrames&gt;</span><br><span class="line">                &lt;&#x2F;Storyboard&gt;</span><br><span class="line">            &lt;&#x2F;VisualState&gt;</span><br><span class="line">        &lt;&#x2F;VisualStateGroup&gt;</span><br><span class="line">    &lt;&#x2F;VisualStateManager.VisualStateGroups&gt;</span><br><span class="line">&lt;&#x2F;Window&gt; </span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Windows;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Interactivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WPF3.Behaviors</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">BooleanVisualStateBehavior</span> : <span class="title">Behavior</span>&lt;<span class="title">FrameworkElement</span>&gt;</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DependencyProperty StateProperty = DependencyProperty.RegisterAttached(</span><br><span class="line">            <span class="string">&quot;State&quot;</span>,</span><br><span class="line">            <span class="keyword">typeof</span>(<span class="keyword">bool</span>),</span><br><span class="line">            <span class="keyword">typeof</span>(BooleanVisualStateBehavior),</span><br><span class="line">            <span class="keyword">new</span> PropertyMetadata(<span class="literal">false</span>, PropertyChangedCallback));</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PropertyChangedCallback</span>(<span class="params">DependencyObject dependencyObject, DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> visualStateSettingBehavior = dependencyObject <span class="keyword">as</span> BooleanVisualStateBehavior;</span><br><span class="line">            <span class="keyword">if</span> (visualStateSettingBehavior == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> state = visualStateSettingBehavior.State</span><br><span class="line">                ? visualStateSettingBehavior.TrueState</span><br><span class="line">                : visualStateSettingBehavior.FalseState;</span><br><span class="line">            <span class="keyword">bool</span> result;</span><br><span class="line">            <span class="keyword">var</span> frameworkElement = visualStateSettingBehavior.AssociatedObject;</span><br><span class="line">            result = VisualStateManager.GoToElementState(frameworkElement, state, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">bool</span> State</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> (<span class="keyword">bool</span>)<span class="keyword">this</span>.GetValue(StateProperty);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.SetValue(StateProperty, <span class="keyword">value</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> TrueState</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> FalseState</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BooleanVisualStateBehaviorは、依存関係プロパティであるStateをトリガーにして、TrueStateとFalseStateに指定した状態名への遷移を試みるBehaviorです。<br>このBehaviorがWindowとGridの直下に存在します。<br>これが問題で、Behaviorで渡ってくるFrameworkElementがWindowとGridになります。<br>つまり、WindowとGridの直下にあるVisualStateを操作しようにも、Gridの下にはVisualStateが定義されていないから何も起きないわけです。</p><p>ですので解決策は、</p><ul><li>2つめのBooleanVisualStateBehaviorであるState2Changeを1つめのBooleanVisualStateBehaviorであるState1Changeと同じ位置に持ってくる。</li></ul><p>つまり</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;i:Interaction.Behaviors&gt;</span><br><span class="line">    &lt;behaviors:BooleanVisualStateBehavior x:Name&#x3D;&quot;State1Change&quot;</span><br><span class="line">                                          FalseState&#x3D;&quot;False1&quot;</span><br><span class="line">                                          State&#x3D;&quot;&#123;Binding State1&#125;&quot;</span><br><span class="line">                                          TrueState&#x3D;&quot;True1&quot; &#x2F;&gt;</span><br><span class="line">    &lt;behaviors:BooleanVisualStateBehavior x:Name&#x3D;&quot;State2Change&quot;</span><br><span class="line">                                              FalseState&#x3D;&quot;False2&quot;</span><br><span class="line">                                              State&#x3D;&quot;&#123;Binding State2&#125;&quot;</span><br><span class="line">                                              TrueState&#x3D;&quot;True2&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;i:Interaction.Behaviors&gt;</span><br></pre></td></tr></table></figure><p>とします。<br>または、 </p><ul><li>2つめのVisualStateGroupであるState2をGridの下に移動する</li></ul><p>になります。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>原因としては、非常に陳腐ですが、メソッドが動かない理由がわかりづらいため、解決に少し時間を取られました。<br>VisualStateは便利ですが、XAMLでの定義が間違ったりすると例外を投げるくせに、遷移で失敗しても例外を投げないなど、統一感が無くて困ります。<br>まぁ、一番悪いのは自分ですがね。何故、Behaviorをルール要素では無く、ネストした要素の下に書いたんですかねぇ。</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/WPF3">https://github.com/takuya-takeuchi/Demo/tree/WPF3</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> Windows Presentation Foundation </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その29 &#39;PropertyArrayStart&#39; のタグは、テンプレート セクションでサポートされていません。</title>
      <link href="2017/01/12/1743/"/>
      <url>2017/01/12/1743/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>タイトルが意味不明ですが、現象としては、DataTemplateで2次元配列の依存関係プロパティにBindingしてビルドしたら発生したエラー。<br>どうもこのエラー、2017年1月現在、日本語圏で誰一人として遭遇している人がいない模様。<br><strong>PropertyArrayStart</strong> というワードを日本語検索しても件数0。</p><p>ちなみに、英語だと <strong>Tags of type ‘PropertyArrayStart’ are not supported in template sections</strong> になります。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>Stackoverflowで同じ問題に遭遇した人がいました。<br>凄いね、Stackoverflow! </p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://stackoverflow.com/questions/926486/wpf-compilation-error-tags-of-type-propertyarraystart-are-not-supported-in" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=stackoverflow.com"></img><div class="hbc-site-name">Stack Overflow</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded"></img></div><div class="hbc-text"><div class="hbc-title">WPF - Compilation error: Tags of type &#39;PropertyArrayStart&#39; are not supported in template sections</div><div class="hbc-url">http://stackoverflow.com/questions/926486/wpf-compilation-error-tags-of-type-propertyarraystart-are-not-supported-in</div><div class="hbc-description">Ordinarily I wouldn&#39;t just post an error message on SO, but after a Google search only found one hit, I thought I&#39;d at least open the floor …</div></div></div></div></a></div></div><p>解決策としては、IListに変更すれば、最小のコード変更で解決できるよ、とのこと。</p><p>でも、2次元としてデータを扱いたいため、どこでデータの区切りがあるかわからないので、この手法は不可。<br>なので、ラッパークラスを作って回避。<br>幅と高さを別にBindingして、IListを渡しても良いのですが、どのBindingが先に実行されるかわからないのと、一つのプロパティで解決したいのでこうなりました。</p><p>余談ですが、この問題、Microsoft Connect にあがっていましたが、最終的に<strong>修正しない</strong>になりました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://connect.microsoft.com/VisualStudio/feedback/details/1029028/error-when-trying-to-set-a-dependencyproperty-whose-propertytype-is-an-array-within-a-datatemplate" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=connect.microsoft.com"></img><div class="hbc-site-name">connect.microsoft.com</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png"></img></div><div class="hbc-text"><div class="hbc-title">Microsoft Connect is Retired - Collaborate</div><div class="hbc-url">https://connect.microsoft.com/VisualStudio/feedback/details/1029028/error-when-trying-to-set-a-dependencyproperty-whose-propertytype-is-an-array-within-a-datatemplate</div><div class="hbc-description">Users get redirected to this page when they try to access Microsoft Connect.</div></div></div></div></a></div></div>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> Windows Presentation Foundation </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>WPF メモ その2 グリッドを自前で描画する</title>
      <link href="2017/01/04/1730/"/>
      <url>2017/01/04/1730/</url>
      
        <content type="html"><![CDATA[<h1 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h1><p>カスタムコントロールの練習のためです。<br>ちょっと開発中のアプリで自前で可変サイズのグリッドが必要になったのですが、XamlでGridをゴリゴリ用意するなら、カスタムコントロールのがパフォーマンスは良いだろう、という判断です。</p><p>WinFormsの時は、<strong>OnPaint</strong> を駆使して、<strong>ListView</strong>, <strong>TextBox</strong>, <strong>ComboBox</strong> をカスタマイズしていました。<br>Win32APIと(隠蔽されていたとはいえ)密接に関わっているため、Windowsの深い知識が必要でしたが、楽しくもありました。<br>あれはあれで、Windows Developerとしての腕の見せ所でしたでしょう。</p><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>今回の仕様は</p><ul><li>UIからグリッドのサイズを変更できる</li><li>UIから線のサイズを変更できる</li></ul><p>の2点です。<br>なので、MVVMを使っていきます。</p><p>サンプルソースは下記になります。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/takuya-takeuchi/Demo/tree/master/WPF1" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/6241854?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">takuya-takeuchi/Demo</div><div class="hbc-url">https://github.com/takuya-takeuchi/Demo/tree/master/WPF1</div><div class="hbc-description">Sample source code for Demonstration, Experiment and Test - takuya-takeuchi/Demo</div></div></div></div></a></div></div><h1 id="OnRender"><a href="#OnRender" class="headerlink" title="OnRender"></a>OnRender</h1><p><strong>WinForms</strong>では Control.OnPaint メソッドをオーバーライドすることで、コントロールに独自の描画を実施することができます。<br>が、WPFの場合はControlTemplateがあるので、そういうことはしないでしょう。<br>では、どういうときに自前で描画するか、というと、パフォーマンスの追求ではないでしょうか?</p><p>例えば、数百数千の円を表示するようなグラフのようなコントロールの場合、<strong>Ellipse</strong> を大量に配置するのはものすごく重くなります。<br>Shapeオブジェクトは重いのです。ましてや、そのような用途の場合、全オブジェクトに依存関係があることは当然でしょう。さらに重いこと受けあいです。</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://iyemon018.hatenablog.com/entry/2016/03/04/150330" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=iyemon018.hatenablog.com"></img><div class="hbc-site-name">やる気駆動型エンジニアの備忘録</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://ogimage.blog.st-hatena.com/6653458415121142499/10328537792365730292/1457071781"></img></div><div class="hbc-text"><div class="hbc-title">WPFパフォーマンス改善その１． 初期表示（描画）速度の改善策 - やる気駆動型エンジニアの備忘録</div><div class="hbc-url">http://iyemon018.hatenablog.com/entry/2016/03/04/150330</div><div class="hbc-description">初期表示（描画）速度の改善策 ここでは初期表示、つまり画面をインスタンス化してから描画されるまでの時間を短縮するための改善策や 画面の再描画処理時間の短縮方法を記述します。</div></div></div></div></a></div></div><p>ですので、そもそもレイアウト処理が発生しない自前描画が最速になることは当然です。<br>無論、描画する必要の無い場所は描画しない、というのが原則ですが。</p><p>脇道にそれましたが、WPFの場合、WinFormsのOnPaintと対となるのは、<strong>System.Windows.UIElement.OnRender</strong> メソッドになります。<br>メソッドの名前も意味からして似ていますが、引数も似たようなものです。<br>引数の <strong>System.Windows.Media.DrawingContext</strong> は描画系のメソッドを持っています。WinFormsの <strong>PaintEventArgs.Graphics</strong> と同じです。<br>なので、このメソッドで描画すれば、そのままコントロールに独自描画できます。簡単!!</p><p>仕事で、大量の円や自由曲線、矩形を縦横数千ピクセルの画像上にWinFormsで描画してきた経験から、これをWPFでUIElementで実現しようとしたら死ぬ、というのはすぐにわかります。<br>というか、アメリカの子会社がUWPですが、これをやってました。無論、お察しのパフォーマンスでした。<br>特殊なOnPaintをふんだんに駆使したコントロールを移植する場合は、WPFでも自前で描画した方が楽なのかもしれません。</p><h1 id="コード解説"><a href="#コード解説" class="headerlink" title="コード解説"></a>コード解説</h1><p>カスタムコントロールはプロジェクトに新しい項目の追加から、<strong>カスタムコントロール (WPF)</strong> を追加するだけです。</p><p><a href="../../../../public/2017/01/952286bb082dc0e216487c8e304e9bad.png"><img src="../../../../public/2017/01/952286bb082dc0e216487c8e304e9bad.png"></a> サンプルソースのGridControlの中身です。<br>まずは依存関係です。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DependencyProperty CellStatesProperty =</span><br><span class="line">    DependencyProperty.Register(</span><br><span class="line">        <span class="string">&quot;CellStates&quot;</span>,</span><br><span class="line">        <span class="keyword">typeof</span>(<span class="keyword">bool</span>[,]),</span><br><span class="line">        <span class="keyword">typeof</span>(Control),</span><br><span class="line">        <span class="keyword">new</span> FrameworkPropertyMetadata(</span><br><span class="line">            <span class="literal">null</span>,</span><br><span class="line">            FrameworkPropertyMetadataOptions.AffectsRender,</span><br><span class="line">            PropertyChangedCallback));</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">bool</span>[,] CellStates</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span> &#123; <span class="keyword">return</span> (<span class="keyword">bool</span>[,])GetValue(CellStatesProperty); &#125;</span><br><span class="line">    <span class="keyword">set</span> &#123; SetValue(CellStatesProperty, <span class="keyword">value</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DependencyProperty BorderSizeProperty =</span><br><span class="line">    DependencyProperty.Register(</span><br><span class="line">        <span class="string">&quot;BorderSize&quot;</span>,</span><br><span class="line">        <span class="keyword">typeof</span>(<span class="keyword">int</span>),</span><br><span class="line">        <span class="keyword">typeof</span>(Control),</span><br><span class="line">        <span class="keyword">new</span> FrameworkPropertyMetadata(</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            FrameworkPropertyMetadataOptions.AffectsRender,</span><br><span class="line">            PropertyChangedCallback));</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> BorderSize</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span> &#123; <span class="keyword">return</span> (<span class="keyword">int</span>)GetValue(BorderSizeProperty); &#125;</span><br><span class="line">    <span class="keyword">set</span> &#123; SetValue(BorderSizeProperty, <span class="keyword">value</span>); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>CellStates</strong> が bool の2次元配列ですが、これは自分の本来の目的のためなので、特に意味はありません。<br>必要なのは任意のグリッドを表現しているだけです。<br><strong>BorderSize</strong> はグリッドの線の幅です。Controlには <strong>BorderThickness プロパティ</strong>がありますが、これは使いません。<br>次は、OnRenderの描画処理です。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnRender</span>(<span class="params">DrawingContext drawingContext</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">base</span>.OnRender(drawingContext);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> state = <span class="keyword">this</span>.CellStates;</span><br><span class="line">    <span class="keyword">if</span> (state == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 縦横の次元数</span></span><br><span class="line">    <span class="keyword">var</span> v = state.GetLength(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">var</span> h = state.GetLength(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (v == <span class="number">0</span> || h == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// アンチエイリアスによって線によってサイズが変わるのを防ぐ</span></span><br><span class="line">    <span class="keyword">this</span>.VisualEdgeMode = EdgeMode.Unspecified;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> width = <span class="keyword">this</span>.ActualWidth;</span><br><span class="line">    <span class="keyword">var</span> height = <span class="keyword">this</span>.ActualHeight;</span><br><span class="line">    <span class="keyword">var</span> borderSize = <span class="keyword">this</span>.BorderSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 横、縦線の本数</span></span><br><span class="line">    <span class="keyword">var</span> hBorderCount = v + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> vBorderCount = h + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 各セルの幅、高さ</span></span><br><span class="line">    <span class="keyword">var</span> hSize = (width - (vBorderCount * borderSize)) / h;</span><br><span class="line">    <span class="keyword">var</span> vSize = (height - (hBorderCount * borderSize)) / v;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 線のブラシ</span></span><br><span class="line">    <span class="keyword">var</span> linePen = <span class="keyword">new</span> Pen(Brushes.Black, borderSize);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ペンの中心だけずらす</span></span><br><span class="line">    <span class="keyword">var</span> borderGap = borderSize / <span class="number">2</span>d;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 線を描画 (外枠以外)</span></span><br><span class="line">    hSize += borderSize; <span class="comment">// 横方向の座標移動量</span></span><br><span class="line">    vSize += borderSize; <span class="comment">// 縦方向の座標移動量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> vEnd = height - vSize;</span><br><span class="line">    <span class="keyword">var</span> hEnd = width - hSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> y = vSize + borderGap; y &lt; vEnd; y += vSize)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> x = hSize + borderGap; x &lt; hEnd; x += hSize)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 縦方向</span></span><br><span class="line">            drawingContext.DrawLine(</span><br><span class="line">                linePen,</span><br><span class="line">                <span class="keyword">new</span> Point(x, <span class="number">0</span>),</span><br><span class="line">                <span class="keyword">new</span> Point(x, height - borderSize));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 横方向</span></span><br><span class="line">        drawingContext.DrawLine(</span><br><span class="line">            linePen,</span><br><span class="line">            <span class="keyword">new</span> Point(<span class="number">0</span>, y),</span><br><span class="line">            <span class="keyword">new</span> Point(width - borderSize, y));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 外枠</span></span><br><span class="line">    drawingContext.DrawRectangle(</span><br><span class="line">        <span class="literal">null</span>,</span><br><span class="line">        linePen,</span><br><span class="line">        <span class="keyword">new</span> Rect(borderGap, borderGap, width - borderSize, height - borderSize));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Xamlはこんな感じです。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;Grid&gt;</span><br><span class="line">    &lt;Grid.ColumnDefinitions&gt;</span><br><span class="line">        &lt;ColumnDefinition Width&#x3D;&quot;*&quot; &#x2F;&gt;</span><br><span class="line">        &lt;ColumnDefinition Width&#x3D;&quot;Auto&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;Grid.ColumnDefinitions&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Border Grid.Column&#x3D;&quot;0&quot; BorderBrush&#x3D;&quot;Red&quot; BorderThickness&#x3D;&quot;30&quot; VerticalAlignment&#x3D;&quot;Center&quot; HorizontalAlignment&#x3D;&quot;Center&quot;&gt;</span><br><span class="line">        &lt;controls:GridControl Width&#x3D;&quot;300&quot;</span><br><span class="line">                              Height&#x3D;&quot;300&quot;</span><br><span class="line">                              BorderSize&#x3D;&quot;&#123;Binding BorderSize,</span><br><span class="line">                                                   Mode&#x3D;OneWay&#125;&quot;</span><br><span class="line">                              CellStates&#x3D;&quot;&#123;Binding CellStates,</span><br><span class="line">                                                   Mode&#x3D;OneWay&#125;&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;Border&gt;</span><br></pre></td></tr></table></figure><p>カスタムのGridコントロールの外側に赤い枠があります。<br>これはカスタムコントロールが正しい位置に描画されているか、というチェックに使います。</p><p>ソース中のコメントが割と丁寧なので説明は不要ですが、ポイントは <strong>borderGap</strong> 変数です。<br>これがないと描画したとき結果がおかしくなります。ためしに、この変数に0を設定して実行して見てください。</p><p><a href="../../../../public/2017/01/0df97c28803d922368c52bad22a5471f.png"><img src="../../../../public/2017/01/0df97c28803d922368c52bad22a5471f.png"></a></p><p>GridControlの外に設置した <strong>Border</strong> を浸食しています。<br>左上の0,0から描画したのにこうなるわけは、コメントにあるとおり、Penで描画する際、指定した座標はペンの幅のどこに来るか、ということを考えればわかると思います。<br>幅が太い場合は顕著ですが、幅の中心が、指定した位置に当たるので、ペン幅の半分だけはみ出る、という訳です。</p><p>正しく実行するとこうなります。</p><p><a href="../../../../public/2017/01/a66da886a2427931cfa2179f424076a8.png"><img src="../../../../public/2017/01/a66da886a2427931cfa2179f424076a8.png"></a></p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/WPF1">https://github.com/takuya-takeuchi/Demo/tree/master/WPF1</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> Windows Presentation Foundation </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その28 カスタムコントロール (WPF) を追加できない</title>
      <link href="2017/01/03/1740/"/>
      <url>2017/01/03/1740/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>既存のクラスライブラリにカスタムコントロール (WPF) テンプレートを追加しようと思ったのですが、そもそもテンプレートが表示されない問題に遭遇。</p><p><a href="../../../../public/2017/01/457c4255c5961da540e5c699f389332a.png"><img src="../../../../public/2017/01/457c4255c5961da540e5c699f389332a.png"></a></p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>Stackoverflowで同じ問題に遭遇した人がいました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://stackoverflow.com/questions/33049083/how-to-find-the-wpf-custom-control-template-in-add-new-item-dialog" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=stackoverflow.com"></img><div class="hbc-site-name">Stack Overflow</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded"></img></div><div class="hbc-text"><div class="hbc-title">How to find the WPF Custom Control template in Add new Item dialog?</div><div class="hbc-url">http://stackoverflow.com/questions/33049083/how-to-find-the-wpf-custom-control-template-in-add-new-item-dialog</div><div class="hbc-description">When I want to create a custom control(not user control),I can&#39;t find Custom Control tempalte in  Add New Item dialog .How to find or add …</div></div></div></div></a></div></div><p>プロジェクトファイルを編集しろ、ということでした。<br>プロジェクトファイルに</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ProjectTypeGuids&gt;&#123;60dc8134-eba5-43b8-bcc9-bb4bc16c2548&#125;;&#123;FAE04EC0-301F-11D3-BF4B-00C04F79EFBC&#125;&lt;&#x2F;ProjectTypeGuids&gt;</span><br></pre></td></tr></table></figure><p>下記の一文を追加しろとのこと。<br>追加する場所は、FileAlignment 付近で良いです。下記一例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;PropertyGroup&gt;</span><br><span class="line">    &lt;Configuration Condition&#x3D;&quot; &#39;$(Configuration)&#39; &#x3D;&#x3D; &#39;&#39; &quot;&gt;Debug&lt;&#x2F;Configuration&gt;</span><br><span class="line">    &lt;Platform Condition&#x3D;&quot; &#39;$(Platform)&#39; &#x3D;&#x3D; &#39;&#39; &quot;&gt;AnyCPU&lt;&#x2F;Platform&gt;</span><br><span class="line">    &lt;ProjectGuid&gt;&#123;6BE5C18C-A305-4CAC-8130-AAD1A3C48BD2&#125;&lt;&#x2F;ProjectGuid&gt;</span><br><span class="line">    &lt;OutputType&gt;WinExe&lt;&#x2F;OutputType&gt;</span><br><span class="line">    &lt;AppDesignerFolder&gt;Properties&lt;&#x2F;AppDesignerFolder&gt;</span><br><span class="line">    &lt;RootNamespace&gt;CAMUI&lt;&#x2F;RootNamespace&gt;</span><br><span class="line">    &lt;AssemblyName&gt;CAMUI&lt;&#x2F;AssemblyName&gt;</span><br><span class="line">    &lt;TargetFrameworkVersion&gt;v4.6&lt;&#x2F;TargetFrameworkVersion&gt;</span><br><span class="line">    &lt;TargetPlatformVersion&gt;8.1&lt;&#x2F;TargetPlatformVersion&gt;</span><br><span class="line">    &lt;FileAlignment&gt;512&lt;&#x2F;FileAlignment&gt;</span><br><span class="line">    &lt;ProjectTypeGuids&gt;&#123;60dc8134-eba5-43b8-bcc9-bb4bc16c2548&#125;;&#123;FAE04EC0-301F-11D3-BF4B-00C04F79EFBC&#125;&lt;&#x2F;ProjectTypeGuids&gt;</span><br><span class="line">    &lt;WarningLevel&gt;4&lt;&#x2F;WarningLevel&gt;</span><br><span class="line">    &lt;AutoGenerateBindingRedirects&gt;true&lt;&#x2F;AutoGenerateBindingRedirects&gt;</span><br><span class="line">    &lt;NuGetPackageImportStamp&gt;</span><br><span class="line">    &lt;&#x2F;NuGetPackageImportStamp&gt;</span><br><span class="line">    &lt;SolutionDir Condition&#x3D;&quot;$(SolutionDir) &#x3D;&#x3D; &#39;&#39; Or $(SolutionDir) &#x3D;&#x3D; &#39;*Undefined*&#39;&quot;&gt;..\&lt;&#x2F;SolutionDir&gt;</span><br><span class="line">    &lt;RestorePackages&gt;true&lt;&#x2F;RestorePackages&gt;</span><br><span class="line">  &lt;&#x2F;PropertyGroup&gt;</span><br></pre></td></tr></table></figure><p>追加した後、ソリューションを読み込み直すと無事テンプレートが表示されます。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> Windows Presentation Foundation </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETで画像処理を試してみる OpenCVSharp編 第4回</title>
      <link href="2017/01/02/1726/"/>
      <url>2017/01/02/1726/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/01/01/755">前回</a>はカメラの説明を行いました。</p><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>相当久しぶりですが… 今回は、<strong>OpenCVSharp 2.X</strong> から <strong>3.1</strong> に変更した話です。</p><p><strong>OpenCV</strong> は2017年1月現在 2.4 と 3.1 が存在しています。<br>それに伴い OpenCVSharp も2つのバージョンが存在します。</p><p>ところがメジャーバージョンアップに伴い、大幅にAPIが変更されました。<br>このあたりの説明は OpenCVSharp の作者である Schima様の下記の記事を参考にしてください <del>(作者様のページに全てが書いてあるからこの記事不要)。</del></p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://schima.hatenablog.com/entry/2015/08/17/203901" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=schima.hatenablog.com"></img><div class="hbc-site-name">schima.hatenablog.com </div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://ogimage.blog.st-hatena.com/11696248318758502585/8454420450105952512/1442323652"></img></div><div class="hbc-text"><div class="hbc-title">OpenCvSharpをつかう　その23 (OpenCV 3.0対応) - schima.hatenablog.com </div><div class="hbc-url">http://schima.hatenablog.com/entry/2015/08/17/203901</div><div class="hbc-description">またまただいぶ間隔が空いてしまいすみません・・・ 前回の記事（http://schima.hatenablog.com/entry/2014/09/08/220420）で罵詈雑言を浴びせたOpenCV3.0にOpenCvSharpをひとまず対応させました。 NuGet Galle…</div></div></div></div></a></div></div><h1 id="1-IplImage-の廃止"><a href="#1-IplImage-の廃止" class="headerlink" title="1. IplImage の廃止"></a>1. IplImage の廃止</h1><p>大きな変更点ですが、今までAPIに画像を渡すとき、入力画像の型が <strong>IplImage</strong> だったので、</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bitmap = <span class="keyword">new</span> System.Drawing.Bitmap(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">var</span> image = bitmap.ToIplImage();</span><br></pre></td></tr></table></figure><p>とかしてましたが、これは消えました。<br>OpenCV 3.0からは <strong>Mat</strong> が推奨らしく、OpenCVSharp もそれにならい、こうなります。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bitmap = <span class="keyword">new</span> System.Drawing.Bitmap(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">var</span> mat = bitmap.ToMat();</span><br></pre></td></tr></table></figure><p>簡単ですね。<br>ただ、それに伴い、APIの型や名前空間が大幅に変わっているので、そのあたり合わせて変更します。<br>ハフ変換、モルフォロジー変換など変更は多岐にわたります。というか全部変わっています。</p><h1 id="2-CvCapture-の廃止"><a href="#2-CvCapture-の廃止" class="headerlink" title="2. CvCapture の廃止"></a>2. CvCapture の廃止</h1><p>これが一番痛かったです。<br><strong>CvCapture</strong> はコンストラクタにカメラインデックス(Int32)、動画又は画像ファイルへのフルパス(String)を入力できましたが、この型の代わりに新しく登場したのは、<strong>VideoCapture</strong>。<br>そうこの型。<strong>画像ファイルが扱えません。</strong></p><p>従来はこの型一つで画像と動画を区別することなく処理しましたがそれができません。また、フレームデータへのアクセスAPIが <strong>IplImage QueryFrame()</strong> から <strong>Mat RetrieveMat()</strong> に変わっています。</p><p>画像ファイルを読み込みたい場合は、<strong>Mat OpenCVSharp.Cv2.ImRead(string)</strong> でデータを取得できます。</p><p>ですが、面倒なのは、RetrieveMat の戻りは解放してはいけないが、ImRead の戻りは解放しなくてはならない点。<br>従来の CvCapture なら、戻りの IplImage は解放しないで、呼び出しのAPIを備えた CvCapture を破棄していましたが、それができません。<br>ここは注意が必要です。</p><p>利用した Mat の破棄を複数の箇所で実施しており、その先で読み込み元が画像なのかカメラまたは動画で区別するのが面倒なので、どうせ書き換えるなら、ということで私はラッパーを作りました。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">MatWrapper</span> : <span class="title">IDisposable</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">region</span> フィールド</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="keyword">bool</span> _CanDispose;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Mat _Mat;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">region</span> コンストラクタ</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MatWrapper</span>(<span class="params">Mat mat, <span class="keyword">bool</span> canDispose</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">this</span>._Mat = mat;</span><br><span class="line">        <span class="keyword">this</span>._CanDispose = canDispose;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">region</span> プロパティ</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Mat Mat</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>._Mat;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">region</span> IDisposable メンバ</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;see cref=&quot;System.IDisposable.Dispose&quot;/&gt;</span> メソッドが呼ばれたかどうかを示す値を表します。</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">bool</span> _Disposed;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;see cref=&quot;MatWrapper&quot;/&gt;</span> によって使用されているすべてのリソースを解放します。</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        GC.SuppressFinalize(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.Dispose(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;see cref=&quot;MatWrapper&quot;/&gt;</span> によって使用されているすべてのリソースを解放します。</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;disposing&quot;&gt;</span>Dispose メソッドが呼ばれたかどうかを示す値。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Dispose</span>(<span class="params"><span class="keyword">bool</span> disposing</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._Disposed)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>._Disposed = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (disposing)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// マネージリソースの解放処理</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>._CanDispose)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>._Mat?.Dispose();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ImRead または RetrieveMat の戻りの Mat をコンストラクタに渡し、ソースが画像なら破棄可能として true を渡します。<br>これにより、このラッパークラスを破棄する際に、自動で内部の Mat を破棄するかどうかを判断します。</p><h1 id="3-Native-Dll-が配置されない"><a href="#3-Native-Dll-が配置されない" class="headerlink" title="3. Native Dll が配置されない"></a>3. Native Dll が配置されない</h1><p>OpenCVSharpをNugetから追加した際、NativeDllを含むパッケージをインストールし、ビルドしたにもかかわらずビルド出力先のディレクトリにNativeDllがコピーされず、動画ファイルの読み込みに失敗していました。<br><strong>私はこれに数時間悩んでいました。</strong></p><p>確認しましたが、OpenCVSharp 2.X でもビルドした際、関連するNativeDllが自動でコピーされて<strong>いませんでした</strong>。<br>なので手動でコピーする必要がありそうです。<br>Dllはソリューションフォルダと同じディレクトリから、<strong>packages\OpenCvSharp3-AnyCPU.3.1.0.20161105\NativeDlls\x64</strong> という感じです。</p><p>というか、コピーしなくても動いていたのは、おそらくOpenCVをインストールして、パスが通っていたからでしょう。<br>なので、開発環境で動いて、本番環境で動かずに泣くことにならないようテスト環境の構築はきちんと行いましょう。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>早めに <strong>OpenCVSharp3</strong> への移行をお勧めします。ただし、一部APIが削除されていたりと、機能面で互換性が無くなっているところがあるので、そこは要注意です。<br>ですが、今後の新機能は3.0に追加されていくと思うので、その対応のためにも3.0への移行は必須です。<br>ただ、OpenCVSharpそのものが対応しないとダメですが….</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> C# </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> マルチメディア </category>
          
          <category> 画像処理 </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> OpenCV </category>
          
          <category> .NETで画像処理を試してみる OpenCVSharp編 </category>
          
          <category> OpenCvSharp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その26 特定の色相を選択して抜き出す</title>
      <link href="2016/12/31/1718/"/>
      <url>2016/12/31/1718/</url>
      
        <content type="html"><![CDATA[<h1 id="HSVを使って特定の色だけ残す"><a href="#HSVを使って特定の色だけ残す" class="headerlink" title="HSVを使って特定の色だけ残す"></a>HSVを使って特定の色だけ残す</h1><p><a href="https://taktak.jp/2016/12/28/1712">前回</a>、RGBと違ってRGBは色相によって同じような色を選択できることを説明しました。</p><p>これを用いて、実際に画像から特定の色だけを残してみます。<br>処理としては単純で、入力画像の各画素をRGBからHSVに変換し、指定した条件に合致していたら、その画素を残し、それ以外なら任意の色で塗りつぶします。<br>下記のサンプルでは、byte配列上の画素をHSVに変換し、最小、最大の色相、彩度、明度を指定し、その範囲チェックをしています。<br>また今回は白で塗りつぶしを実施しています。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">UpdateImage</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsafe</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">fixed</span> (<span class="keyword">byte</span>* pSrc = &amp;<span class="keyword">this</span>._ImageBuffer[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">fixed</span> (<span class="keyword">byte</span>* pDst = &amp;<span class="keyword">this</span>._FilteredImageBuffer[<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> ps = pSrc;</span><br><span class="line">            <span class="keyword">var</span> pd = pDst;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> stride = <span class="keyword">this</span>._Stride;</span><br><span class="line">            <span class="keyword">var</span> width = <span class="keyword">this</span>._Width;</span><br><span class="line">            <span class="keyword">var</span> height = <span class="keyword">this</span>._Height;</span><br><span class="line">            <span class="keyword">var</span> channel = <span class="keyword">this</span>._Channel;</span><br><span class="line">            <span class="keyword">var</span> dpiX = <span class="keyword">this</span>._OriginalSource.DpiX;</span><br><span class="line">            <span class="keyword">var</span> dpiY = <span class="keyword">this</span>._OriginalSource.DpiY;</span><br><span class="line">            <span class="keyword">var</span> offset = stride / channel - width;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> maxHue = <span class="keyword">this</span>._MaxHue;</span><br><span class="line">            <span class="keyword">var</span> minHue = <span class="keyword">this</span>._MinHue;</span><br><span class="line">            <span class="keyword">var</span> maxSaturation = <span class="keyword">this</span>._MaxSaturation;</span><br><span class="line">            <span class="keyword">var</span> minSaturation = <span class="keyword">this</span>._MinSaturation;</span><br><span class="line">            <span class="keyword">var</span> maxValue = <span class="keyword">this</span>._MaxValue;</span><br><span class="line">            <span class="keyword">var</span> minValue = <span class="keyword">this</span>._MinValue;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">float</span> h, s, v;</span><br><span class="line">            <span class="keyword">byte</span> back = <span class="number">255</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> y = <span class="number">0</span>; y &lt; height; y++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> x = <span class="number">0</span>; x &lt; width; x++, pd += channel, ps += channel)</span><br><span class="line">                &#123;</span><br><span class="line">                    FromRgb(ps[<span class="number">2</span>], ps[<span class="number">1</span>], ps[<span class="number">0</span>], <span class="keyword">out</span> h, <span class="keyword">out</span> s, <span class="keyword">out</span> v);</span><br><span class="line">                    <span class="keyword">if</span> (minHue &lt;= h &amp;&amp; h &lt;= maxHue &amp;&amp;</span><br><span class="line">                        minSaturation &lt;= s &amp;&amp; s &lt;= maxSaturation &amp;&amp;</span><br><span class="line">                        minValue &lt;= v &amp;&amp; v &lt;= maxValue)</span><br><span class="line">                    &#123;</span><br><span class="line">                        pd[<span class="number">2</span>] = ps[<span class="number">2</span>];</span><br><span class="line">                        pd[<span class="number">1</span>] = ps[<span class="number">1</span>];</span><br><span class="line">                        pd[<span class="number">0</span>] = ps[<span class="number">0</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 白にする</span></span><br><span class="line">                        pd[<span class="number">2</span>] = back;</span><br><span class="line">                        pd[<span class="number">1</span>] = back;</span><br><span class="line">                        pd[<span class="number">0</span>] = back;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                pd += offset;</span><br><span class="line">                ps += offset;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> bitmap = BitmapSource.Create(</span><br><span class="line">                width,</span><br><span class="line">                height,</span><br><span class="line">                dpiX,</span><br><span class="line">                dpiY,</span><br><span class="line">                <span class="keyword">this</span>._PixelFormat,</span><br><span class="line">                <span class="literal">null</span>,</span><br><span class="line">                <span class="keyword">this</span>._FilteredImageBuffer,</span><br><span class="line">                stride);</span><br><span class="line">            bitmap.Freeze();</span><br><span class="line">            <span class="keyword">this</span>.FilteredSource = bitmap;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記のサンプルを使ったのが下記のサンプルです。<br>サンプルに使った画像は <a href="http://www.publicdomainpictures.net/view-image.php?image=39414&picture=&jazyk=JP">Public Domain Pictures.net</a> から利用させていただきました。</p><p><a href="../../../../public/2016/12/89cdc33a6d22c04e13944f94062dc9b9.png"><img src="../../../../public/2016/12/89cdc33a6d22c04e13944f94062dc9b9.png"></a></p><p>上のサンプルでは色相の10-60はオレンジと黄色を表しており、明度と彩度は明るく、純度の高い色を選択しています。<br>詳しい色相の説明は下記のページがわかりやすいです。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://www.peko-step.com/html/hsv.html" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=www.peko-step.com"></img><div class="hbc-site-name">PEKO STEP</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://www.peko-step.com/image/pspogp.gif"></img></div><div class="hbc-text"><div class="hbc-title">HSV色空間とは</div><div class="hbc-url">http://www.peko-step.com/html/hsv.html</div><div class="hbc-description">色の表現方法のひとつである「HSV色空間(HSBとも呼ばれます)」の解説。使用する上での利点や各要素の意味など。</div></div></div></div></a></div></div><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/Image3">https://github.com/takuya-takeuchi/Demo/tree/master/Image3</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> C# </category>
          
          <category> 画像処理 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その25 RGBからHSVへの変換パフォーマンス</title>
      <link href="2016/12/28/1712/"/>
      <url>2016/12/28/1712/</url>
      
        <content type="html"><![CDATA[<h1 id="RGBからHSVを取得する"><a href="#RGBからHSVを取得する" class="headerlink" title="RGBからHSVを取得する"></a>RGBからHSVを取得する</h1><p>通常、.NETで扱える色の形式はRGBです。赤、緑、青から成る光の三原色です。<br>基本の基本ですが、これはこれで不便なところがあります。<br>例えば、RGB(255,0,0)とRGB(200,0,0)では同じ赤ですが、後者のが暗いです。<br>では、同じような色であった場合に、どちらが暗いか、といった場合に赤、緑、青の各要素を調べることで判断できるでしょうか? 当然できません。<br>なぜなら、赤、緑、青の複数の色からなる色の場合、この方法ではどちらが暗いかを判断することはできないからです。</p><p>そこで、RGBを色相 (Hue)、彩度 (Saturation)、明度 (Value) の3つの成分からなる色空間に変換することで、同じような色であっても明るさを数値で比較することができます。<br>詳しい詳細は Wikipedia を見て、と成りますが、この変換を C# で実行してみます。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://ja.wikipedia.org/wiki/HSV%E8%89%B2%E7%A9%BA%E9%96%93" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=ja.wikipedia.org"></img><div class="hbc-site-name">ja.wikipedia.org</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://upload.wikimedia.org/wikipedia/commons/2/21/Hsv_sample.png"></img></div><div class="hbc-text"><div class="hbc-title">HSV色空間 - Wikipedia</div><div class="hbc-url">https://ja.wikipedia.org/wiki/HSV%E8%89%B2%E7%A9%BA%E9%96%93</div></div></div></div></a></div></div><p>下はRGBの16777216色を全てHSVに変換し、その速度を表示するサンプルです。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Image2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">float</span> h, s, v;</span><br><span class="line">            <span class="keyword">var</span> sw = <span class="keyword">new</span> Stopwatch();</span><br><span class="line"></span><br><span class="line">            sw.Start();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> r = <span class="number">0</span>; r &lt;= <span class="number">255</span>; r++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> g = <span class="number">0</span>; g &lt;= <span class="number">255</span>; g++)</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> b = <span class="number">0</span>; b &lt;= <span class="number">255</span>; b++)</span><br><span class="line">                        FromRgb((<span class="keyword">byte</span>)r, (<span class="keyword">byte</span>)g, (<span class="keyword">byte</span>)b, <span class="keyword">out</span> h, <span class="keyword">out</span> s, <span class="keyword">out</span> v);</span><br><span class="line"></span><br><span class="line">            sw.Stop();</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;sw.ElapsedMilliseconds&#125;</span> ms&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">FromRgb</span>(<span class="params"><span class="keyword">byte</span> r, <span class="keyword">byte</span> g, <span class="keyword">byte</span> b, <span class="keyword">out</span> <span class="keyword">float</span> h, <span class="keyword">out</span> <span class="keyword">float</span> s, <span class="keyword">out</span> <span class="keyword">float</span> v</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> max = Math.Max(r, Math.Max(g, b));</span><br><span class="line">            <span class="keyword">var</span> min = Math.Min(r, Math.Min(g, b));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> brightness = max / <span class="number">255f</span>;</span><br><span class="line">            <span class="keyword">float</span> hue, saturation;</span><br><span class="line">            <span class="keyword">if</span> (Math.Abs(max - min) &lt; <span class="keyword">float</span>.Epsilon)</span><br><span class="line">            &#123;</span><br><span class="line">                hue = <span class="number">0f</span>;</span><br><span class="line">                saturation = <span class="number">0f</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">float</span> c = max - min;</span><br><span class="line">                <span class="keyword">if</span> (Math.Abs(max - r) &lt; <span class="keyword">float</span>.Epsilon)</span><br><span class="line">                    hue = (g - b) / c;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (Math.Abs(max - g) &lt; <span class="keyword">float</span>.Epsilon)</span><br><span class="line">                    hue = (b - r) / c + <span class="number">2f</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    hue = (r - g) / c + <span class="number">4f</span>;</span><br><span class="line"></span><br><span class="line">                hue *= <span class="number">60f</span>;</span><br><span class="line">                <span class="keyword">if</span> (hue &lt; <span class="number">0f</span>)</span><br><span class="line">                    hue += <span class="number">360f</span>;</span><br><span class="line"></span><br><span class="line">                saturation = c / max;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            h = hue;</span><br><span class="line">            s = saturation;</span><br><span class="line">            v = brightness;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="32bit-vs-64bit"><a href="#32bit-vs-64bit" class="headerlink" title="32bit vs 64bit"></a>32bit vs 64bit</h4><p>サンプル自体は、何の変哲も無いのですが、テスト中面白いことに気づきました。<br>プラットフォームターゲットを x86 と x64 に変更し、ビルド実行すると性能に大きな差が発生しました。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">Works</span>\<span class="title">Demo</span>\<span class="title">Image2</span>\<span class="title">Image2</span>\<span class="title">bin</span>\<span class="title">Release</span>&gt;<span class="title">Image2.exe</span></span></span><br><span class="line"><span class="function">357 <span class="title">ms</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">Works</span>\<span class="title">Demo</span>\<span class="title">Image2</span>\<span class="title">Image2</span>\<span class="title">bin</span>\<span class="title">Release</span>&gt;<span class="title">Image2.exe</span></span></span><br><span class="line"><span class="function">3590 <span class="title">ms</span></span></span><br></pre></td></tr></table></figure><p>前者が x64、後者が x86 でビルドした結果です。<br>なお環境は <strong>Intel Core i7-2600 3.40GHz</strong> です。<br>実際には、ある程度大きなサイズの画像の、全画素を変換したとしたら、1/8くらいにはなるでしょう。<br>この差は非常に大きいです。今日日、32bitの環境なんて考えたくもないですが、これだけ性能に差があるなら、機材の選定を担当する人間への説得する材料としては十分でしょう。</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/Image2">https://github.com/takuya-takeuchi/Demo/tree/master/Image2</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> C# </category>
          
          <category> 画像処理 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その24 Norton Internet SecurityにDebugビルドの自作アプリがウイルス扱いされたので文句を言ってみた</title>
      <link href="2016/11/13/1690/"/>
      <url>2016/11/13/1690/</url>
      
        <content type="html"><![CDATA[<h1 id="デバッグできない"><a href="#デバッグできない" class="headerlink" title="デバッグできない"></a>デバッグできない</h1><p>RedArmoryの開発中ですが、掲題の通り、Debug版をビルドした瞬間に、<strong>Norton Internet Security (以下NIS)</strong> の自動保護機能が作動してobj\Debug内のバイナリが削除されてしまい、デバッグができなくなりました。</p><p><a href="../../../../public/2016/11/img_582834f38368b.png"><img src="../../../../public/2016/11/img_582834f38368b.png"></a></p><p>仕事しましたよ(ｷﾘｯ)</p><p>Release版だと無事なので良いのですが、何だか釈然としませんので、Nortonに文句を言ってみました。</p><h1 id="誤検出の申請をしてみる"><a href="#誤検出の申請をしてみる" class="headerlink" title="誤検出の申請をしてみる"></a>誤検出の申請をしてみる</h1><p>ググってみると、日本のコミュニティが見つかりますが、案内されたページは英語の模様。<br>何のための日本法人なのか… まず<a href="https://submit.symantec.com/false_positive/">Report a Suspected Erroneous Detection (False Positive)</a>にアクセスします。</p><h2 id="いつ発生"><a href="#いつ発生" class="headerlink" title="いつ発生?"></a>いつ発生?</h2><p>最初のページです。<br>報告する現象がいつかを選択します。</p><p><a href="../../../../public/2016/11/screencapture-submit-symantec-false_positive-1479025972298.png"><img src="../../../../public/2016/11/screencapture-submit-symantec-false_positive-1479025972298-1024x531.png"></a></p><p> 上から、</p><ul><li>A1 - When downloading or uploading a file<ul><li>ファイルのダウンロードまたはアップロード中</li></ul></li><li>A2 - While using an application<ul><li>アプリケーションの使用中</li></ul></li><li>A3 - When installing an application<ul><li>アプリケーションのインストール中</li></ul></li><li>A4 - When browsing the web<ul><li>Webの閲覧中</li></ul></li><li>A5 - During a scheduled scan, or during a scan I requested<ul><li>スケジュールされたスキャンの間、または自分で要求したスキャンの間</li></ul></li><li>A6 - When sending or receiving email<ul><li>メールの送信中または受信中</li></ul></li><li>A7 - While writing or reading files to/from a storage device<ul><li>ストレージデバイスへ/からファイルを書き込み/読み込みしたとき</li></ul></li><li>A8 - Don’t know, am unsure, or the options provided do not apply<ul><li>わからない、不確か、または選べる選択肢がない</li></ul></li></ul><p>今回は、Visual Studio がファイルを書き込んでいるときなので、A7を選択しました。<br>選択したらNextを押します。</p><h2 id="どの製品で発生"><a href="#どの製品で発生" class="headerlink" title="どの製品で発生?"></a>どの製品で発生?</h2><p>どのNorton製品を使っているかを選択します。<br><strong>View screenshot</strong> があるので、それを見て自身の使用製品を判断することもできます。<br>私はNISでしたので、B5を選択しました。<br>選択したらNextを押します。</p><p><a href="../../../../public/2016/11/screencapture-submit-symantec-false_positive-1479026062556.png"><img src="../../../../public/2016/11/screencapture-submit-symantec-false_positive-1479026062556-1024x531.png"></a></p><h2 id="どういう仕組みで発生"><a href="#どういう仕組みで発生" class="headerlink" title="どういう仕組みで発生?"></a>どういう仕組みで発生?</h2><p>どういう方法で検出されたのかを選択します。<br>上から、</p><ul><li>C1 - Download/File Insight (Reputation Based Detection) e.g. WS.Reputation.1, Suspicious.Insight, WS.Malware.* – View screenshot<ul><li>ダウンロード/ファイルインサイト (レピュテーションベースの検出)。例えば、WS. Reputation.1、Suspicious.Insight、WS.Malware.*</li></ul></li><li>C2 - SONAR (Behavioral Heuristics Detection) e.g. SONAR.Heuristic, Bloodhound.SONAR.* – View screenshot<ul><li>SONAR (振る舞いヒューリスティック検出)。例えば、SONAR ヒューリスティック、Bloodhound.SONAR</li></ul></li><li>C3 - Auto-Protect (File Based Detection) e.g. Trojan.*, Trojan.ADH, Suspicious.Cloud.*, Downloader, Hacktool, Suspicious.* – View screenshot<ul><li>自動保護 (ファイルベースの検出)。例えば、Trojan.*、Trojan.ADH,、Suspicious.Cloud.*、ダウンローダー。ハックツール、Suspicious.*</li></ul></li><li>C5 - IPS (Network Intrusion Detection, Vantage) e.g. “Web Attack”, “Malicious Site: Malicious Web site, Domain or URL” – View screenshot<ul><li>侵入防御システム (ネットワーク侵入検知)。例えば、Web Attack、Malicious Site: Malicious Web site, Domain or URL</li></ul></li><li>C7 - SafeWeb (Phishing URLs, Malicious Web Pages) – View screenshot<ul><li>セーフWeb (フィッシングURL、悪意のあるWebページ)</li></ul></li><li>C11 - Don’t know, am unsure, or the options provided do not apply<ul><li>わからない、不確か、または選べる選択肢がない</li></ul></li></ul><p>Nortonの場合、File Insight、自動保護、SONAR等検出の方法は多岐にわたります。<br><strong>View screenshot</strong> があるので、それを見て自身の判断することもできます。<br>私の場合は、自動保護だったので、C3を選択しました。</p><p><a href="../../../../public/2016/11/screencapture-submit-symantec-false_positive-1479026074226.png"><img src="../../../../public/2016/11/screencapture-submit-symantec-false_positive-1479026074226-1024x531.png"></a></p><h2 id="詳細な情報は"><a href="#詳細な情報は" class="headerlink" title="詳細な情報は?"></a>詳細な情報は?</h2><p>最後のページです。</p><p><a href="../../../../public/2016/11/screencapture-submit-symantec-false_positive-standard-1479026885289.png"><img src="../../../../public/2016/11/screencapture-submit-symantec-false_positive-standard-1479026885289-1024x614.png"></a></p><p><strong>Step1</strong>で、検出したファイルを提出します。Submission Typeを <strong>Upload File</strong> を選択。<br>大抵、自動保護を一時的に無効にしているはずなので、先に記入を済ませてから、ファイルを選択すると良いでしょう。<br>でないと、記入中にファイルを消されます。<br><strong>Step2</strong>では、検出した情報についての記述です。<br>下記の項目は、Nortonの活動記録の画面を見て入力してください。</p><ul><li>Name of the software being detected:<ul><li>検出されたソフトウェアの名前</li></ul></li><li>Name of detection given by Symantec product:<ul><li>Symantec製品によって検出された名前</li></ul></li></ul><p>しかし、次の項目が少しわかりにくいです。</p><ul><li>Important: File quarantine, product clipboard information or additional details: • If the information is more than 20000 characters, please create a log file and send that along with the file submission.</li><li>重要: ファイル検疫、製品クリップボード情報または追加情報。もし、20000字以上の情報ならば、ログファイルと付随ファイルを提出してください。</li></ul><p>説明の下に <strong>Instructions</strong> リンクがあるでのクリックすると、下記の内容が記されたポップアップが表示されます。</p><p><strong>Symantec Endpoint Protection Users</strong> Simply click on View Quarantine and provide the “Original Location” listed for the quarantined file(s).</p><p><strong>Norton Internet Security/AntiVirus/360 Users</strong> From Advanced view, select History and use “Quarantine” filter. Click on the activity, then “More Details” and “Copy to Clipboard”. Now you can simply paste the content here.</p><p>これに従うと、製品クリップボード情報が入手できます。<br>まず、<strong>セキュリティ履歴</strong>から、状態が<strong>検疫済み</strong>になっている、項目を選択します。</p><p><a href="../../../../public/2016/11/21799ec8d6b890308231f080ae32fa72.png"><img src="../../../../public/2016/11/21799ec8d6b890308231f080ae32fa72.png"></a></p><p>次に、<strong>その他のオプション</strong>をクリックします。<br>右下に<strong>クリップボードにコピー</strong>とあるのでクリックします。</p><p><a href="../../../../public/2016/11/91c21ea074713f91a284fa81e9f78f40.png"><img src="../../../../public/2016/11/91c21ea074713f91a284fa81e9f78f40.png"></a></p><p>コピーされた内容を先ほどのテキスト入力エリアに貼り付けます。<br>内容は、検出されたウイルス名等ですが、ファイルのフルパスなどがあるのでご注意を。</p><p><strong>Step3</strong>では、報告者である自分の情報を書きます。名前とメールアドレスになります。<br>3つめの項目の <strong>Are you the creator or distributor of the software in question?</strong> は、<strong>あなたは質問のソフトウェアの作者か配布者ですか?</strong> という意味です。私はファイルの作成者なので Yes を選択しました。</p><p>最後の<strong>Step4</strong>では、最終確認です。最近おなじみの<strong>CAPTCHA</strong>です。<br>CAPTCHAを入力する前に、チェックボックスにチェックをつける必要があります。<br><strong>Please provide as much information as possible. Submissions with insufficient detail will be rejected.</strong> は、<strong>可能な限り詳しい情報を提供してください。不十分な情報と一緒に提出されたものは拒絶されます。</strong>とありますです。特に脅し文句ではないのでご安心を。</p><p>AnswerにCAPTCHAを入力してSubmitで報告です。お疲れ様です。</p><h2 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h2><p>は、まだです。どうも結果は返ってこないご様子。<br>何かありましたら、報告いたします。<br>とりあえずは、Nortonのスキャン対象からパスを除外する方法で対処します。</p>]]></content>
      
      
      <categories>
          
          <category> その他 </category>
          
          <category> アンチウイルス誤検出 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その23 GDBでデバッグしてみる</title>
      <link href="2016/11/08/1687/"/>
      <url>2016/11/08/1687/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux辛い"><a href="#Linux辛い" class="headerlink" title="Linux辛い"></a>Linux辛い</h1><p>自分用メモ。<br>gdbを使ってデバッグまたはコアダンプを解析する方法。</p><h1 id="下準備"><a href="#下準備" class="headerlink" title="下準備"></a>下準備</h1><p>Linuxではコアダンプの出力が無効になっているようなので有効にします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ulimit -c unlimited</span></span><br></pre></td></tr></table></figure><p><strong>unlimited</strong>出力サイズを無制限にするとのこと。<br>サイズを制限しなくてはならないような巨大プログラムや貧弱マシンでなければ無制限一択。</p><h1 id="デバッグ"><a href="#デバッグ" class="headerlink" title="デバッグ"></a>デバッグ</h1><p>簡単。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gdb </span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># (gdb) run</span></span><br></pre></td></tr></table></figure><p>gdbにプログラムのパスを渡し、<strong>run</strong> で実行するだけです。</p><h1 id="ダンプの解析"><a href="#ダンプの解析" class="headerlink" title="ダンプの解析"></a>ダンプの解析</h1><p>ulimitでコアダンプを有効化にしていると、カレントディレクトリにダンプファイルが出力されるはず。<br>これをgdbで解析するには</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gdb  &lt;ダンプのパス&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># (gdb)</span></span><br></pre></td></tr></table></figure><p>はい、これでダンプを解析できます。<br>あとは、<strong>bt (backtrace)**、</strong>info threads**等でゴリゴリ解析してください。</p><p>時間ができたら、コマンドをまとめたいです。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> GDB </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その22 git pull したときにエディタを表示されないようにする</title>
      <link href="2016/10/15/1682/"/>
      <url>2016/10/15/1682/</url>
      
        <content type="html"><![CDATA[<h1 id="CUI辛いです"><a href="#CUI辛いです" class="headerlink" title="CUI辛いです"></a>CUI辛いです</h1><p>自分用メモ。</p><p>会社で、Linux環境で開発をしています。<br>しかしながら、メールとかを使用するマシンはWindows上にあり、開発マシンは共有です。なので、メール見るマシンの前で開発したいわけです。<br>でも、VNCはレスポンスが悪くてとてもじゃないけど使えません (同じネットワークにあるのにも関わらず!!)。</p><p>なので、Visual Studio Codeでコーディングし、WinSCPで転送、SSHでログインしてビルド、そしてgit、という非常に面倒な開発プロセス使うわけですが、Visual Studio や TortoiseGit になれていると、コミットするにも一苦労。<br>更にエラーメッセージも英語で辛い。</p><p>そんな中、<strong>git pull</strong> したときに何故かエディタが立ち上がりました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Please enter a commit message to explain why this merge is necessary,</span></span><br><span class="line"><span class="comment"># especially if it merges an updated upstream into a topic branch.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Lines starting with &#x27;#&#x27; will be ignored, and an empty message aborts</span></span><br><span class="line"><span class="comment"># the commit.</span></span><br></pre></td></tr></table></figure><p>トピックブランチにアップストリームのブランチをマージする場合にコメントが必要ってことらしいですが、ブランチの扱いもおぼつかないのに、こんなこと言われても困ります。<br>空のメッセージはコミットをアボートしますってありますし。</p><p>なので、ググったら、 </p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://snickerjp.blogspot.jp/2015/04/git-pull-no-edit.html" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=snickerjp.blogspot.jp"></img><div class="hbc-site-name">元うなぎ屋</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="//1.bp.blogspot.com/-FjfKOBOdj1w/VSO-4uz4xkI/AAAAAAAB84E/GlAA9xJDKyE/w1200-h630-p-k-no-nu/1428423174_git-branch-256.png"></img></div><div class="hbc-text"><div class="hbc-title">「git pull」した時に出る、commitエディタを表示しないようにする</div><div class="hbc-url">http://snickerjp.blogspot.jp/2015/04/git-pull-no-edit.html</div><div class="hbc-description">なのまるです～git の自動化を行っているとおかしなことが起きて困ったので、対処法メモです！もくじgitを使ったスクリプトを実行したときに発生した問題中では、[git pull] をしているわけですが、    Merge branch &#39;master&#39; of …</div></div></div></div></a></div></div><p>同じ現象に遭遇している方が。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git pull --no-edit</span></span><br></pre></td></tr></table></figure><p>すれば、エディタが起動しない、とのこと。<br>助かりました。</p>]]></content>
      
      
      <categories>
          
          <category> バージョン管理システム </category>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その21 Red Hat Enterprise Linux 7.2のポートを開放する</title>
      <link href="2016/10/02/1677/"/>
      <url>2016/10/02/1677/</url>
      
        <content type="html"><![CDATA[<h1 id="TeamViewerのためにローカルポートを開く"><a href="#TeamViewerのためにローカルポートを開く" class="headerlink" title="TeamViewerのためにローカルポートを開く"></a>TeamViewerのためにローカルポートを開く</h1><p>なんでこんなことしたいかっていうと、TeamViewerを使ってローカルのWindowsから接続するんですが、いちいちインターネットにアクセスするのはレスポンスの面からも良くないしセキュリティ的にどうなの？っていうところです。</p><p>で、TeamViewerをLAN内からのアクセスだけ有効にすると、アクセスできなくなります。<br>当然インターネットを有効にしているときは、TeamViewerの仕組み上受信側のポートは無関係になりますが、LAN内からのアクセスだけを有効にすると、今度は受信側のポートが有効になりポートの制限が発生します。<br>なので、ポートを開放します。<br>TCPの5938を解放します。</p><p><strong>参考:</strong><br><a href="https://www.teamviewer.com/ja/help/334-which-ports-are-used-by-teamviewer.aspx">Which ports are used by TeamViewer?</a></p><p>まず、<strong>アプリケーション =&gt; 諸ツール =&gt; ファイアウォール</strong> を選択します。</p><p><a href="../../../../public/2016/10/img_57eff8857cacf.png"><img src="../../../../public/2016/10/img_57eff8857cacf.png"></a></p><p>次に、左上の <strong>設定</strong> を <strong>永続</strong> に変更します。<br>こうしないと再起動時に設定が戻ってしまいます。</p><p>次に<strong>ゾーン</strong>から <strong>public</strong> を選択し、<strong>ポート</strong> タブに移動します。<br>そして、<strong>追加 (A)</strong> ボタンを押下し、<strong>tcp 5938</strong> を追加します。</p><p>これでLAN内からのみの接続を許容するTeamViewerが有効になります。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>Windows10 ではファイアウォールを変更しなくてもLAN接続のみの設定が有効だったのですが…</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> Red Hat Enterprise Linux </category>
          
          <category> %e3%83%aa%e3%83%a2%e3%83%bc%e3%83%88%e3%83%87%e3%82%b9%e3%82%af%e3%83%88%e3%83%83%e3%83%97 </category>
          
          <category> TeamViewer </category>
          
          <category> リモートデスクトップ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その20 アセンブリ内のxamlリソースからDataTemplateを読み込む</title>
      <link href="2016/09/03/1669/"/>
      <url>2016/09/03/1669/</url>
      
        <content type="html"><![CDATA[<h1 id="Url指定が鬼門"><a href="#Url指定が鬼門" class="headerlink" title="Url指定が鬼門"></a>Url指定が鬼門</h1><p><strong>DataTemplate</strong> はxaml内に定義して、<strong>DataTemplateSelector</strong> で読み込んだりすることが定石ですが、アセンブリ内のxamlファイルからResourceDictionaryを生成して、動的にDataTemplateを作成することもできます。</p><p>通常、実行ファイル内のリソースにアクセスする場合は、下記のようになります。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> uri = <span class="keyword">new</span> Uri(<span class="string">&quot;pack://application:,,,/Resources/DataTemplateResources.xaml&quot;</span>, UriKind.Relative);</span><br><span class="line"><span class="keyword">var</span> info = Application.GetResourceStream(uri);</span><br><span class="line"><span class="keyword">var</span> reader = <span class="keyword">new</span> XamlReader();</span><br><span class="line"><span class="keyword">if</span> (info != <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Dictionary = reader.LoadAsync(info.Stream) <span class="keyword">as</span> ResourceDictionary;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実行ファイルではなく、dllに定義してあるリソースにアクセスする場合は、</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> uri = <span class="keyword">new</span> Uri(<span class="string">&quot;ABC.DEF.GHI;component/Resources/DataTemplateResources.xaml&quot;</span>, UriKind.Relative);</span><br><span class="line"><span class="keyword">var</span> info = Application.GetResourceStream(uri);</span><br><span class="line"><span class="keyword">var</span> reader = <span class="keyword">new</span> XamlReader();</span><br><span class="line"><span class="keyword">if</span> (info != <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Dictionary = reader.LoadAsync(info.Stream) <span class="keyword">as</span> ResourceDictionary;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>みたいになります。<br>どちらも、プロジェクトファイル直下にResoucesフォルダがあり、その直下にDataTemplateResources.xamlが存在するという形式です。<br>ABC.DEF.GHIはdllのファイル名です。拡張子であるdllは除去します。</p><p>xamlの中身は、</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;ResourceDictionary xmlns&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&#x2F;presentation&quot;</span><br><span class="line">    xmlns:x&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&quot;&gt;</span><br><span class="line">    &lt;DataTemplate x:Key&#x3D;&quot;Test1&quot;&gt;</span><br><span class="line">        &lt;TextBlock Text&#x3D;&quot;&#123;TemplateBinding Content&#125;&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;DataTemplate&gt;</span><br><span class="line"></span><br><span class="line">    &lt;DataTemplate x:Key&#x3D;&quot;Test2&quot;&gt;</span><br><span class="line">        &lt;Button Content&#x3D;&quot;&#123;TemplateBinding Content&#125;&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;DataTemplate&gt;</span><br><span class="line">&lt;&#x2F;ResourceDictionary&gt;</span><br></pre></td></tr></table></figure><p>とします。<br>プログラムからのアクセスは</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dictionary?[<span class="string">&quot;Test1&quot;</span>] <span class="keyword">as</span> DataTemplate</span><br></pre></td></tr></table></figure><p>だけです。<br>この戻りをContentTemplateSelector等に設定するか、DataTemplateSelectorの戻り値に設定すれば動的にDataTemplateを使うことができます。</p><p>ここまでは普通の内容です。</p><h1 id="LoadAsyncメソッドが例外を投げる"><a href="#LoadAsyncメソッドが例外を投げる" class="headerlink" title="LoadAsyncメソッドが例外を投げる"></a>LoadAsyncメソッドが例外を投げる</h1><p>Uriの生成、Application.GetResourceStreamの呼び出しに成功し問題は無いように見えます。<br>しかし、何故か奇妙な例外を投げます。</p><h3 id="インデックス-30-にあるバイト-FF-を指定されたコード-ページから-Unicode-へ変換できません。"><a href="#インデックス-30-にあるバイト-FF-を指定されたコード-ページから-Unicode-へ変換できません。" class="headerlink" title="インデックス 30 にあるバイト [FF] を指定されたコード ページから Unicode へ変換できません。"></a>インデックス 30 にあるバイト [FF] を指定されたコード ページから Unicode へ変換できません。</h3><p>さっぱり意味がわかりません。<br>しかし、Unicodeという言葉に違和感を覚えました。<br>エディタでエンコードを確認すると、BOMの表示が…</p><p>BOMを外して、再度読み込むと例外を投げることなく読み込むことができました。</p><h1 id="アクセス修飾子にも注意"><a href="#アクセス修飾子にも注意" class="headerlink" title="アクセス修飾子にも注意"></a>アクセス修飾子にも注意</h1><p>DataTemplate内で定義したコントロールのアクセス修飾子にも注意する必要があります。<br>いくら、xamlが定義してあるアセンブリと同一のアセンブリに定義してあるコントロールだからといっても、そのコントロールの生成自体は、実行ファイルから生成が実行されるわけで。<br>つまり、DataTemplate内で使用されているコントロールは実行ファイルからアクセスできるようになっている、つまりpublicでないと下記のような例外を投げます。</p><p><strong>System.Xaml.XamlObjectWriterException 不明な型 ‘{clr-namespace:ABC.DEF.GHI}CustomControl’ を作成できません。</strong></p><h1 id="XAML内の名前空間にも注意"><a href="#XAML内の名前空間にも注意" class="headerlink" title="XAML内の名前空間にも注意"></a>XAML内の名前空間にも注意</h1><p>DataTemplate内で定義した全ての要素の名前空間にも注意。<br>前段のアクセス修飾子での指摘の通り、要素の作成の基準はアプリが基準となるので、名前空間だけではアクセスできません。<br>ですので、DataTemplate内で、DataTemplateが存在するアセンブリ内の要素であったとしても、独自要素の名前空間の宣言は下記のように行う必要があります。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:visualizer&#x3D;&quot;clr-namespace:ABC.DEF.GHI.CustomControl;assembly&#x3D;ABC.DEF.GHI&quot;&gt;</span><br></pre></td></tr></table></figure><p>この場合は、アクセス修飾子での指摘と全く同じ例外を投げます。<br>確かに、意味合いとしては存在しない、あるいは見えないクラスにアクセスしようとしているのだから、言いたいことはわかりますが….</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>リソースは、リソース自身が、どのように見られるか、という意識付けをしないと、読み込むことすらできないことがわかりました。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> Windows Presentation Foundation </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その19 Red Hat Enterprise Linux 7.2にTeamViewerをインストールする</title>
      <link href="2016/08/30/1660/"/>
      <url>2016/08/30/1660/</url>
      
        <content type="html"><![CDATA[<h1 id="デスクトップ共有が動かない"><a href="#デスクトップ共有が動かない" class="headerlink" title="デスクトップ共有が動かない"></a>デスクトップ共有が動かない</h1><p>デスクトップ共有がRHELに付属しているのですが、これが動きません。<br>多分、私の使い方が間違っているのでしょうが、いい加減キーボードを行ったり来たりするのは嫌なので、<strong>TeamViewer</strong>を使ってさくっとつなげます。</p><h1 id="TeamViewerも動かない"><a href="#TeamViewerも動かない" class="headerlink" title="TeamViewerも動かない?"></a>TeamViewerも動かない?</h1><p><a href="https://www.teamviewer.com/ja/download/linux/">公式ページ</a>からダウンロードします。<br>幸いなことにRHELはサポート対象となっており、すぐに使えるようです。</p><p><a href="../../../../public/2016/08/img_57c58877c1e67.png"><img src="../../../../public/2016/08/img_57c58877c1e67.png"></a></p><p>Firefoxでダウンロード後、rpmパッケージを開きます。<br>ダイアログが出現し、インストールの確認を要求されますので、<strong>インストール</strong>を押下します。</p><p><a href="../../../../public/2016/08/img_57c588f57de2d.png"><img src="../../../../public/2016/08/img_57c588f57de2d.png"></a></p><p>プラグインみたいな…</p><p>が、失敗します。</p><p><a href="../../../../public/2016/08/img_57c58924c8d82.png"><img src="../../../../public/2016/08/img_57c58924c8d82.png"></a></p><p>(´・ω・`) ｼｮﾎﾞｰﾝ</p><p>何度やっても変わらないので、端末を開いて<strong>rpm -ivh &lt;パッケージファイル名&gt;**で直接インストールします。パッケージはダウンロードフォルダに落ちているはずです。<br>ちなみに、ファイルエクスプローラー上で右クリックし</strong>端末の中に開く**を選ぶと、そこがカレントディレクトリになって端末が開きます。便利だね！</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[takuya@takuya-redhat ダウンロード]$ rpm -ivh teamviewer_11.0.57095.i686.rpm</span><br><span class="line">警告: teamviewer_11.0.57095.i686.rpm: ヘッダー V4 DSA/SHA1 Signature、鍵 ID 72db573c: NOKEY</span><br><span class="line">エラー: 依存性の欠如:</span><br><span class="line">    libSM.so.6 は teamviewer-11.0.57095-0.i686 に必要とされています</span><br><span class="line">    libXdamage.so.1 は teamviewer-11.0.57095-0.i686 に必要とされています</span><br><span class="line">    libXext.so.6 は teamviewer-11.0.57095-0.i686 に必要とされています</span><br><span class="line">    libXfixes.so.3 は teamviewer-11.0.57095-0.i686 に必要とされています</span><br><span class="line">    libXinerama.so.1 は teamviewer-11.0.57095-0.i686 に必要とされています</span><br><span class="line">    libXrandr.so.2 は teamviewer-11.0.57095-0.i686 に必要とされています</span><br><span class="line">    libXrender.so.1 は teamviewer-11.0.57095-0.i686 に必要とされています</span><br><span class="line">    libXtst.so.6 は teamviewer-11.0.57095-0.i686 に必要とされています</span><br><span class="line">    libasound.so.2 は teamviewer-11.0.57095-0.i686 に必要とされています</span><br><span class="line">    libc.so.6(GLIBC_2.4) は teamviewer-11.0.57095-0.i686 に必要とされています</span><br><span class="line">    libdbus-1.so.3 は teamviewer-11.0.57095-0.i686 に必要とされています</span><br><span class="line">    libfontconfig.so.1 は teamviewer-11.0.57095-0.i686 に必要とされています</span><br><span class="line">    libfreetype.so.6 は teamviewer-11.0.57095-0.i686 に必要とされています</span><br><span class="line">    libgcc_s.so.1 は teamviewer-11.0.57095-0.i686 に必要とされています</span><br><span class="line">    libjpeg.so.62 は teamviewer-11.0.57095-0.i686 に必要とされています</span><br><span class="line">    libpng12.so.0 は teamviewer-11.0.57095-0.i686 に必要とされています</span><br><span class="line">    libz.so.1 は teamviewer-11.0.57095-0.i686 に必要とされています</span><br><span class="line">[takuya@takuya-redhat ダウンロード]$</span><br></pre></td></tr></table></figure><p>どうも依存関係の解決に失敗している模様。Ubuntuならapt-getなんですが。</p><h1 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h1><p>yumが必要のようです。<br>rpmは依存関係を解決してくれませんが、yumは依存関係も解決してくれるという優れもの。<br>ただ、前回話したように、RHELのサブスクリプションがないとyumは使えないので注意です。</p><p>先ほどのrpmパッケージをyumで指定してインストールします。<br>なお<strong>yum install</strong>は管理者権限が必要なので、sudoを付与します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">[takuya@takuya-redhat ダウンロード]$ sudo yum install teamviewer_11.0.57095.i686.rpm</span><br><span class="line">読み込んだプラグイン:langpacks, product-id, search-disabled-repos, subscription-manager</span><br><span class="line">teamviewer_11.0.57095.i686.rpm を調べています: teamviewer-11.0.57095-0.i686</span><br><span class="line">teamviewer_11.0.57095.i686.rpm をインストール済みとして設定しています</span><br><span class="line">依存性の解決をしています</span><br><span class="line">--&gt; トランザクションの確認を実行しています。</span><br><span class="line">---&gt; パッケージ teamviewer.i686 0:11.0.57095-0 を インストール</span><br><span class="line">--&gt; 依存性の処理をしています: libSM.so.6 のパッケージ: teamviewer-11.0.57095-0.i686</span><br><span class="line">--&gt; 依存性の処理をしています: libXdamage.so.1 のパッケージ: teamviewer-11.0.57095-0.i686</span><br><span class="line">--&gt; 依存性の処理をしています: libXext.so.6 のパッケージ: teamviewer-11.0.57095-0.i686</span><br><span class="line">--&gt; 依存性の処理をしています: libXfixes.so.3 のパッケージ: teamviewer-11.0.57095-0.i686</span><br><span class="line">--&gt; 依存性の処理をしています: libXinerama.so.1 のパッケージ: teamviewer-11.0.57095-0.i686</span><br><span class="line">--&gt; 依存性の処理をしています: libXrandr.so.2 のパッケージ: teamviewer-11.0.57095-0.i686</span><br><span class="line">--&gt; 依存性の処理をしています: libXrender.so.1 のパッケージ: teamviewer-11.0.57095-0.i686</span><br><span class="line">--&gt; 依存性の処理をしています: libXtst.so.6 のパッケージ: teamviewer-11.0.57095-0.i686</span><br><span class="line">--&gt; 依存性の処理をしています: libasound.so.2 のパッケージ: teamviewer-11.0.57095-0.i686</span><br><span class="line">--&gt; 依存性の処理をしています: libc.so.6(GLIBC_2.4) のパッケージ: teamviewer-11.0.57095-0.i686</span><br><span class="line">--&gt; 依存性の処理をしています: libdbus-1.so.3 のパッケージ: teamviewer-11.0.57095-0.i686</span><br><span class="line">--&gt; 依存性の処理をしています: libfontconfig.so.1 のパッケージ: teamviewer-11.0.57095-0.i686</span><br><span class="line">--&gt; 依存性の処理をしています: libfreetype.so.6 のパッケージ: teamviewer-11.0.57095-0.i686</span><br><span class="line">--&gt; 依存性の処理をしています: libgcc_s.so.1 のパッケージ: teamviewer-11.0.57095-0.i686</span><br><span class="line">--&gt; 依存性の処理をしています: libjpeg.so.62 のパッケージ: teamviewer-11.0.57095-0.i686</span><br><span class="line">--&gt; 依存性の処理をしています: libpng12.so.0 のパッケージ: teamviewer-11.0.57095-0.i686</span><br><span class="line">--&gt; 依存性の処理をしています: libz.so.1 のパッケージ: teamviewer-11.0.57095-0.i686</span><br><span class="line">--&gt; トランザクションの確認を実行しています。</span><br><span class="line"></span><br><span class="line">(省略)</span><br><span class="line"></span><br><span class="line">検証中                  : util-linux-2.23.2-26.el7.x86_64                                                                                                                        46/46</span><br><span class="line"></span><br><span class="line">インストール:</span><br><span class="line">  teamviewer.i686 0:11.0.57095-0</span><br><span class="line"></span><br><span class="line">依存性関連をインストールしました:</span><br><span class="line">  alsa-lib.i686 0:1.0.28-2.el7     dbus-libs.i686 1:1.6.12-14.el7_2  expat.i686 0:2.1.0-8.el7        fontconfig.i686 0:2.10.95-7.el7                freetype.i686 0:2.4.11-11.el7</span><br><span class="line">  glibc.i686 0:2.17-106.el7_2.8    libICE.i686 0:1.0.9-2.el7         libSM.i686 0:1.2.2-2.el7        libX11.i686 0:1.6.3-2.el7                      libXau.i686 0:1.0.8-2.1.el7</span><br><span class="line">  libXdamage.i686 0:1.1.4-4.1.el7  libXext.i686 0:1.3.3-3.el7        libXfixes.i686 0:5.0.1-2.1.el7  libXi.i686 0:1.7.4-2.el7                       libXinerama.i686 0:1.1.3-2.1.el7</span><br><span class="line">  libXrandr.i686 0:1.4.2-2.el7     libXrender.i686 0:0.9.8-2.1.el7   libXtst.i686 0:1.2.2-2.1.el7    libgcc.i686 0:4.8.5-4.el7                      libjpeg-turbo.i686 0:1.2.90-5.el7</span><br><span class="line">  libpng12.i686 0:1.2.50-7.el7_2   libuuid.i686 0:2.23.2-26.el7_2.3  libxcb.i686 0:1.11-4.el7        nss-softokn-freebl.i686 0:3.16.2.3-14.2.el7_2  zlib.i686 0:1.2.7-15.el7</span><br><span class="line"></span><br><span class="line">依存性を更新しました:</span><br><span class="line">  dbus.x86_64 1:1.6.12-14.el7_2                         dbus-libs.x86_64 1:1.6.12-14.el7_2          dbus-x11.x86_64 1:1.6.12-14.el7_2         glibc.x86_64 0:2.17-106.el7_2.8</span><br><span class="line">  glibc-common.x86_64 0:2.17-106.el7_2.8                libblkid.x86_64 0:2.23.2-26.el7_2.3         libmount.x86_64 0:2.23.2-26.el7_2.3       libuuid.x86_64 0:2.23.2-26.el7_2.3</span><br><span class="line">  nss-softokn-freebl.x86_64 0:3.16.2.3-14.2.el7_2       util-linux.x86_64 0:2.23.2-26.el7_2.3</span><br><span class="line"></span><br><span class="line">完了しました!</span><br></pre></td></tr></table></figure><p>つらつら、と依存関係を解決し、インストールを完了してくれます。<br>完了後、端末でteamviewerと入力することで、TeamViewerが起動します。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>コマンド覚えるのがしんどいです。Ubuntuのapt-getすら忘れそうなのに…</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> Red Hat Enterprise Linux </category>
          
          <category> %e3%83%aa%e3%83%a2%e3%83%bc%e3%83%88%e3%83%87%e3%82%b9%e3%82%af%e3%83%88%e3%83%83%e3%83%97 </category>
          
          <category> TeamViewer </category>
          
          <category> リモートデスクトップ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その18 Intel NUC DN2820FYKHにRed Hat Enterprise Linux 7.2をインストールする</title>
      <link href="2016/08/30/1641/"/>
      <url>2016/08/30/1641/</url>
      
        <content type="html"><![CDATA[<h1 id="OSを変えて再挑戦"><a href="#OSを変えて再挑戦" class="headerlink" title="OSを変えて再挑戦"></a>OSを変えて再挑戦</h1><p><a href="https://taktak.jp/2016/08/29/1626">前回</a>はFedora 24のインストールに失敗しました。<br>Fedora 23に挑戦してもよいのですが、Red Hat Enterprise Linuxが開発目的なら無料で使えるようになったことを知ったので、それを試すことにしました。<br>まずは下記のページに移動します。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://developers.redhat.com/products/rhel/download/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=developers.redhat.com"></img><div class="hbc-site-name">Red Hat Developer</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://developers.redhat.com/themes/custom/rhdp2/images/metatags/metatag-image-global.png"></img></div><div class="hbc-text"><div class="hbc-title">Red Hat Enterprise Linux | Red Hat Developer</div><div class="hbc-url">http://developers.redhat.com/products/rhel/download/</div><div class="hbc-description">A stable, proven foundation that’s versatile enough for rolling out new applications, virtualizing environments, and creating a secure hybri…</div></div></div></div></a></div></div><p>入手には無料のユーザ登録が必要なのでページ上部の<strong>REGISTER</strong>から登録を。<br>登録後、トップページを開き。</p><p><a href="../../../../public/2016/08/img_57c43028774c3.png"><img src="../../../../public/2016/08/img_57c43028774c3.png"></a></p><p>ちょっと派手なページ</p><p><strong>TECHNOLOGIES</strong>から<strong>Red Hat Enterprise Linux</strong>を選択。</p><p><a href="../../../../public/2016/08/img_57c4301030437.png"><img src="../../../../public/2016/08/img_57c4301030437.png"></a></p><p>GET STARTEDをクリック。</p><p><a href="../../../../public/2016/08/img_57c4304033eab.png"><img src="../../../../public/2016/08/img_57c4304033eab.png"></a></p><p>最後に、**Download the Red Hat Enterprise Linux Server DVD .iso file.**をクリックしてisoファイルをダウンロードします。4GB近くあるので待機。<br>バージョンは7.2でした。なお64bit版しかない模様。</p><p><a href="../../../../public/2016/08/img_57c4307e584c1.png"><img src="../../../../public/2016/08/img_57c4307e584c1.png"></a></p><h1 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h1><p>の前に、USBメモリにISOを展開しますが、前回使った、Universal USB Installerの一覧にRedhatは存在しない模様。<br>ところが、Red Hatの公式で、USBインストーラの作成方法を公開していました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://access.redhat.com/documentation/ja-JP/Red_Hat_Enterprise_Linux/7/html/Installation_Guide/sect-making-usb-media.html" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=access.redhat.com"></img><div class="hbc-site-name">Red Hat Customer Portal</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://access.redhat.com/webassets/avalon/g/shadowman-200.png"></img></div><div class="hbc-text"><div class="hbc-title">3.2. USB インストールメディアの作成 Red Hat Enterprise Linux 7 | Red Hat Customer Portal</div><div class="hbc-url">https://access.redhat.com/documentation/ja-JP/Red_Hat_Enterprise_Linux/7/html/Installation_Guide/sect-making-usb-media.html</div><div class="hbc-description">The Red Hat Customer Portal delivers the knowledge, expertise, and guidance available through your Red Hat subscription.</div></div></div></div></a></div></div><p>手順は上に従うだけです。<br>USBインストーラ作成ツールのためだけに、インストーラが走るのは気に入りませんが…終わったら消します。はい。</p><p>作成が完了したら、再びUSBメモリをNUCに差し込み起動します。</p><p>しばらくすれば、<strong>Install Red Hat Enterprise Linux 7.2</strong>という文字列が出てくるので選択してEnterを押します。<br>そのあとは、基本画面に従えばインストールは簡単に進みます。<br>パーティションはデフォルトで、ユーザは別に作らなくてもいいかと。<br>ただし、構成はサーバー (GUI使用)でインストールします。でないとGUIがないのかも(未確認)。</p><p>ウィザードに従って、インストールが完了すると再起動します。<br>再起動後、コンソールで下記のような画面になります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Initial setup of Red Hat Enterprise Linux Server Linux 7.2 (Maipo)</span><br><span class="line">1) [!] License information                      2) [x] User creation</span><br><span class="line">         (License not accepted)                           (No user will be created)</span><br><span class="line">Please make your choice from above [<span class="string">&#x27;q&#x27;</span> to quit | <span class="string">&#x27;c&#x27;</span> to <span class="built_in">continue</span> | <span class="string">&#x27;r&#x27;</span> to refresh]:</span><br></pre></td></tr></table></figure><p>非常にわかりにくいですが、ライセンスの許諾を求められているので、1を入力してEnter。<br>さらに次の画面に遷移します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">License Information</span><br><span class="line"></span><br><span class="line">    1) Read the License Agreement</span><br><span class="line"></span><br><span class="line">[ ] 2) I accept the licnese agreement.</span><br><span class="line"></span><br><span class="line">  Please make your choice from above [<span class="string">&#x27;q&#x27;</span> to quit | <span class="string">&#x27;c&#x27;</span> to <span class="built_in">continue</span> | <span class="string">&#x27;r&#x27;</span> to refresh]:</span><br></pre></td></tr></table></figure><p>1を押下してライセンスを読んだ後、2、Enterと押下 して x マークをつけてから、c、Enterと押下してライセンスの許諾に同意します。</p><p>そして、最初の画面に戻り、<strong>license not accepted</strong>が<strong>license accepterd</strong>に変わるので、 c、Enterと押下して確定します。</p><p>そして、待ち望んだRed Hatのデスクトップが起動します。デフォルトのGNOMEの洗練されたデザインが出迎えてくれます。</p><p>ネットワークの設定は、画面左上の<strong>アプリケーション</strong>の<strong>システムツール-&gt;設定-&gt;ネットワーク</strong>から設定できます。Windowsのネットワーク設定が使用できれば楽勝です。</p><h1 id="サブスクリプションの登録"><a href="#サブスクリプションの登録" class="headerlink" title="サブスクリプションの登録"></a>サブスクリプションの登録</h1><p>これをやらないと何もできないようです。<br>どうもRHELは、サブスクリプションを登録することで、各種パッケージの追加を行うyumのリポジトリを使用できるようになる模様。<br>このままでは、依存解決とかが非常に面倒です。<br>なので、登録を実施します。</p><p>アプリケーションの<strong>システムツール-&gt;Red Hat サブスクリプションマネージャー</strong>を起動します。<br>root認証後、下記のダイアログが表示されます。<br>まず<strong>登録</strong>を押下します。</p><p><a href="../../../../public/2016/08/img_57c5840d5afee.png"><img src="../../../../public/2016/08/img_57c5840d5afee.png"></a></p><p>rootが必要</p><p><strong>次へ</strong>を押下します。</p><p><a href="../../../../public/2016/08/img_57c5841bd5ca2.png"><img src="../../../../public/2016/08/img_57c5841bd5ca2.png"></a></p><p>RHELをダウンロードするときに作成したアカウント情報で認証します。</p><p><a href="../../../../public/2016/08/img_57c58426a7227.png"><img src="../../../../public/2016/08/img_57c58426a7227.png"></a></p><p><strong>割り当て</strong>を押下します。</p><p><a href="../../../../public/2016/08/img_57c5842e0c9c4.png"><img src="../../../../public/2016/08/img_57c5842e0c9c4.png"></a></p><p>無事に認証されました。</p><p><a href="../../../../public/2016/08/img_57c5843a71758.png"><img src="../../../../public/2016/08/img_57c5843a71758.png"></a></p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>Linuxは面倒ですね。でもデスクトップが洗練されているRHELは結構とっつきやすいです。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> Red Hat Enterprise Linux </category>
          
          <category> Intel </category>
          
          <category> intel </category>
          
          <category> NUC </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その17 Intel NUC DN2820FYKHにFedora 24をインストールする (失敗編)</title>
      <link href="2016/08/29/1626/"/>
      <url>2016/08/29/1626/</url>
      
        <content type="html"><![CDATA[<h1 id="USBメモリからインストール"><a href="#USBメモリからインストール" class="headerlink" title="USBメモリからインストール"></a>USBメモリからインストール</h1><p><strong>DN2820FYKH</strong>にFedora 24をインストールします。BIOSは0052です。<br>Web上ではLinuxのインストールに色々罠が転がっている、とのことですが…</p><p>NUCには光学ドライブがないので、USBメモリからインストールします。<br>ブータブルUSBメモリをFedoraのLiveCDから作成します。</p><p><a href="http://www.pendrivelinux.com/universal-usb-installer-easy-as-1-2-3/">Universal USB Installer</a>から最新版を入手します。<br>2016年8月末の時点で最新版は1.9.6.6です。</p><p>ダウンロードして起動すると、インストーラではなく、すぐに実行されます。</p><p><a href="../../../../public/2016/08/img_57c3184c90b29.png"><img src="../../../../public/2016/08/img_57c3184c90b29.png"></a><br>利用規約の同意</p><p>利用規約に同意したら、Fedora Live Desktopを選択し、FedoraのLive CDのisoファイルを指定します。<br>最後に、USBメモリを指定します。</p><p><a href="../../../../public/2016/08/img_57c31856b4188.png"><img src="../../../../public/2016/08/img_57c31856b4188.png"></a><br>Fedoraを Live Desktopを指定</p><p>警告が出ますが、展開先のUSBメモリさえ間違っていなければ特に気にしなくていいです。<br>当然、USBメモリは初期化されます。</p><p><a href="../../../../public/2016/08/img_57c3186a37179.png"><img src="../../../../public/2016/08/img_57c3186a37179.png"></a><br>警告</p><p><a href="../../../../public/2016/08/img_57c3186fe98ea.png"><img src="../../../../public/2016/08/img_57c3186fe98ea.png"></a></p><p><a href="../../../../public/2016/08/img_57c31876cd3e0.png"><img src="../../../../public/2016/08/img_57c31876cd3e0.png"></a><br>7zipで展開される模様</p><p><a href="../../../../public/2016/08/img_57c3187e3bbb7.png"><img src="../../../../public/2016/08/img_57c3187e3bbb7.png"></a><br>完了</p><p><a href="../../../../public/2016/08/img_57c31883f0e2f.png"><img src="../../../../public/2016/08/img_57c31883f0e2f.png"></a></p><p>およそ1.5GB消費</p><h1 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h1><p>USBメモリを差して、NUCを起動します。<br>通常は何もしなくても、ブートが始まります。適宜BIOSからブートシーケンスをいじくるなりして対応します。<br>起動後、<strong>Start Fedora-Workstation-Live 24</strong>を選択して、Fedoraが立ち上がるのを待機します。</p><p>が、ダメ。<br>何度やっても、<strong>Entering emergency mode. Exit the shell to continue.**というエラーで起動できません。<br>Fedoraは</strong>Red Hat Enterprise Linux**の新しい技術の実験場のような役割らしいので、ハードが対応していない可能性があります。</p><p>なので、Fedora 24はあきらめます。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>BIOSのアップデートに続き、OSのインストールもこける。大丈夫か？</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> Intel </category>
          
          <category> Fedora </category>
          
          <category> intel </category>
          
          <category> NUC </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その16 Intel NUC DN2820FYKHのBIOS更新</title>
      <link href="2016/08/29/1620/"/>
      <url>2016/08/29/1620/</url>
      
        <content type="html"><![CDATA[<h1 id="BIOSの入手"><a href="#BIOSの入手" class="headerlink" title="BIOSの入手"></a>BIOSの入手</h1><p><strong>DN2820FYKH</strong>をヤフオクで、メモリ、HDD付き、送料込みで15Kで入手したので。<br>最新のBIOSにしないとOSのインストールすらできないという話なので、2016年8月現在で最新のBIOSは0053になります。<br>Intelの<a href="https://downloadcenter.intel.com/">Download Center</a>より、型番のDN2820FYKHで検索をかけます。</p><p><a href="../../../../public/2016/08/img_57c3159fb1865.png"><img src="../../../../public/2016/08/img_57c3159fb1865.png"></a></p><p><a href="../../../../public/2016/08/img_57c315eb78095.png"><img src="../../../../public/2016/08/img_57c315eb78095.png"></a></p><p><a href="../../../../public/2016/08/img_57c315fe93237.png"><img src="../../../../public/2016/08/img_57c315fe93237.png"></a></p><p>ダウンロードしたファイル<strong>FY0053.BIO</strong>はUSBメモリにコピーします。</p><h1 id="BIOSの更新"><a href="#BIOSの更新" class="headerlink" title="BIOSの更新"></a>BIOSの更新</h1><p>NUC電源投入後、F2を押下しBIOSに入ります。<br>その後F7を押下し、ダイアログに対してNoと返します。<br>これによりファイルからBIOSを選択してアップデートできます。</p><p>後は自動でBIOSの更新が始まります。<br>めでたしめでたし。</p><p>ではありませんでした。<br>何度やっても、**Technical information: (0x800000000000000E, 0)**というエラーを出して失敗します。<br>幸い、BIOSが壊れることはありませんでしたが、結局原因もわからずBIOSの更新をあきらめました。<br>ただ、最初から入っていたBIOSが0052とひとつ前で比較的新しかったのが幸いでした。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>不吉なNUCデビューになりました。</p>]]></content>
      
      
      <categories>
          
          <category> Intel </category>
          
          <category> intel </category>
          
          <category> NUC </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その15 OpenCVで機械学習をする際の注意 その2</title>
      <link href="2016/08/26/1618/"/>
      <url>2016/08/26/1618/</url>
      
        <content type="html"><![CDATA[<h1 id="本当に情報が少ないので"><a href="#本当に情報が少ないので" class="headerlink" title="本当に情報が少ないので"></a>本当に情報が少ないので</h1><p><strong>opencv_traincascade.exe</strong>で学習を進める際、またも意味がわかりにくいエラーがたくさん出ます。</p><h1 id="Train-dataset-for-temp-stage-can-not-be-filled-Branch-training-terminated"><a href="#Train-dataset-for-temp-stage-can-not-be-filled-Branch-training-terminated" class="headerlink" title="Train dataset for temp stage can not be filled. Branch training terminated."></a>Train dataset for temp stage can not be filled. Branch training terminated.</h1><p>直訳すれば、<strong>「一時的なステージに対する訓練データセットを完成できませんでした。枝分かれしたトレーニングは中断しました。」</strong>になりますが、抽象的過ぎて意味がわかりません。<br>このエラーはいろいろな時にでます。</p><p>私の場合、不正解画像リストを指定したが、リスト内のパスが全部間違っていて画像を一切読み込むことができない時、<strong>「Cascade classifier can’t be trained. Check the used training parameters.」</strong>というメッセージとともに、このエラーが発生しました。<br>このケースの場合、学習ステージ0で即座に失敗します。</p><p>ところが、不正解画像が正解画像に比べて極端に少なかったりすると、ステージの途中でエラーになって終了します。<br>数時間かけた学習が無に帰す瞬間です。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">END&gt;</span><br><span class="line">Training until now has taken <span class="number">0</span> days <span class="number">3</span> hours <span class="number">54</span> minutes <span class="number">53</span> seconds.</span><br><span class="line"></span><br><span class="line">===== TRAINING <span class="number">9</span>-stage =====</span><br><span class="line">&lt;BEGIN</span><br><span class="line">POS count : consumed   <span class="number">3600</span> : <span class="number">3648</span></span><br><span class="line">NEG count : acceptanceRatio    <span class="number">254</span> : <span class="number">6</span>.<span class="number">50276</span>e-<span class="number">006</span></span><br><span class="line">Precalculation <span class="built_in">time</span>: <span class="number">5</span>.<span class="number">756</span></span><br><span class="line">+----+---------+---------+</span><br><span class="line">|  N |    HR   |    FA   |</span><br><span class="line">+----+---------+---------+</span><br><span class="line">|   <span class="number">1</span>| <span class="number">0</span>.<span class="number">998889</span>| <span class="number">0</span>.<span class="number">279528</span>|</span><br><span class="line">+----+---------+---------+</span><br><span class="line">END&gt;</span><br><span class="line">Training until now has taken <span class="number">0</span> days <span class="number">9</span> hours <span class="number">57</span> minutes <span class="number">22</span> seconds.</span><br><span class="line"></span><br><span class="line">===== TRAINING <span class="number">10</span>-stage =====</span><br><span class="line">&lt;BEGIN</span><br><span class="line">POS count : consumed   <span class="number">3600</span> : <span class="number">3652</span></span><br><span class="line">Train dataset <span class="keyword">for</span> temp stage can <span class="keyword">not</span> be filled. Branch training terminated.</span><br></pre></td></tr></table></figure><p>また、上のケースの場合、acceptanseRatio末尾の数字が浮動小数点のような状態になっています。<br>こうなっている場合は、過学習に陥っている可能性があるとのこと。</p><p>もっと、わかりやすいエラーを出して欲しいです。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>OpenCVの解説書籍を読もうと思いましたが、O’Reillyの<strong>詳解 OpenCV</strong>はかなり古くなってしました。しかし、2016年11月に最新バージョン3に対応した版が発売されるようです。英語ですが。機械学習部分だけでも読めないでしょうかね？</p>]]></content>
      
      
      <categories>
          
          <category> マルチメディア </category>
          
          <category> 画像処理 </category>
          
          <category> OpenCV </category>
          
          <category> 機械学習 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その14 OpenCVで機械学習をする際の注意</title>
      <link href="2016/08/25/1607/"/>
      <url>2016/08/25/1607/</url>
      
        <content type="html"><![CDATA[<h1 id="情報が少ないので"><a href="#情報が少ないので" class="headerlink" title="情報が少ないので"></a>情報が少ないので</h1><p>OpenCV付属のツールで、機械学習に必要なベクトルデータ (ディープラーニングで言う学習データ？と私は思っています)を作る<strong>opencv_createsamples.exe</strong>を使う際の注意。<br>学習対象となる画像を用意し、リストファイルに記載することで、画像からベクトルデータを作成します。</p><p>が、このリストを作る際にはまったのでメモ。</p><ul><li>リストファイルのパス区切り文字列は / でも \ でもOK</li><li>絶対パスでもOK</li><li>ただし、絶対パスでも相対パスでも空白がパスに入るとダメ。例えダブルクォーテーションで囲ってもダメ。ダブルクォーテーションで囲むと、空白の有無に関係なくエラーになる</li><li>サンプル数や座標の区切りの空白の数は1でも2でもOK</li><li>エンコードに注意。Shift-Jis、UTF8でもいいが、BOMありはアウト</li></ul><p>また、関連ツールに<strong>opencv_traincascade.exe</strong>があります。<br>これは、<strong>opencv_createsamples.exe</strong>で作ったベクトルデータと、背景画像のリストを入力して学習済みモデルを生成するためのツールです。<br>このツールも少し注意です。</p><ul><li>リストファイルのパス区切り文字列は / でも \ でもOK</li><li>絶対パスでもOK</li><li>ただし、絶対パスでも相対パスでも空白がパスに入るとダメ。例えダブルクォーテーションで囲ってもダメ。ダブルクォーテーションで囲むと、空白の有無に関係なくエラーになる</li><li>エンコードに注意。Shift-Jis、UTF8でもいいが、BOMありはアウト</li></ul><p>ここは、前段と同じです。<br>他には、<strong>opencv_traincascade.exe</strong>でベクトルデータを作成する際、次元数を <strong>-h 48 -w 48</strong> のように、縦横で指定しますが、この時の入力と同じ引数を<strong>opencv_traincascade.exe</strong>に渡します。</p><p>さもなくば、</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;BEGIN</span><br><span class="line">OpenCV Error: Assertion failed (_img.rows * _img.cols == vecSize) <span class="keyword">in</span> CvCascadeIm</span><br><span class="line"><span class="function">ageReader::<span class="title">PosReader</span>::<span class="title">get</span>, <span class="title">file</span> <span class="title">C</span>:\<span class="title">builds</span>\2<span class="title">_4_PackSlave</span>-<span class="title">win64</span>-<span class="title">vc12</span>-<span class="title">shared</span>\<span class="title">opencv</span></span></span><br><span class="line"><span class="function">\<span class="title">apps</span>\<span class="title">traincascade</span>\<span class="title">imagestorage.cpp</span>, <span class="title">line</span> 157</span></span><br></pre></td></tr></table></figure><p>みたいなエラーがでます、 ようするに、ベクトルデータの次元数と背景画像データをベクトルデータにする際の次元数が違いますよ、ってことです。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>正直、ファイルリストだけでここまではまるとは思ってもみませんでした。<br>何度Linux版を使おうか、と諦めかけたことか。</p>]]></content>
      
      
      <categories>
          
          <category> マルチメディア </category>
          
          <category> 画像処理 </category>
          
          <category> OpenCV </category>
          
          <category> 機械学習 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでIBM Bluemixを試してみる 第4回 -失敗編-</title>
      <link href="2016/08/24/1583/"/>
      <url>2016/08/24/1583/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/08/17/1575">前回</a>はBluemix上の.NET Coreを更新するべく作業しました(途中)。</p><a id="more"></a><h1 id="Bluemix-CLI"><a href="#Bluemix-CLI" class="headerlink" title="Bluemix CLI"></a>Bluemix CLI</h1><p>前回は、Bluemix CLIのインストーラを入手しました。<br>これをインストールします。</p><p><a href="../../../../public/2016/08/img_57adc69b6ec13.png"><img src="../../../../public/2016/08/img_57adc69b6ec13.png"></a></p><p><a href="../../../../public/2016/08/img_57adc6a030fda.png"><img src="../../../../public/2016/08/img_57adc6a030fda.png"></a></p><p><a href="../../../../public/2016/08/img_57adc6a3edf45.png"><img src="../../../../public/2016/08/img_57adc6a3edf45.png"></a></p><p>インストール先の指定すらない….</p><p><a href="../../../../public/2016/08/img_57adc6a8d1a24.png"><img src="../../../../public/2016/08/img_57adc6a8d1a24.png"></a></p><p><a href="../../../../public/2016/08/img_57adc6b7b2257.png"><img src="../../../../public/2016/08/img_57adc6b7b2257.png"></a></p><p><a href="../../../../public/2016/08/img_57adc6bc7a797.png"><img src="../../../../public/2016/08/img_57adc6bc7a797.png"></a></p><p>はいはい、再起動再起動</p><h1 id="buildpack更新"><a href="#buildpack更新" class="headerlink" title="buildpack更新"></a>buildpack更新</h1><p><font color="red">注:この先の処理を実施するとBluemixのアプリの環境が壊れます。</font></p><p>ダッシュボードのCF CLIの説明から、Bluemixへの接続がわかりましたので、CF CLIによるbuildpackの更新は下記の流れになります。<br>管理者権限でコマンドプロンプトを立ち上げ、gitでクローンしたアプリのディレクトリに移動します。<br>次に下記のコマンドをメモ帳にでも張り付けて、コマンドプロンプトに張り付けます。<br>(当然文字列は各自環境に応じて置換すること)</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bluemix api https://api.au-syd.bluemix.<span class="built_in">net</span></span><br><span class="line">bluemix login -u &lt;Bluemix ユーザーID&gt; -o &lt;組織の名前&gt; -s &lt;スペースの名前&gt;</span><br><span class="line">&lt;Bluemixのパスワード&gt;</span><br><span class="line">cf push &lt;アプリの名前&gt; -b https://github.com/cloudfoundry-community/dotnet-core-buildpack.git</span><br></pre></td></tr></table></figure><p>これにより、対話をすることなくbuildpackの更新が始まります。</p><p>が、失敗します。<br>正確には、buildpackの更新はうまくいっている感じです。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">Works</span>\<span class="title">OpenSource</span>\<span class="title">IBM</span> <span class="title">Bluemix</span>\<span class="title">TRY</span>-<span class="title">BLUEMIX</span>-<span class="title">TEST1</span>&gt;<span class="title">bluemix</span> <span class="title">api</span> <span class="title">https</span>://<span class="title">api.au</span>-<span class="title">syd.bluemix.net</span></span></span><br><span class="line"><span class="function">&#x27;<span class="title">cf</span> <span class="title">api</span> <span class="title">https</span>://<span class="title">api.au</span>-<span class="title">syd.bluemix.net</span>&#x27; を起動しています...</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Setting</span> <span class="title">api</span> <span class="title">endpoint</span> <span class="title">to</span> <span class="title">https</span>://<span class="title">api.au</span>-<span class="title">syd.bluemix.net</span>...</span></span><br><span class="line"><span class="function"><span class="title">OK</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">API</span> <span class="title">endpoint</span>:   <span class="title">https</span>://<span class="title">api.au</span>-<span class="title">syd.bluemix.net</span> (<span class="title">API</span> <span class="title">version</span>: 2.54.0)</span></span><br><span class="line"><span class="function"><span class="title">User</span>:           <span class="title">hogehoge</span>@<span class="title">hoge.com</span></span></span><br><span class="line"><span class="function"><span class="title">Org</span>:            <span class="title">TRY</span>-<span class="title">BLUEMIX</span></span></span><br><span class="line"><span class="function"><span class="title">Space</span>:          <span class="title">SPACE1</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">Works</span>\<span class="title">OpenSource</span>\<span class="title">IBM</span> <span class="title">Bluemix</span>\<span class="title">TRY</span>-<span class="title">BLUEMIX</span>-<span class="title">TEST1</span>&gt;<span class="title">bluemix</span> <span class="title">login</span> -<span class="title">u</span> <span class="title">hogehoge</span>@<span class="title">hoge.com</span> -<span class="title">o</span> <span class="title">TRY</span>-<span class="title">BLUEMIX</span> -<span class="title">s</span> <span class="title">SPACE1</span></span></span><br><span class="line"><span class="function">&#x27;<span class="title">cf</span> <span class="title">login</span> -<span class="title">u</span> <span class="title">hogehoge</span>@<span class="title">hoge.com</span> -<span class="title">o</span> <span class="title">TRY</span>-<span class="title">BLUEMIX</span> -<span class="title">s</span> <span class="title">SPACE1</span>&#x27; を起動しています...</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">API</span> <span class="title">endpoint</span>: <span class="title">https</span>://<span class="title">api.au</span>-<span class="title">syd.bluemix.net</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Password</span>&gt;</span></span><br><span class="line"><span class="function"><span class="title">Authenticating</span>...</span></span><br><span class="line"><span class="function"><span class="title">OK</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Targeted</span> <span class="title">org</span> <span class="title">TRY</span>-<span class="title">BLUEMIX</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Targeted</span> <span class="title">space</span> <span class="title">SPACE1</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">API</span> <span class="title">endpoint</span>:   <span class="title">https</span>://<span class="title">api.au</span>-<span class="title">syd.bluemix.net</span> (<span class="title">API</span> <span class="title">version</span>: 2.54.0)</span></span><br><span class="line"><span class="function"><span class="title">User</span>:           <span class="title">hogehoge</span>@<span class="title">hoge.com</span></span></span><br><span class="line"><span class="function"><span class="title">Org</span>:            <span class="title">TRY</span>-<span class="title">BLUEMIX</span></span></span><br><span class="line"><span class="function"><span class="title">Space</span>:          <span class="title">SPACE1</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">Works</span>\<span class="title">OpenSource</span>\<span class="title">IBM</span> <span class="title">Bluemix</span>\<span class="title">TRY</span>-<span class="title">BLUEMIX</span>-<span class="title">TEST1</span>&gt;<span class="title">cf</span> <span class="title">push</span> <span class="title">TRY</span>-<span class="title">BLUEMIX</span>-<span class="title">TEST1</span> -<span class="title">b</span> <span class="title">https</span>://<span class="title">github.com</span>/<span class="title">cloudfoundry</span>-<span class="title">community</span>/<span class="title">dotnet</span>-<span class="title">core</span>-<span class="title">buildpack.git</span></span></span><br><span class="line"><span class="function"><span class="title">Using</span> <span class="title">manifest</span> <span class="title">file</span> <span class="title">D</span>:\<span class="title">Works</span>\<span class="title">OpenSource</span>\<span class="title">IBM</span> <span class="title">Bluemix</span>\<span class="title">TRY</span>-<span class="title">BLUEMIX</span>-<span class="title">TEST1</span>\<span class="title">manifest.yml</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Updating</span> <span class="title">app</span> <span class="title">TRY</span>-<span class="title">BLUEMIX</span>-<span class="title">TEST1</span> <span class="title">in</span> <span class="title">org</span> <span class="title">TRY</span>-<span class="title">BLUEMIX</span> / <span class="title">space</span> <span class="title">SPACE1</span> <span class="title">as</span> <span class="title">hogehoge</span>@<span class="title">hoge.com</span>...</span></span><br><span class="line"><span class="function"><span class="title">OK</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Using</span> <span class="title">route</span> <span class="title">try</span>-<span class="title">bluemix</span>-<span class="title">test1.au</span>-<span class="title">syd.mybluemix.net</span></span></span><br><span class="line"><span class="function"><span class="title">Uploading</span> <span class="title">TRY</span>-<span class="title">BLUEMIX</span>-<span class="title">TEST1</span>...</span></span><br><span class="line"><span class="function"><span class="title">Uploading</span> <span class="title">app</span> <span class="title">files</span> <span class="title">from</span>: <span class="title">D</span>:\<span class="title">Works</span>\<span class="title">OpenSource</span>\<span class="title">IBM</span> <span class="title">Bluemix</span>\<span class="title">TRY</span>-<span class="title">BLUEMIX</span>-<span class="title">TEST1</span></span></span><br><span class="line"><span class="function"><span class="title">Uploading</span> 33<span class="title">K</span>, 17 <span class="title">files</span></span></span><br><span class="line"><span class="function"><span class="title">Done</span> <span class="title">uploading</span></span></span><br><span class="line"><span class="function"><span class="title">OK</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Stopping</span> <span class="title">app</span> <span class="title">TRY</span>-<span class="title">BLUEMIX</span>-<span class="title">TEST1</span> <span class="title">in</span> <span class="title">org</span> <span class="title">TRY</span>-<span class="title">BLUEMIX</span> / <span class="title">space</span> <span class="title">SPACE1</span> <span class="title">as</span> <span class="title">hogehoge</span>@<span class="title">hoge.com</span>...</span></span><br><span class="line"><span class="function"><span class="title">OK</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Starting</span> <span class="title">app</span> <span class="title">TRY</span>-<span class="title">BLUEMIX</span>-<span class="title">TEST1</span> <span class="title">in</span> <span class="title">org</span> <span class="title">TRY</span>-<span class="title">BLUEMIX</span> / <span class="title">space</span> <span class="title">SPACE1</span> <span class="title">as</span> <span class="title">hogehoge</span>@<span class="title">hoge.com</span>...</span></span><br><span class="line"><span class="function">-----&gt; <span class="title">Downloaded</span> <span class="title">app</span> <span class="title">package</span> (24<span class="title">K</span>)</span></span><br><span class="line"><span class="function">-----&gt; <span class="title">Downloaded</span> <span class="title">app</span> <span class="title">buildpack</span> <span class="title">cache</span> (138<span class="title">M</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Cloning</span> <span class="title">into</span> &#x27;/<span class="title">tmp</span>/<span class="title">buildpacks</span>/<span class="title">dotnet</span>-<span class="title">core</span>-<span class="title">buildpack</span>&#x27;...</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Submodule</span> &#x27;<span class="title">compile</span>-<span class="title">extensions</span>&#x27; (<span class="title">https</span>://<span class="title">github.com</span>/<span class="title">cloudfoundry</span>-<span class="title">incubator</span>/<span class="title">compile</span>-<span class="title">extensions.git</span>) <span class="title">registered</span> <span class="title">for</span> <span class="title">path</span> &#x27;<span class="title">compile</span>-<span class="title">extensions</span>&#x27;</span></span><br><span class="line"><span class="function"><span class="title">Cloning</span> <span class="title">into</span> &#x27;<span class="title">compile</span>-<span class="title">extensions</span>&#x27;...</span></span><br><span class="line"><span class="function"><span class="title">Submodule</span> <span class="title">path</span> &#x27;<span class="title">compile</span>-<span class="title">extensions</span>&#x27;: <span class="title">checked</span> <span class="title">out</span> &#x27;211<span class="title">c02226a2612c8a3b724ebb0983c88b8c95e75</span>&#x27;</span></span><br><span class="line"><span class="function"><span class="title">ASP.NET</span> <span class="title">Core</span> <span class="title">buildpack</span> <span class="title">version</span>: 0.9.0</span></span><br><span class="line"><span class="function"><span class="title">ASP.NET</span> <span class="title">Core</span> <span class="title">buildpack</span> <span class="title">starting</span> <span class="title">compile</span></span></span><br><span class="line"><span class="function">-----&gt; <span class="title">Restoring</span> <span class="title">files</span> <span class="title">from</span> <span class="title">buildpack</span> <span class="title">cache</span></span></span><br><span class="line"><span class="function">       <span class="title">Copied</span> 37 <span class="title">files</span> <span class="title">from</span> /<span class="title">tmp</span>/<span class="title">cache</span>/<span class="title">libunwind</span> <span class="title">to</span> /<span class="title">tmp</span>/<span class="title">staged</span>/<span class="title">app</span></span></span><br><span class="line"><span class="function">       <span class="title">Copied</span> 199 <span class="title">files</span> <span class="title">from</span> /<span class="title">tmp</span>/<span class="title">cache</span>/.<span class="title">dotnet</span> <span class="title">to</span> /<span class="title">tmp</span>/<span class="title">staged</span>/<span class="title">app</span></span></span><br><span class="line"><span class="function">       <span class="title">Copied</span> 8120 <span class="title">files</span> <span class="title">from</span> /<span class="title">tmp</span>/<span class="title">cache</span>/.<span class="title">nuget</span> <span class="title">to</span> /<span class="title">tmp</span>/<span class="title">staged</span>/<span class="title">app</span></span></span><br><span class="line"><span class="function">       <span class="title">OK</span></span></span><br><span class="line"><span class="function">-----&gt; <span class="title">Extracting</span> <span class="title">libunwind</span></span></span><br><span class="line"><span class="function">       <span class="title">libunwind</span> <span class="title">version</span>: 1.1</span></span><br><span class="line"><span class="function">       <span class="title">https</span>://<span class="title">github.com</span>/<span class="title">cloudfoundry</span>-<span class="title">community</span>/<span class="title">dotnet</span>-<span class="title">core</span>-<span class="title">buildpack</span>/<span class="title">releases</span>/<span class="title">download</span>/<span class="title">v0</span>.7/<span class="title">libunwind</span>-<span class="title">cflinuxfs2</span>-1.1.<span class="title">tar.gz</span></span></span><br><span class="line"><span class="function">       <span class="title">OK</span></span></span><br><span class="line"><span class="function">-----&gt; <span class="title">Installing</span> <span class="title">Dotnet</span> <span class="title">CLI</span></span></span><br><span class="line"><span class="function">       <span class="title">dotnet</span> <span class="title">version</span>: 1.0.0-<span class="title">preview2</span>-003121</span></span><br><span class="line"><span class="function">       <span class="title">https</span>://<span class="title">go.microsoft.com</span>/<span class="title">fwlink</span>/?<span class="title">LinkID</span>=809129</span></span><br><span class="line"><span class="function">       <span class="title">OK</span></span></span><br><span class="line"><span class="function">-----&gt; <span class="title">Restoring</span> <span class="title">dependencies</span> <span class="title">with</span> <span class="title">Dotnet</span> <span class="title">CLI</span></span></span><br><span class="line"><span class="function">       <span class="title">Welcome</span> <span class="title">to</span> .<span class="title">NET</span> <span class="title">Core</span>!</span></span><br><span class="line"><span class="function">       ---------------------</span></span><br><span class="line"><span class="function">       <span class="title">Learn</span> <span class="title">more</span> <span class="title">about</span> .<span class="title">NET</span> <span class="title">Core</span> @ <span class="title">https</span>://<span class="title">aka.ms</span>/<span class="title">dotnet</span>-<span class="title">docs</span>. <span class="title">Use</span> <span class="title">dotnet</span> --<span class="title">help</span> <span class="title">to</span> <span class="title">see</span> <span class="title">available</span> <span class="title">commands</span> <span class="title">or</span> <span class="title">go</span> <span class="title">to</span> <span class="title">https</span>://<span class="title">aka.ms</span>/<span class="title">dotnet</span>-<span class="title">cli</span>-<span class="title">docs</span>.</span></span><br><span class="line"><span class="function">       <span class="title">Telemetry</span></span></span><br><span class="line"><span class="function">       --------------</span></span><br><span class="line"><span class="function">       <span class="title">The</span> .<span class="title">NET</span> <span class="title">Core</span> <span class="title">tools</span> <span class="title">collect</span> <span class="title">usage</span> <span class="title">data</span> <span class="title">in</span> <span class="title">order</span> <span class="title">to</span> <span class="title">improve</span> <span class="title">your</span> <span class="title">experience</span>. <span class="title">The</span> <span class="title">data</span> <span class="title">is</span> <span class="title">anonymous</span> <span class="title">and</span> <span class="title">does</span> <span class="title">not</span> <span class="title">include</span> <span class="title">commandline</span> <span class="title">arguments</span>. <span class="title">The</span> <span class="title">data</span> <span class="title">is</span> <span class="title">collected</span> <span class="title">by</span> <span class="title">Microsoft</span> <span class="title">and</span> <span class="title">shared</span> <span class="title">with</span> <span class="title">the</span> <span class="title">community</span>.</span></span><br><span class="line"><span class="function">       <span class="title">You</span> <span class="title">can</span> <span class="title">opt</span> <span class="title">out</span> <span class="title">of</span> <span class="title">telemetry</span> <span class="title">by</span> <span class="title">setting</span> <span class="title">a</span> <span class="title">DOTNET_CLI_TELEMETRY_OPTOUT</span> <span class="title">environment</span> <span class="title">variable</span> <span class="title">to</span> 1 <span class="title">using</span> <span class="title">your</span> <span class="title">favorite</span> <span class="title">shell</span>.</span></span><br><span class="line"><span class="function">       <span class="title">You</span> <span class="title">can</span> <span class="title">read</span> <span class="title">more</span> <span class="title">about</span> .<span class="title">NET</span> <span class="title">Core</span> <span class="title">tools</span> <span class="title">telemetry</span> @ <span class="title">https</span>://<span class="title">aka.ms</span>/<span class="title">dotnet</span>-<span class="title">cli</span>-<span class="title">telemetry</span>.</span></span><br><span class="line"><span class="function">       <span class="title">Configuring</span>...</span></span><br><span class="line"><span class="function">       -------------------</span></span><br><span class="line"><span class="function">       <span class="title">A</span> <span class="title">command</span> <span class="title">is</span> <span class="title">running</span> <span class="title">to</span> <span class="title">initially</span> <span class="title">populate</span> <span class="title">your</span> <span class="title">local</span> <span class="title">package</span> <span class="title">cache</span>, <span class="title">to</span> <span class="title">improve</span> <span class="title">restore</span> <span class="title">speed</span> <span class="title">and</span> <span class="title">enable</span> <span class="title">offline</span> <span class="title">access</span>. <span class="title">This</span> <span class="title">command</span> <span class="title">will</span> <span class="title">take</span> <span class="title">up</span> <span class="title">to</span> <span class="title">a</span> <span class="title">minute</span> <span class="title">to</span> <span class="title">complete</span> <span class="title">and</span> <span class="title">will</span> <span class="title">only</span> <span class="title">happen</span> <span class="title">once</span>.</span></span><br><span class="line"><span class="function">       <span class="title">Decompressing</span> 100% 3819 <span class="title">ms</span></span></span><br><span class="line"><span class="function">       <span class="title">Expanding</span> 100% 6266 <span class="title">ms</span></span></span><br><span class="line"><span class="function">       <span class="title">log</span>  : <span class="title">Restoring</span> <span class="title">packages</span> <span class="title">for</span> /<span class="title">tmp</span>/<span class="title">staged</span>/<span class="title">app</span>/<span class="title">src</span>/<span class="title">dotnetstarter</span>/<span class="title">project.json</span>...</span></span><br><span class="line"><span class="function">       <span class="title">log</span>  : <span class="title">Writing</span> <span class="title">lock</span> <span class="title">file</span> <span class="title">to</span> <span class="title">disk</span>. <span class="title">Path</span>: /<span class="title">tmp</span>/<span class="title">staged</span>/<span class="title">app</span>/<span class="title">src</span>/<span class="title">dotnetstarter</span>/<span class="title">project.lock.json</span></span></span><br><span class="line"><span class="function">       <span class="title">log</span>  : <span class="title">src</span>/<span class="title">dotnetstarter</span>/<span class="title">project.json</span></span></span><br><span class="line"><span class="function">       <span class="title">log</span>  : <span class="title">Restore</span> <span class="title">completed</span> <span class="title">in</span> 2969<span class="title">ms</span>.</span></span><br><span class="line"><span class="function">       <span class="title">OK</span></span></span><br><span class="line"><span class="function">-----&gt; <span class="title">Saving</span> <span class="title">to</span> <span class="title">buildpack</span> <span class="title">cache</span></span></span><br><span class="line"><span class="function">       <span class="title">Copied</span> 1 <span class="title">files</span> <span class="title">from</span> /<span class="title">tmp</span>/<span class="title">staged</span>/<span class="title">app</span>/<span class="title">libunwind</span> <span class="title">to</span> /<span class="title">tmp</span>/<span class="title">cache</span></span></span><br><span class="line"><span class="function">       <span class="title">Copied</span> 203 <span class="title">files</span> <span class="title">from</span> /<span class="title">tmp</span>/<span class="title">staged</span>/<span class="title">app</span>/.<span class="title">dotnet</span> <span class="title">to</span> /<span class="title">tmp</span>/<span class="title">cache</span></span></span><br><span class="line"><span class="function">       <span class="title">Copied</span> 7552 <span class="title">files</span> <span class="title">from</span> /<span class="title">tmp</span>/<span class="title">staged</span>/<span class="title">app</span>/.<span class="title">nuget</span> <span class="title">to</span> /<span class="title">tmp</span>/<span class="title">cache</span></span></span><br><span class="line"><span class="function">       <span class="title">OK</span></span></span><br><span class="line"><span class="function"><span class="title">ASP.NET</span> <span class="title">Core</span> <span class="title">buildpack</span> <span class="title">is</span> <span class="title">done</span> <span class="title">creating</span> <span class="title">the</span> <span class="title">droplet</span></span></span><br><span class="line"><span class="function">-----&gt; <span class="title">Uploading</span> <span class="title">droplet</span> (292<span class="title">M</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">0 <span class="title">of</span> 1 <span class="title">instances</span> <span class="title">running</span>, 1 <span class="title">starting</span></span></span><br><span class="line"><span class="function">0 <span class="title">of</span> 1 <span class="title">instances</span> <span class="title">running</span>, 1 <span class="title">starting</span></span></span><br><span class="line"><span class="function">0 <span class="title">of</span> 1 <span class="title">instances</span> <span class="title">running</span>, 1 <span class="title">starting</span></span></span><br><span class="line"><span class="function">0 <span class="title">of</span> 1 <span class="title">instances</span> <span class="title">running</span>, 1 <span class="title">starting</span></span></span><br><span class="line"><span class="function">0 <span class="title">of</span> 1 <span class="title">instances</span> <span class="title">running</span>, 1 <span class="title">down</span></span></span><br><span class="line"><span class="function">0 <span class="title">of</span> 1 <span class="title">instances</span> <span class="title">running</span>, 1 <span class="title">down</span></span></span><br><span class="line"><span class="function">0 <span class="title">of</span> 1 <span class="title">instances</span> <span class="title">running</span>, 1 <span class="title">starting</span></span></span><br><span class="line"><span class="function">0 <span class="title">of</span> 1 <span class="title">instances</span> <span class="title">running</span>, 1 <span class="title">starting</span></span></span><br><span class="line"><span class="function">0 <span class="title">of</span> 1 <span class="title">instances</span> <span class="title">running</span>, 1 <span class="title">down</span></span></span><br><span class="line"><span class="function">0 <span class="title">of</span> 1 <span class="title">instances</span> <span class="title">running</span>, 1 <span class="title">down</span></span></span><br><span class="line"><span class="function">0 <span class="title">of</span> 1 <span class="title">instances</span> <span class="title">running</span>, 1 <span class="title">down</span></span></span><br><span class="line"><span class="function">0 <span class="title">of</span> 1 <span class="title">instances</span> <span class="title">running</span>, 1 <span class="title">down</span></span></span><br><span class="line"><span class="function">0 <span class="title">of</span> 1 <span class="title">instances</span> <span class="title">running</span>, 1 <span class="title">starting</span></span></span><br><span class="line"><span class="function">0 <span class="title">of</span> 1 <span class="title">instances</span> <span class="title">running</span>, 1 <span class="title">starting</span></span></span><br><span class="line"><span class="function">0 <span class="title">of</span> 1 <span class="title">instances</span> <span class="title">running</span>, 1 <span class="title">starting</span></span></span><br><span class="line"><span class="function">0 <span class="title">of</span> 1 <span class="title">instances</span> <span class="title">running</span>, 1 <span class="title">down</span></span></span><br><span class="line"><span class="function">0 <span class="title">of</span> 1 <span class="title">instances</span> <span class="title">running</span>, 1 <span class="title">down</span></span></span><br><span class="line"><span class="function"><span class="title">Could</span> <span class="title">not</span> <span class="title">fetch</span> <span class="title">instance</span> <span class="title">count</span>: <span class="title">Server</span> <span class="title">error</span>, <span class="title">status</span> <span class="title">code</span>: 400, <span class="title">error</span> <span class="title">code</span>: 170002, <span class="title">message</span>: <span class="title">App</span> <span class="title">has</span> <span class="title">not</span> <span class="title">finished</span> <span class="title">staging</span></span></span><br><span class="line"><span class="function"><span class="title">Could</span> <span class="title">not</span> <span class="title">fetch</span> <span class="title">instance</span> <span class="title">count</span>: <span class="title">Server</span> <span class="title">error</span>, <span class="title">status</span> <span class="title">code</span>: 400, <span class="title">error</span> <span class="title">code</span>: 170002, <span class="title">message</span>: <span class="title">App</span> <span class="title">has</span> <span class="title">not</span> <span class="title">finished</span> <span class="title">staging</span></span></span><br><span class="line"><span class="function"><span class="title">Could</span> <span class="title">not</span> <span class="title">fetch</span> <span class="title">instance</span> <span class="title">count</span>: <span class="title">Server</span> <span class="title">error</span>, <span class="title">status</span> <span class="title">code</span>: 400, <span class="title">error</span> <span class="title">code</span>: 170002, <span class="title">message</span>: <span class="title">App</span> <span class="title">has</span> <span class="title">not</span> <span class="title">finished</span> <span class="title">staging</span></span></span><br><span class="line"><span class="function"><span class="title">Could</span> <span class="title">not</span> <span class="title">fetch</span> <span class="title">instance</span> <span class="title">count</span>: <span class="title">Server</span> <span class="title">error</span>, <span class="title">status</span> <span class="title">code</span>: 400, <span class="title">error</span> <span class="title">code</span>: 170002, <span class="title">message</span>: <span class="title">App</span> <span class="title">has</span> <span class="title">not</span> <span class="title">finished</span> <span class="title">staging</span></span></span><br><span class="line"><span class="function"><span class="title">Could</span> <span class="title">not</span> <span class="title">fetch</span> <span class="title">instance</span> <span class="title">count</span>: <span class="title">Server</span> <span class="title">error</span>, <span class="title">status</span> <span class="title">code</span>: 400, <span class="title">error</span> <span class="title">code</span>: 170002, <span class="title">message</span>: <span class="title">App</span> <span class="title">has</span> <span class="title">not</span> <span class="title">finished</span> <span class="title">staging</span></span></span><br></pre></td></tr></table></figure><p>Installing Dotnet CLI dotnet version: 1.0.0-preview2-003121とあり、OKと言っているので、更新は成功したのでしょう。<br>でも、その後アプリを再起動しても起動に失敗しています。</p><p>ダッシュボードを見ると、<br><a href="../../../../public/2016/08/img_57ade144b39bd.png"><img src="../../../../public/2016/08/img_57ade144b39bd.png"></a></p><p>一瞬Sad Macに見えた</p><p>となって、ASP.NET Coreの名前が消えてしまいました。</p><p>どうも環境を壊してしまった模様。</p><p>とりあえず、bluemixの環境を変えるのではなく、ローカルを合わせるという方針で開発をしていこうと思います。<br>(そもそもWindows 7上で開発する意味もあまりない気がしますが….)</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>非常に残念な結果になりました。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> .NETでIBM Bluemixを試してみる </category>
          
          <category> paas </category>
          
          <category> IBM Bluemix </category>
          
          <category> PaaS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その13 CodeLensを無効にする</title>
      <link href="2016/08/21/1603/"/>
      <url>2016/08/21/1603/</url>
      
        <content type="html"><![CDATA[<h1 id="正直邪魔"><a href="#正直邪魔" class="headerlink" title="正直邪魔"></a>正直邪魔</h1><p>Visual Studioには<strong>CodeLens</strong>と呼ばれる、ソースコード上で、変更履歴を確認できる機能があります。<br>当初、この機能は Visual Studio 2013 Ultimateから導入され、2015では Professional からも利用できるようになりました。</p><p>最初は、すげー、って思ったんですけどね。いや、いい機能だとは思います。</p><p>が、この機能が有効だと、ソースコードをぱっと見たとき、1行空行があるのかどうか誤認することが多くなり、空行を重視する私のスタイルにおいて邪魔以外の何者でもありません。<br>なので、これを無効にしたのでメモ。<br>方法は、オプション画面の下記設定から。</p><p><a href="../../../../public/2016/08/img_57b8a4e313b42.png"><img src="../../../../public/2016/08/img_57b8a4e313b42.png"></a></p><p>オプション画面</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>正直、履歴の検索ってそこまでしないんですよね。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> Visual Studio </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでIBM Bluemixを試してみる 第3回</title>
      <link href="2016/08/17/1575/"/>
      <url>2016/08/17/1575/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/08/17/1547">前回</a>はアプリを動かしましたが、コミットによって動かなくなりました。</p><a id="more"></a><h1 id="問題の切り分け"><a href="#問題の切り分け" class="headerlink" title="問題の切り分け"></a>問題の切り分け</h1><p>前回は、index.htmlとglobal.jsonを書き換えました。<br>index.htmlはHello Worldという文字列を変更しただけなので、これが動かなくなった原因とは思えません。<br>となると、global.jsonに対して適用した、.NET Core SDKの変更が問題に見えます。</p><p>というわけで、global.jsonの変更だけを元に戻してコミット、プッシュし、再度Bluemix上のアプリを確認します。</p><p><a href="../../../../public/2016/08/img_57adb7afab4e6.png"><img src="../../../../public/2016/08/img_57adb7afab4e6.png"></a><br>It works!!</p><p>問題ないです。<br>これで、問題が.NET Core SDKのバージョンが問題になっていることは確定です。</p><h1 id="NET-Coreの変更"><a href="#NET-Coreの変更" class="headerlink" title=".NET Coreの変更"></a>.NET Coreの変更</h1><p>.NET Core SDKを1.0.0-preview1-002702から1.0.0-preview2-003121に変更したことが問題なのはわかりました。<br>実行環境に、1.0.0-preview2-003121がインストールされていないのが問題ならば選択肢は2つです。</p><ul><li>ローカル環境の.NET Core SDKのバージョンをBluemixに合わせる</li><li>Bluemixの.NET Core SDKのバージョンをローカル環境に合わせる</li></ul><p>が、前者はありえません。<br>.NET Core SDKの最新版が出るたびに、指をくわえて待つというのはあまりにもチキンです。</p><p>なので、ここはBluemixの環境を変更します。</p><p>Google先生に聞いてみても、芳しい結果が得られませんでしたが、公式ドキュメントの<a href="https://console.ng.bluemix.net/docs/whatsnew/index.html">What’s new in Bluemix</a>に気になる記述が。</p><blockquote><p>Upgrade to the ASP.NET Core buildpack New as of: 12 July 2016 This buildpack makes the .NET Core V1.0 and .NET Core SDK V1.0 Preview 2 available in Bluemix. Existing RC2 apps will continue to work with this buildpack as long as you specify the correct SDK version in your global.json file.</p></blockquote><p>buildpackなるものが.NET Core V1.0とPreview2で利用可能になった、と言っています。<br>でも、<strong>1.0.0-preview2-003121</strong>にしたのに動かないじゃん….</p><h1 id="What-is-buildpack"><a href="#What-is-buildpack" class="headerlink" title="What is buildpack?"></a>What is buildpack?</h1><p>buildpackとは、<a href="http://ipcrm.hatenablog.com/entry/2014/04/27/212642">まいち様</a>によれば、</p><blockquote><p>実行環境を構築するときの振る舞いを指定するもの。</p></blockquote><p>とあります。<br>Cloud Foundryの公式ドキュメントで<a href="http://docs.cloudfoundry.org/buildpacks/">buildpackの説明</a>を見ると</p><blockquote><p>Buildpacks provide framework and runtime support for your applications. Buildpacks typically examine user-provided artifacts to determine what dependencies to download and how to configure applications to communicate with bound services.</p></blockquote><p>Buildpackはアプリケーションのためのフレームワークと実行環境のサポートを提供します。通常、Buildpackは、ダウンロードのための何に依存しているかを決定するため、境界のサービス群とやりとりするためにアプリケーションをどのように設定するか、ユーザーが提供するアーティファクト(訳注:おそらく開発者が作成したアプリや成果物全般)を調査します。</p><p>とのこと。一言で言うなら、ランタイムと私は理解しました。</p><p>なので、このbuildpackを更新すれば動く、と考えました。<br>公式でPreview2のbuildpackが利用可能になった、というのはbuildpackが登場しただけで、アプリの実行環境のbuildpackは最新ではないよ、ということなのでしょう。</p><h1 id="buildpackを更新"><a href="#buildpackを更新" class="headerlink" title="buildpackを更新"></a>buildpackを更新</h1><p>.NET Coreのbuildpackはgithubで開発されていました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/cloudfoundry-community/dotnet-core-buildpack" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars3.githubusercontent.com/u/621746?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">cloudfoundry/dotnet-core-buildpack</div><div class="hbc-url">https://github.com/cloudfoundry-community/dotnet-core-buildpack</div><div class="hbc-description">Cloud Foundry buildpack for .NET Core on Linux. Contribute to cloudfoundry/dotnet-core-buildpack development by creating an account on GitHu…</div></div></div></div></a></div></div><p>README.mdに使い方(Usage)が書いてあります。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cf push my_app -b https://github.com/cloudfoundry-community/dotnet-core-buildpack.git</span><br></pre></td></tr></table></figure><p>どうみても、<strong>cf</strong>って以前書いたCloud Foundry コマンドラインインターフェース (以下 <strong>CF CLI</strong>)です。<br>これを使えば、最新のbuildpackをgithubから引っ張ってきて更新してくれそうです。</p><p>なので、まずGithubからCF CLIをダウンロードします。これも前回書いたようにGithubにあります。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/cloudfoundry/cli" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars3.githubusercontent.com/u/621746?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">cloudfoundry/cli</div><div class="hbc-url">https://github.com/cloudfoundry/cli</div><div class="hbc-description">The official command line client for Cloud Foundry - cloudfoundry/cli</div></div></div></div></a></div></div><p>zipとインストーラがありますが、インストーラをお勧めします。<br>インストールはインストール先を指定するだけなので、省略。</p><p>インストール完了後、cfコマンドへのパスが通ります。<br>前述のcf.exeによるbuildpackの更新方法</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cf push &lt;自分のアプリ&gt; -b https://github.com/cloudfoundry-community/dotnet-core-buildpack.git</span><br></pre></td></tr></table></figure><p>を見ると、<strong>&lt;自分のアプリ&gt;</strong> が何を指すのかわかりません。<br>gitでクローンしたローカルフォルダなのか、Bluemix上のアプリのurlなのか。<br>なので、CF CLIを使った開発を見てみます。ダッシュボード上の「コーディングの開始」をクリックします。</p><p><a href="../../../../public/2016/08/img_57adc23ec7de3.png"><img src="../../../../public/2016/08/img_57adc23ec7de3.png"></a></p><p>遷移先で、CF CLIの使い方が書いてあります。</p><p><a href="../../../../public/2016/08/img_57adc32f02da6.png"><img src="../../../../public/2016/08/img_57adc32f02da6.png"></a></p><p>CF CLIの他に<strong>Bluemix CLI</strong>なるものが必要な様子。</p><blockquote><p>Bluemix CLI は、コマンド・ライン・インターフェースを介して、Bluemix 内のアプリケーション、仮想サーバー、コンテナー、およびその他のコンポーネントと対話するための一元化された手法を提供します。<br>また、特定の計算タイプと対話するときにも、Cloud Foundry、Docker、および OpenStack コミュニティーからコマンド・ライン・ツールを利用します。<br>Bluemix CLI は、これらのコミュニティー・ツールが使用されている場合の環境設定の操作に役立ちます。</p></blockquote><p>なので、上記のコミュニティツール、この場合CF CLIがBluemixと対話するために必要な環境設定のサポートが必要なのでしょう。認証情報とか。<br>このツールをダウンロードします。インストーラしかないです。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>長くなったので次回。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> .NETでIBM Bluemixを試してみる </category>
          
          <category> paas </category>
          
          <category> IBM Bluemix </category>
          
          <category> PaaS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでIBM Bluemixを試してみる 第2回</title>
      <link href="2016/08/17/1547/"/>
      <url>2016/08/17/1547/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/08/15/1524">前回</a>はアプリの下地を作りました。</p><a id="more"></a><h1 id="開発の方法"><a href="#開発の方法" class="headerlink" title="開発の方法"></a>開発の方法</h1><p>Bluemixでの開発は下記の2つが提供されています。</p><ul><li>CF コマンド・ライン・インターフェース</li><li>GIT</li></ul><h3 id="CF-コマンド・ライン・インターフェース"><a href="#CF-コマンド・ライン・インターフェース" class="headerlink" title="CF コマンド・ライン・インターフェース"></a>CF コマンド・ライン・インターフェース</h3><p>Cloud Foundry コマンド・ライン・インターフェースの略のようです。<br>どうも、Githubで開発されているツールの模様。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/cloudfoundry/cli/releases" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars3.githubusercontent.com/u/621746?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">Releases · cloudfoundry/cli</div><div class="hbc-url">https://github.com/cloudfoundry/cli/releases</div><div class="hbc-description">The official command line client for Cloud Foundry - cloudfoundry/cli</div></div></div></div></a></div></div><p>Cloud Foundryは、オープンソースのPaaSソフトウェアとのこと。詳しくは<a href="https://ja.wikipedia.org/wiki/Cloud_Foundry">Wiki</a>で。</p><p>ローカルでこのツールを使って、編集したコードをアップし、デプロイする模様。</p><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>Gitを使って開発をします。<br>説明を見ると、Web上のエディターで編集し、開発を進めていくスタイルのように見えます。</p><p>でも、せっかくASP.NETを選択したので、Visual Studioを使いローカルで開発したいです。Visual StudioならGitも統合されているので。</p><h1 id="Gitを使う"><a href="#Gitを使う" class="headerlink" title="Gitを使う"></a>Gitを使う</h1><p>というわけでGitを使うための設定です。</p><ol><li>ダッシュボードに移動し、アプリケーション一覧から、前回作成したアプリをクリックします。</li></ol><p><a href="../../../../public/2016/08/img_57acad12960fa.png"><img src="../../../../public/2016/08/img_57acad12960fa.png"></a></p><ol start="2"><li>画面右側にある「GITの追加」をクリックします (ここではタイミング的に表示されていませんが..)</li></ol><p><a href="../../../../public/2016/08/img_57acadbc8829b.png"><img src="../../../../public/2016/08/img_57acadbc8829b.png"></a></p><ol start="3"><li>Gitリポジトリーを作成します。ここの名前はユニークである必要があります。また、この名前はgitリポジトリのurlに当然使われます。例えば、<a href="https://hub.jazz.net/git/">https://hub.jazz.net/git/</a>&lt;ここの名前&gt;/&lt;アプリの名前&gt;</li></ol><p><a href="../../../../public/2016/08/img_57acade764c0e.png"><img src="../../../../public/2016/08/img_57acade764c0e.png"></a><br>ご利用条件への同意のチェックは必須</p><ol start="4"><li>作成された?</li></ol><p><a href="../../../../public/2016/08/img_57acae7baa93a.png"><img src="../../../../public/2016/08/img_57acae7baa93a.png"></a></p><p>OK?</p><ol start="5"><li>無慈悲なエラー</li></ol><p><a href="../../../../public/2016/08/img_57acaead37d44.png"><img src="../../../../public/2016/08/img_57acaead37d44.png"></a><br>どういうことだってばよ…</p><ol start="6"><li>元の画面に戻ったので、もう一度「GITの追加」をクリック。チェックは外して「続行」をクリックしました。</li></ol><p><a href="../../../../public/2016/08/img_57acaee99034e.png"><img src="../../../../public/2016/08/img_57acaee99034e.png"></a><br>チェックの意味はわかりません</p><ol start="7"><li>今度は成功</li></ol><p><a href="../../../../public/2016/08/img_57acaf27ab8cf.png"><img src="../../../../public/2016/08/img_57acaf27ab8cf.png"></a><br>本当に大丈夫?</p><ol start="8"><li>右上にGitリポジトリのurlが追加されたました</li></ol><p><a href="../../../../public/2016/08/img_57acafc0580e0.png"><img src="../../../../public/2016/08/img_57acafc0580e0.png"></a></p><p>できたー</p><h1 id="Visual-Studioで編集する"><a href="#Visual-Studioで編集する" class="headerlink" title="Visual Studioで編集する"></a>Visual Studioで編集する</h1><p>Gitリポジトリができたので、ローカルにクローンして、コードを編集してみます。<br>クローンする際、認証を求められますが、当然これはIBW BluemixのユーザーIDとパスワードです。</p><p>クローンすると、下記のような構成でクローンが完了します。</p><p><a href="../../../../public/2016/08/img_57acb1f86ffad.png"><img src="../../../../public/2016/08/img_57acb1f86ffad.png"></a></p><p><strong>dotnetstarter.sln</strong>というのがあるので、ダブルクリックして、Visual Studioを起動してみましょう。</p><p>が、なんか警告が….<br><a href="../../../../public/2016/08/img_57acb3f147341.png"><img src="../../../../public/2016/08/img_57acb3f147341.png"></a></p><p>ふむふむ。SDKが必要なのね。じゃぁ「はい」。</p><p><a href="../../../../public/2016/08/img_57acb429e75cd.png"><img src="../../../../public/2016/08/img_57acb429e75cd.png"></a></p><p>またエラーだってばよ</p><p>どうしろと。<br>わからないので、Google先生に聞いてみる。<br><strong>dnx-clr-win-x86.1.0.0-preview1-002702</strong>がキーワードだが、日本語で検索にヒットしない…..</p><p>ということで、英語に変えたら、Stackoverflowで解決策が。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://stackoverflow.com/questions/37931631/dnx-sdk-version-dnx-clr-win-x86-1-0-0-preview1-002702-failed-to-install" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=stackoverflow.com"></img><div class="hbc-site-name">Stack Overflow</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded"></img></div><div class="hbc-text"><div class="hbc-title">DNX SDK version &#39;dnx-clr-win-x86.1.0.0-preview1-002702&#39; failed to install</div><div class="hbc-url">http://stackoverflow.com/questions/37931631/dnx-sdk-version-dnx-clr-win-x86-1-0-0-preview1-002702-failed-to-install</div><div class="hbc-description">When I tried to open a .Net core RC2 migrated project in my local, i get the following error message ---------------------------Microsoft…</div></div></div></div></a></div></div><p>曰く</p><blockquote><p>This error is message usually an indicator that a previous installation (.NET Core rc1 or some of the rc2 nightlies) of .NET Core Tooling/Framework wasn’t uninstalled. To validate it, go to the “Control Panel” &gt; “Programs and features” and search for “.NET Core” or “Microsoft .NET Core” and uninstall any previous version. Then install the correct .NET Core runtime and tooling version for RC2 and it should work.</p></blockquote><p>とのこと。<br>つまり、.NET Coreの古いバージョンが入ってるから、コントロールパネルの<strong>プログラムと機能</strong>で、**.NET Core<strong>または</strong>Microsoft .NET Core**を探して、アンインストール。その後、正しいバージョンをインストールすれば動く、とのこと。<br>が、そんなアイテムは見つからない。</p><p>もう少し調べると、tnakamura様が<a href="http://tnakamura.hatenablog.com/entry/2015/07/26/build-an-aspnet5-project-on-windows7">Visual Studio 2015 の ASP.NET 5 プロジェクトを Windows7 でビルドするには PowerShell 3.0 以上が必要だった</a>というそのものズバリな記事を公開していました。<br>記事に従って、関連コンポーネントをインストールし、Windows再起動後、ソリューションを開き直すと、無事に最初のダイアログが表示された後、Visual Studioが開き</p><p>ませんでした。<br>まだ何かが足りないので、調べていくと、そもそも.NET coreがインストールされていないのでは？ということに気づき、<a href="https://go.microsoft.com/fwlink/?LinkId=817245">.NET Core Tooling Preview 2 for Visual Studio 2015</a>をインストールしました。</p><p>インストール後、再起動して、再度Visual Studioを開くと、先ほどのダイアログは表示されず<br><a href="../../../../public/2016/08/img_57acf2bad3182.png"><img src="../../../../public/2016/08/img_57acf2bad3182.png"></a><br>すこし違うエラー</p><p>というダイアログが。<br>内容は、.NET Core SDK version 1.0.0-preview1-002702がインストールされていないか、C:\Program Files\dotnetの配下に見つからない、という内容です。<br>また、global.jsonに記載された.NET Core SDKをインストールするか、global.jsonの記載内容を更新するべき、とも書いてあります。</p><p>インストールは済んだはずなので、global.jsonの内容を書き換えます。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;projects&quot;: [ &quot;src&quot; ],</span><br><span class="line">    &quot;sdk&quot;: &#123;</span><br><span class="line"><span class="deletion">-        &quot;version&quot;: &quot;1.0.0-preview1-002702&quot;</span></span><br><span class="line"><span class="addition">+        &quot;version&quot;: &quot;1.0.0-preview2-003121&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>にします。versionの文字列は、コマンドプロンプトから</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet --version</span><br></pre></td></tr></table></figure><p>と入力することで、</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">dotnet</span> --<span class="title">version</span></span></span><br><span class="line"><span class="function">1.0.0-<span class="title">preview2</span>-003121</span></span><br></pre></td></tr></table></figure><p>のような文字列を取得できるので、それをそのまま貼り付けるだけです。</p><p>これで、エラーがなくなりビルドが通ります。</p><h1 id="コミットしてみる"><a href="#コミットしてみる" class="headerlink" title="コミットしてみる"></a>コミットしてみる</h1><p>とりあえず、Blumix側でアプリを動かしてみます。<br>ダッシュボード上で「経路」と記されているurlをクリックすると、Webページが開きます。</p><p><a href="../../../../public/2016/08/img_57acf6711621e.png"><img src="../../../../public/2016/08/img_57acf6711621e.png"></a><br>Hello World</p><p>これを少し書き換えます。<br>index.htmlの「Hello World」を「こんにちわ」に変更して、コミット、プッシュを行います。</p><p>その後、Bluemixのダッシュボードを見ると、アプリが自動的にデプロイを開始し、再起動し始めました。<br>しかしながら、アプリが停止しました。</p><p><a href="../../../../public/2016/08/img_57acf7db18541.png"><img src="../../../../public/2016/08/img_57acf7db18541.png"></a></p><p>ソースの変更点は、index.htmlとproject.jsonだけです。<br>メッセージを日本語に変えたくらいで落ちるとは思えないので、.NET Core SDKのバージョンがまずいように見えます。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>動く段階まで来ましたが、ソースの変更で動かなくなりました。次回修正。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> .NETでIBM Bluemixを試してみる </category>
          
          <category> paas </category>
          
          <category> IBM Bluemix </category>
          
          <category> PaaS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでIBM Bluemixを試してみる 第1回</title>
      <link href="2016/08/15/1524/"/>
      <url>2016/08/15/1524/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/08/14/1512">前回</a>はアカウントを作りました。</p><a id="more"></a><h1 id="お金の心配"><a href="#お金の心配" class="headerlink" title="お金の心配"></a>お金の心配</h1><p>無料で利用できると言っても、それは一定の制限の中です。<br>IBW Bluemixの場合、2016年8月の時点で、<a href="http://www.ibm.com/developerworks/jp/bluemix/credit.html">http://www.ibm.com/developerworks/jp/bluemix/credit.html</a> によれば、以下の条件なら無料で利用できます。</p><blockquote><p>ランタイムは、IBM 提供のランタイムごとに 1ヶ月 375GB 時間まで無料。<br>たとえば 512MB の Java アプリ 1 インスタンスを 1ヶ月使用すると、0.5GB x 31日 x 24時間 = 372GB 時間となり、無料枠の範囲内で使用できます。<br>(IBM以外が提供するランタイムの場合、全ランタイムのGB時間の合計で 375GB 時間まで無料）</p></blockquote><p>とりあえず、お勉強程度なら、そんなメモリを大量に必要とするアプリでもなければ、無料で遊べますよ、ってことです。<br>流石、IBM、太っ腹です。</p><h1 id="初期設定"><a href="#初期設定" class="headerlink" title="初期設定"></a>初期設定</h1><p>前回ログインした直後に初期設定を促されたので、それを済ませましょう。</p><ol><li>組織の作成。組織名は入力必須。組織名は世界中で一つだけの模様。</li></ol><p><a href="../../../../public/2016/08/img_57ac984c2b60b.png"><img src="../../../../public/2016/08/img_57ac984c2b60b.png"></a><br>シドニー、英国、米国南部しかないです</p><ol start="2"><li>スペースの作成。特に名前は気にする必要はなさそう。</li></ol><p><a href="../../../../public/2016/08/img_57ac990fec035.png"><img src="../../../../public/2016/08/img_57ac990fec035.png"></a><br>名前は適当</p><ol start="3"><li>準備完了<br><a href="../../../../public/2016/08/img_57ac998b964f4.png"><img src="../../../../public/2016/08/img_57ac998b964f4.png"></a><br>YES!!</li></ol><h1 id="アプリの用意"><a href="#アプリの用意" class="headerlink" title="アプリの用意"></a>アプリの用意</h1><p>初期設定が終わったので、次はアプリの用意をします。</p><ol><li>新しくアプリを作成します。「アプリの作成」をクリック </li></ol><p><a href="../../../../public/2016/08/img_57ac9aaa536a9.png"><img src="../../../../public/2016/08/img_57ac9aaa536a9.png"></a><br>「アプリの作成」をクリック</p><ol start="2"><li>「WEB」をクリック </li></ol><p><a href="../../../../public/2016/08/img_57ac9b885bb75.png"><img src="../../../../public/2016/08/img_57ac9b885bb75.png"></a><br>「WEB」をクリック</p><ol start="3"><li>「ASP.NET Core」をクリックし、続行をクリック </li></ol><p><a href="../../../../public/2016/08/img_57ac9bcfded10.png"><img src="../../../../public/2016/08/img_57ac9bcfded10.png"></a><br>「ASP.NET Core」をクリック</p><ol start="4"><li>お好みのアプリ名を入力し、「完了」をクリック。ただし、ここも世界中で唯一のアプリ名である必要があります。</li></ol><p><a href="../../../../public/2016/08/img_57ac9c00b39a1.png"><img src="../../../../public/2016/08/img_57ac9c00b39a1.png"></a><br>アプリ名を入力</p><p>5．ありがちなアプリ名を入力した場合 </p><p><a href="../../../../public/2016/08/img_57ac9cfc76569.png"><img src="../../../../public/2016/08/img_57ac9cfc76569.png"></a><br>エラーの意味がわかりにくすぎます</p><ol start="6"><li>作成に成功した後、Bluemix側で作業中になります。1分くらいがかかります。</li></ol><p><a href="../../../../public/2016/08/img_57ac9d4daef84.png"><img src="../../../../public/2016/08/img_57ac9d4daef84.png"></a><br>ステージング中</p><ol start="7"><li>「アプリは実行中」に変化しました。</li></ol><p><a href="../../../../public/2016/08/img_57ac9dad94b73.png"><img src="../../../../public/2016/08/img_57ac9dad94b73.png"></a><br>完了</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>アプリの下地ができあがりました。次こそコーディングを….</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> .NETでIBM Bluemixを試してみる </category>
          
          <category> paas </category>
          
          <category> IBM Bluemix </category>
          
          <category> PaaS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでIBM Bluemixを試してみる 第0回</title>
      <link href="2016/08/14/1512/"/>
      <url>2016/08/14/1512/</url>
      
        <content type="html"><![CDATA[<p>Big Blueですね。</p><a id="more"></a><h1 id="なんでIBM-Bluemix"><a href="#なんでIBM-Bluemix" class="headerlink" title="なんでIBM Bluemix?"></a>なんでIBM Bluemix?</h1><p>急にWebアプリケーションが作ってみたくなったからです。<br>ただ、Webアプリを作る、ってなるとサーバー用意したり、ドメインがー、とか色々面倒なので、クラウドに任せようとなりました。<br>ならどうして<strong>Microsoft Azure</strong>ではないのか？というと、Azureの記事は腐るほどあって、IBW Bluemixはあまり情報が無いから、面白そうかな、って思っただけです。</p><p>ちなみに、Bluemixを検討する前はHerokuを考えていましたが、無料だと18時間連続稼働、30分放置でスリープとか、何だか残念だったからです。</p><p>ここは、Big Blue※こと、超大企業IBM様のお力を見せてもらおうか、というところです。</p><p><strong>※コンピュータ会社IBMの愛称。同社のロゴが青であり、世界最大のコンピュータ関連企業であることから。</strong></p><h1 id="What’t-is-IBM-Bluemix"><a href="#What’t-is-IBM-Bluemix" class="headerlink" title="What’t is IBM Bluemix?"></a>What’t is IBM Bluemix?</h1><h2 id="アカウント作成"><a href="#アカウント作成" class="headerlink" title="アカウント作成"></a>アカウント作成</h2><p>何はともあれ、アカウントがないと話になりません。</p><ol><li>まずは <a href="https://console.ng.bluemix.net/">https://console.ng.bluemix.net/</a> へ移動 </li></ol><p><a href="../../../../public/2016/08/img_57ac91500f0e4.png"><img src="../../../../public/2016/08/img_57ac91500f0e4.png"></a><br>トップページで、「無料で開始」をクリック</p><ol start="2"><li>登録情報を入力。名前は漢字でなくてもOKでした。</li></ol><p><a href="../../../../public/2016/08/img_57ac91babce19.png"><img src="../../../../public/2016/08/img_57ac91babce19.png"></a><br>無料期間中はクレジットカードは不要なので安心</p><ol start="3"><li>完了後、確認メールが飛びますので、メールボックスを確認しましょう </li></ol><p><a href="../../../../public/2016/08/img_57ac91faa0ced.png"><img src="../../../../public/2016/08/img_57ac91faa0ced.png"></a><br>メールをチェック</p><ol start="4"><li>ちなみにメールはこんな感じ </li></ol><p><a href="../../../../public/2016/08/img_57ac92772f861.png"><img src="../../../../public/2016/08/img_57ac92772f861.png"></a><br>メールをチェック</p><ol start="5"><li>確認できたら、ログインします。<a href="https://new-console.ng.bluemix.net/">https://new-console.ng.bluemix.net/</a> へ移動 </li></ol><p><a href="../../../../public/2016/08/img_57ac931640224.png"><img src="../../../../public/2016/08/img_57ac931640224.png"></a><br>ログインメニューをクリック</p><ol start="6"><li>メールアドレスとパスワードを入力してログイン </li></ol><p><a href="../../../../public/2016/08/img_57ac937b021cf.png"><img src="../../../../public/2016/08/img_57ac937b021cf.png"></a><br>IBMidはメールアドレスです。というか「IBMid」って見た目が…</p><ol start="7"><li>ログイン完了しましたね？ </li></ol><p><a href="../../../../public/2016/08/img_57ac943e41981.png"><img src="../../../../public/2016/08/img_57ac943e41981.png"></a><br>おめでとうございます</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>アカウントだけ作りました。ASP.NETが使えると言うことなので、それを動かしてみたいと思います。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> .NETでIBM Bluemixを試してみる </category>
          
          <category> paas </category>
          
          <category> IBM Bluemix </category>
          
          <category> PaaS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その12 VisualStateManagerでPath.Dataを変更する</title>
      <link href="2016/08/13/1599/"/>
      <url>2016/08/13/1599/</url>
      
        <content type="html"><![CDATA[<h1 id="Path-Dataを直接変更"><a href="#Path-Dataを直接変更" class="headerlink" title="Path.Dataを直接変更"></a>Path.Dataを直接変更</h1><p>掲題の通りですが、VisualStateManagerでボタンのアイコンを変えようと下記のように指定すると例外を投げて落ちます。<br>アイコンの変更をしたいからと、ボタンの表示を切り替えてアイコンを変更するように逃げようとした時、ぶつかった問題です。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;VisualState x:Name&#x3D;&quot;Movie&quot;&gt;</span><br><span class="line">    &lt;Storyboard&gt;</span><br><span class="line">        &lt;ObjectAnimationUsingKeyFrames Storyboard.TargetName&#x3D;&quot;_MovieFileOpenButtonIcon&quot; Storyboard.TargetProperty&#x3D;&quot;Data&quot;&gt;</span><br><span class="line">            &lt;DiscreteObjectKeyFrame KeyTime&#x3D;&quot;00:00:00&quot; Value&#x3D;&quot;M7.9999993,48 L7.9999993,56.75 16.499999,56.75 16.499999,48 z M7.9999993,31.5 L7.9999993,41.25 16.499999,41.25 16.499999,31.5 z M7.9999993,15.25 L7.9999993,24.75 16.499999,24.75 16.499999,15.25 z M56.999999,0.5 L64.499999,0.5 64.499999,72 56.999999,72 z M0.5,0.5 L7.9999993,0.5 7.9999993,8.5 16.499999,8.5 16.499999,0.5 47.249999,0.5 47.249999,8.5 56.249999,8.5 56.249999,15.25 47.249999,15.25 47.249999,24.75 56.249999,24.75 56.249999,31.5 47.249999,31.5 47.249999,41.25 56.249999,41.25 56.249999,48 47.249999,48 47.249999,56.75 56.249999,56.75 56.249999,63.5 47.249999,63.5 47.249999,72 16.499999,72 &amp;#10;16.499999,63.5 7.9999993,63.5 7.9999993,72 0.5,72 z&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;ObjectAnimationUsingKeyFrames&gt;</span><br><span class="line">    &lt;&#x2F;Storyboard&gt;</span><br><span class="line">&lt;&#x2F;VisualState&gt;</span><br></pre></td></tr></table></figure><p>正直、上の方がストレートなのですが、文字列を適切に変換するように指示がないので落ちるから仕方ありません。<br>正しくは、</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;VisualState x:Name&#x3D;&quot;Movie&quot;&gt;</span><br><span class="line">    &lt;Storyboard&gt;</span><br><span class="line">        &lt;ObjectAnimationUsingKeyFrames Storyboard.TargetName&#x3D;&quot;_MovieFileOpenButtonIcon&quot; Storyboard.TargetProperty&#x3D;&quot;Data&quot;&gt;</span><br><span class="line">            &lt;DiscreteObjectKeyFrame KeyTime&#x3D;&quot;00:00:00&quot;&gt;</span><br><span class="line">                &lt;DiscreteObjectKeyFrame.Value&gt;</span><br><span class="line">                    &lt;Geometry&gt;M7.9999993,48 L7.9999993,56.75 16.499999,56.75 16.499999,48 z M7.9999993,31.5 L7.9999993,41.25 16.499999,41.25 16.499999,31.5 z M7.9999993,15.25 L7.9999993,24.75 16.499999,24.75 16.499999,15.25 z M56.999999,0.5 L64.499999,0.5 64.499999,72 56.999999,72 z M0.5,0.5 L7.9999993,0.5 7.9999993,8.5 16.499999,8.5 16.499999,0.5 47.249999,0.5 47.249999,8.5 56.249999,8.5 56.249999,15.25 47.249999,15.25 47.249999,24.75 56.249999,24.75 56.249999,31.5 47.249999,31.5 47.249999,41.25 56.249999,41.25 56.249999,48 47.249999,48 47.249999,56.75 56.249999,56.75 56.249999,63.5 47.249999,63.5 47.249999,72 16.499999,72 &amp;#10;16.499999,63.5 7.9999993,63.5 7.9999993,72 0.5,72 z&lt;&#x2F;Geometry&gt;</span><br><span class="line">                &lt;&#x2F;DiscreteObjectKeyFrame.Value&gt;</span><br><span class="line">            &lt;&#x2F;DiscreteObjectKeyFrame&gt;</span><br><span class="line">        &lt;&#x2F;ObjectAnimationUsingKeyFrames&gt;</span><br><span class="line">    &lt;&#x2F;Storyboard&gt;</span><br><span class="line">&lt;&#x2F;VisualState&gt;</span><br></pre></td></tr></table></figure><p>になります。<br>このとき、<strong>KeyTime</strong>の指定を忘れるとアイコンの変更にタイムラグが発生します。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>VisualStateなんて、そんな頻繁に使わないから忘れます。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> Windows Presentation Foundation </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その11 GPUのメモリ使用量を可視化する</title>
      <link href="2016/08/13/1597/"/>
      <url>2016/08/13/1597/</url>
      
        <content type="html"><![CDATA[<p>GeForce GTX 1080が欲しいです。</p><a id="more"></a><h1 id="Caffeでどのくらいメモリを使っているのか？"><a href="#Caffeでどのくらいメモリを使っているのか？" class="headerlink" title="Caffeでどのくらいメモリを使っているのか？"></a>Caffeでどのくらいメモリを使っているのか？</h1><p>ことの発端は、Caffeで学習開始時にCPUのメモリが足りなくて落ちてしまったこと。<br>個人的に、Caffeのログを見る限りそこまで大量のメモリを使っていない、と思っていたのですが、この際メモリの使用量を可視化してみることに。</p><p>GPUの状態は、<strong>C:\Program Files\NVIDIA Corporation\NVSMI\nvidia-smi.exe</strong>を実行するとわかります。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">WINDOWS</span>\<span class="title">system32</span>&gt;&quot;<span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">NVIDIA</span> <span class="title">Corporation</span>\<span class="title">NVSMI</span>\<span class="title">nvidia</span>-<span class="title">smi.exe</span>&quot;</span></span><br><span class="line"><span class="function"><span class="title">Thu</span> <span class="title">Aug</span> 11 20:41:43 2016</span></span><br><span class="line"><span class="function">+-----------------------------------------------------------------------------+</span></span><br><span class="line"><span class="function">| <span class="title">NVIDIA</span>-<span class="title">SMI</span> 368.39                 <span class="title">Driver</span> <span class="title">Version</span>: 368.39                    |</span></span><br><span class="line"><span class="function">|-------------------------------+----------------------+----------------------+</span></span><br><span class="line"><span class="function">| <span class="title">GPU</span>  <span class="title">Name</span>            <span class="title">TCC</span>/<span class="title">WDDM</span> | <span class="title">Bus</span>-<span class="title">Id</span>        <span class="title">Disp.A</span> | <span class="title">Volatile</span> <span class="title">Uncorr</span>. <span class="title">ECC</span> |</span></span><br><span class="line"><span class="function">| <span class="title">Fan</span>  <span class="title">Temp</span>  <span class="title">Perf</span>  <span class="title">Pwr:Usage</span>/<span class="title">Cap</span>|         <span class="title">Memory</span>-<span class="title">Usage</span> | <span class="title">GPU</span>-<span class="title">Util</span>  <span class="title">Compute</span> <span class="title">M</span>. |</span></span><br><span class="line"><span class="function">|===============================+======================+======================|</span></span><br><span class="line"><span class="function">|   0  <span class="title">GeForce</span> <span class="title">GTX</span> 750 <span class="title">Ti</span> <span class="title">WDDM</span>  | 0000:01:00.0     <span class="title">Off</span> |                  <span class="title">N</span>/<span class="title">A</span> |</span></span><br><span class="line"><span class="function">| 53%   80<span class="title">C</span>    <span class="title">P0</span>    27<span class="title">W</span> /  38<span class="title">W</span> |   1472<span class="title">MiB</span> /  2048<span class="title">MiB</span> |     90%      <span class="title">Default</span> |</span></span><br><span class="line"><span class="function">+-------------------------------+----------------------+----------------------+</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">+-----------------------------------------------------------------------------+</span></span><br><span class="line"><span class="function">| <span class="title">Processes</span>:                                                       <span class="title">GPU</span> <span class="title">Memory</span> |</span></span><br><span class="line"><span class="function">|  <span class="title">GPU</span>       <span class="title">PID</span>  <span class="title">Type</span>  <span class="title">Process</span> <span class="title">name</span>                               <span class="title">Usage</span>      |</span></span><br><span class="line"><span class="function">|=============================================================================|</span></span><br><span class="line"><span class="function">|    0       624  <span class="title">C</span>+<span class="title">G</span>   <span class="title">Insufficient</span> <span class="title">Permissions</span>                     <span class="title">N</span>/<span class="title">A</span>      |</span></span><br><span class="line"><span class="function">|    0       652  <span class="title">C</span>+<span class="title">G</span>   <span class="title">Insufficient</span> <span class="title">Permissions</span>                     <span class="title">N</span>/<span class="title">A</span>      |</span></span><br><span class="line"><span class="function">|    0       680  <span class="title">C</span>+<span class="title">G</span>   <span class="title">Insufficient</span> <span class="title">Permissions</span>                     <span class="title">N</span>/<span class="title">A</span>      |</span></span><br><span class="line"><span class="function">|    0       768  <span class="title">C</span>+<span class="title">G</span>   <span class="title">Insufficient</span> <span class="title">Permissions</span>                     <span class="title">N</span>/<span class="title">A</span>      |</span></span><br><span class="line"><span class="function">|    0      1132  <span class="title">C</span>+<span class="title">G</span>   <span class="title">Insufficient</span> <span class="title">Permissions</span>                     <span class="title">N</span>/<span class="title">A</span>      |</span></span><br><span class="line"><span class="function">|    0      2244  <span class="title">C</span>+<span class="title">G</span>   <span class="title">Insufficient</span> <span class="title">Permissions</span>                     <span class="title">N</span>/<span class="title">A</span>      |</span></span><br><span class="line"><span class="function">|    0      5828  <span class="title">C</span>+<span class="title">G</span>   ...<span class="title">indows.Cortana_cw5n1h2txyewy</span>\<span class="title">SearchUI.exe</span> <span class="title">N</span>/<span class="title">A</span>      |</span></span><br><span class="line"><span class="function">|    0      6376  <span class="title">C</span>+<span class="title">G</span>   <span class="title">C</span>:\<span class="title">Windows</span>\<span class="title">explorer.exe</span>                      <span class="title">N</span>/<span class="title">A</span>      |</span></span><br><span class="line"><span class="function">|    0      7108  <span class="title">C</span>+<span class="title">G</span>   ...<span class="title">ost_cw5n1h2txyewy</span>\<span class="title">ShellExperienceHost.exe</span> <span class="title">N</span>/<span class="title">A</span>      |</span></span><br><span class="line"><span class="function">|    0      8308    <span class="title">C</span>   ...<span class="title">crosoft</span>\<span class="title">caffe</span>\<span class="title">Build</span>\<span class="title">x64</span>\<span class="title">Release</span>\<span class="title">caffe.exe</span> <span class="title">N</span>/<span class="title">A</span>      |</span></span><br><span class="line"><span class="function">+-----------------------------------------------------------------------------+</span></span><br></pre></td></tr></table></figure><p>ちなみに引数で <strong>-l</strong>または <strong>--loop</strong> を付与すると、一定間隔で上記の出力を繰り返しで出力します。単位は秒。<br>なので、</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">WINDOWS</span>\<span class="title">system32</span>&gt;&quot;<span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">NVIDIA</span> <span class="title">Corporation</span>\<span class="title">NVSMI</span>\<span class="title">nvidia</span>-<span class="title">smi.exe</span>&quot; -<span class="title">l</span> 5</span></span><br></pre></td></tr></table></figure><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">WINDOWS</span>\<span class="title">system32</span>&gt;&quot;<span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">NVIDIA</span> <span class="title">Corporation</span>\<span class="title">NVSMI</span>\<span class="title">nvidia</span>-<span class="title">smi.exe</span>&quot; --<span class="title">loop</span>=5</span></span><br></pre></td></tr></table></figure><p>みたいな。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>本当はGUIでグラフ表示的な感じで見たい。</p>]]></content>
      
      
      <categories>
          
          <category> %e3%83%87%e3%82%a3%e3%83%bc%e3%83%97%e3%83%a9%e3%83%bc%e3%83%8b%e3%83%b3%e3%82%b0 </category>
          
          <category> Caffe </category>
          
          <category> gpupu </category>
          
          <category> ディープラーニング </category>
          
          <category> CUDA </category>
          
          <category> GPUPU </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その10 .NET 4.6.2 を使用可能にする</title>
      <link href="2016/08/11/1495/"/>
      <url>2016/08/11/1495/</url>
      
        <content type="html"><![CDATA[<p>米国時間2016年8月2日に.NET 4.6.2がリリースされました。</p><a id="more"></a><h1 id="Visual-Studioでターゲットフレームワークに4-6-2がない"><a href="#Visual-Studioでターゲットフレームワークに4-6-2がない" class="headerlink" title="Visual Studioでターゲットフレームワークに4.6.2がない"></a>Visual Studioでターゲットフレームワークに4.6.2がない</h1><p>.NET 4.6.2をインストールしただけでは使えません。<br>下記のページを参考にすると、追加コンポーネントが必要になることがわかります。</p><p><strong>.NET Framework 4.6.2 Developer Pack</strong>をクリックし、下記の2つをダウンロードします。</p><p><a href="../../../../public/2016/08/f27d922fa4a010c05df8bf4a8ff0d69e.png"><img src="../../../../public/2016/08/f27d922fa4a010c05df8bf4a8ff0d69e-1024x796.png"></a><br>Targeting .NET Platforms</p><ul><li>NDP462-DevPack-KB3151934-ENU.exe</li><li>NDP462-DevPack-KB3151934-JPN.exe</li></ul><p>ダウンロードして、インストール後、何も言われませんが、再起動しましょう。<br>再起動せずに、Visual Studioを起動したら、フリーズしましたので。</p><p>再起動後、Visual Studioを立ち上げて、新しいプロジェクトまたは対象のフレームワークの選択箇所に、.NET Framework 4.6.2が出現しています。<br>これをインストールするだけで、Visual Studio 2013と2015の両方に対応します。</p><p><a href="../../../../public/2016/08/2f63bfacaad8b8dde480e5529597eb23.png"><img src="../../../../public/2016/08/2f63bfacaad8b8dde480e5529597eb23.png"></a><br>選択可能一覧に登場</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>Visual Studio 2015の登場が、4.6.2より後ならこんな手間はなかったんでしょうね。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> Visual Studio </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その9 260文字を超えるパスを有効にする</title>
      <link href="2016/08/11/1502/"/>
      <url>2016/08/11/1502/</url>
      
        <content type="html"><![CDATA[<p>Windows 10 Anniversary Updateが出ましたね。</p><p><font color="red">2018/04/05 更新<br>Creators Updateから挙動が変わっています。詳細は、<a href="https://taktak.jp/2018/04/05/2835">開発メモ その104 260文字を超えるパスを有効にする 追試験</a>を参考にしてください。</font></p><a id="more"></a><h1 id="MAXPATHの制限がなくなります"><a href="#MAXPATHの制限がなくなります" class="headerlink" title="MAXPATHの制限がなくなります"></a>MAXPATHの制限がなくなります</h1><p>制限付きですが、忌まわしきファイルパス長の制限がなくなります。<br>.NETからのアクセスの制限をなくすなら、.NET 4.6.2をインストール、app.configを編集し、かつローカルグループポリシーを修正する必要があります。</p><p>app.configに下記のような記述を追加します。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">runtime</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">AppContextSwitchOverrides</span> <span class="attr">value</span>=<span class="string">&quot;Switch.System.IO.UseLegacyPathHandling=false;Switch.System.IO.BlockLongPaths=false&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">runtime</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>また、ローカルグループポリシーで下記の項目を有効にします。変更後再起動します。<br><strong>ローカル コンピューター ポリシー -&gt; コンピューターの構成 -&gt; 管理用テンプレート -&gt; システム -&gt; ファイルシステム -&gt; Win32 の長いパスを有効にする</strong><br><a href="../../../../public/2016/08/f274ede454f65defa9b974f6b8221239.png"><img src="../../../../public/2016/08/f274ede454f65defa9b974f6b8221239-1024x565.png"></a></p><p>Win32 の長いパスを有効にする</p><p>説明を見ると、</p><blockquote><p>Win32 の長いパスを有効にすると、明示された win32 アプリケーションと Windows ストア アプリケーションが、ノードあたり通常 260 文字の制限を超えるパスにアクセスできるようになります。この設定を有効にすると、プロセス内で長いパスにアクセスできるようになります。</p></blockquote><p>とありますが、.NETも安心して有効にできます。<br>Windows上の.NETアプリはWin32のラッパーですからね。</p><p>ポイントは、<strong>明示された</strong>です。<br>この明示が前段のapp.configへの追記になります。</p><p>これを有効にしないと、app.configに追記しても動きません。</p><h1 id="設定が効いてない？"><a href="#設定が効いてない？" class="headerlink" title="設定が効いてない？"></a>設定が効いてない？</h1><p>ここまでを確認するために、下記のサンプルを置きました。<br>今回のソースです。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/takuya-takeuchi/Demo/tree/master/Memo9" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/6241854?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">takuya-takeuchi/Demo</div><div class="hbc-url">https://github.com/takuya-takeuchi/Demo/tree/master/Memo9</div><div class="hbc-description">Sample source code for Demonstration, Experiment and Test - takuya-takeuchi/Demo</div></div></div></div></a></div></div><p>簡単なサンプルで</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">net462manifest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> random = <span class="keyword">new</span> Random();</span><br><span class="line">            <span class="keyword">var</span> length = <span class="number">200</span>;</span><br><span class="line">            <span class="keyword">var</span> str = <span class="keyword">string</span>.Join(<span class="string">&quot;&quot;</span>, Enumerable.Range(<span class="number">0</span>, length).Select(s =&gt; random.Next(<span class="number">0</span>, <span class="number">9</span>).ToString()));</span><br><span class="line">            <span class="keyword">var</span> path = Path.Combine(<span class="string">&quot;B:\&quot;, str);</span></span><br><span class="line"><span class="string">            path = Path.Combine(path, str);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            try</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                Directory.CreateDirectory(path);</span></span><br><span class="line"><span class="string">                Console.WriteLine($&quot;</span>&#123;path&#125; <span class="keyword">is</span> created.<span class="string">&quot;);</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            catch (Exception ex)</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                Console.WriteLine(ex.GetType().Name);</span></span><br><span class="line"><span class="string">                Console.WriteLine(ex.Message);</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>という感じです。名前空間が違うだけでサンプル全て、B:&lt;200文字のフォルダ名&gt;&lt;200文字のフォルダ名&gt;なフォルダを作成するだけです。<br>これを、.NET 4.6.1と4.6.2をターゲットでビルドし、app.configの有無で、Windows 10 + .NET 4.6.2で動かしてみました。</p><p>が、不思議な結果になりました。<br>.NET 4.6.1 + app.configなしの環境 <strong>「だけ」</strong> で、</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">指定されたパス、ファイル名、またはその両方が長すぎます。完全限定型名は <span class="number">260</span> 文字未満で指定し、ディレクトリ名は <span class="number">248</span> 未満で指定してください。</span><br></pre></td></tr></table></figure><p>という例外を投げました。<br>理想では、「.NET 4.6.2 + app.configあり」の環境だけで実行できるつもりでした。<br>少なくとも、app.configがないとダメ、という感じだと思いましたが、この結果は不思議です。</p><p>ローカルグループポリシーの有効前後で結果が変化し、最終的にこうなりました。</p><p>[table id=24 /]</p><p>調べてみると、下記のMSDN Blogに記事がありました。</p><blockquote><p>If you target 4.6.2 this isn’t necessary, but if you want to enable the behavior for existing code, here is config file snippet you need to use.</p></blockquote><p>つまり、4.6.2なら特別な設定は不要で、既存のコードで有効にしたいなら、configファイルが必要だよ、ってことらしいです。<br>グループポリシーで設定有効後、4.6.2で常に動いたのはそういうことのようです。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>4.6.2以降はグループポリシー以外は特に気にすることはない模様。<br>ただ、実運用において、客先でこの設定をバッチか何かで有効にすることはできるのだろうか？無理な気がする。</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/Memo9">https://github.com/takuya-takeuchi/Demo/tree/master/Memo9</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その8 gitでフォーク元のリポジトリの変更を追跡する</title>
      <link href="2016/08/10/1491/"/>
      <url>2016/08/10/1491/</url>
      
        <content type="html"><![CDATA[<p>忘れずにメモ。</p><a id="more"></a><h1 id="フォークした後、フォーク元に対する変更はどうなるの？"><a href="#フォークした後、フォーク元に対する変更はどうなるの？" class="headerlink" title="フォークした後、フォーク元に対する変更はどうなるの？"></a>フォークした後、フォーク元に対する変更はどうなるの？</h1><p>Subversion的には、ブランチを切ってしまうと、そのブランチに対するリビジョンをマージするという形でローカルに反映します。<br>gitで、これをやる場合、少し面倒。というかTortoiseGitで対応していないのかしら？</p><p>まず、フォークしたリポジトリに対するローカルリポジトリのあるフォルダ (.gitというフォルダがある場所) に移動。<br>コマンドプロンプトから下記のコマンドを叩きます。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add &lt;name&gt;</span><br></pre></td></tr></table></figure><p>nameは何でもいいです。<br>例えば、Microsoft/Caffeをフォーク先のリポジトリPrivate/Caffeに対して、フォーク元 (つまり Microsoft/Caffe) に対する変更を追跡させたいなら</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add upstream https://github.com/Microsoft/caffe.git</span><br></pre></td></tr></table></figure><p>となる。<br>ようするに、これにより、ローカルのリポジトリはフォーク先リモートリポジトリ (Private/Caffe) とのみ関係があった状態に対して、新しくフォーク元のリポジトリをリモートブランチとして追加したわけです。</p><p>で、フォーク元のリポジトリに対する変更をプルする場合は、</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch &lt;name&gt;</span><br><span class="line">git merge &lt;name&gt;/master</span><br></pre></td></tr></table></figure><p>で大丈夫なはず。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>gitが便利なのはわかるんですが、概念がかなり複雑なんですよね。TortoiseGitのおかげである程度複雑さはカバーされていますが。<br>別のGUIクライアントを使います？え、Source Tree?知らないなぁ。</p>]]></content>
      
      
      <categories>
          
          <category> バージョン管理システム </category>
          
          <category> git </category>
          
          <category> TortoiseGit </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その7 CMakeでOpenCVを指定する方法</title>
      <link href="2016/08/01/1487/"/>
      <url>2016/08/01/1487/</url>
      
        <content type="html"><![CDATA[<p>C/C++は面倒。</p><a id="more"></a><h1 id="CMake"><a href="#CMake" class="headerlink" title="CMake"></a>CMake</h1><p>CMakeって有名ですけど、.NETで生きてきた私にとって、「makeの親戚？」という程度の(間違った)認識だったので、いざ使えと言われ、ビクビクしながら使っていると案の定、エラーの文字列で「ムキー」ってなるわけで。</p><p>OpenCVを使ったサンプルプログラムとかって、よくCMakeで使えるようになっているけど、いつも忘れるのが、OpenCVのパス設定方法。<br>だからメモ。</p><p><strong>CMakeList.txt</strong>のあるフォルダをc<strong>make-gui.exe</strong>で開き、ビルドに必要なバイナリデータの出力先を設定。<br>その後、Configureを押下すると、<strong>OpenCV_DIR-NOTFOUND</strong>って出るときがあります。<br>こういうのは、大抵<strong>OpenCVConfig.cmake</strong>がソースフォルダなどにないパターン。<br>なので、このOpenCVConfig.cmakeが存在するパスを指定します。</p><p><img src="../../../../public/2016/08/img_579f35ced29c1.png"></p><p>通常、OpenCVをインストールしている場合は、</p><ul><li>C:\Program Files\OpenCV\2.4.11\build\OpenCVConfig.cmake</li><li>C:\Program Files\OpenCV\3.0.0\build\OpenCVConfig.cmake</li></ul><p>のように、buildフォルダの下に存在します。<br>なので、上の場合は、<strong>C:\Program Files\OpenCV\2.4.11\build</strong>をCMakeのOpenCV_DIR-NOTFOUNDに設定して、再度ConfiguraまたはGenerateを押下すれば、ビルドに必要なファイル群が無事に出力されます。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>C/C++を本職にしている人たちって、「言わなくてもわかるよね?」的なことをわざわざ言ったり、書いたりしないので、答えを見つけるのに苦労します。<br>いや自分の経験が浅いのが悪いんですけど。</p>]]></content>
      
      
      <categories>
          
          <category> その他 </category>
          
          <category> マルチメディア </category>
          
          <category> CMake </category>
          
          <category> OpenCV </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ディープラーニング Caffe for Windows その4 DIGITS</title>
      <link href="2016/07/31/1466/"/>
      <url>2016/07/31/1466/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/07/30/1460">前回</a>はcuDNN 5.0を導入してみました。</p><a id="more"></a><h1 id="What-is-DIGITS"><a href="#What-is-DIGITS" class="headerlink" title="What is DIGITS?"></a>What is DIGITS?</h1><p><strong>DIGITS</strong>はNVIDIAが提供している、Caffeを利用した深層学習モデルの訓練のためのWebアプリです。<br>DIGITSは <strong>the Deep Learning GPU Training System</strong> の略とのこと。<br>Githubで開発が進められています。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/NVIDIA/DIGITS" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/1728152?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">NVIDIA/DIGITS</div><div class="hbc-url">https://github.com/NVIDIA/DIGITS</div><div class="hbc-description">Deep Learning GPU Training System. Contribute to NVIDIA/DIGITS development by creating an account on GitHub.</div></div></div></div></a></div></div><p>これまで、CaffeがLinux環境での動作が前提でしたが、MicrosoftがCaffeのWindows版を提供し始めたことで風向きが変わりました。<br>前から、リッチなGUIで深層学習をしてみたくても、Windows環境は遅れていたため、涙をのんでいたのですが、そんな日々は終わりました。</p><p><img src="../../../../public/2016/07/img_579b5b28588a2.png"></p><p>そんなDIGITSをWindowsに導入してみます。<br>ちなみに、DIGITS公式でもWindows版のCaffeに言及していますが、あっちがサポートしているのは、</p><h1 id="本家BVLCのWindows版Caffeであって、MicrosoftのWindows版Caffeではありません。"><a href="#本家BVLCのWindows版Caffeであって、MicrosoftのWindows版Caffeではありません。" class="headerlink" title="本家BVLCのWindows版Caffeであって、MicrosoftのWindows版Caffeではありません。"></a>本家BVLCのWindows版Caffeであって、MicrosoftのWindows版Caffeではありません。</h1><p>なので、今回は相当イレギュラーです。<br>といっても、イレギュラーなのは、少しだけですが。</p><h1 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h1><p>基本は、公式の<a href="https://github.com/NVIDIA/DIGITS/blob/master/docs/BuildDigitsWindows.md">Windows向けdocs</a>に従います。<br>必要なものは下記の5つ。</p><ul><li>Python2</li><li>CUDA 7.5</li><li>CuDNN 5.1</li><li>Caffe</li><li>Graphviz</li></ul><p>Caffe for Windowsを導入しているなら、Miniconda2、CUDA、CuDNNが入っているので大丈夫でしょう。<br>バージョンが違うなら追加でインストールするだけです。<br>ちなみに、前回はCuDNNの5.0をインストールしましたが、DIGITSは5.1を要求します。<br>5.1は2016年7月末現在、RC (リリース候補版)です。</p><p>しかし、Microsoft版のCaffeを使ってると、別に5.0でもDIGITSは動きます。<br>(起動までは問題ないです。)</p><h1 id="Python2"><a href="#Python2" class="headerlink" title="Python2"></a>Python2</h1><p>Pythonそのものはもう入っていますが、いくつかの依存モジュールが必要です。<br>ですが、ここで注意するのは、ファイルからのモジュールの入手が必要になることです。</p><p>docsでは、下記のモジュールを<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/">Unofficial Windows Binaries for Python Extension Packages</a>からインストールするよう指示されます。<br>pythonが複数存在する場合、インストールしたい対象のpython.exeをフルパスで指定しましょう。<br>上述のurlからローカルにダウンロードしてインストールしてください。Python2.7なのでCP27の入っているパッケージが対象です。<br>管理者権限でインストールしましょう。念のため。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install cython</span><br><span class="line">python -m pip install numpy-<span class="number">1</span>.<span class="number">11</span>.<span class="number">1</span>+mkl-cp27-cp27m-win_amd64.whl</span><br><span class="line">python -m pip install scipy-<span class="number">0</span>.<span class="number">18</span>.<span class="number">0</span>-cp27-cp27m-win_amd64.whl</span><br><span class="line">python -m pip install matplotlib-<span class="number">1</span>.<span class="number">5</span>.<span class="number">2</span>-cp27-cp27m-win_amd64.whl</span><br><span class="line">python -m pip install scikit_image-<span class="number">0</span>.<span class="number">12</span>.<span class="number">3</span>-cp27-cp27m-win_amd64.whl</span><br><span class="line">python -m pip install h5py-<span class="number">2</span>.<span class="number">6</span>.<span class="number">0</span>-cp27-cp27m-win_amd64.whl</span><br></pre></td></tr></table></figure><h1 id="CUDA-7-5"><a href="#CUDA-7-5" class="headerlink" title="CUDA 7.5"></a>CUDA 7.5</h1><p>もうインストール済みなので省略。</p><h1 id="CuDNN-5-1"><a href="#CuDNN-5-1" class="headerlink" title="CuDNN 5.1"></a>CuDNN 5.1</h1><p>例のごとくダウンロードします。<br><strong>CommonSettings.props</strong>のPythonのサポートを有効にした後、<a href="https://taktak.jp/2016/07/30/1460">前回</a>を参考に、5.1をダウンロードし、その展開先をCommonSettings.propsに設定します。</p><h1 id="Caffe"><a href="#Caffe" class="headerlink" title="Caffe"></a>Caffe</h1><p>ビルド自体はこれまでの記事を参考にすれば問題ないはずです。<br>今回は、ビルド前に、<strong>caffe\windows\caffe\caffe.vcxproj</strong>をテキストエディタで開き、58行目付近の</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PostBuildEvent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Command</span>&gt;</span>&quot;$(ScriptsDir)\FixGFlagsNaming.cmd&quot; &quot;$(OutDir)&quot; $(Configuration)<span class="tag">&lt;/<span class="name">Command</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">PostBuildEvent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>を下記のように変更します。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PostBuildEvent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Command</span>&gt;</span>&quot;$(ScriptsDir)\FixGFlagsNaming.cmd&quot; &quot;$(OutDir)&quot; $(Configuration)<span class="tag">&lt;/<span class="name">Command</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">PostBuildEvent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ClCompile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">PreprocessorDefinitions</span>&gt;</span>NDEBUG;%(PreprocessorDefinitions);CAFFE_VERSION=1.0.0-rc3<span class="tag">&lt;/<span class="name">PreprocessorDefinitions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ClCompile</span>&gt;</span></span><br></pre></td></tr></table></figure><p>これで下準備は終わりです。</p><h3 id="これが最重要です。"><a href="#これが最重要です。" class="headerlink" title="これが最重要です。"></a>これが最重要です。</h3><p>そして、Caffeのビルドを成功させます。<br>ビルド完了後、<strong>\Build\x64\Release\pycaffe\caffe</strong> を <strong>\lib\site-packages</strong> にコピーします。<br>シンボリックリンクでもかまいません。<br>最後に、<strong>&lt;caffe_root&gt;\Build\x64\Release</strong>を<strong>環境変数PATH</strong>に追加します。<br>(追加しなくても、問題ないですが….)</p><h1 id="Graphviz"><a href="#Graphviz" class="headerlink" title="Graphviz"></a>Graphviz</h1><p><strong>Graphviz</strong>はグラフを描画するモジュールです。<br>下記公式サイトより、Windows版のパッケージを入手します </p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://www.graphviz.org/Download.php" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=www.graphviz.org"></img><div class="hbc-site-name">www.graphviz.org</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">Redirecting…</div><div class="hbc-url">http://www.graphviz.org/Download.php</div></div></div></div></a></div></div><p>zipとmsi形式がありますが、お好きな方で。<br>zipで展開する場合は、<strong>環境変数PATH</strong>に <strong>&lt;Graphvizのインストール先&gt;\bin</strong> を追加します。<br>例えば、c:\graphviz-2.38に展開したなら、<strong>c:\graphviz-2.38\bin</strong> となるようにします。<br>msi版は知りません。</p><h1 id="DIGITS"><a href="#DIGITS" class="headerlink" title="DIGITS"></a>DIGITS</h1><p>ようやく本体です。<br>まず、公式githubよりクローンを実行し、フォルダに含まれる<strong>requirements.txt</strong>を編集します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Pillow&gt;&#x3D;2.3.0,&lt;&#x3D;3.1.2</span><br><span class="line">numpy&gt;&#x3D;1.8.1,&lt;&#x3D;1.11.0</span><br><span class="line">scipy&gt;&#x3D;0.13.3,&lt;&#x3D;0.17.0</span><br><span class="line">protobuf&gt;&#x3D;2.5.0,&lt;&#x3D;2.6.1</span><br><span class="line">six&gt;&#x3D;1.5.2,&lt;&#x3D;1.10.0</span><br><span class="line">requests&gt;&#x3D;2.2.1,&lt;&#x3D;2.9.1</span><br><span class="line">gevent&gt;&#x3D;1.0,&lt;&#x3D;1.0.2</span><br><span class="line">Flask&#x3D;&#x3D;0.10.1</span><br><span class="line">Flask-WTF&#x3D;&#x3D;0.11,&lt;&#x3D;0.12</span><br><span class="line">wtforms&gt;&#x3D;2.0,&lt;&#x3D;2.1</span><br><span class="line">Flask-SocketIO&#x3D;&#x3D;0.6.0</span><br><span class="line">gunicorn&#x3D;&#x3D;17.5</span><br><span class="line">setuptools&gt;&#x3D;3.3,&lt;&#x3D;20.7.0</span><br><span class="line">lmdb&#x3D;&#x3D;0.87</span><br><span class="line">h5py&gt;&#x3D;2.2.1,&lt;&#x3D;2.6.0</span><br><span class="line">pydot&#x3D;&#x3D;1.0.28</span><br></pre></td></tr></table></figure><p>を</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">protobuf&gt;&#x3D;2.5.0,&lt;&#x3D;2.6.1</span><br><span class="line">six&gt;&#x3D;1.5.2,&lt;&#x3D;1.10.0</span><br><span class="line">requests&gt;&#x3D;2.2.1,&lt;&#x3D;2.9.1</span><br><span class="line">gevent&gt;&#x3D;1.0,&lt;&#x3D;1.0.2</span><br><span class="line">Flask&#x3D;&#x3D;0.10.1</span><br><span class="line">Flask-WTF&#x3D;&#x3D;0.11,&lt;&#x3D;0.12</span><br><span class="line">wtforms&gt;&#x3D;2.0,&lt;&#x3D;2.1</span><br><span class="line">Flask-SocketIO&#x3D;&#x3D;0.6.0</span><br><span class="line">gunicorn&#x3D;&#x3D;17.5</span><br><span class="line">setuptools&gt;&#x3D;3.3,&lt;&#x3D;20.7.0</span><br><span class="line">lmdb&#x3D;&#x3D;0.87</span><br><span class="line">h5py&gt;&#x3D;2.2.1,&lt;&#x3D;2.6.0</span><br><span class="line">pydot&#x3D;&#x3D;1.0.28</span><br></pre></td></tr></table></figure><p>に変更します。つまり先頭3行を除去します。<br>これは、後述のPILが動かなくなるなど、弊害があるようです。</p><p>次に、このファイルを利用して、下記のコマンドから依存モジュールのインストールを実行します。<br>当然管理者権限。gevent-1.1.2-cp27-cp27m-win_amd64.whlは前述のページから入手しておきます。<br>gevent-1.1.2-cp27-cp27m-win_amd64.whlは、<strong>この時に実行してください。</strong></p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install -r requirements.txt</span><br><span class="line">python -m pip install gevent-<span class="number">1</span>.<span class="number">1</span>.<span class="number">2</span>-cp27-cp27m-win_amd64.whl</span><br><span class="line">python -m pip install pyreadline</span><br></pre></td></tr></table></figure><h1 id="DIGITSを実行"><a href="#DIGITSを実行" class="headerlink" title="DIGITSを実行"></a>DIGITSを実行</h1><p>DIGITSフォルダで下記のコマンドを実行します。<br>ここでもpython.exeはフルパスで指定することをおすすめします。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python digits-devserver</span><br></pre></td></tr></table></figure><p>もし、Caffeのビルド後、<strong>&lt;caffe_root&gt;\Build\x64\Release</strong>を<strong>環境変数PATH</strong>に追加していないなら、下記のコマンドになります。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="built_in">PATH</span>=<span class="variable">%PATH%</span>;&lt;caffe_root&gt;\Build\x64\Release</span><br><span class="line">python digits-devserver</span><br></pre></td></tr></table></figure><p>実行後、下記のエラーが出る場合があります。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent <span class="keyword">call</span> last):</span><br><span class="line">  File &quot;digits-devserver&quot;, line <span class="number">31</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    from digits import config</span><br><span class="line">  File &quot;d:\Works\Lib\NVIDIA\DIGITS\digits\config\__init__.py&quot;, line <span class="number">7</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    from .current_config import config_value</span><br><span class="line">  File &quot;d:\Works\Lib\NVIDIA\DIGITS\digits\config\current_config.py&quot;, line <span class="number">4</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    from .caffe_option import CaffeOption</span><br><span class="line">  File &quot;d:\Works\Lib\NVIDIA\DIGITS\digits\config\caffe_option.py&quot;, line <span class="number">14</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    from digits.utils import parse_version</span><br><span class="line">  File &quot;d:\Works\Lib\NVIDIA\DIGITS\digits\utils\__init__.py&quot;, line <span class="number">158</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    from . import constants, image, time_filters, errors, forms, routing, auth</span><br><span class="line">  File &quot;d:\Works\Lib\NVIDIA\DIGITS\digits\utils\image.py&quot;, line <span class="number">15</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    import PIL.Image</span><br><span class="line"><span class="function">ImportError: <span class="title">No</span> <span class="title">module</span> <span class="title">named</span> <span class="title">PIL.Image</span></span></span><br></pre></td></tr></table></figure><p>この場合は、PILが存在しないと言われているので、追加でインストールします。また先述のサイトから、モジュールをダウンロードしてきて下記のコマンドでインストールします。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install Pillow-<span class="number">3</span>.<span class="number">3</span>.<span class="number">0</span>-cp27-cp27m-win_amd64.whl</span><br></pre></td></tr></table></figure><p>再度実行すればエラーが出ないはずです。</p><p>また、下記のメッセージが出る時があります。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent <span class="keyword">call</span> last):</span><br><span class="line">Default value <span class="keyword">for</span> caffe_root &quot;&quot; invalid:</span><br><span class="line">        Your Caffe does <span class="keyword">not</span> have version info.  Please upgrade it.</span><br><span class="line">==================================== Caffe =====================================</span><br><span class="line">Where is caffe installed?</span><br><span class="line"></span><br><span class="line">        Suggested values:</span><br><span class="line">        (P*) [<span class="built_in">PATH</span>/PYTHONPATH] </span><br><span class="line">&gt;&gt;</span><br></pre></td></tr></table></figure><p>これは、Caffe.exeにバージョン情報が含まれていないため発生します。<br>ですので、caffeのビルド時に、プロジェクトファイルの編集を正しくできたかを確認してください。<br>ファイルのプロパティからはバージョン情報は確認できません。</p><p>成功すると</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Default value <span class="keyword">for</span> torch_root &quot;&quot; invalid:</span><br><span class="line">        torch binary <span class="keyword">not</span> found <span class="keyword">in</span> <span class="built_in">PATH</span></span><br><span class="line">Couldn&#x27;t import dot_parser, loading of dot files will <span class="keyword">not</span> be possible.</span><br><span class="line"><span class="number">2016</span>-<span class="number">07</span>-<span class="number">30</span> <span class="number">01</span>:<span class="number">20</span>:<span class="number">08</span> [INFO ] Loaded <span class="number">0</span> jobs.</span><br><span class="line"></span><br><span class="line"> |   \_ _/ __|_ _|_   _/ __|</span><br><span class="line"> | |) | | (_ || |  | | \__ \</span><br><span class="line"> |___/___\___|___| |_| |___/ <span class="number">4</span>.<span class="number">1</span>-dev</span><br><span class="line"></span><br><span class="line"> * Running on http://<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>:<span class="number">5000</span>/</span><br></pre></td></tr></table></figure><p>と表示されます。<br><strong><a href="http://localhost:5000/">http://localhost:5000</a></strong>でアクセスしてみると、動いていることが確認できます。</p><p><img src="../../../../public/2016/07/img_579b8386b167f.png"></p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>非公式ではありますが、Microsoft製CaffeでDIGITSを動かすことができました。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> %e3%83%87%e3%82%a3%e3%83%bc%e3%83%97%e3%83%a9%e3%83%bc%e3%83%8b%e3%83%b3%e3%82%b0 </category>
          
          <category> Caffe </category>
          
          <category> Windows </category>
          
          <category> オープンソース </category>
          
          <category> ディープラーニング </category>
          
          <category> DIGITS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ディープラーニング Caffe for Windows その3 cuDNN 5.0対応</title>
      <link href="2016/07/30/1460/"/>
      <url>2016/07/30/1460/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/06/23/1140">前回</a>は指紋の紋様を分類してみました。</p><a id="more"></a><h1 id="cuDNN"><a href="#cuDNN" class="headerlink" title="cuDNN"></a>cuDNN</h1><p>最近、Caffe for Microsoftが更新され、本家のBVLC/Caffeと同期がとられました。結構重要な更新があるのですが、cuDNN 5.0に対応しました。<br>対応方法は <strong>CommonSettings.props</strong> を少し書き換えるだけですが、パフォーマンスの向上が望めるので積極的に利用しましょう。</p><p>ダウンロード方法は以前と変わりません。<br>利用するCUDAによっては、cuDNN 5.0は利用できません。</p><p><img src="../../../../public/2016/07/img_579b4e27d1a4e.png"></p><p>現時点で、cuDNN 5.0は CUDA 7.5以降限定のようです。<br>Windowsには、Windows 7とWindows 10向けのパッケージが用意されていますので、適切なものをダウンロードしてください。</p><p>なおダウンロードしたcuDNNを展開する際、フォルダ構成が</p><ul><li>XXXX/cuda/bin</li><li>XXXX/cuda/include</li><li>XXXX/cuda/lib</li></ul><p>になるようにしてください。</p><h3 id="ビルド"><a href="#ビルド" class="headerlink" title="ビルド"></a>ビルド</h3><p>CommonSettings.propsのCuDNNPathをcuDNN 5.0の配置フォルダに変更するだけです。<br>前述の場合、XXXXまでをフルパスで指定します。</p><p>以上で完了です。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>実際、職場でビルドしたバイナリを使用した場合、4.0と比べて10%ほどパフォーマンスが向上していました。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> %e3%83%87%e3%82%a3%e3%83%bc%e3%83%97%e3%83%a9%e3%83%bc%e3%83%8b%e3%83%b3%e3%82%b0 </category>
          
          <category> Caffe </category>
          
          <category> Windows </category>
          
          <category> オープンソース </category>
          
          <category> ディープラーニング </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その6 gitでローカルにリモートリポジトリを作る</title>
      <link href="2016/07/29/1448/"/>
      <url>2016/07/29/1448/</url>
      
        <content type="html"><![CDATA[<p>よくあると思うけど、ようやく方法がわかったのでメモ。</p><a id="more"></a><h1 id="まずローカルリポジトリ"><a href="#まずローカルリポジトリ" class="headerlink" title="まずローカルリポジトリ"></a>まずローカルリポジトリ</h1><p><strong>TortoiseGit</strong> が楽なので、それを使ってメモ。<br>最初にgitで管理したいフォルダを作成します。<br>そのフォルダを開いて、右クリックから、<strong>Git ここにリポジトリを作成(Y)…</strong> を選択。</p><p><img src="../../../../public/2016/07/img_579b4013c04f1.png"></p><p>次のダイアログで <strong>Bare を生成(作業ディレクトリーを作りません)</strong> をチェック<strong>しない</strong>で、OKを押します。</p><p><img src="../../../../public/2016/07/img_579b40564b989.png"></p><p>最後に、このフォルダをコミットします。<br>この状態では、全てのファイルがバージョン管理下のファイルではないため、必要なファイルを選択してコミットします。</p><p>これでローカルリポジトリが完成します。</p><p><img src="../../../../public/2016/07/img_579b408bf33a9.png"></p><h1 id="リモートリポジトリ"><a href="#リモートリポジトリ" class="headerlink" title="リモートリポジトリ"></a>リモートリポジトリ</h1><p>次にリモートリポジトリを作ります。<br>まず、リモートリポジトリとなるフォルダを配置する場所を決めます。<br>その場所でTortoiseGitの右クリックから、<strong>Git クローン(複製)…</strong> を選択。</p><p><img src="../../../../public/2016/07/img_579b41e009326.png"></p><p>次のダイアログで、先ほど作成したローカルリポジトリをクローン元に指定、リモートリポジトリのパスを指定します。<br>gitのマナーとして、リモートリポジトリの末尾は <strong>.git</strong> をつけるのが良いようです。</p><p><img src="../../../../public/2016/07/img_579b424501df3.png"></p><p>この際、<strong>Bareリポジトリにクローン</strong>にチェックをいれるのを忘れないでください。<br>これによってリモートリポジトリができます。</p><h1 id="リモートリポジトリとつなげる"><a href="#リモートリポジトリとつなげる" class="headerlink" title="リモートリポジトリとつなげる"></a>リモートリポジトリとつなげる</h1><p>この状態では、ローカルリポジトリとリモートリポジトリに関連がありません。<br>まず、ローカルリポジトリを右クリックし、<strong>TortoiseGit -&gt; プッシュ</strong> と選択します。</p><p><img src="../../../../public/2016/07/img_579b435e39a61.png"></p><p>この時は、リモートと関連がないため、<strong>宛先</strong>が空になっています。</p><p><img src="../../../../public/2016/07/img_579b437512f5d.png"></p><p>これを設定するために**管理(G)**をクリックします。</p><p><img src="../../../../public/2016/07/img_579b43cc1e319.png"></p><p>表示されるダイアログにリモートの<strong>名前 (ここでは origin としています)**、</strong>URL** を指定します。<br>URLは先ほど .git と末尾に作成したフォルダをフルパスで指定します。<br>その他はデフォルトでOKです。<br>入力後、<strong>新規に追加/保存(A)</strong> をクリックし、OKでダイアログを閉じます。</p><p>ダイアログが閉じると、宛先の<strong>リモート</strong>というコンボボックスに先ほど作成した <strong>origin</strong>が設定されるので、それを確認し、OKを押してプッシュします。</p><p>以上で終了です。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>様々な事情でgitサーバーを用意できないことはあるので、ローカルにリモートリポジトリを作り、そこで作業をすることで、変わらないgitライフを送れます。<br>分散開発ではないですが、自由にコミットできて、履歴管理ができると言うことは非常に楽です。</p>]]></content>
      
      
      <categories>
          
          <category> バージョン管理システム </category>
          
          <category> git </category>
          
          <category> TortoiseGit </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その5 Update for Microsoft Visual Studio 2015 Update 3 (KB3165756)</title>
      <link href="2016/07/16/1441/"/>
      <url>2016/07/16/1441/</url>
      
        <content type="html"><![CDATA[<p>もうちょっと更新ペースをあげないと。</p><a id="more"></a><h1 id="パッチが出た！！"><a href="#パッチが出た！！" class="headerlink" title="パッチが出た！！"></a>パッチが出た！！</h1><p>2016/6/27にVisual Studio 2015 Update3がリリースされました。<br>が、その直後、問題が見つかりパッチがリリースされましたが、日本語の情報が何故かありません。<br>私自身は、アメリカのグループ会社のSkypeチャットで知らされた次第です。</p><p>ただ、最近のWebインストーラなら既にこの修正が適用されている可能性はありますが、初日にインストールしたなら確実に含まれていないと思われます。<br>詳細は下記になります。</p><h1 id="日本語訳"><a href="#日本語訳" class="headerlink" title="日本語訳"></a>日本語訳</h1><h2 id="Bugs-that-are-fixed-in-version-14-0-25422-01-released-on-07-12-2016"><a href="#Bugs-that-are-fixed-in-version-14-0-25422-01-released-on-07-12-2016" class="headerlink" title="Bugs that are fixed in version 14.0.25422.01, released on 07/12/2016"></a>Bugs that are fixed in version 14.0.25422.01, released on 07/12/2016</h2><p><strong>Issue 1</strong><br>Visual Studio may leak memory when you use the editor light bulb to apply code actions to a C# or Visual Basic file.<br>C#またはVisual Basicファイルに対して、エディターの電球マークを使用してコードアクションを使用すると、メモリリークを引き起こす可能性があります </p><p><strong>Issue 2</strong><br>Some large C# and Visual Basic projects that contain thousands of source files may experience memory and performance degradation because compilation symbols are unnecessarily realized.<br>コンパイル シンボルが不必要に認識されることで、いくつかの、数千のソースファイルを含む巨大なC#またはVisual Basicプロジェクトがメモリリークとパフォーマンスの低下を引き起こす可能性があります </p><p><strong>Issue 3</strong><br>Shared projects may report an error after they are unloaded and reloaded if some of their source files are open.<br>いくつかのソースファイルが開かれている場合、Sharedプロジェクトをアンロードし、再度ロードした後、Sharedプロジェクトがエラーを報告する可能性があります </p><p><strong>Issue 4</strong><br>Visual Studio may crash and cause a stack overflow exception when it generates IntelliSense for some C# files that contain nested generic types.<br>ネストされたジェネリック型を含むC#ソースファイルに対して生成するIntelliSenseを生成するとき、Visual Studioがクラッシュし、StackOverflow例外を投げる可能性があります </p><p><strong>Issue 5</strong><br>In ASP.NET cshtml files, committing code completion after you type the full snippet may cause incorrect snippets to be added to the source file.<br>ASP.NETのcshtmlファイルにおいて、完全なスニペットを入力した後のコード補間のコミットが間違ったスニペットをソースファイルに追加する可能性があります </p><p><strong>Issue 6</strong><br>This fix addresses a memory leak in the StandardCollector.Service.exe process. You commonly encounter this leak when you debug managed code on Windows 7 that has Visual Studio 2015 Update 3 installed.<br>この修正はStandardCollector.Service.exeプロセス内のメモリリークに取り組みます。一般的に、Visual Studio 2015 Update3がインストールされたWindows7上で、マネージドコードをデバッグする際にメモリリークに遭遇します。</p><p><strong>Issue 7</strong><br>When you debug JavaScript files by using certain module configurations, the debugger might not load the correct source maps. This causes the program to crash. There is no known workaround for this bug other than to apply this KB3165756 update.<br>JavaScriptファイルをあるモジュール設定でデバッグするとき、デバッガーが正しいそースマップをロードしない可能性があります。これはプログラムのクラッシュを引き起こします。このバグに対して、本KB3165756アップデートを適用する以外に、既知の回避方法はありません。</p><p><strong>Issue 8</strong><br>When you edit TypeScript build properties, the ourDir option does not save the changes that you made. After you make changes, the build properties page displays the previous state of outDir. As a workaround, you can add a tsconfig.json file that has the desired properties that match the current property configuration. Alternatively, you can manually edit the project file.<br>TypeScriptビルド設定を編集しているときに、outDirオプションが変更を保存しません。変更後、ビルドプロパティページはoutDirの以前の状態を表示します。回避方法として、現在のプロパティ設定に一致する希望のプロパティを持つtsconfig.jsonをファイルを追加することができます。</p><h2 id="Bugs-that-are-fixed-in-version-14-0-25421-03-released-on-06-27-2016"><a href="#Bugs-that-are-fixed-in-version-14-0-25421-03-released-on-06-27-2016" class="headerlink" title="Bugs that are fixed in version 14.0.25421.03, released on 06/27/2016"></a>Bugs that are fixed in version 14.0.25421.03, released on 06/27/2016</h2><p><strong>Issue 1</strong><br>Visual Studio may crash when you close the Visual Studio IDE while C# and Visual Basic background operations are ongoing.<br>C#またはVisual Basicのオペレーションがバックグラウンドで進行中にVisual Studio IDEを閉じることでVisual Studioがクラッシュすること可能性があります。</p><p><strong>Issue 2</strong><br>Visual Studio may crash if you update a solution while the C# or Visual Basic build is completing and reporting diagnostics.<br>C#またはVisual Basicのビルドが完了し、診断を報告している間に、ソリューションを更新すると、Visual Studioがクラッシュすること可能性があります。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>07/12/2016リリースのIssue2, Issue4, Issue 6もやばいですが、06/27/2016の修正は全部緊急ですね。速くパッチを適用することをおすすめします。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> Visual Studio </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ブート情報編集&amp;起動OS選択再起動ツールの公開</title>
      <link href="2016/07/07/1435/"/>
      <url>2016/07/07/1435/</url>
      
        <content type="html"><![CDATA[<p>オープンソースで公開します。詳細は <a href="https://taktak.jp/wordpress/apps/">APPS</a> または <a href="https://github.com/takuya-takeuchi/NextBootOSSelector">GitHub</a> をご覧ください。</p>]]></content>
      
      
      <categories>
          
          <category> ソフトウェア紹介 </category>
          
          <category> 自作ソフトウェア </category>
          
          <category> オープンソース </category>
          
          <category> Next Boot OS Selector </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その4 AppVeyorの &#39;Unable to locate&#39; エラーに対応する</title>
      <link href="2016/07/07/1432/"/>
      <url>2016/07/07/1432/</url>
      
        <content type="html"><![CDATA[<p>またも久しぶりの更新です。</p><a id="more"></a><h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>GithubでOSSを開発しており、AppVeyorでCIしていますが、自宅PCでビルドは通るのに、AppVeyorでビルドが失敗する事例が発生。<br>単純にソースの記述ではないようで、少し時間をロスしたのでメモ。</p><p>問題は、</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\projects\nextbootosselector\source\.nuget\NuGet.targets(83,9): error : Unable to locate &#39;C:\projects\nextbootosselector\source\.nuget\NuGet.exe&#39; [C:\projects\nextbootosselector\source\NextBootOSSelector\NextBootOSSelector.csproj]</span><br></pre></td></tr></table></figure><p>というエラーログ。<br>Nuget.extを見つけることができませんでした、というエラー。<br>AppVeyorの設定でNugetの更新を実施するようスクリプトを組むだけではダメなようです。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p><strong>.nuget/NuGet.targets</strong> をテキストファイルで開き、</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">DownloadNuGetExe</span> <span class="attr">Condition</span>=<span class="string">&quot; &#x27;$(DownloadNuGetExe)&#x27; == &#x27;&#x27; &quot;</span>&gt;</span>false<span class="tag">&lt;/<span class="name">DownloadNuGetExe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>を</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">DownloadNuGetExe</span> <span class="attr">Condition</span>=<span class="string">&quot; &#x27;$(DownloadNuGetExe)&#x27; == &#x27;&#x27; &quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">DownloadNuGetExe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>に修正します。<br>これでAppVeyorでエラーがなくなります。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p><a href="http://stackoverflow.com/">Stackoverflow</a>さん、いつもありがとうございます。</p>]]></content>
      
      
      <categories>
          
          <category> CI </category>
          
          <category> オープンソース </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ディープラーニング Caffe for Windows その2 指紋紋様分類</title>
      <link href="2016/06/23/1140/"/>
      <url>2016/06/23/1140/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/05/28/1372">前回</a>は環境を構築してみました、</p><a id="more"></a><h1 id="指紋"><a href="#指紋" class="headerlink" title="指紋"></a>指紋</h1><p>指紋といえば、ごく一部の人間を覗いて全ての人間が手にもっている隆線によって形成される紋様です。<br>指紋を持っていない人間もごく一部に存在しますが…</p><p><strong>iPhone</strong>の<strong>TouchID</strong>で急激に認知度が向上した気がします。<br>特に日本では、指紋の採取というのは、人権団体とかの声とかプライバシー云々でいまいち悪のレッテルを貼られている感が否めません。</p><p>さて、指紋は古くから使われており、個人を識別する徴として、日本では拇印としてよく知られています。<br>個人を識別するだけなら、指紋以外に、虹彩、静脈、顔が有名です。<br>他にも掌紋、足紋もあります。</p><h3 id="生体認証"><a href="#生体認証" class="headerlink" title="生体認証"></a>生体認証</h3><p>この手の生物に備わる生体の特徴に基づいた認証を<strong>生体認証 (Biometrics)</strong> と呼びます。<br>指掌紋技術では、たくさんの企業が競争していますが、<strong>3M Cogent (アメリカ)**、</strong>Morpho (フランス)<strong>、</strong>NEC (日本)<strong>が三強です。<br>ここでいう三強とは、司法機関、入国管理など、大規模システムでの納入実績が大きい企業を指します。<br>(例えば、ロサンゼルス国際空港では、Morphoの指紋採取機器が入国管理ゲートにありますし、成田空港にはNECの指紋採取機器があります。) iPhoneの場合、</strong>Apple<strong>は</strong>AuthenTec社**を買収して、TouchIDを開発したようですが、これは指紋を読み取る機器の買収がメインだったと思われます。<br>指紋の採取の場合、光学センサーで読み取るのが主流ですが、AuthenTec社の場合は周波数で読み取るセンサーだったようで、それがiPhoneでの採用に繋がったのでしょう。</p><p>ですので、三強にAppleがない、というのは別に悪意があるわけではなく、この三強は、大規模システム、たとえば、数千万の指紋データから瞬時に個人を特定するなどの総合的な技術を持っています。TouchIDの場合、iPhoneに含まれる指紋データは一人のデータでかつ最大10本の指データです。大して大規模システムでは、入力指紋、つまり識別したい指紋1に対して候補となる指紋データは数千万にも上ることもあります。<br>事実、アメリカ国立標準技術研究所 (National Institute of Standards and Technology, NIST) の指掌紋技術コンテストでは、計測する内容にもよりますが、上位はこの三強が常です。</p><p><a href="http://jpn.nec.com/press/201408/20140821_02.html">NEC、米国国立標準技術研究所(NIST)の指紋認証技術のベンチマークテストにおいて第1位の評価を獲得</a> <a href="http://www.morpho.com/en/media/20141119_morpho-places-first-nist-2014-minex-fingerprint-benchmark">Morpho places first in NIST 2014 MINEX fingerprint benchmark</a></p><p>さらに、犯罪現場に残った指紋、いわゆる遺留指紋とデータベースに載っている人間から直接採取した指紋 (押捺指紋) との照合、また他の犯罪現場で採取した別の遺留指紋との照合など、指紋照合と言ってもいろんなパターンがあるわけです。<br>特に遺留指紋は現場に指全体がきれいに残っているなんてあまりなくて、別の指紋と重なっている、一部しか残っていないとかよくある話です。<br>これらの問題を解決する技術をトータルで持っているのが上位三強です。</p><p>とはいっても、ニッチな技術で攻めるのは間違っていなくて、AuthenTec社はそれが幸いしてAppleに評価してもらえたわけです。</p><h3 id="特徴データ"><a href="#特徴データ" class="headerlink" title="特徴データ"></a>特徴データ</h3><p>さて、指紋、掌紋、足紋でも、他でもそうですが、採取した生体情報から、その生体情報を特徴付ける情報のみを抽出してデータ化します。<br>これを特徴データと呼んでいますが、指紋の場合、そのなかに特徴点 (Minutia) と呼ばれるものがあります。<br>特徴点が12個一致すれば、照合上、同一指紋とみなすことができます。<br>また、指紋においては、隆線 (芯線:Skeleton)も大事なデータですが、指紋の紋様自体も重要です。</p><h3 id="紋様"><a href="#紋様" class="headerlink" title="紋様"></a>紋様</h3><p>紋様には様々な種類がありますが、人種によって、紋様毎の発現率が異なります。下記はその一例です。実際はもっと種類があります。</p><p>[table id=23 /] </p><p><a href="../../../../public/2016/04/Patterns.png"><img src="../../../../public/2016/04/Patterns-1024x229.png"></a><br>紋様の一例</p><p>前置きが長くなりましたが、これらの紋様をディープラーニングで分類してみましょう。</p><h1 id="準備1"><a href="#準備1" class="headerlink" title="準備1"></a>準備1</h1><p>今回、DeepLearningのために、<strong>GeForce GTX 750 Ti</strong>を入手しました。<br>というわけで、Caffeのビルド設定を変更します。<br>Pythonは有効にし、<strong>CpuOnlyBuild</strong>をfalse、<strong>UseCuDNN</strong>をtrueにします。</p><p>特に重要なのが、<strong>CudaArchitecture</strong>です。<br>GTX 750 TiのCompute Capabilityは5.0なので、<strong>compute_50,sm_50</strong>を設定します。</p><p>以上で、ソリューションをリビルドします。</p><h1 id="準備2"><a href="#準備2" class="headerlink" title="準備2"></a>準備2</h1><p>次にデータですが、NISTが指紋データを教師情報と一緒に公開しています。<br>こんなの日本じゃありえません。素晴らしい。<br>下記からダウンロードできます。ただし、接続の調子が悪いのかタイムアウトすることが多々あります。</p><ul><li><a href="http://www.nist.gov/srd/nistsd4.cfm">Special Database 4 - NIST 8-bit Gray Scale Images of Fingerprint Image Groups.</a></li><li><a href="http://www.nist.gov/srd/nistsd9.cfm">Special Database 9 - NIST 8-bit Gray Scale Images of Mated Fingerprint Card Pairs.</a></li><li><a href="http://www.nist.gov/srd/nistsd14.cfm">NIST Mated Fingerprint Card Pairs 2. Has 2,700 ten-print card pairs of rolled fingerprints (no plain impressions).</a></li></ul><p>今回は、Special Database4を使います。4,9,14は無料ですが、他は有料だったりします。</p><p>入手したファイルを解凍すると、下記のような構成になっています。</p><ul><li>NISTSpecialDatabase4GrayScaleImagesofFIGS\sd04\png_txt\figs_0</li><li>NISTSpecialDatabase4GrayScaleImagesofFIGS\sd04\png_txt\figs_1</li><li>NISTSpecialDatabase4GrayScaleImagesofFIGS\sd04\png_txt\figs_2</li><li>NISTSpecialDatabase4GrayScaleImagesofFIGS\sd04\png_txt\figs_3</li><li>NISTSpecialDatabase4GrayScaleImagesofFIGS\sd04\png_txt\figs_4</li><li>NISTSpecialDatabase4GrayScaleImagesofFIGS\sd04\png_txt\figs_5</li><li>NISTSpecialDatabase4GrayScaleImagesofFIGS\sd04\png_txt\figs_6</li><li>NISTSpecialDatabase4GrayScaleImagesofFIGS\sd04\png_txt\figs_7</li></ul><p>各フォルダ内にpngとtxtファイルが500個ずつ含まれています。<br>学習にはfigs_0からfigs_6の3500枚の画像を使います。テストにはfigs_7を使います。</p><p>さて、データを見ていると指紋画像のサイズが512x512であることに気がつくと思います。<br>指紋認証の世界では512x512の500ppi (pixel per inch) が常識です。1000ppiもあります。<br>txtには、性別、紋様種別が含まれています。<br>このデータ群の紋様種別は、Whorls、Arch、Loops、Tented Arch、Right Loopの5種です。</p><p>これらを使って、画像のデータベース作成、学習、テスト、分類を実行します。<br>これら一連の流れを自動化したバッチを用意しました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/takuya-takeuchi/Demo/tree/master/Caffe1" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/6241854?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">takuya-takeuchi/Demo</div><div class="hbc-url">https://github.com/takuya-takeuchi/Demo/tree/master/Caffe1</div><div class="hbc-description">Sample source code for Demonstration, Experiment and Test - takuya-takeuchi/Demo</div></div></div></div></a></div></div><p>これらを、png_txtフォルダ直下に展開し、下記の2点を修正します。</p><h2 id="0-SetEnv-bat"><a href="#0-SetEnv-bat" class="headerlink" title="0.SetEnv.bat"></a>0.SetEnv.bat</h2><p><strong>CAFFE_ROOT</strong>、<strong>MINICONDA</strong>、<strong>ROOTFOLDER</strong>を環境に応じて変更します。</p><h2 id="io-py"><a href="#io-py" class="headerlink" title="io.py"></a>io.py</h2><p>今回の実験では、入力画像を8bitにして扱うことでメモリ消費量を削減しているのですが、PythonのCaffeモジュールが8bit画像として、画像を入力できないため、ネットワークと入力データの整合性がとれません。<br>そのため、<strong>7.Classify.bat</strong>を使うときだけ、<strong>&lt;Miniconda2_root&gt;\Lib\site-packages\caffe\io.py</strong>を修正します。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- def load_image(filename, color=True):</span></span><br><span class="line"><span class="addition">+ def load_image(filename, color=False):</span></span><br></pre></td></tr></table></figure><p>と直します。<br>これで準備完了です。</p><h1 id="実験"><a href="#実験" class="headerlink" title="実験"></a>実験</h1><p>バッチを1から順に実行します。GPUを使えるなら、</p><ul><li>1.CreateListFile.ps1</li><li>2.CreateDatabase.bat</li><li>3.MeanDatabase.bat</li><li>4.Train_GPU.bat</li><li>7.Classify.bat</li></ul><p>とコマンドプロンプトまたはPowerShellで順番に実行します。<br>ただし、<strong>7.Classify.bat</strong>は引数に画像ファイルを指定します。<br>例えば、</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span>.Classify.bat &quot;D:\Works\NISTSpecialDatabase4GrayScaleImagesofFIGS\sd04\png_txt\figs_7\f1752_04.png&quot;</span><br></pre></td></tr></table></figure><p>のような感じです。<br><strong>4.Train_GPU.bat</strong>を実行することで、学習とテストを同時に実行します。<br>その結果、精度を表すAccuracyが10%弱が、最終的に約80%まで向上していることがわかります。3500回の学習で10分くらいでした。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">I0623 <span class="number">00</span>:<span class="number">35</span>:<span class="number">05</span>.<span class="number">288350</span>  <span class="number">6908</span> solver.cpp:<span class="number">337</span>] Iteration <span class="number">0</span>, Testing <span class="built_in">net</span> (#<span class="number">0</span>)</span><br><span class="line">I0623 <span class="number">00</span>:<span class="number">35</span>:<span class="number">07</span>.<span class="number">777075</span>  <span class="number">6908</span> blocking_queue.cpp:<span class="number">50</span>] Data layer prefetch queue empty</span><br><span class="line">I0623 <span class="number">00</span>:<span class="number">35</span>:<span class="number">09</span>.<span class="number">379405</span>  <span class="number">6908</span> solver.cpp:<span class="number">404</span>]     Test <span class="built_in">net</span> output #<span class="number">0</span>: accuracy = <span class="number">0</span>.<span class="number">148</span></span><br><span class="line">I0623 <span class="number">00</span>:<span class="number">35</span>:<span class="number">09</span>.<span class="number">382393</span>  <span class="number">6908</span> solver.cpp:<span class="number">404</span>]     Test <span class="built_in">net</span> output #<span class="number">1</span>: loss = <span class="number">1</span>.<span class="number">61361</span> (* <span class="number">1</span> = <span class="number">1</span>.<span class="number">61361</span> loss)</span><br></pre></td></tr></table></figure><p>が</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">I0623 <span class="number">00</span>:<span class="number">49</span>:<span class="number">38</span>.<span class="number">984040</span>  <span class="number">6908</span> solver.cpp:<span class="number">317</span>] Iteration <span class="number">3500</span>, loss = <span class="number">0</span>.<span class="number">304031</span></span><br><span class="line">I0623 <span class="number">00</span>:<span class="number">49</span>:<span class="number">38</span>.<span class="number">986039</span>  <span class="number">6908</span> solver.cpp:<span class="number">337</span>] Iteration <span class="number">3500</span>, Testing <span class="built_in">net</span> (#<span class="number">0</span>)</span><br><span class="line">I0623 <span class="number">00</span>:<span class="number">49</span>:<span class="number">42</span>.<span class="number">858041</span>  <span class="number">6908</span> solver.cpp:<span class="number">404</span>]     Test <span class="built_in">net</span> output #<span class="number">0</span>: accuracy = <span class="number">0</span>.<span class="number">788</span></span><br><span class="line">I0623 <span class="number">00</span>:<span class="number">49</span>:<span class="number">42</span>.<span class="number">860039</span>  <span class="number">6908</span> solver.cpp:<span class="number">404</span>]     Test <span class="built_in">net</span> output #<span class="number">1</span>: loss = <span class="number">0</span>.<span class="number">465629</span> (* <span class="number">1</span> = <span class="number">0</span>.<span class="number">465629</span> loss)</span><br><span class="line">I0623 <span class="number">00</span>:<span class="number">49</span>:<span class="number">42</span>.<span class="number">864039</span>  <span class="number">6908</span> solver.cpp:<span class="number">322</span>] Optimization Done.</span><br><span class="line">I0623 <span class="number">00</span>:<span class="number">49</span>:<span class="number">42</span>.<span class="number">869042</span>  <span class="number">6908</span> caffe.cpp:<span class="number">223</span>] Optimization Done.</span><br></pre></td></tr></table></figure><p>になります。<br>しかし、これでは、本当に正しく学習できるいるのかいまいちわからないため、<strong>7.Classify.bat</strong>に学習に使った画像以外 (今回はfigs_7) から一枚を選んで、引数として渡して実行します。<br>結果として、f1751_08.pngの場合、</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Loading file: D:\Works\NISTSpecialDatabase4GrayScaleImagesofFIGS\sd04\png_txt\figs_7\f1751_08.png</span><br><span class="line">Classifying <span class="number">1</span> inputs.</span><br><span class="line">Done <span class="keyword">in</span> <span class="number">0</span>.<span class="number">22</span> s.</span><br><span class="line">Saving results into output.npy</span><br><span class="line">#<span class="number">1</span> | <span class="number">3</span> T | <span class="number">84</span>.<span class="number">0</span>%</span><br><span class="line">#<span class="number">2</span> | <span class="number">2</span> R | <span class="number">11</span>.<span class="number">8</span>%</span><br><span class="line">#<span class="number">3</span> | <span class="number">0</span> A |  <span class="number">2</span>.<span class="number">1</span>%</span><br></pre></td></tr></table></figure><p>T (Tented Arch) が一番高い確率を出力してます。画像に対応するテキストファイル </p><ul><li>Gender: M</li><li>Class: T</li><li>History: f1751_08.pct TA a2618.pct</li></ul><p>と見比べると、一致していることがわかります。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>DeepLearningのネタは結構転がっていますが、指紋を使った実験はweb上では無いと思います。<br>既に論文でDeepLearningでの紋様分類は存在しましたが、外国の論文でした。<br>日本語としての記事としてはなかなかレアではないでしょうか？</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/Caffe1">https://github.com/takuya-takeuchi/Demo/tree/master/Caffe1</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> %e3%83%87%e3%82%a3%e3%83%bc%e3%83%97%e3%83%a9%e3%83%bc%e3%83%8b%e3%83%b3%e3%82%b0 </category>
          
          <category> Caffe </category>
          
          <category> Windows </category>
          
          <category> オープンソース </category>
          
          <category> ディープラーニング </category>
          
          <category> 指掌紋 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その3 pipでインストールする先のPython.exeを指定する</title>
      <link href="2016/06/22/1414/"/>
      <url>2016/06/22/1414/</url>
      
        <content type="html"><![CDATA[<p>久しぶりの更新です。ちゃんと自分の知識をアウトプットしないとダメですね。</p><a id="more"></a><h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>WindowsでCaffeの環境を作っていて、<strong>pip</strong> を使って、Pythonに必要なモジュールを入れたはずが、何度やってもモジュールが認識されないことがありました。<br>どうも複数のPython (私の場合、<strong>Python 2.7</strong> と <strong>Miniconda2</strong>) が同一システムに含まれていたため、コマンドプロンプトでパスの通っている <strong>Python.exe</strong> が自分の意図したほうでなかったのが原因でした。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p>割と単純で、pipでモジュールをインストールする先のPython.exeを指定し、下記のように起動します。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;インストール先のPython.exeのフルパス&gt; -m pip install &lt;モジュール名&gt;</span><br></pre></td></tr></table></figure><p>これで、pipでインストール先を切り替えることができます。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>複数のPythonを入れるのは良くないのかもしれませんね。今後、こういう意図しない動きをする可能性があるので要注意です。</p>]]></content>
      
      
      <categories>
          
          <category> %e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%e8%a8%80%e8%aa%9e </category>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その2 利用可能なWMIの名前空間一覧を確認する</title>
      <link href="2016/05/30/1401/"/>
      <url>2016/05/30/1401/</url>
      
        <content type="html"><![CDATA[<p>WMI (Windows Management Instrumentation) って面倒だよね。便利だとは思いますが。</p><a id="more"></a><h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>ちょっと気になる機能をC#から操作したいと思って、色々頑張っているんですが、WMIを使おうと思ってげんなりしています。<br>WMIで使うクラスの一覧はPowerShellから</p><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">Get-WmiObject</span> <span class="literal">-class</span> meta_class).Name | <span class="built_in">sort</span></span><br></pre></td></tr></table></figure><p>ってやれば出てくるらしいんだけど、何故だかお目当てのものが出てこない。<br>さてどうしたものか、と思ってみると、WMIの名前空間の一覧を見る方法があるらしい。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p><strong>[コンピュータの管理]</strong> -&gt; <strong>[WMI コントロール]</strong> -&gt; <strong>[プロパティ]</strong> と進むと、確認できるのとのこと。</p><p><a href="../../../../public/2016/05/1-10.png"><img src="../../../../public/2016/05/1-10.png" alt="コンピュータの管理"></a><br>コンピュータの管理</p><p><a href="../../../../public/2016/05/2-8.png"><img src="../../../../public/2016/05/2-8.png" alt="WMI コントロールのプロパティ"></a></p><p>WMI コントロールの右クリックメニューから”プロパティ”を選択</p><p><a href="../../../../public/2016/05/3-6.png"><img src="../../../../public/2016/05/3-6.png" alt="プロパティの詳細設定"></a><br>プロパティの詳細設定</p><p>ここで変更をクリック。</p><p><a href="../../../../public/2016/05/4-4.png"><img src="../../../../public/2016/05/4-4.png" alt="名前空間のブラウザ"></a><br>名前空間のブラウザ</p><p>とりあえず、欲しい名前空間のものが存在することはわかった。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>PowerShellのスクリプトに最初から出てくればいいんですけどねぇ。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> Windows </category>
          
          <category> Windows Management Instrumentation </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ディープラーニング Caffe for Windows その1 環境構築</title>
      <link href="2016/05/28/1372/"/>
      <url>2016/05/28/1372/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/02/20/808">結構前</a>にUbuntuにCaffeをインストールしました。</p><a id="more"></a><h1 id="Windows版がある"><a href="#Windows版がある" class="headerlink" title="Windows版がある!!"></a>Windows版がある!!</h1><p>会社でWindows上で動作するDeepLearning環境はないか？という質問を受けて、調べることになりました。<br>その過程でCaffeがWindowsで動作するように、<strong>Microsoft</strong>がgithubで開発を行っていることを知りました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/Microsoft/caffe" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars2.githubusercontent.com/u/6154722?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">microsoft/caffe</div><div class="hbc-url">https://github.com/Microsoft/caffe</div><div class="hbc-description">Caffe on both Linux and Windows. Contribute to microsoft/caffe development by creating an account on GitHub.</div></div></div></div></a></div></div><p>CNTKがあるのに、Caffe?って思いましたが、Windowsシステムに開発者を集めるための一環としては、既にDeepLearningの世界ではそれなりの地位があるCaffeを使えるようにすることは非常に意義があるでしょう。</p><p>Windows向けのCaffeは個人デベロッパーがWindows向けにCaffeｗフォークして開発していました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/niuzhiheng/caffe" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars2.githubusercontent.com/u/1098101?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">niuzhiheng/caffe</div><div class="hbc-url">https://github.com/niuzhiheng/caffe</div><div class="hbc-description">Caffe. Contribute to niuzhiheng/caffe development by creating an account on GitHub.</div></div></div></div></a></div></div><p>個人ではなく、巨大組織が開発にコミットするのは非常に心強いです。<br>(上述の個人フォークは一年前に開発が止まっています。)</p><h1 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h1><p>マニュアルがあるので、それを見ながらインストールしていきます。<br>トップページにあります。</p><p><a href="https://taktak.jp/2016/02/27/845">CNTKのインストール</a>といくつかかぶっていますのでサクサク行きましょう。</p><h1 id="ソースコード"><a href="#ソースコード" class="headerlink" title="ソースコード"></a>ソースコード</h1><p>Githubからクローンします。<br>コマンドでもいいですし、TortoiseGitやSourceTreeのようなGUIクライアントでも良いです。</p><h1 id="設定ファイルの準備"><a href="#設定ファイルの準備" class="headerlink" title="設定ファイルの準備"></a>設定ファイルの準備</h1><p>ビルドに必要な設定ファイルです。<br>クローンしたフォルダを <strong><caffe_root></strong> として、下記のコマンドを実行します。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">copy</span> &lt;caffe_root&gt;\windows\CommonSettings.props.example caffe_path&gt;\windows\CommonSettings.props</span><br></pre></td></tr></table></figure><h1 id="CUDA"><a href="#CUDA" class="headerlink" title="CUDA"></a>CUDA</h1><p>7.5をインストールします。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://developer.nvidia.com/cuda-toolkit" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=developer.nvidia.com"></img><div class="hbc-site-name">NVIDIA Developer</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">CUDA Toolkit</div><div class="hbc-url">https://developer.nvidia.com/cuda-toolkit</div><div class="hbc-description">CUDA Toolkit Develop, Optimize and Deploy GPU-Accelerated Apps The NVIDIA® CUDA® Toolkit provides a development environment for creating hig…</div></div></div></div></a></div></div><p>環境に応じたインストーラをダウンロードしてください。</p><h1 id="NVIDIA-CUDA-Deep-Neural-Network-library-cuDNN"><a href="#NVIDIA-CUDA-Deep-Neural-Network-library-cuDNN" class="headerlink" title="NVIDIA CUDA Deep Neural Network library (cuDNN)"></a>NVIDIA CUDA Deep Neural Network library (cuDNN)</h1><p><strong>cuDNN v3</strong>または<strong>cuDNN v4</strong>をインストールします。<br>ダウンロードのために、事前に登録しておく必要があります。登録はすぐにできるわけではないので、余裕を持って行っておきましょう。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://developer.nvidia.com/cudnn" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=developer.nvidia.com"></img><div class="hbc-site-name">NVIDIA Developer</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">NVIDIA cuDNN</div><div class="hbc-url">https://developer.nvidia.com/cudnn</div><div class="hbc-description">NVIDIA cuDNN The NVIDIA CUDA® Deep Neural Network library (cuDNN) is a GPU-accelerated library of primitives for deep neural networks. cuDNN…</div></div></div></div></a></div></div><p>CUDAインストール後、<strong>環境変数CUDA_PATH</strong>が設定されますが、そこにcuDNNをコピーします。<br>または、<strong>CommonSettings.props</strong>の24行目にある<strong>CuDnnPath ノード</strong>にcuDNNへのパスを追記します。<br>展開したzipの構成が、<strong>D:\Works\Lib\NVIDIA\cudnn-4.0\cuda\bin</strong>のようになっているなら、下記のようになります。</p><p><code>D:\Works\Lib\NVIDIA\cudnn-4.0</code></p><p>また、cuDNNを無効にすることもできます。CommonSettings.props内の<strong>UseCuDNN ノード</strong>のtrueをfalseに変更します。<br>下記のようになります。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">UseCuDNN</span>&gt;</span>false<span class="tag">&lt;/<span class="name">UseCuDNN</span>&gt;</span> </span><br></pre></td></tr></table></figure><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p>まず、Caffe Python ラッパーをビルドするために、CommonSettings.props内の<strong>PythonSupportノード</strong>のfalseをtrueに変更します。<br>下記のようになります。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PythonSupport</span>&gt;</span>true<span class="tag">&lt;/<span class="name">PythonSupport</span>&gt;</span></span><br></pre></td></tr></table></figure><p>次に、Miniconda 2.7をインストールします。64-bitと32-bitがあるので、適切なインストーラを実行してください。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://conda.pydata.org/miniconda.html" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=conda.pydata.org"></img><div class="hbc-site-name">conda.pydata.org</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">Miniconda — Conda   documentation</div><div class="hbc-url">http://conda.pydata.org/miniconda.html</div></div></div></div></a></div></div><p><a href="../../../../public/2016/05/1-8.png"><img src="../../../../public/2016/05/1-8.png" alt="インストーラ初期画面"></a><br>インストーラ初期画面</p><p><a href="../../../../public/2016/05/2-7.png"><img src="../../../../public/2016/05/2-7.png" alt="ライセンス"></a><br>ライセンス</p><p><a href="../../../../public/2016/05/3-5.png"><img src="../../../../public/2016/05/3-5.png" alt="インストール先"></a><br>インストール先</p><p>マニュアルにはAll Userと書いてありますが、特に気にする必要はないでしょう。</p><p><a href="../../../../public/2016/05/4-3.png"><img src="../../../../public/2016/05/4-3.png" alt="インストール先ディレクトリ指定"></a><br>インストール先ディレクトリ指定</p><p>お好みの場所に。</p><p><a href="../../../../public/2016/05/5-1.png"><img src="../../../../public/2016/05/5-1.png" alt="オプション"></a><br>オプション</p><p>環境変数への追加は必須なので、最初のオプションはチェックします。<br>2つめのオプションはなくても良いです。</p><p><a href="../../../../public/2016/05/6-2.png"><img src="../../../../public/2016/05/6-2.png" alt="インストール中"></a><br>インストール中</p><p><a href="../../../../public/2016/05/7-2.png"><img src="../../../../public/2016/05/7-2.png" alt="インストール完了"></a> <a href="../../../../public/2016/05/8-2.png"><img src="../../../../public/2016/05/8-2.png" alt="インストール完了"></a><br>インストール完了</p><p>インストール完了後、Minicondaへのパスが<strong>環境変数PATH</strong>に追加されます。<br>さらに、Pythonのインストールディレクトリを<strong>PythonDirノード</strong>に記述します。<br>これはgithubのマニュアルにも書いていないので注意です。デフォルトで<strong>C:\Miniconda2</strong>になっているので、そこにインストールしたなら気にする必要はありません。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PythonDir</span>&gt;</span>C:\Program Files\Miniconda2\<span class="tag">&lt;/<span class="name">PythonDir</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最後に、管理者権限で実行したコマンドプロンプトから下記のコマンドを実行します。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install --yes numpy scipy matplotlib scikit-image pip pip install protobuf</span><br></pre></td></tr></table></figure><p>必要なパッケージのダウンロードとインストールが実行されます。<br>少し時間がかかりますが、コーヒーでも飲んで待ちましょう。</p><p>最後に、Pythonを使って後述のビルドを実行した後、使用するために、下記のどちらかを実行します。</p><ul><li>PythonPath環境変数に <strong>\Build\x64\Release\pycaffe</strong> へのパスを通す</li><li><strong>\Build\x64\Release\pycaffe\caffe</strong> を <strong>\lib\site-packages</strong> にコピー</li></ul><p>個人的には、後者がおすすめです。環境変数を汚したくないので。<br>シンボリックリンクでも貼って、常にsite-packagesがcaffeフォルダを参照するようにしましょう。<br>コマンドは下記です。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mklink \lib\site-packages\caffe \Build\x64\Release\pycaffe\caffe /D</span><br></pre></td></tr></table></figure><h1 id="MATLAB"><a href="#MATLAB" class="headerlink" title="MATLAB"></a>MATLAB</h1><p>MATLABを私は持っていませんので、マニュアルの説明だけです。</p><p>Caffe MATLAB ラッパーをビルドするために、CommonSettings.props内の<strong>MatlabSupportノード</strong>のfalseをtrueに変更します。<br>下記のようになります。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">MatlabSupport</span>&gt;</span>true<span class="tag">&lt;/<span class="name">MatlabSupport</span>&gt;</span></span><br></pre></td></tr></table></figure><p>さらに、MATLABのインストールディレクトリを<strong>MatlabDirノード</strong>に記述します。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">MatlabDir</span>&gt;</span>C:\Program Files\MATLAB\R2014b<span class="tag">&lt;/<span class="name">MatlabDir</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最後に、MATLABを使って後述のビルドを実行した後、使用するために、</p><ul><li>MATLABの検索パスに生成したmatcaffeフォルダーを追加</li><li><strong>\Build\x64\Release</strong>をパスに通す</li></ul><p>を実行します。</p><h1 id="ビルド"><a href="#ビルド" class="headerlink" title="ビルド"></a>ビルド</h1><p>Visual Studio 2013でビルドします。<br><strong>\windows\Caffe.sln</strong>を開いてビルドしましょう。<br>もしくは、下記のコマンドをコマンドプロンプトから実行することで、Visual Studioを立ち上げることなくビルドできます。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> \windows\Caffe.sln</span><br><span class="line">&quot;C:\Program Files (x86)\MSBuild\<span class="number">12</span>.<span class="number">0</span>\Bin\amd64\MSBuild.exe&quot; /p:Configuration=Release /p:Platform=&quot;x64&quot; Caffe.sln /t:clean /verbosity:quiet /nologo</span><br><span class="line">&quot;C:\Program Files (x86)\MSBuild\<span class="number">12</span>.<span class="number">0</span>\Bin\amd64\MSBuild.exe&quot; /p:Configuration=Release /p:Platform=&quot;x64&quot; Caffe.sln /t:rebuild /verbosity:quiet /nologo &gt; Build.log</span><br></pre></td></tr></table></figure><p>かなり時間がかかります。</p><p>ビルド完了後、<strong>\Build\x64\Release</strong>に<strong>caffe.exe</strong>が生成されています。<br>ビルド終了後も生成されていない場合は、Build.logを確認して、エラーに対処してください。</p><p>ちなみに、caffeには様々な依存ライブラリ (boost、glog、hdf5、LevelDB、OpenCV等) がありますが、それらの依存関係はNuGetで解決しています。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>環境構築が終わりましたので、次回はモデルを使用して、学習をしてみたいと思います。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> %e3%83%87%e3%82%a3%e3%83%bc%e3%83%97%e3%83%a9%e3%83%bc%e3%83%8b%e3%83%b3%e3%82%b0 </category>
          
          <category> Caffe </category>
          
          <category> Windows </category>
          
          <category> オープンソース </category>
          
          <category> ディープラーニング </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>開発メモ その1 Visual Studio 2013が起動しない</title>
      <link href="2016/05/27/1386/"/>
      <url>2016/05/27/1386/</url>
      
        <content type="html"><![CDATA[<p>最近開発環境が壊れてきたのか、またまた問題がでてきました。</p><a id="more"></a><h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>Visual Studio 2013起動中</p><p><a href="../../../../public/2016/05/1-9.png"><img src="../../../../public/2016/05/1-9.png" alt="&#39;Microsoft.VisualStudio.Shell.Connected.ConnectedUser.ConnectedUserPackage&#39; パッケージは正しく読み込まれませんでした"></a><br>‘Microsoft.VisualStudio.Shell.Connected.ConnectedUser.ConnectedUserPackage’ パッケージは正しく読み込まれませんでした</p><p>というメッセージが。しかもOKボタンでも閉じても、別のパッケージがないというメッセージが次から次へと。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://social.msdn.microsoft.com/Forums/sqlserver/en-US/d068f530-f4ac-4ce5-bdfe-dcbfe5bf6e5c/visual-studio-2013-provider-package-failed-to-load?forum=visualstudiogeneral" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=social.msdn.microsoft.com"></img><div class="hbc-site-name">social.msdn.microsoft.com</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">    visual studio 2013 provider package failed to load</div><div class="hbc-url">https://social.msdn.microsoft.com/Forums/sqlserver/en-US/d068f530-f4ac-4ce5-bdfe-dcbfe5bf6e5c/visual-studio-2013-provider-package-failed-to-load?forum=visualstudiogeneral</div></div></div></div></a></div></div><p>にて解決策が。<br>**%USERPROFILE%\AppData\Local\Microsoft\VisualStudio\12.0\ComponentModelCache**を削除してから起動すると、直るとのこと。<br>事実、その通りにしたら無事に起動しました。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>原因は不明。大量の拡張機能等がインストールされたりすると発生する予感。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> Visual Studio </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Red Armory 1.1.0.0 公開</title>
      <link href="2016/05/22/1369/"/>
      <url>2016/05/22/1369/</url>
      
        <content type="html"><![CDATA[<p>機能追加とバグ修正を実施。詳細は <a href="https://taktak.jp/wordpress/apps/">APPS</a> または <a href="https://github.com/takuya-takeuchi/RedArmory">GitHub</a> をご覧ください。</p>]]></content>
      
      
      <categories>
          
          <category> ソフトウェア紹介 </category>
          
          <category> 自作ソフトウェア </category>
          
          <category> Red Armory </category>
          
          <category> オープンソース </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BitNami Redmine Statck を3.2.2-0に更新した</title>
      <link href="2016/05/19/1363/"/>
      <url>2016/05/19/1363/</url>
      
        <content type="html"><![CDATA[<p>会社のPCが一日三回くらいBSOD(死のブルースクリーン)に陥るので、初期化を実施しました。この際、3.2.0-0を現時点の最新版に更新。</p><a id="more"></a><h1 id="やっぱり一筋縄ではいかない"><a href="#やっぱり一筋縄ではいかない" class="headerlink" title="やっぱり一筋縄ではいかない"></a>やっぱり一筋縄ではいかない</h1><p>自作のRedArmoryがあるので、データベースやプラグインの退避と復元は良いのですが、マイグレーションは相変わらず面倒。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/takuya-takeuchi/RedArmory" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/6241854?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">takuya-takeuchi/RedArmory</div><div class="hbc-url">https://github.com/takuya-takeuchi/RedArmory</div><div class="hbc-description">Backup and Restore tool for Bitnami Redmine Stack. Contribute to takuya-takeuchi/RedArmory development by creating an account on GitHub.</div></div></div></div></a></div></div><p>マイグレーションもバッチを組んでいるので、そこまで苦ではないのですが、はまるところには本当にはまります。</p><h1 id="git-cloneが動かない"><a href="#git-cloneが動かない" class="headerlink" title="git cloneが動かない"></a>git cloneが動かない</h1><p>会社のPCには知識DBとしてredmine_knowledgebaseを使っています。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/alexbevi/redmine_knowledgebase" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars1.githubusercontent.com/u/135803?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">alexbevi/redmine_knowledgebase</div><div class="hbc-url">https://github.com/alexbevi/redmine_knowledgebase</div><div class="hbc-description">A knowledgebase plugin for Redmine. Contribute to alexbevi/redmine_knowledgebase development by creating an account on GitHub.</div></div></div></div></a></div></div><p>ですが、このソフトもそれなりに導入に際してトラブルが多いです。<br>もちろん、トラブルを乗り越える価値は絶対にあります。</p><p>久しぶりにPCを初期化して0から環境を構築したので、すんなりマイグレーションできなかったわけです。</p><p>で、何が問題かというと、<strong>bundle install</strong>で依存gemを自動で持ってくるようにしたのですが、これが失敗するんです。<br>まず、redmine_knowledgebaseのgemspecはredmine_acts_as_taggable_onというgemを持ってこようとします。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/alexbevi/redmine_acts_as_taggable_on" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars1.githubusercontent.com/u/135803?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">alexbevi/redmine_acts_as_taggable_on</div><div class="hbc-url">https://github.com/alexbevi/redmine_acts_as_taggable_on</div><div class="hbc-description">A gem which allows multiple Redmine plugins to use acts_as_taggable_on without stepping on each others&#39; toes. - alexbevi/redmine_acts_as_tag…</div></div></div></div></a></div></div><p>この際、gitを使ってCloneするのですが、**git://**というプロトコルで通信するため、会社の通信環境では通らないわけです。<br>しかもporxyのおまけ付き。これは別にいいです。<br>下記のコマンドでgitプロトコルを強制的にhttpsアクセスに切り替えています。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global url.<span class="string">&quot;https://&quot;</span>.insteadOf git://</span><br></pre></td></tr></table></figure><p>また、下記のコマンドでproxyを有効にします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy http://proxy.example.com:8080</span><br></pre></td></tr></table></figure><p>ここまでこれば普通に動くはずなんです。<br>が、動かない。bundle installでredmine_acts_as_taggable_onを持ってくるのに失敗する。<br>エラーの出力も、具体的なエラーを出さない。</p><h1 id="dllが古い"><a href="#dllが古い" class="headerlink" title="dllが古い"></a>dllが古い</h1><p>さて、悩むこと2時間。<br>何が原因だったのか、というと思い出しました。</p><p>原因は、OpenSSLまわりのdllが古いことでした。libeay32が古いせいか、git-remot-https.exeがコールしようとしているAPIが存在しないため、cloneに失敗していたようです。<br><strong>プロシージャ エントリ ポイント XXXXXXX がダイナミック リンク ライブラリ LIBEAY32.dll から見つかりませんでした。</strong>ってやつです。</p><p>どうしてこうなるのかわかりませんが、なるものは仕方ないですので、対応策です。<br>ただ、これは応急処置というか、システムの依存関係を壊すかもしれないので注意です。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://indy.fulgan.com/SSL/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=indy.fulgan.com"></img><div class="hbc-site-name">indy.fulgan.com</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img></img></div><div class="hbc-text"><div class="hbc-title">Index of /SSL</div><div class="hbc-url">http://indy.fulgan.com/SSL/</div></div></div></div></a></div></div><p>上記ページから、環境に合わせたzipをダウンロードしてきてください。最新版です。</p><p>Windowsの32bitなら、<strong>openssl-1.0.2h-i386-win32.zip</strong>、64bitなら<strong>openssl-1.0.2h-x64_86-win64.zip</strong>です。</p><p>これを解凍して、systemフォルダに突っ込みますが、32bit環境なら、<strong>C:\Windows\System32</strong>、64bit環境なら<strong>C:\Windows\SysWOW64</strong>にコピーしてください。64bit環境は32bit版もインストールしておいた方が良いかもしれません。</p><p>これで、bundle installのgit cloneが成功し、関連するgemを全部引っ張ってきてredmine_knowledgebaseのインストールに成功します。</p>]]></content>
      
      
      <categories>
          
          <category> プロジェクト管理 </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> Redmine </category>
          
          <category> ソフトウェア工学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Xamarinメモ その20 PCLでもNative Embeddingしてみる</title>
      <link href="2016/05/18/1355/"/>
      <url>2016/05/18/1355/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/05/07/1225">前回</a>はデバイス固有の電話機能を使ってみました。</p><a id="more"></a><h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>Xamarin.Formsの2.2から各OS固有のコントロール (Native Control)をSharedプロジェクトから生成して、ContentView.ContentやLayout.Childrenに埋め込むことができるようになりました。<br>このあたりの説明は、P3PPP様の下記の記事が参考になります。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://ticktack.hatenablog.jp/entry/2016/04/30/143738" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=ticktack.hatenablog.jp"></img><div class="hbc-site-name">ぴーさんログ</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://ogimage.blog.st-hatena.com/11696248318758645812/6653812171393728820/1461994658"></img></div><div class="hbc-text"><div class="hbc-title">【Xamarin.Forms 2.2】Embedded Platform-Specific Controls in Xamarin.Forms - ぴーさんログ</div><div class="hbc-url">http://ticktack.hatenablog.jp/entry/2016/04/30/143738</div><div class="hbc-description">Xamarin.Forms 2.2から Layout.Children や ContentView.Content に各プラットフォームのネイティブコントロールを埋め込めるようになり、Evolve 2016のキーノートでも紹介されました。 このフィーチャーを使うとCustomRe…</div></div></div></div></a></div></div><p>で、ポイントは、Sharedプロジェクトで**#ifディレクティブ**で分岐するとかする必要があるとのこと。<br>でも、思うわけですよ。C++ならともかく、モダンなC#でそんなことしたくないわけですよ。<br>ディレクティブだらけのソースなんか保守性低下するのは目に見えていますから。</p><p>で、思いました。<br>PCLから、Native Controlを使えないか？って。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p>仕組みは単純で、前回話したDependencyServiceを上手く使うだけです。<br>各プロジェクトでNative Controlを生成して、それをPCL側で使用するだけです。</p><p>ただし、当然Native Controlは、そのままでは、Xamarin.FormsのUIに追加できません。<br><a href="https://developer.xamarin.com/api/type/Xamarin.Forms.View/">Xamarin.Forms.View</a>に変換する必要があります。</p><p>この変換は拡張メソッドの<strong>Xamarin.Forms.Platform.iOS.LayoutExtensions.ToView</strong>、<strong>Xamarin.Forms.Platform.Android.LayoutExtensions.ToView</strong>、<strong>Xamarin.Forms.Platform.UWP.LayoutExtensions.ToView</strong>を使用して、Native ControlをViewに変換します。<br>今回のソースは下記になります。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/takuya-takeuchi/Demo/tree/master/Xamarin.Forms.Portable9" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/6241854?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">takuya-takeuchi/Demo</div><div class="hbc-url">https://github.com/takuya-takeuchi/Demo/tree/master/Xamarin.Forms.Portable9</div><div class="hbc-description">Sample source code for Demonstration, Experiment and Test - takuya-takeuchi/Demo</div></div></div></div></a></div></div><h4 id="PCL"><a href="#PCL" class="headerlink" title="PCL"></a>PCL</h4><p>最初にPCLの説明をします。</p><h4 id="Serviceのinterface"><a href="#Serviceのinterface" class="headerlink" title="Serviceのinterface"></a>Serviceのinterface</h4><p>3つのデバイスのNative Controlを生成するためのinterfaceである<strong>INativeControlService</strong>を定義します。<br><strong>INativeControlService.cs</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Xamarin.Forms.Portable9.Services</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">INativeControlService</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="function">View <span class="title">Create</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>各プロジェクトはPCLを参照しているので、このinterfaceを実装して各固有機能へのアクセスを提供します。</p><h4 id="View"><a href="#View" class="headerlink" title="View"></a>View</h4><p>Viewです。<br>今回はソースから追加するので、</p><p><strong>MainPage.xaml</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; ?&gt;</span><br><span class="line">&lt;ContentPage xmlns&#x3D;&quot;http:&#x2F;&#x2F;xamarin.com&#x2F;schemas&#x2F;2014&#x2F;forms&quot;</span><br><span class="line">             xmlns:x&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2009&#x2F;xaml&quot;</span><br><span class="line">             x:Class&#x3D;&quot;Xamarin.Forms.Portable9.Views.MainPage&quot;&gt;</span><br><span class="line">&lt;&#x2F;ContentPage&gt;</span><br></pre></td></tr></table></figure><p>Contentを空にしました。<br>このMainPageの生成は、PCLのApp.csで実施します。</p><p><strong>App.cs</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Xamarin.Forms.Portable9.Services;</span><br><span class="line"><span class="keyword">using</span> Xamarin.Forms.Portable9.Views;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Xamarin.Forms.Portable9</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">App</span> : <span class="title">Application</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">App</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> service = DependencyService.Get();</span><br><span class="line">            <span class="keyword">var</span> view = service.Create() <span class="keyword">as</span> View;</span><br><span class="line">            view.HorizontalOptions = LayoutOptions.Center;</span><br><span class="line">            view.VerticalOptions = LayoutOptions.Center;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// The root page of your application</span></span><br><span class="line">            MainPage = <span class="keyword">new</span> MainPage</span><br><span class="line">            &#123;</span><br><span class="line">                Content = view</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnStart</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// Handle when your app starts</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnSleep</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// Handle when your app sleeps</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnResume</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// Handle when your app resumes</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h4><p>PCLで定義したインターフェースを実装します。</p><p><strong>NativeControlService.cs</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UIKit;</span><br><span class="line"><span class="keyword">using</span> Xamarin.Forms.Platform.iOS;</span><br><span class="line"><span class="keyword">using</span> Xamarin.Forms.Portable9.iOS.Services;</span><br><span class="line"><span class="keyword">using</span> Xamarin.Forms.Portable9.Services;</span><br><span class="line"></span><br><span class="line">[<span class="meta">assembly: Xamarin.Forms.Dependency(typeof(NativeControlService))</span>]</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Xamarin.Forms.Portable9.iOS.Services</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">NativeControlService</span> : <span class="title">INativeControlService</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> View <span class="title">Create</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> label =  <span class="keyword">new</span> UILabel</span><br><span class="line">            &#123;</span><br><span class="line">                MinimumFontSize = <span class="number">14f</span>,</span><br><span class="line">                Lines = <span class="number">0</span>,</span><br><span class="line">                LineBreakMode = UILineBreakMode.WordWrap,</span><br><span class="line">                Text = <span class="string">&quot;iOS&quot;</span>,</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> label.ToView();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h4><p><strong>NativeControlService.cs</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Android.Widget;</span><br><span class="line"><span class="keyword">using</span> Xamarin.Forms.Platform.Android;</span><br><span class="line"><span class="keyword">using</span> Xamarin.Forms.Portable9.Droid.Services;</span><br><span class="line"><span class="keyword">using</span> Xamarin.Forms.Portable9.Services;</span><br><span class="line"></span><br><span class="line">[<span class="meta">assembly: Xamarin.Forms.Dependency(typeof(NativeControlService))</span>]</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Xamarin.Forms.Portable9.Droid.Services</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">NativeControlService</span> : <span class="title">INativeControlService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> View <span class="title">Create</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> view = <span class="keyword">new</span> TextView(Forms.Context)</span><br><span class="line">            &#123;</span><br><span class="line">                Text = <span class="string">&quot;Android&quot;</span>,</span><br><span class="line">                TextSize = <span class="number">14</span>,</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> view.ToView();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="UWP"><a href="#UWP" class="headerlink" title="UWP"></a>UWP</h4><p><strong>NativeControlService.cs</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Windows.UI.Xaml.Controls;</span><br><span class="line"><span class="keyword">using</span> Xamarin.Forms.Platform.UWP;</span><br><span class="line"><span class="keyword">using</span> Xamarin.Forms.Portable9.Services;</span><br><span class="line"><span class="keyword">using</span> Xamarin.Forms.Portable9.UWP.Services;</span><br><span class="line"></span><br><span class="line">[<span class="meta">assembly: Xamarin.Forms.Dependency(typeof(NativeControlService))</span>]</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Xamarin.Forms.Portable9.UWP.Services</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">NativeControlService</span> : <span class="title">INativeControlService</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> View <span class="title">Create</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> label =  <span class="keyword">new</span> TextBlock</span><br><span class="line">            &#123;</span><br><span class="line">                Text = <span class="string">&quot;UWP&quot;</span>,</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> label.ToView();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="実行してみる"><a href="#実行してみる" class="headerlink" title="実行してみる"></a>実行してみる</h1><h4 id="iOS-1"><a href="#iOS-1" class="headerlink" title="iOS"></a>iOS</h4><p><a href="../../../../public/2016/05/1-7.png"><img src="../../../../public/2016/05/1-7-196x300.png" alt="UILabel"></a><br>UILabel</p><h4 id="Android-1"><a href="#Android-1" class="headerlink" title="Android"></a>Android</h4><p><a href="../../../../public/2016/05/2-6.png"><img src="../../../../public/2016/05/2-6-167x300.png" alt="TextView"></a><br>TextView</p><h4 id="UWP-1"><a href="#UWP-1" class="headerlink" title="UWP"></a>UWP</h4><p>**Layout cycle detected. Layout could not complete.**という例外を投げたため実行できませんでした。何故だ….</p><p><a href="../../../../public/2016/05/3-4.png"><img src="../../../../public/2016/05/3-4-1024x245.png" alt="無慈悲な例外"></a><br>無慈悲な例外</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>Sharedプロジェクトでしか使えない、というのはディレクティブの関係なので、固有のUI生成を各プロジェクトに任せてしまえば、どうとでもなります。<br>XAMLで使えるように工夫次第でできるはずです。<br>ContentViewの派生クラスのコンストラクタでDependencyService経由で生成したNative Controlをラップすれば、それをXAMLから使うことができるでしょう。</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/Xamarin.Forms.Portable9">https://github.com/takuya-takeuchi/Demo/tree/master/Xamarin.Forms.Portable9</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> Xamarin </category>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Xamarinメモ その19 デバイス固有機能の電話を使ってみる</title>
      <link href="2016/05/07/1225/"/>
      <url>2016/05/07/1225/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/05/06/1338">前回</a>はXamarin.Forms.Themesをレビューしました。</p><a id="more"></a><h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>Xamarinにおいて、UIはXamarin.FormsをSharedまたはPCLプロジェクトに定義することで共通化を図っています。<br>しかしながら、デバイス固有の機能、例えば電話、カメラ、ファイル選択、指紋認証などは共通化されていません。</p><p>そのために、Xamarinでは<a href="https://developer.xamarin.com/api/type/Xamarin.Forms.DependencyService/">Xamarin.Forms.DependencyService</a>クラスを利用して、共通コードからデバイス固有の機能にアクセスします。<br><a href="https://developer.xamarin.com/guides/xamarin-forms/dependency-service/introduction/">Introduction to DependencyService</a>に詳しく書いてありますが、ポイントは各プロジェクト (iOS、Android、UWP、Windows Phone)で同じinterfaceを実装し、その実装をDependencyServiceクラス経由で取得し、呼び出しているだけです。要するに、<strong>Dependency Injection (依存性の注入)</strong> です。</p><p><a href="../../../../public/2016/05/overview_diagram.png"><img src="../../../../public/2016/05/overview_diagram-1024x562.png" alt="概要"></a></p><p>概要図 (<a href="https://developer.xamarin.com/guides/xamarin-forms/dependency-service/introduction/%E3%82%88%E3%82%8A%E5%BC%95%E7%94%A8">https://developer.xamarin.com/guides/xamarin-forms/dependency-service/introduction/より引用</a>)</p><p>今回は電話を使ってみようと思います。</p><p>今回のソースです。<br><a href="https://github.com/takuya-takeuchi/Demo/tree/master/Xamarin.Forms.Portable6">https://github.com/takuya-takeuchi/Demo/tree/master/Xamarin.Forms.Portable6</a></p><p>ただし、iOS Simluatorは電話のテストをサポートしていません。何故でしょう？</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p>オープンソースでデバイス固有の機能をライブラリとして提供しているパッケージがあります。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://www.nuget.org/packages/XLabs.Forms/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=www.nuget.org"></img><div class="hbc-site-name">www.nuget.org</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://api.nuget.org/v3-flatcontainer/xlabs.forms/2.0.5782/icon"></img></div><div class="hbc-text"><div class="hbc-title">XLabs.Forms 2.0.5782</div><div class="hbc-url">https://www.nuget.org/packages/XLabs.Forms/</div><div class="hbc-description">XLabs.Forms is a open source project that aims to provide a powerfull and cross platform set of controls tailored to work with Xamarin Forms…</div></div></div></div></a></div></div> <div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/XLabs/Xamarin-Forms-Labs" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars1.githubusercontent.com/u/7787062?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">XLabs/Xamarin-Forms-Labs</div><div class="hbc-url">https://github.com/XLabs/Xamarin-Forms-Labs</div><div class="hbc-description">Xamarin Forms Labs is a open source project that aims to provide a powerful and cross platform set of controls and helpers tailored to work …</div></div></div></div></a></div></div><p>Xamarin.Forms用の、クロスプラットフォーム向けに個別対応されたコントロール群とヘルパーのライブラリとのこと。</p><p>ですが、UWPの対応が良くない、というか大量にコメントアウトしてあって、どうも一時対応を休止しているような感じです。<br>また、最新版のソースだと、iOSのビルドに問題があるため、Androidしか使えない状態なので、自分で実装します。</p><h4 id="PCL"><a href="#PCL" class="headerlink" title="PCL"></a>PCL</h4><p>最初にPCLの説明をします。</p><h4 id="Serviceのinterface"><a href="#Serviceのinterface" class="headerlink" title="Serviceのinterface"></a>Serviceのinterface</h4><p>3つのデバイスの固有機能にアクセスするためのinterfaceである<strong>IPhoneService</strong>を定義します。</p><p><strong>IPhoneService.cs</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Xamarin.Forms.Portable6.Services</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPhoneService</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">ShowUI</span>(<span class="params"><span class="keyword">string</span> dialNumber, <span class="keyword">string</span> displayName</span>)</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>各プロジェクトはPCLを参照しているので、このinterfaceを実装して各固有機能へのアクセスを提供します。</p><h4 id="ViewModel"><a href="#ViewModel" class="headerlink" title="ViewModel"></a>ViewModel</h4><p>次に、ViewModelを作ります。<br>簡単に、電話番号の入力フィールドと通話ボタンを押下した際のコマンドを提供します。<br>ただし、通話と言うよりも、通話のためのUIを呼ぶだけです。</p><p><strong>PhonePageViewModel.cs</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Windows.Input;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Practices.Prism.Mvvm;</span><br><span class="line"><span class="keyword">using</span> Xamarin.Forms.Portable6.Services;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Xamarin.Forms.Portable6.ViewModels</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PhonePageViewModel</span> : <span class="title">BindableBase</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> IPhoneService _PhoneService;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PhonePageViewModel</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _PhoneService = DependencyService.Get();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">string</span> _Number;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Number</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._Number;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.SetProperty(<span class="keyword">ref</span> <span class="keyword">this</span>._Number, <span class="keyword">value</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">string</span> _DisplayName;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> DisplayName</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._DisplayName;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.SetProperty(<span class="keyword">ref</span> <span class="keyword">this</span>._DisplayName, <span class="keyword">value</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> ICommand _CallCommand;</span><br><span class="line">        <span class="keyword">public</span> ICommand CallCommand</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> _CallCommand ?? <span class="keyword">new</span> Microsoft.Practices.Prism.Commands.DelegateCommand(</span><br><span class="line">                    () =&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">this</span>._PhoneService.ShowUI(<span class="keyword">this</span>.Number, <span class="keyword">this</span>.DisplayName);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    () =&gt; <span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DependencyService.GetメソッドでIPhoneServicdインターフェースを実装したクラスのインスタンスを取得しています。<br>インスタンスの登録は、各プロジェクトのスタートアップコードで実行します。<br>他に特筆するべきことは無いはずです。</p><h4 id="View"><a href="#View" class="headerlink" title="View"></a>View</h4><p>最後にViewです。<br>Xamarin.Formsではテキスト入力フィールドは<a href="https://developer.xamarin.com/api/type/Xamarin.Forms.Editor/">Editor</a>です。<br>ちょっとすぐには思いつかない名前でした。</p><p><strong>PhonePage.xaml</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; ?&gt;</span><br><span class="line">&lt;ContentPage x:Class&#x3D;&quot;Xamarin.Forms.Portable6.Views.PhonePage&quot;</span><br><span class="line">             xmlns&#x3D;&quot;http:&#x2F;&#x2F;xamarin.com&#x2F;schemas&#x2F;2014&#x2F;forms&quot;</span><br><span class="line">             xmlns:x&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2009&#x2F;xaml&quot;</span><br><span class="line">             xmlns:viewModels&#x3D;&quot;clr-namespace:Xamarin.Forms.Portable6.ViewModels;assembly&#x3D;Xamarin.Forms.Portable6&quot;&gt;</span><br><span class="line">    &lt;ContentPage.BindingContext&gt;</span><br><span class="line">        &lt;viewModels:PhonePageViewModel &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;ContentPage.BindingContext&gt;</span><br><span class="line">    &lt;StackLayout HorizontalOptions&#x3D;&quot;Center&quot; VerticalOptions&#x3D;&quot;Center&quot;&gt;</span><br><span class="line">        &lt;Editor HeightRequest&#x3D;&quot;50&quot;</span><br><span class="line">                Text&#x3D;&quot;&#123;Binding Number&#125;&quot;</span><br><span class="line">                WidthRequest&#x3D;&quot;200&quot; &#x2F;&gt;</span><br><span class="line">        &lt;Button Command&#x3D;&quot;&#123;Binding CallCommand&#125;&quot; Text&#x3D;&quot;Call&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;StackLayout&gt;</span><br><span class="line">&lt;&#x2F;ContentPage&gt;</span><br></pre></td></tr></table></figure><p>以上です。<br>App.csはこのViewをインスタンス化するだけです。</p><h4 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h4><p>いよいよ固有デバイス機能の実装です。<br>前述の通り、PCLで定義したインターフェースを実装します。</p><p><strong>PhoneService.cs</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Foundation;</span><br><span class="line"><span class="keyword">using</span> CoreTelephony;</span><br><span class="line"><span class="keyword">using</span> Foundation;</span><br><span class="line"><span class="keyword">using</span> UIKit;</span><br><span class="line"><span class="keyword">using</span> Xamarin.Forms.Portable6.iOS.Services;</span><br><span class="line"><span class="keyword">using</span> Xamarin.Forms.Portable6.Services;</span><br><span class="line"></span><br><span class="line">[<span class="meta">assembly: Xamarin.Forms.Dependency(typeof(PhoneService))</span>]</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Xamarin.Forms.Portable6.iOS.Services</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">PhoneService</span> : <span class="title">IPhoneService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowUI</span>(<span class="params"><span class="keyword">string</span> dialNumber, <span class="keyword">string</span> displayName</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> ctTelephonyNetworkInfo = <span class="keyword">new</span> CTTelephonyNetworkInfo();</span><br><span class="line">            <span class="keyword">var</span> carrier = ctTelephonyNetworkInfo.SubscriberCellularProvider;</span><br><span class="line">            <span class="keyword">if</span> (carrier?.IsoCountryCode == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> nsUrl = <span class="keyword">new</span> NSUrl(<span class="keyword">new</span> System.Uri(<span class="string">$&quot;tel:<span class="subst">&#123;dialNumber&#125;</span>&quot;</span>).AbsoluteUri);</span><br><span class="line">            <span class="keyword">var</span> result = UIApplication.SharedApplication.OpenUrl(nsUrl);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>iOSの固有APIはここでは無視しますが、重要なのは名前空間の上にある<strong>assembly属性</strong>です。<br>ここで、依存性のあるクラスを登録します。つまり、<strong>PhoneSerivceクラス</strong>を登録するので、前述の<strong>PhonePageViewModelクラス</strong>で<strong>IPhoneSerivceインターフェース</strong>を実装したクラスのインスタンスを取得できるわけです。</p><p>ただ、個人的には、Prismのように動的に登録できたりしないのか、という疑問が残ります。<br>この記述だと、デバイスのバージョンに応じて実装クラスを変更するようなことができません。</p><h4 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h4><p>Androidです。</p><p><strong>PhoneService.cs</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Android.Content;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> Android.Content;</span><br><span class="line"><span class="keyword">using</span> Android.Net;</span><br><span class="line"><span class="keyword">using</span> Android.Telephony;</span><br><span class="line"><span class="keyword">using</span> Xamarin.Forms.Portable6.Droid.Services;</span><br><span class="line"><span class="keyword">using</span> Xamarin.Forms.Portable6.Services;</span><br><span class="line"></span><br><span class="line">[<span class="meta">assembly: Xamarin.Forms.Dependency(typeof(PhoneService))</span>]</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Xamarin.Forms.Portable6.Droid.Services</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">PhoneService</span> : <span class="title">IPhoneService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowUI</span>(<span class="params"><span class="keyword">string</span> dialNumber, <span class="keyword">string</span> displayName</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> number = PhoneNumberUtils.FormatNumber(dialNumber.Trim(),<span class="string">&quot;JP&quot;</span> );</span><br><span class="line">            <span class="keyword">var</span> intent = <span class="keyword">new</span> Intent(Intent.ActionDial, Uri.Parse(<span class="string">&quot;tel:&quot;</span> + number));</span><br><span class="line">            <span class="keyword">if</span> (!IsIntentAvailable(intent))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            intent.SetFlags(ActivityFlags.NewTask);</span><br><span class="line">            Android.App.Application.Context.StartActivity(intent);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">IsIntentAvailable</span>(<span class="params">Intent intent</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> context = Forms.Context;</span><br><span class="line">            <span class="keyword">var</span> packageManager = context.PackageManager;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> list = packageManager.QueryIntentServices(intent, <span class="number">0</span>)</span><br><span class="line">                .Union(packageManager.QueryIntentActivities(intent, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (list.Any())</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> manager = TelephonyManager.FromContext(context);</span><br><span class="line">            <span class="keyword">return</span> manager.PhoneType != PhoneType.None;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これも同じですね。ちょっとAndroidは面倒です。<br>iOSもそうですが、url形式で機能の呼び出しを制御しているのは正直あまり好きではないです…<br>今回のコードで、プロジェクトのプロパティから、<strong>Required permissions</strong>にて、<strong>CALL_PHONE</strong>にチェックを入れる必要は無いです。<br><strong>Intent.ActionCall</strong>の場合はチェックが必要です。</p><p>今回、Androidは残念ながらテストできませんでした。PhoneTypeが常にNoneのため、StartActivityまで到達しませんでした。<br>強制的に呼び出しても例外を出して落ちます。何故だ。</p><h4 id="UWP"><a href="#UWP" class="headerlink" title="UWP"></a>UWP</h4><p>UWPもといWindows Mobile 10です。</p><p><strong>PhoneService.cs</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Xamarin.Forms.Portable6.Services;</span><br><span class="line"><span class="keyword">using</span> Xamarin.Forms.Portable6.UWP.Services;</span><br><span class="line"></span><br><span class="line">[<span class="meta">assembly: Xamarin.Forms.Dependency(typeof(PhoneService))</span>]</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Xamarin.Forms.Portable6.UWP.Services</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">PhoneService</span> : <span class="title">IPhoneService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowUI</span>(<span class="params"><span class="keyword">string</span> dialNumber, <span class="keyword">string</span> displayName</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Windows.ApplicationModel.Calls.PhoneCallManager.ShowPhoneCallUI(dialNumber, displayName ?? <span class="string">&quot;Test Person&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>他と違ってシンプルです。</p><h1 id="実行してみる"><a href="#実行してみる" class="headerlink" title="実行してみる"></a>実行してみる</h1><h4 id="iOS-1"><a href="#iOS-1" class="headerlink" title="iOS"></a>iOS</h4><p><a href="../../../../public/2016/05/i1.png"><img src="../../../../public/2016/05/i1-197x300.png" alt="起動直後"></a><br>起動直後</p><h4 id="Android-1"><a href="#Android-1" class="headerlink" title="Android"></a>Android</h4><p><a href="../../../../public/2016/05/a1.png"><img src="../../../../public/2016/05/a1-170x300.png" alt="起動直後"></a><br>起動直後</p><h4 id="UWP-1"><a href="#UWP-1" class="headerlink" title="UWP"></a>UWP</h4><p><a href="../../../../public/2016/05/w1.png"><img src="../../../../public/2016/05/w1-156x300.png" alt="起動直後"></a><br>起動直後</p><p><a href="../../../../public/2016/05/w2.png"><img src="../../../../public/2016/05/w2-156x300.png" alt="Callボタン押下後"></a><br>Callボタン押下後</p><p><a href="../../../../public/2016/05/w3.png"><img src="../../../../public/2016/05/w3-156x300.png" alt="Call!!"></a><br>Call!!</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>全ての機能をテストしたかったのですが、まさかAndroidまで動かないとは… やはり実機が必要ですね…でもiPhoneは実機へのデプロイはお金が必要ですし…わざわざAndroidを買うのも…</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/Xamarin.Forms.Portable6">https://github.com/takuya-takeuchi/Demo/tree/master/Xamarin.Forms.Portable6</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> Xamarin </category>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Xamarinメモ その18 Xamarin.Forms.ThemesをPrism.Unity.Formsと併用する場合の注意</title>
      <link href="2016/05/06/1338/"/>
      <url>2016/05/06/1338/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/05/05/1303">前回</a>はNavigationPageとTabbedPageの組み合わせ問題を解決しました。</p><a id="more"></a><h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><h3 id="お詫び"><a href="#お詫び" class="headerlink" title="お詫び"></a>お詫び</h3><p>Xamarin.Formsヒトバシラー様より、UWPが動かない原因を指摘していただきました。<br>謹んで記事を訂正させていただきます。</p><p>Evolve 2016でXamarin.FormsにTheme機能を追加することが発表されましたが、そのマイルストーン？として日本時間5/5の夜にXamarin.Forms.ThemesのNuGetパッケージが公開されました。<br><del>まだ、NuGetのページもありませんが、</del>Nuget PackageManagerから入手可能です。</p><p><strong>2016/05/06 1:57 訂正</strong> </p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://www.nuget.org/packages/Xamarin.Forms.Theme.Base/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=www.nuget.org"></img><div class="hbc-site-name">www.nuget.org</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://api.nuget.org/v3-flatcontainer/xamarin.forms.theme.base/1.0.0.43-pre1/icon"></img></div><div class="hbc-text"><div class="hbc-title">Xamarin.Forms.Theme.Base 1.0.0.43-pre1</div><div class="hbc-url">https://www.nuget.org/packages/Xamarin.Forms.Theme.Base/</div><div class="hbc-description">Build native UIs for iOS, Android, and Windows Phone from a single, shared C# codebase</div></div></div></div></a></div></div><p>通常、サンプルプロジェクトを使えば簡単に適用できて、「すげーー」って言えるのですが、そこはXamarinというか、他のライブラリとの動作は未検証でした。<br>**(ちなみに、サンプルで対象なのは、AndroidとiOSのみです。UWP、Windows 8.1、Windows Phone 8は影も形もありません)** で、<strong>Prism.Unity.Forms</strong>のUnityBootstrapperクラスを使って構築した場合、気をつけないとThemeが適用されないどころか、<strong>起動すらしなくなります</strong>。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><h4 id="NuGet"><a href="#NuGet" class="headerlink" title="NuGet"></a>NuGet</h4><p>まずは、普通にNuGetでXamarin.Forms.Themesをgetしましょう。現在ThemeはDarkとLightの2つです。<br>PCLへの適用です。プレリリースを対象にしてください。</p><p><a href="../../../../public/2016/05/1-6.png"><img src="../../../../public/2016/05/1-6-300x178.png" alt="NuGet"></a><br>NuGet</p><p>LightとDarkを両方追加する必要は無いです。お好みで。</p><h4 id="App-xaml"><a href="#App-xaml" class="headerlink" title="App.xaml"></a>App.xaml</h4><p>まず、プロジェクトにApp.xamlを追加します。<br>続いて下記のような記述をコピーします。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Application xmlns&#x3D;&quot;http:&#x2F;&#x2F;xamarin.com&#x2F;schemas&#x2F;2014&#x2F;forms&quot; xmlns:x&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2009&#x2F;xaml&quot; xmlns:light&#x3D;&quot;clr-namespace:Xamarin.Forms.Themes;assembly&#x3D;Xamarin.Forms.Theme.Light&quot; xmlns:dark&#x3D;&quot;clr-namespace:Xamarin.Forms.Themes;assembly&#x3D;Xamarin.Forms.Theme.Dark&quot; x:Class&#x3D;&quot;ThemesDemo.App&quot;&gt;</span><br><span class="line">  &lt;Application.Resources&gt;</span><br><span class="line">    &lt;!--&lt;ResourceDictionary MergedWith&#x3D;&quot;light:LightThemeResources&quot; &#x2F;&gt;--&gt;</span><br><span class="line">    &lt;ResourceDictionary MergedWith&#x3D;&quot;dark:DarkThemeResources&quot; &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;Application.Resources&gt;</span><br><span class="line">&lt;&#x2F;Application&gt;</span><br></pre></td></tr></table></figure><p>上記は、 </p><p>からの抜粋です。<br>注意するのは、<strong>x:Class</strong>の指定です。ここは、PCLのApp.csと同じになるよう修正してください。<br>Application.Resources内部は、NuGetで適用した、または使用した方を残してください。</p><p>補足ですが、App.xamlのカスタムツールとビルドアクションはそのままで結構です。<br>また、カスタムツールが<strong>MSBuild:UpdateDesignTimeXaml</strong>、ビルドアクションが<strong>埋め込みリソース</strong>です。<br>ビルドアクションがPageだと動きません、というかビルドが通りません。</p><h4 id="App-cs"><a href="#App-cs" class="headerlink" title="App.cs"></a>App.cs</h4><p>この時点で、App.xamlとApp.csが結びつきましたが、このままではビルドが通りません。<br>修正は簡単です。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">App</span> : <span class="title">Application</span></span><br></pre></td></tr></table></figure><p>partial属性を付与するだけです。<br>ちなみに、App.csをApp.xaml.csにする必要はないです。サンプルはそうですが不要です。</p><h4 id="おまじない"><a href="#おまじない" class="headerlink" title="おまじない"></a>おまじない</h4><p>公式ページにもありましたが、必要なアセンブリがロードされないことがあるようです。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://developer.xamarin.com/guides/xamarin-forms/themes/#loadtheme" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=developer.xamarin.com"></img><div class="hbc-site-name">developer.xamarin.com</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png"></img></div><div class="hbc-text"><div class="hbc-title">Theming a Xamarin.Forms Application - Xamarin</div><div class="hbc-url">https://developer.xamarin.com/guides/xamarin-forms/themes/#loadtheme</div><div class="hbc-description">Xamarin.Forms applications support theming by creating a ResourceDictionary for each theme, and then loading the resources with the DynamicR…</div></div></div></div></a></div></div><p>Android、iOSごとに対応があります。<br>必要に応じて適用をお願いします。</p><h4 id="App-cs-Prism-Forms-Unity使う人向け"><a href="#App-cs-Prism-Forms-Unity使う人向け" class="headerlink" title="App.cs (Prism.Forms.Unity使う人向け)"></a>App.cs (Prism.Forms.Unity使う人向け)</h4><p>この時点で、無事にThemeが適用されるはずですが、Prism.Unity.Forms使いはそうも行きません。<br>App.csにさらに修正が必要です。<br>通常、Appコンストラクタ内で、UnityBootstrapperの派生クラスのインスタンスの生成、およびRunメソッドのコールをしていますが、このままでは、Themeが適用されません。<br>だいたい、下記のような感じだと思います。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">App</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bootstrapper = <span class="keyword">new</span> Bootstrapper();</span><br><span class="line">    bootstrapper.Run(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これを、 </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">App</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bootstrapper = <span class="keyword">new</span> Bootstrapper();</span><br><span class="line">    bootstrapper.Run(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.InitializeComponent();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>に修正してください。<br>InitializeComponentが先に来ると、フリーズします。具体的には、CreateMainPageメソッドでMainPageのResolveで止まります。<br>このあたり、ひょっとしたら今後の更新で対応されるかもしれませんが、今はこれで動くはずです。</p><h1 id="実行してみる"><a href="#実行してみる" class="headerlink" title="実行してみる"></a>実行してみる</h1><h4 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h4><p><a href="../../../../public/2016/05/2-5.png"><img src="../../../../public/2016/05/2-5-195x300.png" alt="サンプル"></a><br>サンプル</p><p>一部Themeが適用されていないような気がしますが、別途修正が必要？</p><h4 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h4><p><a href="../../../../public/2016/05/3-3.png"><img src="../../../../public/2016/05/3-3-165x300.png" alt="サンプル"></a><br>サンプル</p><h4 id="UWP"><a href="#UWP" class="headerlink" title="UWP"></a>UWP</h4><p>Prism.Unity.Forms環境下では実行できませんでした。というか動かなくなります。もっと検証が必要かも。<br><del>簡単なサンプルを作って、UWPを動かしましたがダメです。</del></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Xamarin.Forms.Xaml.XamlParseException: Position 19:16. No Property of name StyleClass found</span><br><span class="line">   at Xamarin.Forms.Xaml.ApplyPropertiesVisitor.SetPropertyValue(Object xamlelement, XmlName propertyName, Object value, BindableObject rootElement, INode node, HydratationContext context, IXmlLineInfo lineInfo)</span><br><span class="line">   at Xamarin.Forms.Xaml.ApplyPropertiesVisitor.Visit(ValueNode node, INode parentNode)</span><br><span class="line">   at Xamarin.Forms.Xaml.ValueNode.Accept(IXamlNodeVisitor visitor, INode parentNode)</span><br><span class="line">   at Xamarin.Forms.Xaml.Eleme</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   at Xamarin.Forms.Xaml.ApplyPropertiesVisitor.SetPropertyValue(Object xamlelement, XmlName propertyName, Object value, BindableObject rootElement, INode node, HydratationContext context, IXmlLineInfo lineInfo)</span><br><span class="line">   at Xamarin.Forms.Xaml.ApplyPropertiesVisitor.Visit(ValueNode node, INode parentNode)</span><br><span class="line">   at Xamarin.Forms.Xaml.ValueNode.Accept(IXamlNodeVisitor visitor, INode parentNode)</span><br><span class="line">   at Xamarin.Forms.Xaml.ElementNode.Accept(IXamlNodeVisitor visitor, INode parentNode)</span><br><span class="line">   at Xamarin.Forms.Xaml.ElementNode.Accept(IXamlNodeVisitor visitor, INode parentNode)</span><br><span class="line">   at Xamarin.Forms.Xaml.ElementNode.Accept(IXamlNodeVisitor visitor, INode parentNode)</span><br><span class="line">   at Xamarin.Forms.Xaml.RootNode.Accept(IXamlNodeVisitor visitor, INode parentNode)</span><br><span class="line">   at Xamarin.Forms.Xaml.XamlLoader.Load(BindableObject view, String xaml)</span><br><span class="line">   at Xamarin.Forms.Xaml.XamlLoader.Load(BindableObject view, Type callingType)</span><br><span class="line">   at Xamarin.Forms.Xaml.Extensions.LoadFromXaml[TView](TView view, Type callingType)</span><br><span class="line">   at XFApp1.BasicPage.InitializeComponent()</span><br><span class="line">   at XFApp1.BasicPage..ctor()</span><br><span class="line">   at XFApp1.App..ctor()</span><br><span class="line">   at XFApp1.UWP.MainPage..ctor()</span><br><span class="line">   at XFApp1.UWP.XFApp1_UWP_XamlTypeInfo.XamlTypeInfoProvider.Activate_4_MainPage()</span><br><span class="line">   at XFApp1.UWP.XFApp1_UWP_XamlTypeInfo.XamlUserType.ActivateInstance()</span><br></pre></td></tr></table></figure><p><del>こんな感じのメッセージとスタックトレースを吐いて落ちます。<br>StyleClassが無い、という例外です。PCLに存在していても、実行するプラットフォームに突入した時点で存在しない？ 哀れUWP….</del></p><p>なので、簡単なサンプルを作りました。<br>UWPプロジェクトは以下のApp.xaml内部のRequestedThemeを削除して、Xamarin.Forms.Theme.Lightを適用した結果がこちら。</p><p><a href="../../../../public/2016/05/w1-3.png"><img src="../../../../public/2016/05/w1-3-180x300.png" alt="サンプル"></a><br>サンプル</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>早速、レビューしましたが、プレリリースだけあって、不安定極まりないです。<br>UWPが見捨てられたのは、どういうわけなのか….時間が無かっただけ、と思いたい。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> Xamarin </category>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Xamarinメモ その17 TabbedPageとNavigationPageの組み合わせ</title>
      <link href="2016/05/05/1303/"/>
      <url>2016/05/05/1303/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/05/05/1229">前回</a>はAndroidのUnzipped Failedを解決しました。</p><a id="more"></a><h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>以前、TabbedPageについて記事を書きましたが、もう一つ重要なNavigationPageを組み合わせて見ます。<br>ただ、NavigationPageとTabbedPageを組み合わす際、NavigationPageの子要素として、TabbedPageを加えるのはよくないとのこと。<br>三日月 ふゆの氏の記事。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://mikazuki.hatenablog.jp/entry/2015/11/10/012403" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=mikazuki.hatenablog.jp"></img><div class="hbc-site-name">みかづきメモ</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://ogimage.blog.st-hatena.com/8454420450093774953/6653458415127539795/1447147507"></img></div><div class="hbc-text"><div class="hbc-title">Xamarin.Forms で TabbedPage の子に NavigationPage を追加してみる - みかづきメモ</div><div class="hbc-url">http://mikazuki.hatenablog.jp/entry/2015/11/10/012403</div><div class="hbc-description">Xamarin.Forms(XAML) を使って、 NavigationPage + TabbedPage を作ってみます。 Twitter for iPhone や TweetBot みたいな感じの UI ですね。 ただ、 NavigationPage |- TabbedPag…</div></div></div></div></a></div></div><p>元ネタ。</p><p>これを踏まえ、TabbedPageの下に、NavigationPage、NavigationPageの下に2つのContentPageというシンプルな実装を試しました。<br>ContentPageの最初でNextボタンがあり、それを押下すると、次のページにNavigationされる、というものです。<br>また、それぞれのPageにViewModelが紐付きます。つまり、4つのViewと4つのViewModelです。<br>そこまで大それたものではないはずです。</p><p>その実現のために、Webの各所を見ていきました。<br>下記は主に参考にさせていただいた記事です。</p><p>かずき氏の記事。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://blog.okazuki.jp/entry/2016/04/24/094141" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=blog.okazuki.jp"></img><div class="hbc-site-name">かずきのBlog@hatena</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/o/okazuki/20160423/20160423193303.png"></img></div><div class="hbc-text"><div class="hbc-title">Xamarin.Forms + Prism.Formsで画面遷移DeepDive - かずきのBlog@hatena</div><div class="hbc-url">http://blog.okazuki.jp/entry/2016/04/24/094141</div><div class="hbc-description">Prism.Formsは、地味にネストした画面遷移みたいなのをサポートしています。 画面遷移のINavigationService#Navigateメソッドに渡すURLに&quot;/HogePage/FugaPage/BarPage?id=10&quot;みたいに/で区切ってページ指定が出来ます。…</div></div></div></div></a></div></div> Prismの開発者の一人Brian Lagunas氏の記事。<div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="http://brianlagunas.com/prism-for-xamarin-forms-6-2-0-preview/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=brianlagunas.com"></img><div class="hbc-site-name">Brian Lagunas</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://brianlagunas.com/wp-content/uploads/2015/12/Prism-Logo-Graphic.jpg"></img></div><div class="hbc-text"><div class="hbc-title">Prism for Xamarin.Forms 6.2.0 Preview - Brian Lagunas</div><div class="hbc-url">http://brianlagunas.com/prism-for-xamarin-forms-6-2-0-preview/</div><div class="hbc-description">Learn what&#39;s new in Prism for Xamarin.Forms 6.2.0 Preview. Check out the all new navigation service features such as URI support and deep li…</div></div></div></div></a></div></div><p>で、いろいろ試行錯誤しましたが、実現できませんでした。<br>ページが遷移しない、クラッシュする、タブが出ないetcです。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>逃げ口上ではないですが、注意事項です。</p><ul><li>Prism.Forms 6.1.0-pre4</li><li>Prism.Unity.Forms 6.2.0-pre4</li><li>Xamarin.Forms 2.2.0.31</li></ul><p>の環境の話です。<br>特に、Prism.Forms、Prism.Unity.Formsはプリリリース版なので、正式版では私が遭遇した問題は治っている可能性があります。</p><p>多分私の手法は間違っているだろうし、MVVMの観点からもよくないような気がします。<br>正しいやり方があると思いますが、動く方法が見つかったので、私は良しとしました。<br>動かないプロダクトよりも動くプロダクトのが何百倍も価値があります。</p><h3 id="UnityApplicationは使わない"><a href="#UnityApplicationは使わない" class="headerlink" title="UnityApplicationは使わない"></a>UnityApplicationは使わない</h3><p>まず、<strong>Prism.Unity.UnityApplication</strong>を継承して、Appを実装しますが、この方法は使いません。<br>なぜかというと、<strong>OnInitialized</strong>をオーバーライドし、NavigationSerice.Navigateメソッドで一番最初に表示するページを指示するのですが、TabbedPageを指示するとクラッシュします。ContentPageである、NavigationPageの子要素ならOKですが、そうすると、TabbedPageとNavigationPageが見えなくなります。</p><p>ですので、Obsoleteではありますが、<strong>Prism.Unity.UnityBootstrapper</strong>を継承したクラスを作成し、そのクラスのRunメソッドにAppクラスのインスタンスを渡す方法をとります。<br>これならば、<strong>CreateMainPage</strong>をオーバーライドする際に、TabbedPageを指定することができます。</p><h3 id="NavigationServiceは使わない"><a href="#NavigationServiceは使わない" class="headerlink" title="NavigationServiceは使わない"></a>NavigationServiceは使わない</h3><p>NavigationServiceのインスタンスには、明示的に指定しない限り、<strong>Prism.Unity.Navigation.UnityPageNavigationService</strong>が使われますが、無視します。<br>このクラスを使えば、本来はNavigationする際の、履歴を管理して、Backしたりできるはずなのですが、私にはどうやってもそれができませんでした。<br>ソースを見ると、UnityPageNavigationServiceのコンストラクタに、UnityContainerを渡しているのですが、途中でページの履歴の基準がMainPageになってしまっており、これによりNavigationがうまくいかなくなっているように見えます。ページは遷移するのですが、左上に本来は表示されるであろう直前のページへの遷移ボタンが表示されません。</p><p>以上を踏まえ今回のソースです。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/takuya-takeuchi/Demo/tree/master/Xamarin.Forms.Portable8" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/6241854?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">takuya-takeuchi/Demo</div><div class="hbc-url">https://github.com/takuya-takeuchi/Demo/tree/master/Xamarin.Forms.Portable8</div><div class="hbc-description">Sample source code for Demonstration, Experiment and Test - takuya-takeuchi/Demo</div></div></div></div></a></div></div><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><h3 id="ViewModel"><a href="#ViewModel" class="headerlink" title="ViewModel"></a>ViewModel</h3><p>まず、ViewModelはすべて引数をとりません。またViewModelとViewの紐付けは<strong>ViewModelLocator.AutowireViewModel</strong>で実現しています。<br>TabbedPageとNavigationViewに対応するViewModelは空なので無視します。</p><p><strong>FirstPageViewModel.cs</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Prism.Commands;</span><br><span class="line"><span class="keyword">using</span> Prism.Common;</span><br><span class="line"><span class="keyword">using</span> Prism.Mvvm;</span><br><span class="line"><span class="keyword">using</span> Xamarin.Forms.Portable8.Views;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Xamarin.Forms.Portable8.ViewModels</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">FirstPageViewModel</span> : <span class="title">BindableBase</span>, <span class="title">IPageAware</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Page Page</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> DelegateCommand _NextCommand;</span><br><span class="line">        <span class="keyword">public</span> DelegateCommand NextCommand</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>._NextCommand == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">this</span>._NextCommand = <span class="keyword">new</span> DelegateCommand(() =&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">this</span>.Page.Navigation.PushAsync(<span class="keyword">new</span> NextPage());</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._NextCommand;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>NextPageViewModel.cs</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Prism.Commands;</span><br><span class="line"><span class="keyword">using</span> Prism.Common;</span><br><span class="line"><span class="keyword">using</span> Prism.Mvvm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Xamarin.Forms.Portable8.ViewModels</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">NextPageViewModel</span> : <span class="title">BindableBase</span>, <span class="title">IPageAware</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> Page Page</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> DelegateCommand _BackCommand;</span><br><span class="line">        <span class="keyword">public</span> DelegateCommand BackCommand</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>._BackCommand == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">this</span>._BackCommand = <span class="keyword">new</span> DelegateCommand(() =&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">this</span>.Page.Navigation.PopAsync();</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._BackCommand;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ポイントは<strong>Prism.Common.IPageAware</strong>の実装です。単純にPageプロパティを持つだけですが。<br>これによって、PageのNavigationプロパティにViewModelからアクセスできるようになり、PopAsyncとPushAsyncを呼び出せるようになります。<br>これでページの遷移が可能になります。</p><h3 id="Views"><a href="#Views" class="headerlink" title="Views"></a>Views</h3><p>正直、BindingContextを見て、挙動を変える方法はあまり好きではないですし、コードビハインドをいじるのも嫌なんですが…</p><p><strong>FirstPage.xaml.cs</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Prism.Common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Xamarin.Forms.Portable8.Views</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">FirstPage</span> : <span class="title">ContentPage</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FirstPage</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// BindingContext is updated before InitializeComponent</span></span><br><span class="line">            <span class="keyword">this</span>.BindingContextChanged += (sender, args) =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> pageAware = <span class="keyword">this</span>.BindingContext <span class="keyword">as</span> IPageAware;</span><br><span class="line">                <span class="keyword">if</span> (pageAware != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    pageAware.Page = <span class="keyword">this</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NextPage.xaml.csも同じような感じです。<br>BindingContextChangeをサブスクライブして、BindingContextがIPageAwareを実装していたら、Pageプロパティに自分自身を設定します。<br>コメントにもありますが、なぜかInitializeComponentより前で、BindingContextが設定されていたので、苦肉の策でInitializeComponentの前でサブスクライブしてます。</p><p>Xamlですが、Main、つまりアプリ全体を表現する要のXamlだけ記載しておきます。他は単純なので…</p><p><strong>MainPage.xaml</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; ?&gt;</span><br><span class="line">&lt;TabbedPage x:Class&#x3D;&quot;Xamarin.Forms.Portable8.Views.MainPage&quot;</span><br><span class="line">            xmlns&#x3D;&quot;http:&#x2F;&#x2F;xamarin.com&#x2F;schemas&#x2F;2014&#x2F;forms&quot;</span><br><span class="line">            xmlns:x&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2009&#x2F;xaml&quot;</span><br><span class="line">            xmlns:mvvm&#x3D;&quot;clr-namespace:Prism.Mvvm;assembly&#x3D;Prism.Forms&quot;</span><br><span class="line">            xmlns:views&#x3D;&quot;clr-namespace:Xamarin.Forms.Portable8.Views;assembly&#x3D;Xamarin.Forms.Portable8&quot;</span><br><span class="line">            mvvm:ViewModelLocator.AutowireViewModel&#x3D;&quot;True&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TabbedPage.Padding&gt;</span><br><span class="line">        &lt;OnPlatform x:TypeArguments&#x3D;&quot;Thickness&quot;</span><br><span class="line">                    Android&#x3D;&quot;0&quot;</span><br><span class="line">                    WinPhone&#x3D;&quot;0&quot;</span><br><span class="line">                    iOS&#x3D;&quot;0, 20, 0, 0&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;TabbedPage.Padding&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TabbedPage.Children&gt;</span><br><span class="line">        &lt;views:NavigationPage Title&#x3D;&quot;Tab1&quot;&gt;</span><br><span class="line">            &lt;x:Arguments&gt;</span><br><span class="line">                &lt;views:FirstPage &#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;x:Arguments&gt;</span><br><span class="line">        &lt;&#x2F;views:NavigationPage&gt;</span><br><span class="line">        &lt;views:NavigationPage Title&#x3D;&quot;Tab2&quot;&gt;</span><br><span class="line">            &lt;x:Arguments&gt;</span><br><span class="line">                &lt;views:FirstPage &#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;x:Arguments&gt;</span><br><span class="line">        &lt;&#x2F;views:NavigationPage&gt;</span><br><span class="line">        &lt;views:NavigationPage Title&#x3D;&quot;Tab3&quot;&gt;</span><br><span class="line">            &lt;x:Arguments&gt;</span><br><span class="line">                &lt;views:FirstPage &#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;x:Arguments&gt;</span><br><span class="line">        &lt;&#x2F;views:NavigationPage&gt;</span><br><span class="line">    &lt;&#x2F;TabbedPage.Children&gt;</span><br><span class="line">&lt;&#x2F;TabbedPage&gt;</span><br></pre></td></tr></table></figure><h3 id="Startup"><a href="#Startup" class="headerlink" title="Startup"></a>Startup</h3><p>最後に、スタートアップ周りのコードです。<br>冒頭のObsolete等はここです。</p><p><strong>App.cs</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Xamarin.Forms.Portable8</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">App</span> : <span class="title">Application</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">App</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> bootstrapper = <span class="keyword">new</span> Bootstrapper();</span><br><span class="line">            bootstrapper.Run(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnStart</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// Handle when your app starts</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnSleep</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// Handle when your app sleeps</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnResume</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// Handle when your app resumes</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Bootstrapper.cs</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Practices.Unity;</span><br><span class="line"><span class="keyword">using</span> Prism.Unity;</span><br><span class="line"><span class="keyword">using</span> Xamarin.Forms.Portable8.ViewModels;</span><br><span class="line"><span class="keyword">using</span> Xamarin.Forms.Portable8.Views;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Xamarin.Forms.Portable8</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">Bootstrapper</span> : <span class="title">UnityBootstrapper</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">Obsolete</span>]</span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">override</span> Xamarin.Forms.<span class="function">Page <span class="title">CreateMainPage</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.Container.Resolve();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">RegisterTypes</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// ViewModels</span></span><br><span class="line">            <span class="keyword">this</span>.Container.RegisterType();</span><br><span class="line">            <span class="keyword">this</span>.Container.RegisterType();</span><br><span class="line">            <span class="keyword">this</span>.Container.RegisterType();</span><br><span class="line">            <span class="keyword">this</span>.Container.RegisterType();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Views</span></span><br><span class="line">            <span class="comment">// Maybe, the following codes are meaningless because NavigationSerivce is not used.</span></span><br><span class="line">            <span class="comment">//this.Container.RegisterType();</span></span><br><span class="line">            <span class="comment">//this.Container.RegisterType();</span></span><br><span class="line">            <span class="comment">//this.Container.RegisterType();</span></span><br><span class="line">            <span class="comment">//this.Container.RegisterType();</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//this.Container.RegisterTypeForNavigation();</span></span><br><span class="line">            <span class="comment">//this.Container.RegisterTypeForNavigation();</span></span><br><span class="line">            <span class="comment">//this.Container.RegisterTypeForNavigation();</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnInitialized</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// I guess it is meaningless.</span></span><br><span class="line">            <span class="comment">//this.NavigationService.Navigate(&quot;/NavigationPage/MainPage&quot;);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>コメントアウトした箇所は実行に影響がないので削除しました。</p><h1 id="テスト"><a href="#テスト" class="headerlink" title="テスト"></a>テスト</h1><p>動かしてみました。</p><h4 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h4><p><a href="../../../../public/2016/05/i1-3.png"><img src="../../../../public/2016/05/i1-3-197x300.png" alt="Tab1のFirst page"></a><br>Tab1のFirst page</p><p><a href="../../../../public/2016/05/i2-2.png"><img src="../../../../public/2016/05/i2-2-197x300.png"></a><br>Tab1のNext page</p><p><a href="../../../../public/2016/05/i3-1.png"><img src="../../../../public/2016/05/i3-1-197x300.png"></a><br>Tab2のFirst page</p><h4 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h4><p><a href="../../../../public/2016/05/3127e02ff1511185286456bc80f806f4.png"><img src="../../../../public/2016/05/3127e02ff1511185286456bc80f806f4-168x300.png" alt="Tab1のFirst page"></a><br>Tab1のFirst page</p><p><a href="../../../../public/2016/05/35a40365117b2d31c2681e1878827c73.png"><img src="../../../../public/2016/05/35a40365117b2d31c2681e1878827c73-168x300.png" alt="Tab1のNext page"></a><br>Tab1のNext page</p><p><a href="../../../../public/2016/05/2e052e332b7c66d373ed4a52f1bee2b7.png"><img src="../../../../public/2016/05/2e052e332b7c66d373ed4a52f1bee2b7-168x300.png" alt="Tab2のFirst page"></a><br>Tab2のFirst page</p><h4 id="UWP"><a href="#UWP" class="headerlink" title="UWP"></a>UWP</h4><p><a href="../../../../public/2016/05/w1-2.png"><img src="../../../../public/2016/05/w1-2-157x300.png"></a><br>Tab1のFirst page</p><p><a href="../../../../public/2016/05/w2-2.png"><img src="../../../../public/2016/05/w2-2-157x300.png" alt="Tab1のNext page"></a><br>Tab1のNext page</p><p><a href="../../../../public/2016/05/w3-1.png"><img src="../../../../public/2016/05/w3-1-157x300.png" alt="Tab2のFirst page"></a><br>Tab2のFirst page</p><p>きちんとタブごとに遷移している状態を覚えています。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>かなり苦労しましたが、やりきった感じでいっぱいです。<br>間違っているようなやり方ですが、動けばいい、という方はいると思うので、だれかの役に立つでしょう。</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/Xamarin.Forms.Portable8">https://github.com/takuya-takeuchi/Demo/tree/master/Xamarin.Forms.Portable8</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> Xamarin </category>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Xamarinメモ その16 Unzipping failed</title>
      <link href="2016/05/05/1229/"/>
      <url>2016/05/05/1229/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/05/04/1220">前回</a>はUWPでビルドができない問題を解決しました。</p><a id="more"></a><h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>Xamarinの不安定さは何度も言及していますが、こうも問題に何度も遭遇すると悲しくなります。<br>今回は、Androidのビルドが通らなくなりました。直前の手順もうろ覚えなのですが…</p><p><a href="../../../../public/2016/05/1-4.png"><img src="../../../../public/2016/05/1-4-1024x437.png" alt="Unzipped failed"></a><br>Unzipped failed?</p><p>エラーは、</p><p><code>Unzipping failed. Please download https://dl-ssl.google.com/android/repository/android_m2repository_r22.zip and extract it to the C:\Users\XXXXXX\AppData\Local\Xamarin\Android.Support.v4\23.0.1.3\content directory.</code></p><p>訳:zipの展開に失敗しました。<a href="https://dl-ssl.google.com/android/repository/android_m2repository_r22.zip%E3%82%92%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89%E3%81%97%E3%80%81%E3%81%9D%E3%82%8C%E3%82%92C:/Users/XXXXXX/AppData/Local/Xamarin/Android.Support.v4/23.0.1.3/content%E3%81%AB%E5%B1%95%E9%96%8B%E3%81%97%E3%81%A6%E3%81%8F%E3%81%A0%E3%81%95%E3%81%84%E3%80%82">https://dl-ssl.google.com/android/repository/android_m2repository_r22.zipをダウンロードし、それをC:\Users\XXXXXX\AppData\Local\Xamarin\Android.Support.v4\23.0.1.3\contentに展開してください。</a></p><p>とあります。<br>たしかに、そのフォルダにcontentフォルダはありませんでした。</p><p><a href="../../../../public/2016/05/2-3.png"><img src="../../../../public/2016/05/2-3-1024x190.png" alt="からっぽ"></a><br>からっぽ</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p>指示に従うと、落としてきた<strong>android_m2repository_r22.zip</strong>は135MBもあります。<br>これが4G回線とかで作業中に発生したらと思うのちょっとゾッとします。</p><p>続いて、これを解凍します。<br>解凍すると、<strong>m2repository</strong>というフォルダが出てくるので、これを先ほどの指示に従い、contentフォルダを作成し、その下にm2repositoryフォルダをコピーします。<br>結果としては、</p><ul><li>C:\Users\XXXXXX\AppData\Local\Xamarin\Android.Support.Design</li><li>C:\Users\XXXXXX\AppData\Local\Xamarin\Android.Support.v4</li><li>C:\Users\XXXXXX\AppData\Local\Xamarin\Android.Support.v7.AppCompat</li><li>C:\Users\XXXXXX\AppData\Local\Xamarin\Android.Support.v7.CardView</li><li>C:\Users\XXXXXX\AppData\Local\Xamarin\Android.Support.v7.MediaRouter</li><li>C:\Users\XXXXXX\AppData\Local\Xamarin\Android.Support.v7.RecyclerView</li></ul><p>の6カ所に同じような処置を実行しました。<br>これによりビルドが通るようになりました。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>英語はきちんと読みましょう、ということですね。<br>別に英語読むのは苦ではないですが、どうしても日本語と比べると時間あたりで理解する文字数が減るので面倒に感じるんですよね…</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> Xamarin </category>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Xamarinメモ その15 UWPがビルドできないのを修正する</title>
      <link href="2016/05/04/1220/"/>
      <url>2016/05/04/1220/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/05/03/1273">前回</a>はWCFの簡単なサンプルをテストしました。</p><a id="more"></a><h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>UWPをビルドしようとしても、何故かビルドエラーが出ます。<br>どうも、クラス名が衝突しており、意図したクラスが使われないことが原因のようです。</p><p><a href="../../../../public/2016/05/1-3.png"><img src="../../../../public/2016/05/1-3-1024x279.png"></a></p><p>エラーの山</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p>解決方法はシンプル。<br>下記は修正前の<strong>App.xaml.cs</strong>です。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices.WindowsRuntime;</span><br><span class="line"><span class="keyword">using</span> Windows.ApplicationModel;</span><br><span class="line"><span class="keyword">using</span> Windows.ApplicationModel.Activation;</span><br><span class="line"><span class="keyword">using</span> Windows.Foundation;</span><br><span class="line"><span class="keyword">using</span> Windows.Foundation.Collections;</span><br><span class="line"><span class="keyword">using</span> Windows.UI.Xaml;</span><br><span class="line"><span class="keyword">using</span> Windows.UI.Xaml.Controls;</span><br><span class="line"><span class="keyword">using</span> Windows.UI.Xaml.Controls.Primitives;</span><br><span class="line"><span class="keyword">using</span> Windows.UI.Xaml.Data;</span><br><span class="line"><span class="keyword">using</span> Windows.UI.Xaml.Input;</span><br><span class="line"><span class="keyword">using</span> Windows.UI.Xaml.Media;</span><br><span class="line"><span class="keyword">using</span> Windows.UI.Xaml.Navigation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Xamarin.Forms.Portable5.UWP</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Provides application-specific behavior to supplement the default Application class.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">sealed</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">App</span> : <span class="title">Application</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> Initializes the singleton application object.  This is the first line of authored code</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> executed, and as such is the logical equivalent of main() or WinMain().</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">App</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.InitializeComponent();</span><br><span class="line">            <span class="keyword">this</span>.Suspending += OnSuspending;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> Invoked when the application is launched normally by the end user.  Other entry points</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> will be used such as when the application is launched to open a specific file.</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;e&quot;&gt;</span>Details about the launch request and process.<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnLaunched</span>(<span class="params">LaunchActivatedEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">            <span class="keyword">if</span> (System.Diagnostics.Debugger.IsAttached)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.DebugSettings.EnableFrameRateCounter = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">            Frame rootFrame = Window.Current.Content <span class="keyword">as</span> Frame;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Do not repeat app initialization when the Window already has content,</span></span><br><span class="line">            <span class="comment">// just ensure that the window is active</span></span><br><span class="line">            <span class="keyword">if</span> (rootFrame == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Create a Frame to act as the navigation context and navigate to the first page</span></span><br><span class="line">                rootFrame = <span class="keyword">new</span> Frame();</span><br><span class="line"></span><br><span class="line">                rootFrame.NavigationFailed += OnNavigationFailed;</span><br><span class="line"></span><br><span class="line">                Xamarin.Forms.Forms.Init(e);</span><br></pre></td></tr></table></figure><p>これを下記のように修正します。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">sealed</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">App</span> : <span class="title">Windows.UI.Xaml.Application</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">            <span class="keyword">if</span> (System.Diagnostics.Debugger.IsAttached)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.DebugSettings.EnableFrameRateCounter = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">            Windows.UI.Xaml.Controls.Frame rootFrame = Window.Current.Content <span class="keyword">as</span> Windows.UI.Xaml.Controls.Frame;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (rootFrame == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Create a Frame to act as the navigation context and navigate to the first page</span></span><br><span class="line">                rootFrame = <span class="keyword">new</span> Windows.UI.Xaml.Controls.Frame();</span><br></pre></td></tr></table></figure><p><strong>Windows.UI.Xaml.Application</strong>を<strong>Xamarin.Forms.Application</strong>、<strong>Windows.UI.Xaml.Controls.Frame</strong>を<strong>Xamarin.Forms.Frame</strong>と判断しているのが原因でした。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>Windows7、Windows10と2つの環境で発生しています。私だけの環境だとは思えないのですが…</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> Xamarin </category>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Xamarinメモ その14 WCFサービスの実行</title>
      <link href="2016/05/03/1273/"/>
      <url>2016/05/03/1273/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/05/02/1177">前回</a>はXamarin Android Playerをインストールしました。</p><a id="more"></a><h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>モバイルであっても、利用する場所が野外であるとは限らなくて、社内や自宅などのLANであることも多々あります。<br>そのような、利用者が不特定多数ではない、利用者数が予測しやすい規模のWebサービスの場合、大規模なサーバーどころか、小さなクライアントサーバー型アプリでサーバー側を非サーバーOS上に構築したサーバーアプリで賄うこともあるでしょう。</p><p>そういうシチュエーションならWCFは簡単に構築できますし、うってつけです。<br>でも、XamarinでWCFがどうするのでしょうか？特にPCLの制約などで面倒な感じがします。</p><p>そのあたりのことが下記のドキュメントにまとめられています。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://developer.xamarin.com/guides/cross-platform/application_fundamentals/web_services/walkthrough_working_with_WCF/" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=developer.xamarin.com"></img><div class="hbc-site-name">developer.xamarin.com</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png"></img></div><div class="hbc-text"><div class="hbc-title">Consume a Windows Communication Foundation (WCF) Web Service - Xamarin</div><div class="hbc-url">https://developer.xamarin.com/guides/cross-platform/application_fundamentals/web_services/walkthrough_working_with_WCF/</div><div class="hbc-description">This article demonstrates how to consume an WCF Simple Object Access Protocol (SOAP) service from a Xamarin.Forms application.</div></div></div></div></a></div></div><p>しかし、この記事は、PCLは使っておらず、iOS、Androidのプロジェクトに対してWCFのクライアントを追加しています。<br>これではコードの共通化の意味がありません。</p><p>なので、これを解決します。</p><p>今回のソースです。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://github.com/takuya-takeuchi/Demo/tree/master/Xamarin.Forms.Portable7" target="_blank" rel="nofollow"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://www.google.com/s2/favicons?domain=github.com"></img><div class="hbc-site-name">GitHub</div></div><div class="hbc-contents"><div class="hbc-thumbnail"><img src="https://avatars0.githubusercontent.com/u/6241854?s=400&v=4"></img></div><div class="hbc-text"><div class="hbc-title">takuya-takeuchi/Demo</div><div class="hbc-url">https://github.com/takuya-takeuchi/Demo/tree/master/Xamarin.Forms.Portable7</div><div class="hbc-description">Sample source code for Demonstration, Experiment and Test - takuya-takeuchi/Demo</div></div></div></div></a></div></div><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><h4 id="下準備"><a href="#下準備" class="headerlink" title="下準備"></a>下準備</h4><p>まず、いつものように、XamarinのBlankアプリをPCLで作成します。<br>その後、<strong>Windows 8.1</strong>、<strong>Windows Phone 8.1</strong>向けのプロジェクトを除去します。<br>今回、PCLにWCFクライアントを実装する場合、Windows Phone 8.1は使えません。</p><p>次に、<strong>ソリューションのNugetパッケージの管理</strong>を開き、<strong>Xamarin.Formsを全てのプロジェクトからアンインストール</strong>します。</p><p><a href="../../../../public/2016/05/1-5.png"><img src="../../../../public/2016/05/1-5-300x156.png" alt="Xamarin.Formsのアンインストール"></a><br>Xamarin.Formsのアンインストール</p><p>場合によっては、再起動を求められますので、ここで再起動します。<br>続いて、PCLのプロジェクトのプロパティから、ライブラリのタブのターゲットを設定する個所から<strong>変更ボタン</strong>を押下します。</p><p><a href="../../../../public/2016/05/2-4.png"><img src="../../../../public/2016/05/2-4-300x208.png" alt="ターゲットの変更"></a><br>ターゲットの変更</p><p>そして、<strong>ターゲットの変更ダイアログ</strong>からWindows Phone 8.1のチェックを外します。</p><p><a href="../../../../public/2016/05/3-2.png"><img src="../../../../public/2016/05/3-2-300x295.png" alt="Windows Phone 8.1は外す"></a><br>Windows Phone 8.1は外す</p><p>Windows 8をWindows 10にしても変更できないのでそのままでOKです。</p><p>最後に、再び<strong>ソリューションのNugetパッケージの管理</strong>を開き、<strong>Xamarin.Formsを全てのプロジェクトにインストール</strong>します。<br>場合によっては、また再起動を求められますので、ここで再起動します。</p><h4 id="WCFサービスの追加"><a href="#WCFサービスの追加" class="headerlink" title="WCFサービスの追加"></a>WCFサービスの追加</h4><p>特にWCFサービスの制限はないです。<br>ここでは、Xamarin.WcfというWPFプロジェクトを追加します。<br>また、WCFとDataContractを使用するために、<strong>System.Runtime.Serialization</strong>と<strong>System.ServiceModel</strong>を参照に追加します。<br>さらに、MVVMのために、Nugetで<strong>Prism.Wpf</strong>、<strong>Prism.Mvvm</strong>、<strong>Prism.Unity</strong>を追加しています。</p><p>下記に、サービスの定義とconfigを記載します。</p><p><strong>MessageService.cs</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.ServiceModel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Xamarin.Wcf.Services</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">System.ServiceModel.ServiceContract</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IMessageService</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">event</span> EventHandler ReceivedImage;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">System.ServiceModel.OperationContract</span>]</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">SendCameraUmage</span>(<span class="params">MessageDto message</span>)</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">ServiceBehavior(InstanceContextMode = InstanceContextMode.Single)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">MessageService</span> : <span class="title">IMessageService</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">event</span> EventHandler ReceivedImage;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendCameraUmage</span>(<span class="params">MessageDto message</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.ReceivedImage?.Invoke(<span class="keyword">this</span>, message);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">DataContract(Name = <span class="meta-string">&quot;messageDto&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">MessageDto</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MessageDto</span>(<span class="params"><span class="keyword">string</span> sender, <span class="keyword">string</span> message</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.Sender = sender;</span><br><span class="line">            <span class="keyword">this</span>.Message = message;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">DataMember(Name = <span class="meta-string">&quot;sender&quot;</span>)</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Sender</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">DataMember(Name = <span class="meta-string">&quot;message&quot;</span>)</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Message</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>App.config</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; ?&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;startup&gt;</span><br><span class="line">    &lt;supportedRuntime version&#x3D;&quot;v4.0&quot; sku&#x3D;&quot;.NETFramework,Version&#x3D;v4.6&quot; &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;startup&gt;</span><br><span class="line">  &lt;system.serviceModel&gt;</span><br><span class="line">    &lt;client &#x2F;&gt;</span><br><span class="line">    &lt;behaviors&gt;</span><br><span class="line">      &lt;serviceBehaviors&gt;</span><br><span class="line">        &lt;behavior name&#x3D;&quot;BasicConfiguration&quot;&gt;</span><br><span class="line">          &lt;serviceMetadata httpGetEnabled&#x3D;&quot;true&quot; httpGetUrl&#x3D;&quot;http:&#x2F;&#x2F;localhost:8080&#x2F;Xamarin.Wcf&#x2F;MessageService&#x2F;mex&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;behavior&gt;</span><br><span class="line">      &lt;&#x2F;serviceBehaviors&gt;</span><br><span class="line">    &lt;&#x2F;behaviors&gt;</span><br><span class="line">    &lt;bindings&gt;</span><br><span class="line">      &lt;basicHttpBinding&gt;</span><br><span class="line">        &lt;binding name&#x3D;&quot;BasicHttpBinding&quot; &#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;basicHttpBinding&gt;</span><br><span class="line">    &lt;&#x2F;bindings&gt;</span><br><span class="line">    &lt;services&gt;</span><br><span class="line">      &lt;service behaviorConfiguration&#x3D;&quot;BasicConfiguration&quot; name&#x3D;&quot;Xamarin.Wcf.Services.MessageService&quot;&gt;</span><br><span class="line">        &lt;endpoint address&#x3D;&quot;http:&#x2F;&#x2F;localhost:8080&#x2F;CameraViewer&#x2F;MessageService&quot;</span><br><span class="line">            binding&#x3D;&quot;basicHttpBinding&quot; bindingConfiguration&#x3D;&quot;BasicHttpBinding&quot;</span><br><span class="line">            contract&#x3D;&quot;Xamarin.Wcf.Services.IMessageService&quot; &#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;service&gt;</span><br><span class="line">    &lt;&#x2F;services&gt;</span><br><span class="line">  &lt;&#x2F;system.serviceModel&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure><p>他にViewを定義していますが、ここでは重要ではないので無視します。詳しくはソースを参照してください。</p><h4 id="WCFサービスのProxyクラスの生成"><a href="#WCFサービスのProxyクラスの生成" class="headerlink" title="WCFサービスのProxyクラスの生成"></a>WCFサービスのProxyクラスの生成</h4><p>前項で作成したWCFサービスを実行します。実行する際、管理者権限で実行しないと例外を投げて落ちます。<br>無事に実行し、Webブラウザから <strong><a href="http://localhost:8080/Xamarin.Wcf/MessageService/mex">http://localhost:8080/Xamarin.Wcf/MessageService/mex</a></strong> にアクセスします。<br>無事にアクセスできれば、下記のようにwsdlの定義が表示されるはずです。</p><p><a href="../../../../public/2016/05/4-2.png"><img src="../../../../public/2016/05/4-2-300x187.png" alt="WSDLの公開"></a><br>WSDLの公開</p><p>表示を確認後、コマンドプロンプトを起動します。<br>カレントディレクトリはどこでも良いですが、ファイルが2つ出力されるので、わかりやすい場所に移動してください。<br>移動後、下記のコマンドを実行します。</p><p><code>&quot;C:\Program Files (x86)\Microsoft SDKs\Silverlight\v5.0\Tools\SlSvcUtil.exe&quot; http://localhost:8080/Xamarin.Wcf/MessageService/mex</code></p><p>実行が成功すれば、カレントディレクトリに<strong>MessageService.cs</strong>と<strong>ServiceReferences.ClientConfig</strong>が出力されます。<br>生成後、csファイルをPCLプロジェクトに追加します。ClientConfigは無くてもよいです。</p><p>ここで注意ですが、生成する際に使用するプログラムは、<strong>SvcUtil.exe</strong>ではなく、<strong>SlSvcUtil.exe</strong>を使ってください。<br>SvcUtil.exeでも生成には成功しますが、生成されるクラス群に<strong>System.Runtime.Serialization.IExtensibleDataObject</strong>等が使用されますが、このクラスは、PCLでWindows Phone 8.1が含まれていると使用できません。<br>そのため、最初の下準備でWindows Phone 8.1を除外したわけです。</p><h4 id="Service-Clientを呼び出す"><a href="#Service-Clientを呼び出す" class="headerlink" title="Service Clientを呼び出す"></a>Service Clientを呼び出す</h4><p>残念ながら、configファイルを配置して、自動的にBindingを行うようなことはできません。<br>ですので、コードからBindingを行います。<br>下記はService Client生成処理の抜粋ですが、意図はつかめると思います。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">UpdateServiceClient</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._MessageServiceClient != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> binding = <span class="keyword">new</span> BasicHttpBinding()</span><br><span class="line">    &#123;</span><br><span class="line">        Name = <span class="string">&quot;basicHttpBinding&quot;</span>,</span><br><span class="line">        MaxReceivedMessageSize = <span class="number">67108864</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> timeout = <span class="keyword">new</span> TimeSpan(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    binding.SendTimeout = timeout;</span><br><span class="line">    binding.OpenTimeout = timeout;</span><br><span class="line">    binding.ReceiveTimeout = timeout;</span><br><span class="line">    <span class="keyword">this</span>._MessageServiceClient = <span class="keyword">new</span> MessageServiceClient(</span><br><span class="line">        binding,</span><br><span class="line">        <span class="keyword">new</span> EndpointAddress(<span class="string">$&quot;http://<span class="subst">&#123;<span class="keyword">this</span>.IpAddress&#125;</span>:8080/Xamarin.Wcf/MessageService&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IPAddressだけは、外部から設定できるようにしてあります。<br>これによって、各端末で設定として保存した値をもとにクライアントを構築できます。<br>応用すれば、ポート番号、タイムアウト値等も可変にできます。</p><p>最後に、WCFの呼び出し処理の抜粋です。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ICommand SendCommand</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._SendCommand == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>._SendCommand = <span class="keyword">new</span> DelegateCommand(</span><br><span class="line">                () =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">this</span>.UpdateServiceClient();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">var</span> message = <span class="keyword">new</span> messageDto();</span><br><span class="line">                    message.message = <span class="keyword">this</span>._Message;</span><br><span class="line">                    message.sender = ServiceManager.Sender;</span><br><span class="line">                    <span class="keyword">this</span>._MessageServiceClient.SendMessageAsync(message);</span><br><span class="line">                &#125;,</span><br><span class="line">                () =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> !<span class="keyword">string</span>.IsNullOrWhiteSpace(<span class="keyword">this</span>.IpAddress);</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._SendCommand;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非常にシンプルです。<br>ServiceManager.Senderは各プロジェクトのスタートアップコードでiOS、Android、UWPという文字列を設定して、それを参照しているだけです。<br>つまり、どの端末からメッセージが飛んできたのかを判断するためだけの識別です。</p><h4 id="テスト"><a href="#テスト" class="headerlink" title="テスト"></a>テスト</h4><p>では、実際にテストしてみましょう。<br>注意ですが、WCFサービスアプリを起動する端末のポート8080は解放しておいてください。面倒ならファイアーウォールを一時的に無効にしてもよいです。</p><h4 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h4><p><a href="../../../../public/2016/05/i1-1.png"><img src="../../../../public/2016/05/i1-1-199x300.png" alt="メッセージ送信"></a><br>メッセージ送信</p><p><a href="../../../../public/2016/05/i2.png"><img src="../../../../public/2016/05/i2-300x200.png" alt="メッセージ受信"></a><br>メッセージ受信</p><h4 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h4><p><a href="../../../../public/2016/05/a1-1.png"><img src="../../../../public/2016/05/a1-1-168x300.png" alt="メッセージ送信"></a></p><p>メッセージ送信</p><p><a href="../../../../public/2016/05/a2.png"><img src="../../../../public/2016/05/a2-300x200.png" alt="メッセージ受信"></a></p><p>メッセージ受信</p><h4 id="UWP"><a href="#UWP" class="headerlink" title="UWP"></a>UWP</h4><p><a href="../../../../public/2016/05/w1-1.png"><img src="../../../../public/2016/05/w1-1-184x300.png" alt="メッセージ送信"></a><br>メッセージ送信</p><p><a href="../../../../public/2016/05/w2-1.png"><img src="../../../../public/2016/05/w2-1-300x200.png" alt="メッセージ受信"></a><br>メッセージ受信</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>非常に簡単にクライアントサーバー型のアプリが完成しました。<br>一度プロジェクトを作っておけば、今後はこれをベースに拡張できそうです。</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/Xamarin.Forms.Portable7">https://github.com/takuya-takeuchi/Demo/tree/master/Xamarin.Forms.Portable7</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> Xamarin </category>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Xamarinメモ その13 Xamarin Android Playerをインストールする</title>
      <link href="2016/05/02/1177/"/>
      <url>2016/05/02/1177/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/05/01/1213">前回</a>はAndroid Emulatorが表示されないことがある問題を解決しました。</p><a id="more"></a><h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>が、Emulatorが動かないときがあります。<br>Emulatorは起動するけど、いつまでたってもデプロイしたアプリが表示されず、ずっとロック画面とか。</p><p>前回も最後に話しましたが、Xamarin.AndroidのデバッグはXamarin Android Playerなるものでやるのが良いらしいです。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p><a href="https://www.xamarin.com/android-player">Simulate Android apps with the Xamarin Android Player - Xamarin</a>からWindows用のインストーラをダウンロードして起動します。<br>画面の中央やや下です。</p><p><a href="../../../../public/2016/05/1-1.png"><img src="../../../../public/2016/05/1-1-547x1024.png" alt="インストーラの取得"></a><br>インストーラの入手</p><p><a href="https://developer.xamarin.com/guides/android/getting_started/installation/android-player/">Xamarin Android Player Installation - Xamarin</a>によれば、Hyper-Vを無効化しないと最大のパフォーマンスを得られない、と記述があります。<br>まぁWindows7にインストールするので別に私は構いません。<br>ダウンロードしたインストーラを起動してインストールを始めます。</p><p><a href="../../../../public/2016/05/2-1.png"><img src="../../../../public/2016/05/2-1.png" alt="セットアップ画面"></a><br>セットアップ画面</p><p>ライセンス許諾に了解して開始。</p><p><a href="../../../../public/2016/05/3-1.png"><img src="../../../../public/2016/05/3-1.png" alt="セットアップ開始"></a><br>セットアップ開始</p><p>すると始まる<strong>VirtualBox</strong>のインストーラ。</p><p><a href="../../../../public/2016/05/4-1.png"><img src="../../../../public/2016/05/4-1.png" alt="VirtualBoxのセットアップ"></a><br>VirtualBoxのセットアップ</p><p>インストール先はご自由に。</p><p><a href="../../../../public/2016/05/5.png"><img src="../../../../public/2016/05/5.png" alt="VirtualBoxのインストール先"></a><br>VirtualBoxのインストール先</p><p><a href="../../../../public/2016/05/6-1.png"><img src="../../../../public/2016/05/6-1.png" alt="VirtualBoxのインストールオプション"></a><br>VirtualBoxのインストールオプション</p><p>赤字の警告。何かファイルをダウンロードしていたりするなら、それが終わるのを待ちましょう。</p><p><a href="../../../../public/2016/05/7-1.png"><img src="../../../../public/2016/05/7-1.png" alt="警告"></a><br>インストール中、ネットワーク接続が一時的に切れる、という警告</p><p><a href="../../../../public/2016/05/8-1.png"><img src="../../../../public/2016/05/8-1.png" alt="Are you ready?"></a><br>Are you ready?</p><p>インストール開始。</p><p><a href="../../../../public/2016/05/9-1.png"><img src="../../../../public/2016/05/9-1.png" alt="VirtualBoxインストール中"></a><br>VirtualBoxインストール中</p><p>デバイスドライバのインストール。<br><strong>Oracle</strong>を信用して、許可してあげましょう。常に許可するかどうかは任意です。</p><p><a href="../../../../public/2016/05/10-1.png"><img src="../../../../public/2016/05/10-1.png" alt="デバイスドライバのインストール許可1"></a><br>デバイスドライバのインストール許可1</p><p><a href="../../../../public/2016/05/11-1.png"><img src="../../../../public/2016/05/11-1.png" alt="デバイスドライバのインストール許可2"></a><br>デバイスドライバのインストール許可2</p><p>終わった。</p><p><a href="../../../../public/2016/05/12-1.png"><img src="../../../../public/2016/05/12-1.png" alt="VirtualBoxインストール完了"></a><br>VirtualBoxインストール完了</p><p>と思いきや。</p><p><a href="../../../../public/2016/05/13.png"><img src="../../../../public/2016/05/13.png" alt="デバイスドライバのインストール許可3"></a><br>デバイスドライバのインストール許可3</p><p>ここからが本番。</p><p><a href="../../../../public/2016/05/14.png"><img src="../../../../public/2016/05/14.png" alt="Xamarin Android Playerのセットアップ"></a><br>Xamarin Android Playerのセットアップ</p><p>はいはい。</p><p><a href="../../../../public/2016/05/15.png"><img src="../../../../public/2016/05/15.png" alt="Xamarin Android Playerのライセンス許諾"></a><br>Xamarin Android Playerのライセンス許諾</p><p>ご自由に。</p><p><a href="../../../../public/2016/05/16.png"><img src="../../../../public/2016/05/16.png" alt="Xamarin Android Playerのインストールオプション"></a><br>Xamarin Android Playerのインストールオプション</p><p><a href="../../../../public/2016/05/17.png"><img src="../../../../public/2016/05/17.png" alt="インストール準備OK?"></a><br>覚悟はいいか？</p><p>開始。</p><p><a href="../../../../public/2016/05/18.png"><img src="../../../../public/2016/05/18.png" alt="Xamarin Android Playerのインストール中"></a><br>Xamarin Android Playerのインストール中</p><p>終了。</p><p><a href="../../../../public/2016/05/19.png"><img src="../../../../public/2016/05/19.png" alt="Xamarin Android Playerのインストール終了"></a><br>Xamarin Android Playerのインストール終了</p><p>全部完了</p><p><a href="../../../../public/2016/05/20.png"><img src="../../../../public/2016/05/20.png" alt="完全終了"></a><br>完全終了</p><p>とありあえず起動する。<br><a href="../../../../public/2016/05/21.png"><img src="../../../../public/2016/05/21.png" alt="起動しない"></a></p><p>え？</p><br><br><br><br><p><strong>(ﾟДﾟ)ﾊｧ?</strong></p><br><br><br><br><p>本当に意味不明。いやいや、今インストールしたでしょ？</p><p>というわけでGoogle先生。</p><p>同じ現象の人、いました。<br><a href="https://forums.xamarin.com/discussion/47551/after-fresh-install-on-windows-10-it-says-unable-to-find-virtualbox#latest">After fresh install on Windows 10, it says “Unable to find Virtualbox”</a></p><p>曰く、<strong>環境変数 VBOX_MSI_INSTALL_PATH</strong> の末尾にバックスラッシュがあるとダメだよ、とのこと。<br>環境変数変更後、再起動。<br>無事に起動しました。</p><p><a href="../../../../public/2016/05/22.png"><img src="../../../../public/2016/05/22-1024x618.png" alt="対応するエミュレーター一覧"></a><br>対応するエミュレーター一覧</p><p>ダウンロードボタンを押下して、ダウンロード開始。</p><p><a href="../../../../public/2016/05/23.png"><img src="../../../../public/2016/05/23.png" alt="デバイス名を指定"></a><br>デバイス名を指定</p><p>完了後、デバイス名を指定。デフォルトで問題ないでしょう。</p><p><a href="../../../../public/2016/05/25.png"><img src="../../../../public/2016/05/25.png" alt="デバイスの詳細"></a><br>デバイスの詳細</p><p>とりあえず、全部ダウンロードして、Visual Studioを開き、Androidプロジェクトをスタートアップに選択。デバイス一覧を見ると、</p><p><a href="../../../../public/2016/05/26.png"><img src="../../../../public/2016/05/26.png" alt="デバイスが増えた"></a><br>増えてる！</p><p>正確には、Xamarin Android Playerがインストールされて、既存のエミュレータと置き換わった、という感じです。<br>試しに、前回さんざんな目に遭ったAPI23である、**Nexus 7 (Marshmallow) (Android 6.0 - API 23)**を試してみます。</p><p><a href="../../../../public/2016/05/27.png"><img src="../../../../public/2016/05/27.png" alt="エミュレーター起動中"></a><br>お？</p><p>特にXamarin Android Playerから予め起動しておく必要は無い模様。</p><p><a href="../../../../public/2016/05/28.png"><img src="../../../../public/2016/05/28.png" alt="待機しますか？"></a><br>また待機しますか….</p><p><a href="../../../../public/2016/05/29.png"><img src="../../../../public/2016/05/29.png" alt="きれいな壁紙"></a><br>きれいな壁紙</p><p>でも、また反応がない。<br>って、デバッグが切れてる(#^ω^)ﾋﾞｷﾋﾞｷ</p><p>でも、再度デバッグしても、うんともすんとも言わない。Visual Studioのステータスバーはオレンジ色なのでデバッグは維持されています。<br>何気なく、エミュレーターのロック画面を上にスワイプしてみると。</p><p><a href="../../../../public/2016/05/30.png"><img src="../../../../public/2016/05/30.png" alt="デバッグ開始"></a><br>デバッグ開始</p><p>きたー。<br>ちょっと画面の解像度が高すぎて？文字が小さいけど、まぁいいでしょう。<br>でも、最大化すると画面が真っ暗になります。</p><p>ちょっとまだ不安定な感じはします。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>少なくとも、初期状態よりは大分良くなった気がします。<br>けれど、まだまだ改善の余地があると思います。<br>私のWindowsとの相性が悪いのかも入れませんが…</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> Xamarin </category>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Xamarinメモ その12 新規作成直後のプロジェクトでAndroidエミュが一覧に表示されない</title>
      <link href="2016/05/01/1213/"/>
      <url>2016/05/01/1213/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/05/01/1149">前回</a>はAndroid Emulatorが動かない問題を解決しました。</p><a id="more"></a><h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>時折、何かの拍子で、Visual Studioのビルドターゲット一覧 (プロジェクト名.iOSとかプロジェクト.Droidとか並んでいるコンボボックス)の右側のアタッチ先の一覧に存在するはずのAndroidエミューレーターが表示されないことがあります。</p><p><a href="../../../../public/2016/05/1-2.png"><img src="../../../../public/2016/05/1-2.png" alt="表示されないエミュレーター"></a><br>そして誰もいなくなった…</p><p>どうも、VisualStudioを起動してから、最初のXamarinプロジェクトを作成した直後の状態だとこの状態に陥るようです。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p>解決方法はシンプル。<br>この状態に陥った後、ソリューションを閉じて、再度ソリューションを開き直すだけです。</p><p><a href="../../../../public/2016/05/2-2.png"><img src="../../../../public/2016/05/2-2.png" alt="表示されたエミュレーター"></a><br>帰ってきた</p><p>問題が起きるのは、Visual Studioを起動してから、最初に「新規作成」したXamarinプロジェクトだけです。<br>Visual Studio起動直後に、既存のソリューションを開いた場合は、この現象は発生しません。<br>Windows7とWindows10の両方で確認しました。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>各所で言われていますが、まだまだXamarinは荒削りですね。機能が一通りそろったら、パフォーマンスの向上とバグの修正に注力して、安定化を図ったもらいたいです。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> Xamarin </category>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Xamarinメモ その11 Android Emulatorが動かない</title>
      <link href="2016/05/01/1149/"/>
      <url>2016/05/01/1149/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/04/30/1151">前回</a>はPCLのビルドが通らない問題を解決しました。</p><a id="more"></a><h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>これまで、iOSでデバッグしてみましたが、Android Emulatorを使ってみようとして、動かないので放置してきましたが、解決に向けて腰を上げました。<br>まず、問題としてiOSのようにエミュレータが表示されていないのが問題と思いました。</p><p><a href="../../../../public/2016/05/1.png"><img src="../../../../public/2016/05/1.png" alt="エミューレーターがない"></a><br>エミューレーターがない</p><p>なので、これを追加します。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p>Visual Studioのツールバーの<strong>Android SDK Manager</strong>を起動します。</p><p><a href="../../../../public/2016/05/4.png"><img src="../../../../public/2016/05/4.png" alt="Android SDK Managerの起動"></a><br>Android SDK Managerの起動ボタン</p><p>もしくは、スタートメニューから <strong>[Xamarin]</strong> -&gt; <strong>[Platform Tools]</strong> -&gt; <strong>[Android SDK Manager]</strong> と選んでも良いです。<br>個人的にはvisual Studioを落としておいて、後述の方法で起動した方が良いと思います。<br>起動すると下記のような画面になります。</p><p><a href="../../../../public/2016/05/2.png"><img src="../../../../public/2016/05/2-1024x467.png" alt="Android SDK Manager"></a><br>Android SDK Manager</p><p>右下にアップデートがあることを示すボタンがあるので押下します。</p><p><a href="../../../../public/2016/05/3.png"><img src="../../../../public/2016/05/3.png" alt="ライセンス条件の了承確認"></a><br>ライセンス条件の了承確認</p><p>了承して進めていきます。</p><p><a href="../../../../public/2016/05/6.png"><img src="../../../../public/2016/05/6.png" alt="エラー"></a><br>無慈悲なエラー</p><p>途中、インストール先のフォルダを移動できない、というエラーメッセージが表示されました。<br>別のアプリがフォルダをロックしているのでしょう。<br>Visual Studioを終了させて、スタートメニューから起動する方法でやり直したら私は上手くいきました。最悪再起動してやり直すことも必要かもしれません。</p><p>インストールが終わったら、Visual Studioを起動or再起動してみるとエミュレータが追加されます。</p><p><a href="../../../../public/2016/05/7.png"><img src="../../../../public/2016/05/7.png" alt="エミュレータの追加"></a><br>エミュレータの追加</p><p>これから、デバッグして起動することでエミュレーターが起動します。<br><strong>Xamarin_Android_API_23</strong>ってやつを選びました。最新みたいだし。</p><br><br><br><p>がとてつもなく、遅い。冗談抜きで5分以上待たされる。</p><p><a href="../../../../public/2016/05/8.png"><img src="../../../../public/2016/05/8.png" alt="起動中のスプラッシュスクリーン"></a></p><p>起動中のスプラッシュスクリーン</p><p>この画面の後、真っ黒な画面で待たされる。</p><p><a href="../../../../public/2016/05/9.png"><img src="../../../../public/2016/05/9.png" alt="真っ黒"></a><br>真っ黒</p><p>少し変化したが、さらに待たされる。</p><p><a href="../../../../public/2016/05/10.png"><img src="../../../../public/2016/05/10.png" alt="Welcome"></a><br>何か出た</p><p>ふと気づくと、Visual Studioとエミューレーターの接続が切れているのか、ビルドのキャンセルボタンが押せなくなっている。<br>イラッ、としつつ再度デバッグする。<br>さらに待たされて、ようやく起動した。</p><p><a href="../../../../public/2016/05/11.png"><img src="../../../../public/2016/05/11.png" alt="起動完了"></a><br>ようやく出た</p><br><br><br><p>画面ちっさいし… 推測するに、何もエミュレータが起動していない状態からデバッグしようとするとタイムアウトしてしまうのでは？</p><p>ただ、それでも遅いときは遅いし、デバッグできないときがある。<br>ためしに、エミュレータを変えてみる。<br><strong>7” KitKat（4.4）XXXHDPI Phone(Android 4.4 - API 19)</strong> ってやつ。</p><br><br><br><br><p>超速い (前のと比べて。別にiOS Simulatorよりも速い、というわけでもない)。</p><p><a href="../../../../public/2016/05/12.png"><img src="../../../../public/2016/05/12.png"></a><br>しかも何かかっこいいし。</p><p><a href="https://twitter.com/nuits_jp/status/726445129058275328">nuits.jpさんによれば</a>Viaual Studio Emulator for Androidなるものらしい。<br>なるほど、最新が良いとは限らない訳ね。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>Androidのデバッグは、iOSのデバッグよりも面倒でした。<br>どうも、Xamarin Android Playerなるものがあるらしいので、それを使いたいと思います。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> Xamarin </category>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Xamarinメモ その10 PCLのビルドが通らない</title>
      <link href="2016/04/30/1151/"/>
      <url>2016/04/30/1151/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/04/27/1123">前回</a>はTabbedPageを使って、可変タブを表現してみました。</p><h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>以前、ビルドしたときPCLのプロジェクトが下記のエラーを出力していました。</p><p><a href="../../../../public/2016/04/1-13.png"><img src="../../../../public/2016/04/1-13-1024x175.png" alt="エラーメッセージ"></a></p><p>ビルド アクション ‘Page’ は、プロジェクトのターゲットの特定の組み合わせでサポートされていません。</p><p>これはどういうことでしょう？</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p>エラーの起きているファイルはxamlファイルでした。<br>ビルドアクションを見ると、</p><p><a href="../../../../public/2016/04/2-11.png"><img src="../../../../public/2016/04/2-11.png" alt="エラーが起きるプロパティ"></a><br>ビルド アクション ‘Page’</p><p>ビルドアクションが<strong>Page</strong>になっているのが原因でしょう。<br>でも何に直すべきなのでしょうか？</p><p>なので、試しに新規プロジェクトを別に作ってみて、xamlのプロパティを確認してみます。</p><p><a href="../../../../public/2016/04/3-9.png"><img src="../../../../public/2016/04/3-9.png" alt="エラーが起きないプロパティ"></a><br>ビルド アクション ‘埋め込みリソース’</p><p>ビルドアクションは<strong>埋め込みリソース</strong>になっています。<br>では、ビルドが通らないプロジェクトでプロパティを<strong>埋め込みリソース</strong>に変更して再ビルドをしてみます。</p><p><a href="../../../../public/2016/04/4-6.png"><img src="../../../../public/2016/04/4-6.png" alt="ビルド成功"></a><br>ビルド成功</p><p>ビルドが上手くいきました。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>どうして、ビルドアクションがこうなっていたかはわかりませんが、問題が解決しました。<br>でも、これって別にXamarinの問題ではないような…</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> Xamarin </category>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Xamarinメモ その9 DataTemplateSelector+ViewModelで動的に可変タブを表現</title>
      <link href="2016/04/27/1123/"/>
      <url>2016/04/27/1123/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/04/26/1118">前回</a>はTabbedPageを使ってみました。</p><a id="more"></a><h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>ListView等でデータを表現しようとすると、データの種別に応じて、微妙に表現を変えたりしたいときがあります。<br>自分としてよくあるのが、パラメータを入力するUIを作る際、設定ファイルなどから読み込んで動的に生成したViewModelに応じて、入力UIを変更する、ということです。<br>この手の表現はWPFの<strong>System.Windows.Controls.DataTemplateSelector</strong>やUWPの<strong>Windows.UI.Xaml.Controls.DataTemplateSelector</strong>を使います。</p><p>では、Xamarin.Formsにあるの？というとどうも2.1で追加されたよう。<br>詳しくはXamarinの中の人Nish Anil氏の<a href="https://blog.xamarin.com/customizing-list-view-cells-xamarin-forms-datatemplateselector/">Customizing ListView Cells with Xamarin.Forms’ DataTemplateSelector</a>を参考。</p><p>が、私の環境で表示されない。<br><a href="https://developer.xamarin.com/api/type/Xamarin.Forms.DataTemplateSelector/">Xamarin.Forms.DataTemplateSelector</a>というクラスが存在するのは間違いないのに… と、NuGet管理画面を見たら…</p><p><a href="../../../../public/2016/04/1-12.png"><img src="../../../../public/2016/04/1-12-1024x384.png" alt="NuGetパッケージマネージャー"></a></p><p>古い….</p><p>今回のサンプルソースは <a href="https://github.com/takuya-takeuchi/Demo/tree/master/Xamarin.Forms.Portable4">https://github.com/takuya-takeuchi/Demo/tree/master/Xamarin.Forms.Portable4</a>です。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p>まず、NuGetパッケージマネージャーからXamarin.Formsを最新版に更新します。2016/04/26時点で最新版は2.1.0.6526です。<br>PCLとiOSプロジェクト(必要ならAndroid等も)で更新する必要があります。片方だけだと実行時にエラーが起きてクラッシュします。<br>これでDataTemplateSelectorが有効になりました。</p><p>今回は、TabbedPageの各子要素のPageインスタンスにバインディングされたViewModelをDataTemplateSelectorを使って変化させます。<br>これによって、TabbedPageのタブをViewModelの状態によって可変にしつつ、ViewModelに応じてタブの内容も変化させることが可能になります。</p><p>が、注意しなくてはならないのは、DataTemplateSelectorにDataTypeプロパティが存在しないため、Xamlで生成する際、インテリセンスが効かないため、実行時にバインディングされていないのことに気づかない可能性があります。</p><p>また、注意事項として、先のNish Anil氏曰く</p><blockquote><p>When using DataTemplateSelectors, it’s important to keep in mind the following limitations: No more than 20 templates per ListView on Android. The DataTemplateSelector subclass MUST return the same template for the same data if queried multiple times. The DataTemplateSelector must not return another DataTemplateSelector. The DataTemplateSelector must not return new instances of a DataTemplate on each call, instead the same instance must be returned. Failure to do so will effectively disable virtualization and lead to a memory leak.</p></blockquote><p>訳：DataTemplateSelectorsを使うとき、</p><ol><li>Androidでは、1つのListViewにテンプレートは20個まで</li><li>DataTemplateSelectorのサブクラスは、もし複数回要求されるなら、同一のデータに対して同一のテンプレートを<strong>必ず</strong>返す。</li><li>DataTemplateSelectorは別のDataTemplateSelectorを<strong>返してはならない</strong></li><li>DataTemplateSelectorは呼び出しのたびにDataTemplateの新しいインスタンスを<strong>返してはならない</strong>、代わりに同一のインスタンスを<strong>必ず</strong>返すこと。そうしないと、効果的な仮想化は無効化されメモリリークを引き起こす</li></ol><p>と指摘しています。<br>まぁ、20個もテンプレートを使うことはないと思いますが、DataTemplateSelectorから別のDataTemplateSelectorを返すな、というのはネストするな、ということでしょうか？ これはたまにやることがあるので注意しなければ。<br>というわけで実装サンプル。</p><p>まずはDataTemplateSelector。</p><p><strong>TabbedPageDataTemplateSelector.cs</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> Xamarin.Forms.Portable4.ViewModels;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Xamarin.Forms.Portable4.Controls</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">TabbedPageDataTemplateSelector</span> : <span class="title">DataTemplateSelector</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TabbedPageDataTemplateSelector</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> DataTemplate TabbedPage1</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> DataTemplate TabbedPage2</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> DataTemplate <span class="title">OnSelectTemplate</span>(<span class="params"><span class="keyword">object</span> item, BindableObject container</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> viewModel = item <span class="keyword">as</span> TabbedPageViewModel;</span><br><span class="line">            <span class="keyword">if</span> (viewModel == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> viewModel <span class="keyword">is</span> TabbedPage1ViewModel ? <span class="keyword">this</span>.TabbedPage1 : viewModel <span class="keyword">is</span> TabbedPage2ViewModel ? <span class="keyword">this</span>.TabbedPage2 : <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>次は、エントリポイントとなるメインのビューであるMainPageView。<br>ここで全てのViewを、DataTemplateを使って定義しています。<br>ItemsSourceとItemTemplateはおなじみ、という感じですね。</p><p><strong>MainPageView.xaml</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; ?&gt;</span><br><span class="line">&lt;TabbedPage x:Class&#x3D;&quot;Xamarin.Forms.Portable4.Views.MainPageView&quot;</span><br><span class="line">            xmlns&#x3D;&quot;http:&#x2F;&#x2F;xamarin.com&#x2F;schemas&#x2F;2014&#x2F;forms&quot;</span><br><span class="line">            xmlns:x&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2009&#x2F;xaml&quot;</span><br><span class="line">            xmlns:controls&#x3D;&quot;clr-namespace:Xamarin.Forms.Portable4.Controls;assembly&#x3D;Xamarin.Forms.Portable4&quot;</span><br><span class="line">            xmlns:viewModels&#x3D;&quot;clr-namespace:Xamarin.Forms.Portable4.ViewModels;assembly&#x3D;Xamarin.Forms.Portable4&quot;</span><br><span class="line">            ItemsSource&#x3D;&quot;&#123;Binding TabbedPages&#125;&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;TabbedPage.BindingContext&gt;</span><br><span class="line">    &lt;viewModels:MainPageViewModel &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;TabbedPage.BindingContext&gt;</span><br><span class="line"></span><br><span class="line">  &lt;TabbedPage.ItemTemplate&gt;</span><br><span class="line">    &lt;controls:TabbedPageDataTemplateSelector&gt;</span><br><span class="line">      &lt;controls:TabbedPageDataTemplateSelector.TabbedPage1&gt;</span><br><span class="line">        &lt;DataTemplate&gt;</span><br><span class="line">          &lt;ContentPage Title&#x3D;&quot;1&quot;&gt;</span><br><span class="line">            &lt;Label Text&#x3D;&quot;&#123;Binding Title&#125;&quot; TextColor&#x3D;&quot;Red&quot; VerticalOptions&#x3D;&quot;Center&quot; HorizontalOptions&#x3D;&quot;Center&quot;&#x2F;&gt;</span><br><span class="line">          &lt;&#x2F;ContentPage&gt;</span><br><span class="line">        &lt;&#x2F;DataTemplate&gt;</span><br><span class="line">      &lt;&#x2F;controls:TabbedPageDataTemplateSelector.TabbedPage1&gt;</span><br><span class="line">      &lt;controls:TabbedPageDataTemplateSelector.TabbedPage2&gt;</span><br><span class="line">        &lt;DataTemplate&gt;</span><br><span class="line">          &lt;ContentPage Title&#x3D;&quot;2&quot;&gt;</span><br><span class="line">            &lt;Label Text&#x3D;&quot;&#123;Binding Title&#125;&quot; TextColor&#x3D;&quot;Blue&quot; VerticalOptions&#x3D;&quot;Center&quot; HorizontalOptions&#x3D;&quot;Center&quot;&#x2F;&gt;</span><br><span class="line">          &lt;&#x2F;ContentPage&gt;</span><br><span class="line">        &lt;&#x2F;DataTemplate&gt;</span><br><span class="line">      &lt;&#x2F;controls:TabbedPageDataTemplateSelector.TabbedPage2&gt;</span><br><span class="line">    &lt;&#x2F;controls:TabbedPageDataTemplateSelector&gt;</span><br><span class="line">  &lt;&#x2F;TabbedPage.ItemTemplate&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;TabbedPage&gt;</span><br></pre></td></tr></table></figure><p>MainViewのViewModelです。<br>この中でタブに対応するViewModelのコレクションを定義しています。<br>これによりタブの個数を可変にしています。</p><p><strong>MainPageView.cs</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.ObjectModel;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Practices.Prism.Mvvm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Xamarin.Forms.Portable4.ViewModels</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">MainPageViewModel</span> : <span class="title">BindableBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MainPageViewModel</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> tabbedPageViewModels = <span class="keyword">new</span> TabbedPageViewModel[]</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">new</span> TabbedPage1ViewModel(),</span><br><span class="line">                <span class="keyword">new</span> TabbedPage2ViewModel(),</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.TabbedPages = <span class="keyword">new</span> ObservableCollection(tabbedPageViewModels);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> ObservableCollection _TabbedPages;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ObservableCollection TabbedPages</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._TabbedPages;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.SetProperty(<span class="keyword">ref</span> <span class="keyword">this</span>._TabbedPages, <span class="keyword">value</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後にタブのViewModelです。<br>TabbedPageViewModelを派生して、派生クラス毎にTitleプロパティを変更しています。<br>タブが複数ある場合は、往々にして、個々のタブは似た構成になることが多いので、抽象クラスで共通な振る舞いを定義するのはよくあると思います。</p><p><strong>TabbedPageViewModel.cs</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.Practices.Prism.Mvvm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Xamarin.Forms.Portable4.ViewModels</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">TabbedPageViewModel</span> : <span class="title">BindableBase</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">string</span> _Title;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Title</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._Title;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.SetProperty(<span class="keyword">ref</span> <span class="keyword">this</span>._Title, <span class="keyword">value</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">TabbedPage1ViewModel</span> : <span class="title">TabbedPageViewModel</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TabbedPage1ViewModel</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.Title = <span class="string">&quot;TabbedPage1&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">TabbedPage2ViewModel</span> : <span class="title">TabbedPageViewModel</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TabbedPage2ViewModel</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.Title = <span class="string">&quot;TabbedPage2&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実行すると下記のようになります。</p><p><a href="../../../../public/2016/04/2-10.png"><img src="../../../../public/2016/04/2-10-1024x819.png" alt="タブ1"></a> </p><p>タブ1</p><p><a href="../../../../public/2016/04/3-8.png"><img src="../../../../public/2016/04/3-8-1024x819.png" alt="タブ2"></a></p><p>タブ2</p><p>DataTemplateがあるかないかでは、表現の幅に大きな違いが出るので、非常にうれしい実装です。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>DataTypeがなかったり、少し制限がありますが、DataTemplateSelectorが遜色ない機能を持っていることがわかりました。</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/Xamarin.Forms.Portable4">https://github.com/takuya-takeuchi/Demo/tree/master/Xamarin.Forms.Portable4</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> Xamarin </category>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Xamarinメモ その8 TabbedPageを使ってみる</title>
      <link href="2016/04/26/1118/"/>
      <url>2016/04/26/1118/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/04/24/1115">前回</a>はTimerを使ってみました。</p><a id="more"></a><h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>アプリを作る上で設定画面などを用意する上でタブは欠かせないです。UWPならPivotですね。<br>Xamarinでは<a href="https://developer.xamarin.com/api/type/Xamarin.Forms.TabbedPage/">Xamarin.Forms.TabbedPage</a>が該当しますが、WPFのTabControlやUWPのPivotと異なり、それ自体がPageの要素になります。<br>つまりTabControlやPivotと異なり、他の要素の子として追加できないようです。</p><blockquote><p>MultiPage`1 that displays an array of tabs across the top of the screen, each of which loads content onto the screen.</p></blockquote><p>訳:スクリーンのトップを横断するタブの配列を表示するMultiPage`1で、スクリーンに各ページがコンテンツをロードします。</p><p>とあります。<br>TabbedPageは<a href="https://developer.xamarin.com/api/type/Xamarin.Forms.MultiPage%601/">MultiPage</a>の派生で、子要素は説明にあるとおり、Pageの派生クラスのみ追加できるようです。ですので、ContentPageやTabbedPageを追加できます。<br>注意事項として、</p><blockquote><p>The user interface of a tabbed page consists of a list of tabs and a larger detail area. On iOS, the list of tabs appears at the bottom of the screen, and the detail area is above. On Android and Windows phones, the tabs appear across the top of the screen. The user can scroll the collection of tabs that are across the top of the screen if that collection is too large to fit on one screen.</p></blockquote><p>訳:Tabbedページのユーザーインターフェイスはタブリストとより大きな詳細エリアから構成されます。iOSにおいては、スクリーンの下部にタブのリストが表示され、その上部に詳細エリアが表示されます。AndroidとWindows Phoneでは、タブはスクリーン上部に位置します。ユーザは、タブのコレクションがスクリーンにフィットするより大きい場合は、スクリーン上部に位置するタブのコレクションをスクロールできます。</p><p>つまり、タブの位置は変更できないようです。</p><p>とりあえずつかってみないことにはわかりません。<br>前回のストップウォッチにタブを加えてみます。</p><p>ソースは <a href="https://github.com/takuya-takeuchi/Demo/tree/master/Xamarin.Forms.Portable3">https://github.com/takuya-takeuchi/Demo/tree/master/Xamarin.Forms.Portable3</a>です。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p>特に難しいこともないのですが、Macでデバッグする際、Dockが邪魔をしてタブのテキストが見えなくなって、どうしてテキストが表示されないのか10分くらい悩みました。<br>画面の関係上、iPhone Simulatorが画面を大きく占める場合は、Dockを自動で隠す設定にした方が無難かもしれません。</p><p>まずはエントリポイントとなるメインのビューであるMainPageView。</p><p><strong>MainPageView.xaml</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; ?&gt;</span><br><span class="line">&lt;TabbedPage x:Class&#x3D;&quot;Xamarin.Forms.Portable3.Views.MainPageView&quot;</span><br><span class="line">            xmlns&#x3D;&quot;http:&#x2F;&#x2F;xamarin.com&#x2F;schemas&#x2F;2014&#x2F;forms&quot;</span><br><span class="line">            xmlns:x&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2009&#x2F;xaml&quot;</span><br><span class="line">            xmlns:pages&#x3D;&quot;clr-namespace:Xamarin.Forms.Portable3.Views.Pages;assembly&#x3D;Xamarin.Forms.Portable3&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;TabbedPage.Children&gt;</span><br><span class="line">    &lt;pages:StopwatchPageView Title&#x3D;&quot;Stopwatch&quot; &#x2F;&gt;</span><br><span class="line">    &lt;ContentPage Title&#x3D;&quot;Timer&quot; &#x2F;&gt;</span><br><span class="line">    &lt;TabbedPage Title&#x3D;&quot;Many&quot;&gt;</span><br><span class="line">      &lt;TabbedPage.Children&gt;</span><br><span class="line">        &lt;ContentPage Title&#x3D;&quot;Test1&quot;&#x2F;&gt;</span><br><span class="line">        &lt;ContentPage Title&#x3D;&quot;Test2&quot;&#x2F;&gt;</span><br><span class="line">        &lt;ContentPage Title&#x3D;&quot;Test3&quot;&#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;TabbedPage.Children&gt;</span><br><span class="line">    &lt;&#x2F;TabbedPage&gt;</span><br><span class="line">  &lt;&#x2F;TabbedPage.Children&gt;</span><br><span class="line">&lt;&#x2F;TabbedPage&gt;</span><br></pre></td></tr></table></figure><p><strong>MainPageView.cs</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> Xamarin.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Xamarin.Forms.Portable3.Views</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">MainPageView</span> : <span class="title">TabbedPage</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MainPageView</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意するのは、ContentPageではなく、TabbedPageの派生クラスに変化したことです。<br>それ以外は、TabbedPageの子要素として、Pageの派生クラスを追加するだけです。<br>StopwatchPageViewは前回MainPage.xamlにあった内容を移動しただけです。タブの内容を別のビューとして切り出しただけです。<br>また、Childrenの三つめにTabbedPgaeを加えてタブを入れ子にしています。<br>実行すると下記のようになります。</p><p><a href="../../../../public/2016/04/1-11.png"><img src="../../../../public/2016/04/1-11-1024x819.png" alt="タブ"></a></p><p>タブがページ下部に….</p><p><a href="../../../../public/2016/04/2-9.png"><img src="../../../../public/2016/04/2-9-1024x819.png" alt="入れ子"></a></p><p>入れ子にもできます</p><p>このあたりも簡単ですね。<br>本当はViewModelsからDataTemplateSeclectorを使ってViewを切り替えたかったのですが、まだ未調査でした。<br>次回できたらいいなと思います。(<em>´ω｀</em>)ﾎｯｺﾘ</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>タブがあるかどうかでアプリがぐっと実用的になると思います。<br>特に設定画面などはタブのページで用意するのはテンプレと言ってもいいですし。<br>個人的には、タブは上にあった方が良いんですが、これはカスタマイズできるんでしょうか？</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/Xamarin.Forms.Portable3">https://github.com/takuya-takeuchi/Demo/tree/master/Xamarin.Forms.Portable3</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> Xamarin </category>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Xamarinメモ その7 Timerを使ってみる</title>
      <link href="2016/04/24/1115/"/>
      <url>2016/04/24/1115/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/04/23/1105">前回</a>はMVVMを使ってみました。</p><a id="more"></a><h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>Xamlを使ってみたので、色々簡単にできると思います。<br>なので、Timerを使ってストップウォッチを作ってみました。</p><p>ソースは <a href="https://github.com/takuya-takeuchi/Demo/tree/master/Xamarin.Forms.Portable2">https://github.com/takuya-takeuchi/Demo/tree/master/Xamarin.Forms.Portable2</a>です。</p><p>この手の話題は<strong>エクセルソフトの田淵様</strong>の<a href="http://ytabuchi.hatenablog.com/entry/2015/12/20/012007">JXUGC #9 Xamarin.Forms Mvvm 実装方法 Teachathon を開催しました</a>で実施済みですが、あえて自分でやってみます。</p><p>課題はTimerをどうするか、ですが普通にXamarinのページに<a href="https://developer.xamarin.com/api/member/Xamarin.Forms.Device.StartTimer/p/System.TimeSpan/System.Func%7BSystem.Boolean%7D/">Xamarin.Forms.Device.StartTimer</a>がありました。<br>けど、WinFormsやWPFでお世話になったSystem.Timers.Timerとかと違います。<br>インスタンスを作ってそこで管理するのではなく、Staticメソッドにコールバックを渡して、指定した間隔で処理をするようです。</p><p>タイマーを停止する方法は</p><blockquote><p>While the callback returns true, the timer will keep recurring.</p></blockquote><p>訳:コールバックがtrueを返す間は、タイマーは繰り返し発生し続けます。</p><p>とあるので、第二引数のコールバックで不要になったらfalseを返せば良いだけのようです。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p>Timerさえわかれば、あとはちょいちょい、って感じかと思ったそうでもありませんでした。<br>Xamlで作れるし、WPF、UWPとクラスが似ているので直感的に作れますが、細かいところが違います。<br>まず、WidthやHeightがReadOnlyなので、要素をおおまかなおおきさにして配置するのが面倒です。<br>あと、Xamlのインテリセンスが少し残念です。プロパティ要素構文でインテリセンスの推測が効かないので、最初は焦りました。<br>最もきついのは、Xaml構文でエラーになってもビルドが通ることです。<br>最初、間違えてResoueceプロパティの子要素に、下記のようにリソース要素を追加していました。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;ContentPage.Resources&gt;</span><br><span class="line">    &lt;converters:BooleanInvertConverter x:Key&#x3D;&quot;BooleanInvertConverter&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;ContentPage.Resources&gt;</span><br></pre></td></tr></table></figure><p>でも、これでビルドが通って、長い時間かけて起動したiPhone Simulatorで実行時エラー、となると悲しいです。<br>正しくは当然下記のよう。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ContentPage.Resources&gt;</span><br><span class="line">    &lt;ResourceDictionary&gt;</span><br><span class="line">        &lt;converters:BooleanInvertConverter x:Key&#x3D;&quot;BooleanInvertConverter&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;ResourceDictionary&gt;</span><br><span class="line">&lt;&#x2F;ContentPage.Resources&gt;</span><br></pre></td></tr></table></figure><p>これは改善して欲しいです。<br>辛いのはこれくらいですが、あとは普通です。WPFやUWPがきちんと使えればどうとでもなります。<br>VisiblityプロパティがIsVisibleでbool型なのはWinFormsを思い出して、(<em>´ω｀</em>)ﾎｯｺﾘしました。</p><p>最終的に、</p><p><strong>MainPage.xaml</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; ?&gt;</span><br><span class="line">&lt;ContentPage x:Class&#x3D;&quot;Xamarin.Forms.Portable2.Views.MainPage&quot;</span><br><span class="line">             xmlns&#x3D;&quot;http:&#x2F;&#x2F;xamarin.com&#x2F;schemas&#x2F;2014&#x2F;forms&quot;</span><br><span class="line">             xmlns:x&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2009&#x2F;xaml&quot;</span><br><span class="line">             xmlns:converters&#x3D;&quot;clr-namespace:Xamarin.Forms.Portable2.Converters;assembly&#x3D;Xamarin.Forms.Portable2&quot;</span><br><span class="line">             xmlns:viewModels&#x3D;&quot;clr-namespace:Xamarin.Forms.Portable2.ViewModels;assembly&#x3D;Xamarin.Forms.Portable2&quot;&gt;</span><br><span class="line">    &lt;ContentPage.BindingContext&gt;</span><br><span class="line">        &lt;viewModels:MainPageViewModel &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;ContentPage.BindingContext&gt;</span><br><span class="line"></span><br><span class="line">    &lt;ContentPage.Resources&gt;</span><br><span class="line">        &lt;ResourceDictionary&gt;</span><br><span class="line">            &lt;converters:BooleanInvertConverter x:Key&#x3D;&quot;BooleanInvertConverter&quot; &#x2F;&gt;</span><br><span class="line">            &lt;Style x:Key&#x3D;&quot;LabelStyle&quot; TargetType&#x3D;&quot;Label&quot;&gt;</span><br><span class="line">                &lt;Setter Property&#x3D;&quot;FontSize&quot; Value&#x3D;&quot;48&quot; &#x2F;&gt;</span><br><span class="line">                &lt;Setter Property&#x3D;&quot;HorizontalOptions&quot; Value&#x3D;&quot;Center&quot; &#x2F;&gt;</span><br><span class="line">                &lt;Setter Property&#x3D;&quot;VerticalOptions&quot; Value&#x3D;&quot;Center&quot; &#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;Style&gt;</span><br><span class="line">        &lt;&#x2F;ResourceDictionary&gt;</span><br><span class="line">    &lt;&#x2F;ContentPage.Resources&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Grid VerticalOptions&#x3D;&quot;Center&quot;&gt;</span><br><span class="line">        &lt;Grid.ColumnDefinitions&gt;</span><br><span class="line">          &lt;ColumnDefinition  Width&#x3D;&quot;*&quot;&#x2F;&gt;</span><br><span class="line">          &lt;ColumnDefinition Width&#x3D;&quot;2*&quot;&#x2F;&gt;</span><br><span class="line">          &lt;ColumnDefinition Width&#x3D;&quot;10&quot;&#x2F;&gt;</span><br><span class="line">          &lt;ColumnDefinition Width&#x3D;&quot;2*&quot;&#x2F;&gt;</span><br><span class="line">          &lt;ColumnDefinition Width&#x3D;&quot;10&quot;&#x2F;&gt;</span><br><span class="line">          &lt;ColumnDefinition Width&#x3D;&quot;2*&quot;&#x2F;&gt;</span><br><span class="line">          &lt;ColumnDefinition Width&#x3D;&quot;*&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;Grid.ColumnDefinitions&gt;</span><br><span class="line">        &lt;Grid.RowDefinitions&gt;</span><br><span class="line">            &lt;RowDefinition &#x2F;&gt;</span><br><span class="line">            &lt;RowDefinition &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;Grid.RowDefinitions&gt;</span><br><span class="line">        &lt;Label Grid.Row&#x3D;&quot;0&quot;</span><br><span class="line">               Grid.Column&#x3D;&quot;1&quot;</span><br><span class="line">               Style&#x3D;&quot;&#123;StaticResource LabelStyle&#125;&quot;</span><br><span class="line">               Text&#x3D;&quot;&#123;Binding Minute&#125;&quot; &#x2F;&gt;</span><br><span class="line">        &lt;Label Grid.Row&#x3D;&quot;0&quot;</span><br><span class="line">               Grid.Column&#x3D;&quot;2&quot;</span><br><span class="line">               Style&#x3D;&quot;&#123;StaticResource LabelStyle&#125;&quot;</span><br><span class="line">               Text&#x3D;&quot;:&quot; &#x2F;&gt;</span><br><span class="line">        &lt;Label Grid.Row&#x3D;&quot;0&quot;</span><br><span class="line">               Grid.Column&#x3D;&quot;3&quot;</span><br><span class="line">               Style&#x3D;&quot;&#123;StaticResource LabelStyle&#125;&quot;</span><br><span class="line">               Text&#x3D;&quot;&#123;Binding Second&#125;&quot; &#x2F;&gt;</span><br><span class="line">        &lt;Label Grid.Row&#x3D;&quot;0&quot;</span><br><span class="line">               Grid.Column&#x3D;&quot;4&quot;</span><br><span class="line">               Style&#x3D;&quot;&#123;StaticResource LabelStyle&#125;&quot;</span><br><span class="line">               Text&#x3D;&quot;.&quot; &#x2F;&gt;</span><br><span class="line">        &lt;Label Grid.Row&#x3D;&quot;0&quot;</span><br><span class="line">               Grid.Column&#x3D;&quot;5&quot;</span><br><span class="line">               Style&#x3D;&quot;&#123;StaticResource LabelStyle&#125;&quot;</span><br><span class="line">               Text&#x3D;&quot;&#123;Binding Millisecond&#125;&quot; &#x2F;&gt;</span><br><span class="line">        &lt;Button Grid.Row&#x3D;&quot;1&quot;</span><br><span class="line">                Grid.Column&#x3D;&quot;1&quot;</span><br><span class="line">                Grid.ColumnSpan&#x3D;&quot;5&quot;</span><br><span class="line">                Command&#x3D;&quot;&#123;Binding StartCommand&#125;&quot;</span><br><span class="line">                HorizontalOptions&#x3D;&quot;Center&quot;</span><br><span class="line">                IsVisible&#x3D;&quot;&#123;Binding IsRunning,</span><br><span class="line">                                    Converter&#x3D;&#123;StaticResource BooleanInvertConverter&#125;&#125;&quot;</span><br><span class="line">                Text&#x3D;&quot;Start&quot;</span><br><span class="line">                VerticalOptions&#x3D;&quot;Center&quot; &#x2F;&gt;</span><br><span class="line">        &lt;Button Grid.Row&#x3D;&quot;1&quot;</span><br><span class="line">                Grid.Column&#x3D;&quot;1&quot;</span><br><span class="line">                Grid.ColumnSpan&#x3D;&quot;5&quot;</span><br><span class="line">                Command&#x3D;&quot;&#123;Binding StopCommand&#125;&quot;</span><br><span class="line">                HorizontalOptions&#x3D;&quot;Center&quot;</span><br><span class="line">                IsVisible&#x3D;&quot;&#123;Binding IsRunning&#125;&quot;</span><br><span class="line">                Text&#x3D;&quot;Stop&quot;</span><br><span class="line">                VerticalOptions&#x3D;&quot;Center&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;Grid&gt;</span><br><span class="line">&lt;&#x2F;ContentPage&gt;</span><br></pre></td></tr></table></figure><p><strong>MainPageViewModel.cs</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Input;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Practices.Prism.Mvvm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Xamarin.Forms.Portable2.ViewModels</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">MainPageViewModel</span> : <span class="title">BindableBase</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MainPageViewModel</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.IsRunning = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">this</span>.TimeSpan = <span class="keyword">new</span> TimeSpan(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> TimeSpan _TimeSpan;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> TimeSpan TimeSpan</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._TimeSpan;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>.Minute = <span class="keyword">this</span>.TimeSpan.Minutes.ToString(<span class="string">&quot;00&quot;</span>);</span><br><span class="line">                <span class="keyword">this</span>.Second = <span class="keyword">this</span>.TimeSpan.Seconds.ToString(<span class="string">&quot;00&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> ms = <span class="keyword">this</span>.TimeSpan.Milliseconds / <span class="number">10</span>;</span><br><span class="line">                <span class="keyword">this</span>.Millisecond = ms.ToString(<span class="string">&quot;00&quot;</span>);</span><br><span class="line">                <span class="keyword">this</span>.SetProperty(<span class="keyword">ref</span> <span class="keyword">this</span>._TimeSpan, <span class="keyword">value</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">string</span> _Minute;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Minute</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._Minute;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.SetProperty(<span class="keyword">ref</span> <span class="keyword">this</span>._Minute, <span class="keyword">value</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">string</span> _Second;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Second</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._Second;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.SetProperty(<span class="keyword">ref</span> <span class="keyword">this</span>._Second, <span class="keyword">value</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">string</span> _Millisecond;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Millisecond</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._Millisecond;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.SetProperty(<span class="keyword">ref</span> <span class="keyword">this</span>._Millisecond, <span class="keyword">value</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">bool</span> _IsRunning = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">bool</span> IsRunning</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._IsRunning;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.SetProperty(<span class="keyword">ref</span> <span class="keyword">this</span>._IsRunning, <span class="keyword">value</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> ICommand _StartCommand;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ICommand StartCommand</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>._StartCommand == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">this</span>._StartCommand = <span class="keyword">new</span> Command(() =&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">this</span>.IsRunning = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">                        Device.StartTimer(<span class="keyword">new</span> TimeSpan(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>),</span><br><span class="line">                            () =&gt;</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="keyword">this</span>.TimeSpan = <span class="keyword">this</span>.TimeSpan.Add(<span class="keyword">new</span> TimeSpan(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>));</span><br><span class="line">                                <span class="keyword">return</span> <span class="keyword">this</span>.IsRunning;</span><br><span class="line">                            &#125;);</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._StartCommand;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> ICommand _StopCommand;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ICommand StopCommand</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>._StopCommand == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">this</span>._StopCommand = <span class="keyword">new</span> Command(() =&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">this</span>.IsRunning = <span class="literal">false</span>;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._StopCommand;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>になりました。<br>BooleanInvertConverterとかは省略します。簡単すぎますので。<br>出来上がった結果がこれ。</p><p><a href="../../../../public/2016/04/1-10.png"><img src="../../../../public/2016/04/1-10-1024x819.png" alt="どこかでみたようなストップウォッチ"></a></p><p>シンプルなストップウォッチ…</p><p>Startを押せば、Stopボタンに変わり、経過時間が変化します。<br>が、このストップウォッチ問題があって、非常に精度が悪いです。10ms間隔がまずいのか非常に遅い。<br>ひょっとしたらTimerは別のAPIがあるのかもしれません。<br>ネイティブのAPIを直接呼ぶ方がよいか？</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>実用度と精度はともかくアプリと呼べるアプリを作ってみました。<br>XAMLでの開発経験があるならこれほど取っつきやすいものはないと思います。</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/Xamarin.Forms.Portable2">https://github.com/takuya-takeuchi/Demo/tree/master/Xamarin.Forms.Portable2</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> Xamarin </category>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Xamarinメモ その6 ViewをMVVMで分離してみる</title>
      <link href="2016/04/23/1105/"/>
      <url>2016/04/23/1105/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/04/17/1092">前回</a>はテンプレートのせいでビルドできない問題を解消しました。</p><a id="more"></a><h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>Xamarin.Formsで**Blank App (Portable)**でプロジェクトを作ります。<br>なんかGoogle先生で聞くと、PCLの方が良いよ？的な話を聞くので従います。</p><p>サンプルソースは <a href="https://github.com/takuya-takeuchi/Demo/tree/master/Xamarin.Forms.Portable1">https://github.com/takuya-takeuchi/Demo/tree/master/Xamarin.Forms.Portable1</a>。</p><p>で、PCLプロジェクトに　<strong>App.cs</strong> ってあります。これがエントリポイントでしょう。<br>ソースを見ると、</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> Xamarin.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Xamarin.Forms.Portable1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">App</span> : <span class="title">Application</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">App</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// The root page of your application</span></span><br><span class="line">            MainPage = <span class="keyword">new</span> ContentPage</span><br><span class="line">            &#123;</span><br><span class="line">                Content = <span class="keyword">new</span> StackLayout</span><br><span class="line">                &#123;</span><br><span class="line">                    VerticalOptions = LayoutOptions.Center,</span><br><span class="line">                    Children = &#123;</span><br><span class="line">                        <span class="keyword">new</span> Label &#123;</span><br><span class="line">                            XAlign = TextAlignment.Center,</span><br><span class="line">                            Text = <span class="string">&quot;Welcome to Xamarin Forms!&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnStart</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// Handle when your app starts</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnSleep</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// Handle when your app sleeps</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnResume</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// Handle when your app resumes</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ってあります。さっするにコードからUIを構築しているものと思われます。<br>でも、分離コードどころか、今日日こんなソースプロジェクトで使っていたら絶対に「うわぁ」って言われます。<br>いや会社のWinFormsのプロジェクトは諸般の事情でこうなってますけど。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p>とりあえず、分離します。<br>どうもXAMLが使えるようです。</p><p>なので、PCLにXAMLを追加します。Viewsフォルダを作ってそこにViewとなるPageとかを追加します。</p><p><a href="../../../../public/2016/04/1-9.png"><img src="../../../../public/2016/04/1-9.png" alt="新しい項目の追加"></a></p><p>3つあって迷う…</p><p>で、<strong>Forms ContentPage</strong>、<strong>Forms ContentView</strong>、<strong>Forms Xaml Page</strong>ってあります。<br><a href="https://developer.xamarin.com/api/type/Xamarin.Forms.ContentPage/">ContentPage</a></p><blockquote><p>A Page that displays a single view.</p></blockquote><p>訳:単一のビューを表示するページです</p><p><a href="https://developer.xamarin.com/api/type/Xamarin.Forms.ContentView/">ContentView</a>は、</p><blockquote><p>An element that contains a single child element.</p></blockquote><p>訳:単一の子要素を含む要素です</p><p><a href="https://developer.xamarin.com/api/type/Xamarin.Forms.Page/">Page</a>は、</p><blockquote><p>A VisualElement that occupies the entire screen.</p></blockquote><p>訳:スクリーン全体を占有するVisualElementです</p><p>とのこと。それぞれ試しに作ってみると、</p><p>[table id=22 /]</p><p>となります。</p><p><strong>ContentPage</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Reflection.Emit;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> Xamarin.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Xamarin.Forms.Portable1.Views</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MainPage</span> : <span class="title">ContentPage</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MainPage</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Content = <span class="keyword">new</span> StackLayout</span><br><span class="line">            &#123;</span><br><span class="line">                Children = &#123;</span><br><span class="line">                    <span class="keyword">new</span> Label &#123; Text = <span class="string">&quot;Hello ContentPage&quot;</span> &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ContentView</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Reflection.Emit;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> Xamarin.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Xamarin.Forms.Portable1.Views</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MainContentView</span> : <span class="title">ContentView</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MainContentView</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Content = <span class="keyword">new</span> Label &#123; Text = <span class="string">&quot;Hello ContentView&quot;</span> &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Xaml Page (cs)</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> Xamarin.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Xamarin.Forms.Portable1.Views</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Page</span> : <span class="title">ContentPage</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Page</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Xaml Page (xaml)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; ?&gt;</span><br><span class="line">&lt;ContentPage xmlns&#x3D;&quot;http:&#x2F;&#x2F;xamarin.com&#x2F;schemas&#x2F;2014&#x2F;forms&quot;</span><br><span class="line">             xmlns:x&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2009&#x2F;xaml&quot;</span><br><span class="line">             x:Class&#x3D;&quot;Xamarin.Forms.Portable1.Views.Page&quot;&gt;</span><br><span class="line">  &lt;Label Text&#x3D;&quot;&#123;Binding MainText&#125;&quot; VerticalOptions&#x3D;&quot;Center&quot; HorizontalOptions&#x3D;&quot;Center&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;ContentPage&gt;</span><br></pre></td></tr></table></figure><p>目的を達成するには、Xaml Pageが正しいようです。<br>でも、Xamlを見るとBindingとかあります。DataContextを適用可能なのでしょう。<br>Prism.Mvvmが使えるようですので、NuGetで追加します。<br>ViewModelsフォルダを追加して、ViewModelを追加します。</p><p><strong>MainPageViewModel</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.Practices.Prism.Mvvm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Xamarin.Forms.Portable1.ViewModels</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">MainPageViewModel</span> : <span class="title">BindableBase</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MainPageViewModel</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.MainText = <span class="string">&quot;Hello world from MVVM!!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">string</span> _MainText;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> MainText</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._MainText;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>._MainText = <span class="keyword">value</span>;</span><br><span class="line">                <span class="keyword">this</span>.SetProperty(<span class="keyword">ref</span> <span class="keyword">this</span>._MainText, <span class="keyword">value</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これをViewにバインディングします。</p><p><strong>MainPage.xaml</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; ?&gt;</span><br><span class="line">&lt;ContentPage x:Class&#x3D;&quot;Xamarin.Forms.Portable1.Views.MainPage&quot;</span><br><span class="line">             xmlns&#x3D;&quot;http:&#x2F;&#x2F;xamarin.com&#x2F;schemas&#x2F;2014&#x2F;forms&quot;</span><br><span class="line">             xmlns:x&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2009&#x2F;xaml&quot;</span><br><span class="line">             xmlns:viewModels&#x3D;&quot;clr-namespace:Xamarin.Forms.Portable1.ViewModels;assembly&#x3D;Xamarin.Forms.Portable1&quot;&gt;</span><br><span class="line">    &lt;ContentPage.BindingContext&gt;</span><br><span class="line">        &lt;viewModels:MainPageViewModel &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;ContentPage.BindingContext&gt;</span><br><span class="line">    &lt;Label HorizontalOptions&#x3D;&quot;Center&quot;</span><br><span class="line">           Text&#x3D;&quot;&#123;Binding MainText&#125;&quot;</span><br><span class="line">           VerticalOptions&#x3D;&quot;Center&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;ContentPage&gt;</span><br></pre></td></tr></table></figure><p><strong>DataContext</strong>ではなく、<strong>BindingContext</strong>というのがミソです。<br>最後にエントリポイントである、App.csを変更します。</p><p><strong>App.cs</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> Xamarin.Forms;</span><br><span class="line"><span class="keyword">using</span> Xamarin.Forms.Portable1.Views;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Xamarin.Forms.Portable1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">App</span> : <span class="title">Application</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">App</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// The root page of your application</span></span><br><span class="line">            MainPage = <span class="keyword">new</span> MainPage();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnStart</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// Handle when your app starts</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnSleep</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// Handle when your app sleeps</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnResume</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// Handle when your app resumes</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>で、iPhone Simulatorでデバッグ実行です。</p><p><a href="../../../../public/2016/04/2-8.png"><img src="../../../../public/2016/04/2-8-1024x819.png" alt="デバッグ結果"></a></p><p>Hello MVVM!!!</p><p>iOS側のプロジェクトは一切いじっていません。<br>素晴らしい(<em>´ω｀</em>)</p><br><br><br><br><p>Android?Windows Phone?次回やります(多分)</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>MVVMを使って、それらしいプロジェクトを使ってみました。今のところ各デバイス固有のプロジェクトの意味が見えてきませんが。</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/Xamarin.Forms.Portable1">https://github.com/takuya-takeuchi/Demo/tree/master/Xamarin.Forms.Portable1</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> Xamarin </category>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Xamarinメモ その5 Xamarin.FormsでiOSがビルドできない</title>
      <link href="2016/04/17/1092/"/>
      <url>2016/04/17/1092/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/04/17/1083">前回</a>からXamarin.Formsを開始しました</p><a id="more"></a><h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>Xamarin.Formsで**Blank App (Shared)**でプロジェクトを作ります。<br>とりあえず、iOSのプロジェクトをiPhone Simiulatorでビルドでしてみます。<br>ですが、エラーが出ます。</p><p><a href="../../../../public/2016/04/1-8.png"><img src="../../../../public/2016/04/1-8.png" alt="Error"></a></p><p>またエラーだお(´;ω;`)ﾌﾞﾜｯ</p><p><code>System.IO.FileNotFoundException: /Users/XXXXXXX/Library/Caches/Xamarin/mtbs/builds/XamarinFormsShared1iOS/814c4b85c884d27f60de3287985dd749/obj/iPhoneSimulator/Debug/optimized/Default-568h@2x.png does not exist</code></p><p>といっています。<br>これは、iOSアプリのスプラッシュスクリーン画像が存在しないことを意味しています。<br>ですが、iOSプロジェクトのリソースフォルダ <strong>App1\App1\App1.iOS\Resources</strong> をみると、</p><p><a href="../../../../public/2016/04/2-7.png"><img src="../../../../public/2016/04/2-7.png" alt="Resourceフォルダ"></a></p><p>アイコン画像が壊れています</p><p>新規で作成したプロジェクトであるにもかかわらず画像が壊れています。<br>というか真っ黒な画像?</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p>どうも新規作成した際に画像が壊れてしまったようです。<br>その証拠にXamarin.Formsの**Blank App (Shared)**プロジェクトテンプレートファイルを解凍してみると、やはり画像は健在です。</p><p><a href="../../../../public/2016/04/3-7.png"><img src="../../../../public/2016/04/3-7.png" alt="Templateの画像"></a></p><p>Xamarinの画像がたくさん</p><p>テンプレートは下記のファイルになります。</p><ul><li>C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\Extensions\Xamarin\Xamarin\4.0.3.214\T\PT\Cross-Platform\Xamarin.Forms.PCL.zip</li><li>C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\Extensions\Xamarin\Xamarin\4.0.3.214\T\PT\Cross-Platform\Xamarin.Forms.SAP.zip</li></ul><p>ですので、ここから画像をコピーしてResouceフォルダに上書きして画像を復元します。<br>その後、リビルドしてからデバッグ実行します。</p><p><a href="../../../../public/2016/04/4-5.png"><img src="../../../../public/2016/04/4-5-1024x819.png" alt="起動画像"></a></p><p>Xamarinロゴの起動画面</p><p><a href="../../../../public/2016/04/5-4.png"><img src="../../../../public/2016/04/5-4-1024x819.png" alt="Welcome"></a></p><p>Welcome to Xamarin Forms!</p><p>無事に起動できました(*´ω｀*)</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>Googleで検索しても同じ症状の人が見つかりませんでした。私だけなのですか？Windows7で実行しているのがまずいのでしょうか？</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> Xamarin </category>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Xamarinメモ その4 Xamarin.FormsでHello worldする前に</title>
      <link href="2016/04/17/1083/"/>
      <url>2016/04/17/1083/</url>
      
        <content type="html"><![CDATA[<p>Xamarin.iOSはやめて素直にXamarin.Formsを始めました。決して情報が少ないからとか流行に乗り遅れたくない、とかじゃないです。</p><a id="more"></a><h1 id="Memo"><a href="#Memo" class="headerlink" title="Memo"></a>Memo</h1><p>新規でプロジェクトを作ります。</p><p><a href="../../../../public/2016/04/1-7.png"><img src="../../../../public/2016/04/1-7.png"></a></p><p>Shared?Portable?</p><p><strong>Xamarin.Forms</strong>という<strong>Blank App</strong>が2つあります。<br>種類の説明をみると、 <strong>Blank App (Xamarin.Forms Portable)</strong></p><blockquote><p>A multiproject template for building apps with Xamarin.Fomrs, sharing code using a portable class library. On Visual Studio 2010, the Portable Class Library Tools are required.</p></blockquote><p>Xamarin.Formsを使用してアプリを構築するマルチプロジェクトのテンプレートで、ポータブル クラス ライブラリを使ってコードを共有します。Visual Studio 2010で、ポータブル クラス ライブラリツールが必要です。</p><p><a href="../../../../public/2016/04/2-6.png"><img src="../../../../public/2016/04/2-6-1024x618.png"></a></p><p>Blank App (Xamarin.Forms Portable) の構成</p><p><strong>Blank App (Xamarin.Forms Shared)</strong></p><blockquote><p>A multiproject template for building apps with Xamarin.Fomrs, sharing code using a shared assets project. Requires Visual Studio 2013 Update2 or greater.</p></blockquote><p>Xamarin.Formsを使用してアプリを構築するマルチプロジェクトのテンプレートで、共有アセットを使ってコードを共有します。Visual Studio 2013　Update2またはそれ以降が必要です。</p><p><a href="../../../../public/2016/04/3-6.png"><img src="../../../../public/2016/04/3-6-1024x618.png"></a></p><p>Blank App (Xamarin.Forms Shared) の構成</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>どちらを使うかは好みですが、新しい感じがするSharedの方が良さそうです。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> Xamarin </category>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Xamarinメモ その3 またデバッグできない</title>
      <link href="2016/04/17/1066/"/>
      <url>2016/04/17/1066/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/04/10/1055">前回</a>、No valid iOS code signing keys found in keychain.なるエラーがでましたが…</p><a id="more"></a><h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>とりあえず、Storyboardにボタンを追加して、イベントも追加してダイアログでHello, world!!ってやるサンプルを作りました。<br>で、それをiPhone Simulatorでデバッグしようと思いましたが。<br>けどまた無慈悲なエラーが。</p><p><a href="../../../../public/2016/04/1-6.png"><img src="../../../../public/2016/04/1-6-1024x129.png" alt="Error"></a></p><p><code>This version of Xamarin.iOS requires the iOS 9.3 SDK (shipped with Xcode 7.3) when the managed linker is disabled. Either upgrade Xcode, or enable the managed linker. Xamarin.iOS1</code></p><p>また、不思議なエラーです。<br>字面を見るならMac側にエラーがある感じです。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p>Xcodeと言っているので、まずはXcodeが7.3なのかどうかを確認します。<br>Xcodeを起動したところ、</p><p><a href="../../../../public/2016/04/2-5.png"><img src="../../../../public/2016/04/2-5.png" alt="Verifying XCode.app"></a></p><p>“Xcode.app”を検証中</p><p>終わらない検証中。<br>かなり時間がかかりましたが、終わった後ライセンス許諾書の画面。どうも初回起動の模様。</p><p><a href="../../../../public/2016/04/3-5.png"><img src="../../../../public/2016/04/3-5.png" alt="License"></a></p><p>ラインセンス許諾</p><p><a href="../../../../public/2016/04/4-4.png"><img src="../../../../public/2016/04/4-4.png" alt="License"></a></p><p>admin権限の確認</p><p><a href="../../../../public/2016/04/5-3.png"><img src="../../../../public/2016/04/5-3.png" alt="Install Component"></a></p><p>インストール中</p><p><a href="../../../../public/2016/04/6-2.png"><img src="../../../../public/2016/04/6-2.png" alt="Start Screen"></a></p><p>バージョンが7.2….</p><p>7.3ではないようなので、App StoreからXcodeをアップデートしました。<br>アップデートは以前チェックしていたんですが、手動じゃないとダメなのか？</p><p><a href="../../../../public/2016/04/7-2.png"><img src="../../../../public/2016/04/7-2.png" alt="Update"></a></p><p>アップデート中</p><br><p><strong>4.87GB…(‘A`)</strong></p><br><p>インストール後、無事にビルドが通り、iPhone Simulatorが起動するようになりました。</p><p><a href="../../../../public/2016/04/8-2.png"><img src="../../../../public/2016/04/8-2-1024x819.png" alt="iPhone Simulator"></a></p><p>無事に起動しました</p><p>でも…</p><p><a href="../../../../public/2016/04/9-2.png"><img src="../../../../public/2016/04/9-2-1024x634.png" alt="例外"></a></p><p>例外だと…</p><p>なんぞこれ…</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>Xcodeのバージョンは常に意識する必要があるようです。<br>Visual Studio側で起動するiPhone SimulatorのiOSのバージョンとMac側のXcodeが対応しているiOSのバージョンを一致させましょう。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> Xamarin </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>UWPメモ その5 UWP/WPFで画像オブジェクトに対する解放処理は不要なのか</title>
      <link href="2016/04/12/1028/"/>
      <url>2016/04/12/1028/</url>
      
        <content type="html"><![CDATA[<p>会社で使う学習資料の更新が終わりました。毎回PowerPointのスライド20枚とサンプルプログラム1,2個つけたのが、今日の時点で13個。頑張ったものです。</p><a id="more"></a><h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>WinFormsだと、画像オブジェクト、例えば<strong>System.Drawing.Bitmap</strong>は不要になったら、nullで参照を削除する前に、Disposeメソッドを呼び出す必要があります。<br>これは内部で保持している、GDIによるアンマネージドデータを破棄するために他なりません。</p><p>対して、GDIを使っていないWPF/UWPはどうなのでしょう？ 無限ループで<strong>System.Windows.Media.Imaging.WriteableBitmap</strong>を生成するプログラムを組んでチェックしましたが、private working setが増えていたことから、アンマネージドでどこかにデータを確保しているのは間違いありませんでした。</p><p>でも、IDiposableインターフェイスは実装していません。<br>本当に参照が全部消えれば破棄されるの？ 不安はぬぐい去れません。</p><p>五年前、入社二年目の私はインド人が手を入れた.NETをプログラムの修正を任されました。当時.NETを扱える人間が私しかいなかったためです。<br>で、そのソース、画像データを大量に扱う代物で、一切解放処理が書いてありませんでした。<br>当然しばらくするとメモリ不足で落ちました。4000x4000とか巨大なビットマップを扱うものですから… トルコまで行って対応したのはいい思い出です(白目)</p><h1 id="Inspection"><a href="#Inspection" class="headerlink" title="Inspection"></a>Inspection</h1><p>簡単なサンプルプログラムをWPF/UWPそれぞれ用意しました。</p><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/UWP4">https://github.com/takuya-takeuchi/Demo/tree/master/UWP4</a></p><p>UWP側のViewModelだけ記載します。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> Windows.UI.Xaml.Media.Imaging;</span><br><span class="line"><span class="keyword">using</span> Prism.Commands;</span><br><span class="line"><span class="keyword">using</span> Prism.Windows.Mvvm;</span><br><span class="line"><span class="keyword">using</span> Shared.Services;</span><br><span class="line"><span class="keyword">using</span> Shared.ViewModels;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">UWP4.ViewModels</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">MainPageViewModel</span> : <span class="title">ViewModelBase</span>, <span class="title">IMainPageViewModel</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">readonly</span> <span class="title">List</span>&lt;<span class="title">WriteableBitmap</span>&gt; _WriteableBitmaps</span> = <span class="keyword">new</span> List&lt;WriteableBitmap&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> IDispatcherService _DispatcherService;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MainPageViewModel</span>(<span class="params">IDispatcherService dispatcherService</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>._DispatcherService = dispatcherService;</span><br><span class="line">            <span class="keyword">this</span>.Width = <span class="number">2000</span>;</span><br><span class="line">            <span class="keyword">this</span>.Height = <span class="number">2000</span>;</span><br><span class="line">            <span class="keyword">this</span>.Count = <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> _Count;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Count</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._Count;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.SetProperty(<span class="keyword">ref</span> <span class="keyword">this</span>._Count, <span class="keyword">value</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> _Width;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Width</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._Width;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.SetProperty(<span class="keyword">ref</span> <span class="keyword">this</span>._Width, <span class="keyword">value</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> _Height;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Height</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._Height;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.SetProperty(<span class="keyword">ref</span> <span class="keyword">this</span>._Height, <span class="keyword">value</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">bool</span> _Freeze;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">bool</span> Freeze</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._Freeze;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.SetProperty(<span class="keyword">ref</span> <span class="keyword">this</span>._Freeze, <span class="keyword">value</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> DelegateCommand _StartCommand;</span><br><span class="line">        <span class="keyword">public</span> DelegateCommand StartCommand</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>._StartCommand == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">this</span>._StartCommand = <span class="keyword">new</span> DelegateCommand(</span><br><span class="line">                        () =&gt;</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">var</span> width = <span class="keyword">this</span>.Width;</span><br><span class="line">                            <span class="keyword">var</span> height = <span class="keyword">this</span>.Height;</span><br><span class="line">                            <span class="keyword">var</span> count = <span class="keyword">this</span>.Count;</span><br><span class="line">                            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">                                <span class="keyword">this</span>._WriteableBitmaps.Add(<span class="keyword">new</span> WriteableBitmap(width, height));</span><br><span class="line">                        &#125;);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._StartCommand;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> DelegateCommand _ClearCommand;</span><br><span class="line">        <span class="keyword">public</span> DelegateCommand ClearCommand</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>._ClearCommand == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">this</span>._ClearCommand = <span class="keyword">new</span> DelegateCommand(</span><br><span class="line">                        () =&gt;</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">this</span>._WriteableBitmaps.Clear();</span><br><span class="line">                        &#125;);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._ClearCommand;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> DelegateCommand _GCCommand;</span><br><span class="line">        <span class="keyword">public</span> DelegateCommand GCCommand</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>._GCCommand == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">this</span>._GCCommand = <span class="keyword">new</span> DelegateCommand(GC.Collect);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._GCCommand;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Startボタンを押下すると、TextBoxで指定した、Width、HeightとCountで指定しただけのWriteableBitmapを生成して、System.Collections.Generic.Listに格納していきます。<br>Clearボタンを押下すると、List.Clearを呼びリストを空にします。</p><p>この時点で参照が全て消えるので、GCが動けばメモリが解放されるはずです。<br>一応明示的にGCを呼ぶためのGCボタンを用意しました。<br>また、WPFのWriteableBitmapはSystem.Windows.Freezableクラスの派生形であるため、Freezeメソッドをコールした場合、そうでない場合、挙動がどう変化するのかを確認します。</p><h3 id="Try"><a href="#Try" class="headerlink" title="Try"></a>Try</h3><p>計測は、<strong>dotMemory</strong>を使います。<br>まずUWPです。<br>起動直後、Start直後、Clear直後、GC直後の4段階でSnapshotを採取します。</p><p><a href="../../../../public/2016/04/1-4.png"><img src="../../../../public/2016/04/1-4-1024x620.png"></a></p><p>次に、Start直後とClear直後で比較をとります。<br>Listに含まれるWriteableBitmapのインスタンスが削除されていることがわかりますが、この時点ではメモリ量は変化しません。<br>最後の、GC直後の段階でメモリ使用量が大幅に減っているのがわかります。</p><p><a href="../../../../public/2016/04/2-3.png"><img src="../../../../public/2016/04/2-3-1024x620.png"></a></p><p>同じようにWPFでもテストします。最初はFreezeしない状態で4つのSnapshotを採取します。</p><p><a href="../../../../public/2016/04/3-3.png"><img src="../../../../public/2016/04/3-3-1024x620.png"></a></p><p>最後に、起動直後にFreezeのフラグを有効にして、WriteableBitmap生成直後にFreezeする処理を追加したパターンで4つのSnapshotを採取します。</p><p><a href="../../../../public/2016/04/4-3.png"><img src="../../../../public/2016/04/4-3-1024x620.png"></a></p><p>Freezeの有無でメモリ使用量に変化があります。Freezeすると確保するメモリ量が60%位になりました。<br>Freeze状態にすると変更できなくなるため、データ内容を変更するために用意したバッファなどがなくなるのでしょうか？ どちらにしても変更が不要なら、不要になった時点で即座にFreezeした方が良さそうです。</p><p>UWPも219.67MB-66.69MB=152.98MB<br>WPFも230.71MB-77.42MB=153.29MB</p><p>となり、</p><p>2000_2000_4(ARGB?)*10/1024/1024=152MB </p><p>いうデータ量に近似します。</p><p>メモリリークは発生していないと言えそうです。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>WinFormsと異なり、画像データのメモリリークは起きないことが証明されました。<br>ただ、WinFormsとは違って、GCが発生しないとメモリが解放されないのはどうも…<br>明示的にGCを呼ぶのはWinFormsの時の経験から言って避けたいところです。明示的に呼んでフリーズしてそのまま何もできなくなってしまったことがあったので。</p><p>なにはともあれ、不安は消えました。</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/UWP4">https://github.com/takuya-takeuchi/Demo/tree/master/UWP4</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> Universal Windows Platform </category>
          
          <category> Windows Presentation Foundation </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Xamarinメモ その2 No valid iOS code signing keys found in keychainを解決</title>
      <link href="2016/04/10/1055/"/>
      <url>2016/04/10/1055/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/04/09/997">前回</a>、No valid iOS code signing keys found in keychain.なるエラーがでましたが…</p><a id="more"></a><h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>何でデバッグできないの？って悩みました。<br>確かにApple Developper Programの更新が途絶したのはわかっていますが、デバッグできない理由にはならないです。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p><a href="../../../../public/2016/04/2-4.png"><img src="../../../../public/2016/04/2-4.png" alt="Build設定"></a></p><p>を <a href="../../../../public/2016/04/1-5.png"><img src="../../../../public/2016/04/1-5.png" alt="Build設定"></a></p><p>にする。<br>簡単でしょ(白目)？</p><p>ちゃんとMacでデバッグできます。<br>なんで気づかなかったのか… </p><p><a href="../../../../public/2016/04/3-4.png"><img src="../../../../public/2016/04/3-4-1024x819.png"></a></p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>デフォルトのビルド設定の対象がiPhoneなのが悪いんです….</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> Xamarin </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Xamarinメモ その1 リスタート</title>
      <link href="2016/04/09/997/"/>
      <url>2016/04/09/997/</url>
      
        <content type="html"><![CDATA[<p>1,2年前にせっかく購入したXamarinを無駄にした私ですが何か？</p><a id="more"></a><h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>無料になったので気軽になりましたね(白目) で、<strong>Visual Studio 2015 Professional</strong>は持っているので、Update2にすれば簡単に使えるの？と思ったけどそうではなかったのでメモ。<br>既存ユーザで私みたいなお金をどぶにした人はいないので、きっと情報が少ないのでしょう。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p>インストール手順を書いていきます。基本一本道ですが。</p><h3 id="Update2"><a href="#Update2" class="headerlink" title="Update2"></a>Update2</h3><p>まず、<strong>Visual Studio 2015 Update2</strong> を適用しておきます。これ必要なのか？念には念を、というやつです。</p><h3 id="Xamarin-for-Visual-Studio"><a href="#Xamarin-for-Visual-Studio" class="headerlink" title="Xamarin for Visual Studio"></a>Xamarin for Visual Studio</h3><p>次に、<a href="https://www.xamarin.com/download">https://www.xamarin.com/download</a> から、<strong>Xamarin for Visual Studio</strong>インストーラを入手できます。<br>会社名とかは個人なので適当に。</p><p><a href="../../../../public/2016/04/1-3.png"><img src="../../../../public/2016/04/1-3-1024x553.png" alt="Download Visual Studio"></a></p><p>インストーラを実行します。管理者権限で実行しましょう。</p><p><a href="../../../../public/2016/04/2-2.png"><img src="../../../../public/2016/04/2-2-300x252.png" alt="Xamarin for Visual Studio"></a></p><p>起動してからContinueボタン押下してから、凄い時間がかかりました。バックグラウンドで動いているのは確認したんですが。</p><p><a href="../../../../public/2016/04/3-2.png"><img src="../../../../public/2016/04/3-2-300x281.png" alt="Xamarin for Visual Studio"></a></p><p><a href="../../../../public/2016/04/4-2.png"><img src="../../../../public/2016/04/4-2-300x281.png" alt="Xamarin for Visual Studio"></a></p><p><strong>I agree to license terms</strong> にチェック。</p><p><a href="../../../../public/2016/04/5-2.png"><img src="../../../../public/2016/04/5-2-300x281.png" alt="Xamarin for Visual Studio"></a></p><p>Android SDK のインストール先に問題がなければNext。</p><p><a href="../../../../public/2016/04/6-1.png"><img src="../../../../public/2016/04/6-1-300x281.png" alt="Xamarin for Visual Studio"></a></p><p>Visual Studioが起動していることを検知して、落とすことを推奨しています。やだこの子賢い。</p><p><a href="../../../../public/2016/04/7-1.png"><img src="../../../../public/2016/04/7-1-300x281.png" alt="Xamarin for Visual Studio"></a></p><p>次へ。</p><p><a href="../../../../public/2016/04/8-1.png"><img src="../../../../public/2016/04/8-1-300x281.png" alt="Xamarin for Visual Studio"></a></p><p>インストール中。</p><p><a href="../../../../public/2016/04/9-1.png"><img src="../../../../public/2016/04/9-1-300x91.png" alt="Xamarin for Visual Studio"></a></p><p>何か別ウィンドウが起動しています。</p><p><a href="../../../../public/2016/04/10-1.png"><img src="../../../../public/2016/04/10-1-300x281.png" alt="Xamarin for Visual Studio"></a></p><p>I’m ready!!</p><h3 id="Check-it-out"><a href="#Check-it-out" class="headerlink" title="Check it out!!"></a>Check it out!!</h3><p>インストールが完了したので、Visual Studioの新規プロジェクトを確認してみます。<br><strong>Cross-Platform</strong> というのが増えています。</p><p><a href="../../../../public/2016/04/11-1.png"><img src="../../../../public/2016/04/11-1-300x207.png" alt="Visual Studio"></a></p><p>とりあえず、**Single View App (iOS)**を選択。</p><p><a href="../../../../public/2016/04/12-1.png"><img src="../../../../public/2016/04/12-1-300x207.png" alt="Visual Studio"></a></p><p>かっこいい画面でお出迎え。</p><p><a href="../../../../public/2016/04/13-1.png"><img src="../../../../public/2016/04/13-1-300x181.png" alt="Visual Studio"></a></p><p>お、Macとの接続を実施するウィザードが。<br>これは<strong>ツール</strong>-&gt;<strong>iOS</strong>-&gt;<strong>Xamarin Mac Agent</strong>から起動できる模様。</p><p><a href="../../../../public/2016/04/14-1.png"><img src="../../../../public/2016/04/14-1-300x254.png" alt="Xamarin Mac Agent"></a></p><p>Macのリモートログイン機能を有効にしてください、と。</p><p><a href="../../../../public/2016/04/15-1.png"><img src="../../../../public/2016/04/15-1-300x254.png" alt="Xamarin Mac Agent"></a></p><p><a href="../../../../public/2016/04/16-1.png"><img src="../../../../public/2016/04/16-1-300x254.png" alt="Xamarin Mac Agent"></a></p><p>接続するユーザを限定してね、と。</p><p><a href="../../../../public/2016/04/17-1.png"><img src="../../../../public/2016/04/17-1-300x254.png" alt="Xamarin Mac Agent"></a></p><p>OKしてみると、接続失敗。今Macが更新中でしたので。そもそも設定していません。</p><p><a href="../../../../public/2016/04/18-1.png"><img src="../../../../public/2016/04/18-1-300x275.png" alt="Xamarin Mac Agent"></a></p><p>Mac側もXamarin Installerをダウンロードしてきてインストールします。</p><p>このあたりは、ちょまど様の<a href="https://chomado.com/note/tech/install-xamarin/">Mac に Xamarin 使ってみた！インストール〜実行まで【完全無料】</a>をどうぞ。<br>(VNC経由のためスクリーンショットがとれないため…) 次に、Mac側の<strong>システム環境設定</strong>から<strong>共有</strong>を選択します。で、リモートログインというのが、左側にあるのでチェックして有効にします。<br>あとは必要なユーザに許可を出して終了です。<br>で、Visual Studioから再度Xamarin Mac Agentを起動すると、すぐにMacを検出してくれます。以前のXamarinより精度がいいです。</p><p><a href="../../../../public/2016/04/19-1.png"><img src="../../../../public/2016/04/19-1-300x275.png" alt="Xamarin Mac Agent"></a></p><p>Connetボタンを押下して、Macのユーザ名とパスワードを入力。</p><p><a href="../../../../public/2016/04/20-1.png"><img src="../../../../public/2016/04/20-1-300x179.png" alt="Xamarin Mac Agent"></a></p><p>しばらくすると、ダイアログが消えます。<br>すると、Visual Studioのツールバーに接続が完了したことを通知するアイコンが表示されます。</p><p><a href="../../../../public/2016/04/21.png"><img src="../../../../public/2016/04/21.png" alt="Visual Studio"></a></p><p>F5でビルド+デバッグか、と思ったら無反応。<br>ビルドはShift+F6とのこと。<br>まずはビルドだけ実行。</p><p>が、失敗。</p><p><strong>No valid iOS code signing keys found in keychain. You need to request a codesigning certificate from <a href="https://developer.apple.com/">https://developer.apple.com</a>.</strong> 訳：有効なiOSのコードサインキーがキーチェーンにないよ。<a href="https://developer.apple.comからコードサイニング証明書を要求する必要があるよ./">https://developer.apple.comからコードサイニング証明書を要求する必要があるよ。</a></p><p><a href="../../../../public/2016/04/22.png"><img src="../../../../public/2016/04/22-1024x183.png" alt="Visual Studio"></a></p><p>うーん、以前はできたのに。<br>実機に対して実行になってるのかと思って、おもむろに先の接続完了アイコンの右側にある<strong>Show iOS Simulator</strong>ボタンを押下してみる。<br>が、Mac側でエラー。</p><p><a href="../../../../public/2016/04/23.png"><img src="../../../../public/2016/04/23.png" alt="Mac Error"></a></p><p>PC設定のカルマ様の<a href="http://pc-karuma.net/download-app-security/">Mac - ダウンロードしたアプリケーションの実行許可</a>にて対応策が。<br>とりあえず、<strong>システム環境設定</strong>-&gt;<strong>セキュリティとプライバシー</strong>-&gt;<strong>一般</strong>-&gt;<strong>鍵ロック解除</strong>-&gt;<strong>すべてのアプリケーションを許可</strong>に変更して再度実行。</p><p><a href="../../../../public/2016/04/24.png"><img src="../../../../public/2016/04/24.png" alt="Mac Error"></a></p><p>また警告が出たので開くで続行。</p><p>ようやく出たー。<br>Safariアイコンが出るまでが遅かったけど。</p><p><a href="../../../../public/2016/04/25.png"><img src="../../../../public/2016/04/25-1024x820.png" alt="iOS Simulator"></a></p><p>環境構築はこれで完了?</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>とても長かったですが、一歩前進ですかね。私としてはStoryboardがVisual Studioで使えるようになり簡単にデザインできるのを楽しみにしているわけです。<br>Xamarin.Formsだとまた何か違うのでしょうけど。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> Xamarin </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>UWPメモ その4 バックグラウンドスレッドでのDependencyObject作成はメモリーリークするのか</title>
      <link href="2016/04/08/988/"/>
      <url>2016/04/08/988/</url>
      
        <content type="html"><![CDATA[<p>UWPでカメラやおよそ一般人が使うとは思えない機器から入力された画像データを画面にプレビューして処理するアプリを仕事で作っています。海外の子会社が作っているプロダクトですが。</p><a id="more"></a><h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>ぐらばく様の<a href="http://grabacr.net/archives/1851">バックグラウンド スレッドで UI 要素を作るとメモリリークする (WPF)</a> @karno様の<a href="http://b.starwing.net/?p=142">バックグラウンドスレッドでUI要素を作るともっと問題は深刻かもしれない。(WPF)</a></p><p>で話題になっている案件ですが、UWPでもこの手の問題は起きるのでしょうか？</p><p>結論から言うと問題は起きないと思います。<br>というのも、UWPにおいてバックグランドスレッドにて<strong>DependencyObject</strong>を作成することはできません。すべて<strong>Dispatcher</strong>を経由する必要があります。<br>例えば、</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> Task.Run(()=&gt;<span class="keyword">new</span> WriteableBitmap(<span class="number">200</span>, <span class="number">200</span>, <span class="number">96</span>, <span class="number">96</span>, PixelFormats.Bgr32, <span class="literal">null</span>));</span><br></pre></td></tr></table></figure><p>みたいにしようならば、</p><p><a href="../../../../public/2016/04/1-1.png"><img src="../../../../public/2016/04/1-1-300x56.png" alt="例外"></a></p><p>こうなります。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p>きちんとDispatcherを経由しましょうってことですね。<br>ちなみに、ViewModelとかまでDispatcherをもってくるのではなく、DispatcherServiceを用意して、Dispatcherを抽象化するべきです。</p><p>例えば、</p><p><strong>WPF向け</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Threading;</span><br><span class="line"><span class="keyword">using</span> Shared.Services;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WPF3.Services</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">DispatcherService</span> : <span class="title">IDispatcherService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> Dispatcher _Dispatcher;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DispatcherService</span>(<span class="params">Dispatcher dispatcher</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>._Dispatcher = dispatcher;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">SafeAction</span>(<span class="params">Action action</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>._Dispatcher.CheckAccess())</span><br><span class="line">                <span class="keyword">await</span> <span class="keyword">this</span>._Dispatcher.InvokeAsync(action);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                action.Invoke();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>UWP (Desktop)向け</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">UWP3.Services</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">DispatcherService</span> : <span class="title">IDispatcherService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> CoreDispatcher _Dispatcher;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DispatcherService</span>(<span class="params">CoreDispatcher dispatcher</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>._Dispatcher = dispatcher;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">SafeAction</span>(<span class="params">Action action</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>._Dispatcher.HasThreadAccess)</span><br><span class="line">                <span class="keyword">await</span> <span class="keyword">this</span>._Dispatcher.RunAsync(CoreDispatcherPriority.Normal, action.Invoke);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                action.Invoke();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>で<strong>Prism</strong>の<strong>UnityContainer</strong>あたりでDIを使って切り替えることができます。<br>こんな感じ。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Task <span class="title">OnInitializeAsync</span>(<span class="params">IActivatedEventArgs args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dispatcher = Window.Current.Dispatcher;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> unityContainer = <span class="keyword">new</span> UnityContainer();</span><br><span class="line">    unityContainer.RegisterInstance(<span class="keyword">new</span> DispatcherService(dispatcher));</span><br><span class="line">    unityContainer.RegisterInstance(<span class="keyword">new</span> MainPageViewModel(unityContainer.Resolve()));</span><br><span class="line"></span><br><span class="line">    Container = unityContainer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">base</span>.OnInitializeAsync(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>そもそもバックグランドで生成できないようにする、というアプローチは安全かもしれませんね。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> C# </category>
          
          <category> Universal Windows Platform </category>
          
          <category> WinRT </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>UWPメモ その3 ネイティブオブジェクトをデバッグする</title>
      <link href="2016/04/07/980/"/>
      <url>2016/04/07/980/</url>
      
        <content type="html"><![CDATA[<p>UWPで時折 (割と頻繁にクラッシュするともいう) 発生するクラッシュ時のメッセージについて</p><a id="more"></a><h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>アタッチしてデバッグしている際、クイックウォッチやウォッチウィンドウで変数を眺めると、Native Viewというのがありますが、デフォルトの設定では表示できません。<br>下記のようなやつです (英語版の環境ですが…)。</p><p><a href="../../../../public/2016/04/Error.png"><img src="../../../../public/2016/04/Error-300x100.png" alt="クイック ウォッチ1"></a></p><p>最初は、オプションメニューのデバッグに関連する設定があるかと思いましたがそうではありませんでした。<br>これの対応策をメモとして残します。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p>設定は、<strong>プロジェクトプロパティ</strong>の<strong>デバッグタブ</strong>の<strong>デバッグーの種類</strong>から<strong>マネージのみ</strong>になっている設定を<strong>ネイティブのみ</strong>または<strong>混合 (マネージとネイティブ)</strong> に変更します。<br><strong>アプリケーション プロセス</strong>と<strong>バックグラウンド タスク プロセス</strong>の違いですが、バックグラウンド タスク プロセスは、Windows ストア Phone アプリのみとのこと。<br>なので、アプリケーション プロセス側だけ有効にしておけば大抵は事足りるかと。</p><p><a href="../../../../public/2016/04/Error3.png"><img src="../../../../public/2016/04/Error3-300x150.png" alt="デバッグ設定"></a></p><p>設定完了後、再度例外に遭遇した際、前述のウィンドウが下記のように変化します。</p><p><a href="../../../../public/2016/04/Error2.png"><img src="../../../../public/2016/04/Error2-300x73.png" alt="クイック ウォッチ2"></a></p><p>すばらしい。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>枯れた技術でないため、デバッグの定石や手順が見つかりにくいUWPですが、明示的に設定をしないといけないなら、エラーの説明に、「こうすれば詳細を見れるよ？」みたいなメッセージを含めてくれればいいのに、と思います。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> C# </category>
          
          <category> Universal Windows Platform </category>
          
          <category> WinRT </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETで顔認識を試してみる Microsoft Cognitive Services Face編 第1回</title>
      <link href="2016/04/03/957/"/>
      <url>2016/04/03/957/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/04/02/931">前回</a>は環境構築をしました。</p><a id="more"></a><h1 id="Samle"><a href="#Samle" class="headerlink" title="Samle"></a>Samle</h1><p>Cognitive Servicesを使うにあたりサンプルが<a href="https://github.com/Microsoft/ProjectOxford-ClientSDK">Github</a>で提供されています。<br><a href="https://www.codeplex.com/">Codeplex</a>？何ですか？それ？</p><p><a href="https://github.com/Microsoft/ProjectOxford-ClientSDK/tree/master/Face">Face</a>はAndroid、Python、Windows、iOSの4環境が用意されています。<br>WindowsはWPFです。<br><strong>UWP</strong>をプッシュしていたのにWPFとは…. iOSは<strong>Xcode</strong>でした。Xamarinではないのかよ….</p><p><a href="https://github.com/Microsoft/ProjectOxford-ClientSDK/tree/master/Face/Windows/ClientLibrary">ClientLibrary</a>があるので覗いてみると、どうやら既存のNugetで配布されている<a href="https://www.nuget.org/packages/Microsoft.ProjectOxford.Face/">Microsoft Project Oxford Face API</a>を参照している模様。<br>単純にRESTで要求しているだけのよう。</p><p>また、<a href="https://github.com/Microsoft/ProjectOxford-ClientSDK/blob/master/Face/Windows/SampleScreenshots/SampleRunning.png">サンプル画像</a>を見ると、<strong>Detection</strong>、<strong>Find Similar</strong>、<strong>Grouping</strong>、<strong>Identification</strong>、<strong>Verification</strong>のサンプルがあるようです。<br>Identification、Verificationということは特徴抽出したデータが存在して、それをファイルにできる？</p><p>と思ったらそうではなく、Verificationは、登録した顔データをGuidで管理して、2つの顔が同一人物かどうかの判定し、Identificationはグループ群に指定したGuidの顔を探すだけのようです。<br>うーん、残念。</p><h1 id="Try"><a href="#Try" class="headerlink" title="Try"></a>Try</h1><p>WPFのサンプルをビルドして起動します。</p><p><a href="../../../../public/2016/04/1-2.png"><img src="../../../../public/2016/04/1-2-1024x614.png" alt="スクリーンショット"></a></p><p>起動すると、<strong>Subscription Key</strong>の入力を求められますが、これは前回取得した<a href="https://www.microsoft.com/cognitive-services/en-US/subscriptions">Microsoft Cognitive Services</a>のFaceにおける<strong>Key1</strong>または<strong>Key2</strong>になります。Showでキーをコピーして、TextBoxに貼り付けします。</p><p><a href="../../../../public/2016/04/2-1.png"><img src="../../../../public/2016/04/2-1-1024x540.png" alt="スクリーンショット"></a></p><p>そしてSave Keyボタンを押下します。<br>ハードディスクにキーが保存されたことが通知されます。<br>保存先は<strong>System.IO.IsolatedStorage.IsolatedStorageFile</strong>を使っており分離ストレージ内でした。</p><p><a href="../../../../public/2016/04/3-1.png"><img src="../../../../public/2016/04/3-1-300x180.png" alt="スクリーンショット"></a></p><p>その後、Face Detectionを選択しページを切り替えます。<br>Choose Imageとあるので、画像を選択します。<br>今回はLive情報マガジン ライブフリーク様より、<a href="http://ticketcamp.net/live-blog/spitz-movie/">スピッツの画像</a>をお借りしました。<br>私は小学生からのスピッツの大ファンなので。ええ。</p><p><a href="../../../../public/2016/04/4-1.png"><img src="../../../../public/2016/04/4-1-1024x614.png" alt="スクリーンショット"></a></p><p>きちんと、マサムネ、テツヤ、タムタムを認識し、テツヤがサングラスをつけていることも認識しています。<br>あと、検出した画像の表情も認識しています。以前話題になった。Emotion APIですね。<br>崎ちゃんは画像が小さすぎたのか検出できませんでした。</p><p>なお、年齢推測は全部だめです。2016年4月現在全員48歳なので、18-20ずれています。日本人は若く見えるからダメなのかな？ まぁ、この画像がいつ撮影されたのかがわかりませんが。<br>別の写真だと…</p><p><a href="../../../../public/2016/04/5-1.png"><img src="../../../../public/2016/04/5-1-1024x614.png" alt="スクリーンショット"></a></p><p>マサムネ33歳、テツヤ33歳、タムタム31歳、崎ちゃん40歳。<br>この画像は公式ファンクラブの壁紙なので割と最近のはず。でも最大17歳の差….</p><h1 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h1><p>ソースを見ましたが使い方は凄い簡単でした。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> fileStream = File.OpenRead(SelectedFile))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        MainWindow mainWindow = Window.GetWindow(<span class="keyword">this</span>) <span class="keyword">as</span> MainWindow;</span><br><span class="line">        <span class="keyword">string</span> subscriptionKey = mainWindow._scenariosControl.SubscriptionKey;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> faceServiceClient = <span class="keyword">new</span> FaceServiceClient(subscriptionKey);</span><br><span class="line">        Contract.Face[] faces = <span class="keyword">await</span> faceServiceClient.DetectAsync(fileStream, <span class="literal">false</span>, <span class="literal">true</span>, <span class="keyword">new</span> FaceAttributeType[] &#123; FaceAttributeType.Gender, FaceAttributeType.Age, FaceAttributeType.Smile, FaceAttributeType.Glasses &#125;);</span><br></pre></td></tr></table></figure><p>画像ファイルの<strong>FileStream</strong>を渡してあげるだけのお手軽さです。<br>なんということでしょう。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>素晴らしいAPIがこんなにも簡単に使えるとは本当に素晴らしいです。Microsoft!!</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> サービス紹介 </category>
          
          <category> 画像処理 </category>
          
          <category> Azure </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> Cognitive Services </category>
          
          <category> .NETで顔認識を試してみる </category>
          
          <category> 顔認識 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>WPF メモ その1 起動時にアプリがクラッシュする</title>
      <link href="2016/04/03/974/"/>
      <url>2016/04/03/974/</url>
      
        <content type="html"><![CDATA[<p>最近開発環境が壊れてきたのか、色々問題がでてきました。買い換えるか初期化して環境を構築し直すか検討している最中の話。</p><a id="more"></a><h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>Windows10だとクラッシュすることなく動くのに、Windows7だと動かない。<br>でも、VisualStudioからデバッグ起動するとWindows7でも動くという不思議な問題。</p><p>例外として下記のメッセージをスローしていました。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">System.Windows.Markup.XamlParseException: &#39;System.Windows.Window&#39; のタイプ初期化子が例外をスローしました。 ---&gt; System.TypeInitializationException: &#39;System.Windows.FrameworkElement&#39; のタイプ初期化子が例外をスローしました。 ---&gt; System.TypeInitializationException: &#39;System.Windows.Documents.TextElement&#39; のタイプ初期化子が例外をスローしました。 ---&gt; System.TypeInitializationException: &#39;MS.Internal.FontCache.Util&#39; のタイプ初期化子が例外をスローしました。 ---&gt; System.UriFormatException: 無効な URI: URI の形式を決定できませんでした。</span><br><span class="line">   場所 System.Uri.CreateThis(String uri, Boolean dontEscape, UriKind uriKind)</span><br><span class="line">   場所 System.Uri..ctor(String uriString, UriKind uriKind)</span><br><span class="line">   場所 MS.Internal.FontCache.Util..cctor()</span><br><span class="line">   --- 内部例外スタック トレースの終わり ---</span><br><span class="line">   場所 MS.Internal.FontCache.Util.get_Dpi()</span><br><span class="line">   場所 System.Windows.SystemFonts.ConvertFontHeight(Int32 height)</span><br><span class="line">   場所 System.Windows.Documents.TextElement..cctor()</span><br><span class="line">   --- 内部例外スタック トレースの終わり ---</span><br><span class="line">   場所 System.Windows.FrameworkElement..cctor()</span><br><span class="line">   --- 内部例外スタック トレースの終わり ---</span><br><span class="line">   場所 System.Windows.Window..cctor()</span><br><span class="line">   --- 内部例外スタック トレースの終わり ---</span><br><span class="line">   場所 System.Windows.Markup.WpfXamlLoader.Load(XamlReader xamlReader, IXamlObjectWriterFactory writerFactory, Boolean skipJournaledProperties, Object rootObject, XamlObjectWriterSettings settings, Uri baseUri)</span><br><span class="line">   場所 System.Windows.Markup.WpfXamlLoader.LoadBaml(XamlReader xamlReader, Boolean skipJournaledProperties, Object rootObject, XamlAccessLevel accessLevel, Uri baseUri)</span><br><span class="line">   場所 System.Windows.Markup.XamlReader.LoadBaml(Stream stream, ParserContext parserContext, Object parent, Boolean closeStream)</span><br><span class="line">   場所 System.Windows.Application.LoadBamlStreamWithSyncInfo(Stream stream, ParserContext pc)</span><br><span class="line">   場所 System.Windows.Application.LoadComponent(Uri resourceLocator, Boolean bSkipJournaledProperties)</span><br><span class="line">   場所 System.Windows.Application.DoStartup()</span><br><span class="line">   場所 System.Windows.Application.&lt;.ctor&gt;b__1_0(Object unused)</span><br><span class="line">   場所 System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)</span><br><span class="line">   場所 System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)</span><br><span class="line">   場所 System.Windows.Threading.DispatcherOperation.InvokeImpl()</span><br><span class="line">   場所 System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(Object state)</span><br><span class="line">   場所 MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(Object obj)</span><br><span class="line">   場所 System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)</span><br><span class="line">   場所 System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)</span><br><span class="line">   場所 System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)</span><br><span class="line">   場所 MS.Internal.CulturePreservingExecutionContext.Run(CulturePreservingExecutionContext executionContext, ContextCallback callback, Object state)</span><br><span class="line">   場所 System.Windows.Threading.DispatcherOperation.Invoke()</span><br><span class="line">   場所 System.Windows.Threading.Dispatcher.ProcessQueue()</span><br><span class="line">   場所 System.Windows.Threading.Dispatcher.WndProcHook(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean&amp; handled)</span><br><span class="line">   場所 MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean&amp; handled)</span><br><span class="line">   場所 MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o)</span><br><span class="line">   場所 System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)</span><br><span class="line">   場所 System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)</span><br><span class="line">   場所 System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Int32 numArgs)</span><br><span class="line">   場所 MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam)</span><br><span class="line">   場所 MS.Win32.UnsafeNativeMethods.DispatchMessage(MSG&amp; msg)</span><br><span class="line">   場所 System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)</span><br><span class="line">   場所 System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame frame)</span><br><span class="line">   場所 System.Windows.Application.RunDispatcher(Object ignore)</span><br><span class="line">   場所 System.Windows.Application.RunInternal(Window window)</span><br><span class="line">   場所 System.Windows.Application.Run(Window window)</span><br><span class="line">   場所 System.Windows.Application.Run()</span><br><span class="line">   場所 Harvester.WPF.App.Main() 場所 D:\Works\OpenSource\Harvester\Harvester.WPF\obj\Debug\App.g.cs:行 0</span><br></pre></td></tr></table></figure><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p><strong>FontCache</strong>という単語が怪しいのでこれをキーにして検索しました。<br>そしたら見つかったのが下記のページ。</p><p><a href="http://stackoverflow.com/questions/10094197/wpf-window-throws-typeinitializationexception-at-start-up/10094280#10094280">WPF window throws TypeInitializationException at start up</a> <a href="https://connect.microsoft.com/VisualStudio/feedback/details/618027/uriformatexception-thrown-by-ms-internal-fontcache-util">UriFormatException thrown by MS.Internal.FontCache.Util</a></p><p>要するに、<strong>環境変数windir</strong>がないんじゃね？というもの</p><p>事実、環境変数がなくなっていました。／(^o^)＼ﾅﾝﾃｺｯﾀｲ<br>というか、<strong>環境変数PATH</strong>が異常に短い。そういえば、最近setxコマンド使用直後、setxコマンドが使えなくなる現象があったが、これが原因か。</p><p>色々調べると環境変数PATHが長すぎるのでは？という話がちらほら。<br>何かの拍子に、環境変数全体がカットされたのが原因なのだろう。</p><p>再起動したら直った。<br>うーん。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>原因は判明しました。が、その原因を引き起こすトリガーが不明。<br>もう少し状況を注視します。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> Windows Presentation Foundation </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETで顔認識を試してみる Microsoft Cognitive Services Face編 第0回</title>
      <link href="2016/04/02/931/"/>
      <url>2016/04/02/931/</url>
      
        <content type="html"><![CDATA[<p><strong>Build 2016</strong>お疲れ様でした。<strong>Xamarin</strong> 無償化など非常に大きな内容が多数ありました。</p><a id="more"></a><h1 id="Microsoft-Cognitive-Servicesとは"><a href="#Microsoft-Cognitive-Servicesとは" class="headerlink" title="Microsoft Cognitive Servicesとは?"></a>Microsoft Cognitive Servicesとは?</h1><p>今回のBuildでの発表に**<a href="https://www.microsoft.com/cognitive-services/">Microsoft Cognitive Services</a>**がありました。<br>要するに、視覚、聴覚、声といった、人間の自然なコミュニケーション手段による操作を可能にするインテリジェントな22個のAPI群とのこと。</p><p>で、個人的に顔認識が一番目を引きました。仕事柄、画像認識や生体認証は一番身近ですので。</p><p>調べてみると、Azure上でのサービスとして展開されているようです。ライブラリが提供されるような形ではないのがちょっと残念でした。<br>私はAzureを使ったことがないので、環境構築も踏まえて勉強していきます。</p><h1 id="環境構築"><a href="#環境構築" class="headerlink" title="環境構築"></a>環境構築</h1><p>Microsoftアカウントはあるものとします。またサインしておきます。<br><a href="https://www.microsoft.com/cognitive-services/">Microsoft Cognitive Services</a>に移動します。</p><p><a href="../../../../public/2016/04/1.png"><img src="../../../../public/2016/04/1-1024x540.png" alt="スクリーンショット"></a></p><p><strong>Let’s go</strong>で移動します。<br>必要なAPIにチェックを入れて、<strong>I agree to the Microsoft Cognitive Services Terms and Mircorosft Privacy Statement</strong> にチェック。そして、<strong>Subscribe</strong>をクリック。<br><strong>Contact me with promotional offers and updates about Microsoft Cognitive Services</strong> はチェックは任意です。</p><p><a href="../../../../public/2016/04/2.png"><img src="../../../../public/2016/04/2-1024x540.png" alt="スクリーンショット"></a></p><p><a href="../../../../public/2016/04/3.png"><img src="../../../../public/2016/04/3-1024x540.png" alt="スクリーンショット"></a></p><p>必要なAPIのSubscribeを確認したら<strong>Buy On AzureでAzure</strong>のポータルサイトに移動します。</p><p><a href="../../../../public/2016/04/4.png"><img src="../../../../public/2016/04/4-1024x540.png" alt="スクリーンショット"></a></p><p>移動後、サブスクリプションが存在しない場合は下記の画面になります。<br>サインアップをクリックします。</p><p><a href="../../../../public/2016/04/5.png"><img src="../../../../public/2016/04/5-1024x540.png" alt="スクリーンショット"></a></p><p>プランを選択します。無料試用版もあるので、それを選択するか、<a href="https://www.visualstudio.com/en-us/products/visual-studio-dev-essentials-vs.aspx">Visual Studio Dev Essentials</a>による25ドルの無料クレジットもあります。</p><p><a href="../../../../public/2016/04/6.png"><img src="../../../../public/2016/04/6-1024x540.png" alt="スクリーンショット"></a></p><p>必要な情報を入力します。<br>電話の確認も本人確認ですが、これはボットによる悪質な登録を除外する意味もあるでしょう。<br>また、無料試用版でもクレジットカードが必須です。あくまで本人確認のためです。</p><p><a href="../../../../public/2016/04/7.png"><img src="../../../../public/2016/04/7-1024x540.png" alt="スクリーンショット"></a></p><p>サインアップ完了後、準備が始まります。画面中央のムービーでも見ていてください。<br><a href="../../../../public/2016/04/8.png"><img src="../../../../public/2016/04/8-1024x540.png" alt="スクリーンショット"></a></p><p>準備完了。<strong>サービスの管理を開始する</strong>でポータルに戻ります。<br>しばらくすると、メールで<strong>Azure サブスクリプションの準備が整いました</strong>という件名のメールが来ます。<br>なお私の場合、一度ポータルをログアウトしました。でないとサブスクリプションが表示されませんでしたので…</p><p><a href="../../../../public/2016/04/9.png"><img src="../../../../public/2016/04/9-1024x540.png" alt="スクリーンショット"></a></p><p>ダッシュボードです。</p><p><a href="../../../../public/2016/04/10.png"><img src="../../../../public/2016/04/10-1024x540.png" alt="スクリーンショット"></a></p><p><strong>リソースグループ</strong>をクリックし、<strong>追加ボタン</strong>をクリック。</p><p><a href="../../../../public/2016/04/11.png"><img src="../../../../public/2016/04/11-1024x540.png" alt="スクリーンショット"></a></p><p><strong>Cognitive Services APIs</strong>と入力します。最初の数文字入力で候補が出ます。</p><p><a href="../../../../public/2016/04/12.png"><img src="../../../../public/2016/04/12-1024x540.png" alt="スクリーンショット"></a></p><p><a href="../../../../public/2016/04/13.png"><img src="../../../../public/2016/04/13-1024x540.png" alt="スクリーンショット"></a></p><p>選択し、作成をクリック。<br><a href="../../../../public/2016/04/14.png"><img src="../../../../public/2016/04/14-1024x540.png" alt="スクリーンショット"></a></p><p><strong>Account name</strong>は任意の名前です。<br><strong>API type</strong>は<strong>Face API</strong>を選択します。<br><strong>サブスクリプション</strong>は先ほど作成したサブスクリプションを選択します。<br><strong>Resource group</strong>は既存のがなければ新規で作成します。<br><strong>場所</strong>は<strong>米国西部</strong>しか選択できませんでした。</p><p><a href="../../../../public/2016/04/15.png"><img src="../../../../public/2016/04/15-1024x540.png" alt="スクリーンショット"></a></p><p><strong>Pricing tier</strong>は<strong>F0 Free</strong>を選択。<br>20コール/分、30000コール/月の制限ですが、十分でしょう。</p><p><a href="../../../../public/2016/04/16.png"><img src="../../../../public/2016/04/16-1024x540.png" alt="スクリーンショット"></a></p><p><strong>Legal terms</strong>に<strong>I Agree</strong>で同意します。<br>最後に<strong>作成ボタン</strong>をクリック。</p><p><a href="../../../../public/2016/04/17.png"><img src="../../../../public/2016/04/16-1024x540.png" alt="スクリーンショット"></a></p><p>作成が完了しました。</p><p><a href="../../../../public/2016/04/18.png"><img src="../../../../public/2016/04/16-1024x540.png" alt="スクリーンショット"></a></p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>環境の構築が完了しました。<br>次回は実際にAPIを叩いて顔認識を行います。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> サービス紹介 </category>
          
          <category> 画像処理 </category>
          
          <category> Azure </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> Cognitive Services </category>
          
          <category> .NETで顔認識を試してみる </category>
          
          <category> 顔認識 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>UWP メモ その2 HubSectionが思い通りに行かないので可変Gridで対応</title>
      <link href="2016/04/02/919/"/>
      <url>2016/04/02/919/</url>
      
        <content type="html"><![CDATA[<p>UWP、面倒です。</p><a id="more"></a><h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p><strong>Hub</strong> というのがあります。<br>よくModernスタイルを紹介するときにグループ毎にタイルを並べて画面全体をスクロールできるやつ。そのグループが<strong>HubSection</strong>。<br>で、そのHunSectionですが、<strong>StackPanel</strong>を中に入れて<strong>Orientation</strong>を<strong>Horizontal</strong>にしても、中の子要素が横に並んでくれません。<br>HubSection自体の<strong>Width</strong>を未指定だろうが、明示的に指定しようが縦になってしまいます。</p><p>理由はよくわかりませんでした。<br>とにかく、仕様として</p><ol><li>グループ単位で可変数の子要素を横に並べる</li><li>グループ内ではスクロールバーは出さない</li></ol><p>を満たす必要がありました。</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p>解決策として、<strong>Grid</strong>を可変の子要素に対応させました。<br>といってもGridを継承するのではなく、UserControl上いGridを載せて、それを依存関係プロパティから操作する感じですが。</p><h1 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h1><p>ソースは下記です。<br><a href="https://github.com/takuya-takeuchi/Demo/tree/master/UWP1">https://github.com/takuya-takeuchi/Demo/tree/master/UWP1</a></p><p>まず、可変対応のGrid。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> Windows.UI.Xaml;</span><br><span class="line"><span class="keyword">using</span> Windows.UI.Xaml.Controls;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The User Control item template is documented at http://go.microsoft.com/fwlink/?LinkId=234236</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">UWP2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">VariableGrid</span> : <span class="title">UserControl</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> イベント</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> フィールド</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> コンストラクタ</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">VariableGrid</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> プロパティ</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DependencyProperty GridLengthProperty = DependencyProperty.Register(</span><br><span class="line">            <span class="string">&quot;GridLength&quot;</span>, <span class="keyword">typeof</span>(<span class="keyword">double</span>), <span class="keyword">typeof</span>(VariableGrid), <span class="keyword">new</span> PropertyMetadata(<span class="keyword">default</span>(<span class="keyword">double</span>), GridLengthChanged));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">double</span> GridLength</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> (<span class="keyword">double</span>)GetValue(GridLengthProperty);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                SetValue(GridLengthProperty, <span class="keyword">value</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GridLengthChanged</span>(<span class="params">DependencyObject dependencyObject, DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> control = dependencyObject <span class="keyword">as</span> VariableGrid;</span><br><span class="line">            control?.Update();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DependencyProperty ItemsSourceProperty = DependencyProperty.Register(</span><br><span class="line">            <span class="string">&quot;ItemsSource&quot;</span>, <span class="keyword">typeof</span>(<span class="keyword">object</span>), <span class="keyword">typeof</span>(VariableGrid), <span class="keyword">new</span> PropertyMetadata(<span class="keyword">default</span>(<span class="keyword">object</span>), ItemsSourceChanged));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">object</span> ItemsSource</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> (<span class="keyword">object</span>)GetValue(ItemsSourceProperty);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                SetValue(ItemsSourceProperty, <span class="keyword">value</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ItemsSourceChanged</span>(<span class="params">DependencyObject dependencyObject, DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> control = dependencyObject <span class="keyword">as</span> VariableGrid;</span><br><span class="line">            control?.Update();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DependencyProperty ItemTemplateProperty = DependencyProperty.Register(</span><br><span class="line">            <span class="string">&quot;ItemTemplate&quot;</span>, <span class="keyword">typeof</span>(DataTemplate), <span class="keyword">typeof</span>(VariableGrid), <span class="keyword">new</span> PropertyMetadata(<span class="keyword">default</span>(DataTemplate), ItemTemplateChanged));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> DataTemplate ItemTemplate</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> (DataTemplate)GetValue(ItemTemplateProperty);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                SetValue(ItemTemplateProperty, <span class="keyword">value</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ItemTemplateChanged</span>(<span class="params">DependencyObject dependencyObject, DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> control = dependencyObject <span class="keyword">as</span> VariableGrid;</span><br><span class="line">            control?.Update();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DependencyProperty OrientationProperty = DependencyProperty.Register(</span><br><span class="line">            <span class="string">&quot;Orientation&quot;</span>, <span class="keyword">typeof</span>(Orientation), <span class="keyword">typeof</span>(VariableGrid), <span class="keyword">new</span> PropertyMetadata(<span class="keyword">default</span>(Orientation), OrientationChanged));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Orientation Orientation</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> (Orientation)GetValue(OrientationProperty);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                SetValue(OrientationProperty, <span class="keyword">value</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OrientationChanged</span>(<span class="params">DependencyObject dependencyObject, DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> control = dependencyObject <span class="keyword">as</span> VariableGrid;</span><br><span class="line">            control?.Update();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> メソッド</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> プライベート</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> grid = <span class="keyword">this</span>._Grid;</span><br><span class="line"></span><br><span class="line">            grid.Children.Clear();</span><br><span class="line">            grid.RowDefinitions.Clear();</span><br><span class="line">            grid.ColumnDefinitions.Clear();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> items = <span class="keyword">this</span>.ItemsSource <span class="keyword">as</span> IEnumerable;</span><br><span class="line">            <span class="keyword">if</span> (items == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> itemTemplate = <span class="keyword">this</span>.ItemTemplate;</span><br><span class="line">            <span class="keyword">if</span> (itemTemplate == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> rowColumn = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">var</span> gridLength = <span class="keyword">this</span>.GridLength;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> children = <span class="keyword">new</span> List&lt;FrameworkElement&gt;();</span><br><span class="line">            <span class="keyword">var</span> orientation = <span class="keyword">this</span>.Orientation;</span><br><span class="line">            <span class="keyword">switch</span> (orientation)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> Orientation.Vertical:</span><br><span class="line">                    <span class="keyword">foreach</span> (<span class="keyword">var</span> dataContext <span class="keyword">in</span> items)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">var</span> child = itemTemplate.LoadContent() <span class="keyword">as</span> FrameworkElement;</span><br><span class="line">                        <span class="keyword">if</span> (child == <span class="literal">null</span>)</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                        child.DataContext = dataContext;</span><br><span class="line"></span><br><span class="line">                        grid.RowDefinitions.Add(<span class="keyword">new</span> RowDefinition &#123; Height = <span class="keyword">new</span> GridLength(gridLength) &#125;);</span><br><span class="line">                        Grid.SetRow(child, rowColumn++);</span><br><span class="line"></span><br><span class="line">                        children.Add(child);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Orientation.Horizontal:</span><br><span class="line">                    <span class="keyword">foreach</span> (<span class="keyword">var</span> dataContext <span class="keyword">in</span> items)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">var</span> child = itemTemplate.LoadContent() <span class="keyword">as</span> FrameworkElement;</span><br><span class="line">                        <span class="keyword">if</span> (child == <span class="literal">null</span>)</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                        child.DataContext = dataContext;</span><br><span class="line"></span><br><span class="line">                        grid.ColumnDefinitions.Add(<span class="keyword">new</span> ColumnDefinition &#123; Width = <span class="keyword">new</span> GridLength(gridLength) &#125;);</span><br><span class="line">                        Grid.SetColumn(child, rowColumn++);</span><br><span class="line"></span><br><span class="line">                        children.Add(child);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            children.ForEach(grid.Children.Add);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>GridLength</strong>で一つのセルの幅または高さを指定<br><strong>Orientation</strong>でGridが並ぶ方向を指定<br><strong>ItemsSource</strong>で並べたいオブジェクトのコレクションを指定<br><strong>ItemTemplate</strong>で並べたオブジェクトの見た目のテンプレートを指定</p><p>というだけです。</p><p>使い方は下記。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;Hub&gt;</span><br><span class="line">    &lt;HubSection Header&#x3D;&quot;1st&quot;&gt;</span><br><span class="line">        &lt;DataTemplate&gt;</span><br><span class="line">            &lt;local:VariableGrid GridLength&#x3D;&quot;400&quot;</span><br><span class="line">                                ItemTemplate&#x3D;&quot;&#123;StaticResource ItemTemplate&#125;&quot;</span><br><span class="line">                                ItemsSource&#x3D;&quot;&#123;Binding Images&#125;&quot;</span><br><span class="line">                                Orientation&#x3D;&quot;Horizontal&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;DataTemplate&gt;</span><br><span class="line">    &lt;&#x2F;HubSection&gt;</span><br><span class="line">    &lt;HubSection Header&#x3D;&quot;2nd&quot;&gt;</span><br><span class="line">        &lt;DataTemplate&gt;</span><br><span class="line">            &lt;local:VariableGrid GridLength&#x3D;&quot;400&quot;</span><br><span class="line">                                ItemTemplate&#x3D;&quot;&#123;StaticResource ItemTemplate&#125;&quot;</span><br><span class="line">                                ItemsSource&#x3D;&quot;&#123;Binding Images&#125;&quot;</span><br><span class="line">                                Orientation&#x3D;&quot;Horizontal&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;DataTemplate&gt;</span><br><span class="line">    &lt;&#x2F;HubSection&gt;</span><br><span class="line">&lt;&#x2F;Hub&gt;</span><br></pre></td></tr></table></figure><p>これを使うとこんな感じになります。</p><p><a href="../../../../public/2016/04/3aae3db9c67f2d9cbe0292d83ce248f9.png"><img src="../../../../public/2016/04/3aae3db9c67f2d9cbe0292d83ce248f9-1024x626.png"></a></p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>まだどういうクラスがあって、適切な使い方が見えてこないので、こんなことしてますが、本当は正しいやり方があるような気がします。<br>面倒だなぁ</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/UWP1">https://github.com/takuya-takeuchi/Demo/tree/master/UWP1</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> C# </category>
          
          <category> Universal Windows Platform </category>
          
          <category> WinRT </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>UWP メモ その1 EventTriggerBehaviorの制約</title>
      <link href="2016/03/26/806/"/>
      <url>2016/03/26/806/</url>
      
        <content type="html"><![CDATA[<p>仕事で <strong>UWP</strong> のソフトを開発しています。そもそも <strong>WPF</strong> もそこまで経験ないのに、UWPとか無茶ぶりです。<br>UWP、というか <strong>WinRT</strong> 使っているとWPFでできたことができないことが多々あります。</p><a id="more"></a><h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p><strong>EventTriggerAction</strong> というのがあります。<br>XAML側で <strong>ViewModel</strong> で定義されたメソッドをイベントと結び付けたりできます。</p><p>で、何が問題、というか結び付ける対象となるイベントに制限があります。</p><p>どうも、ルーティングイベント以外を対象にすると、下記のメッセージを含む例外を投げて実行時にクラッシュします。</p><p><strong>System.InvalidOperationException: Adding or removing event handlers dynamically is not supported on WinRT events. at System.Reflection.EventInfo.AddEventHandler(Object target, Delegate handler)</strong></p><p>この現象、WPFでは発生しません。</p><h1 id="Debugだけ？"><a href="#Debugだけ？" class="headerlink" title="Debugだけ？"></a>Debugだけ？</h1><p>ところが、不思議なことにReleaseビルドで実行すると、クラッシュはおろか、正しく動作します。<br>概要は下記のソースをみるとわかるかと。<br>スクロールバーを動かすと画面下部のTextBlockに乱数の値が表示されます。</p><p><strong>ViewModel (ポータブル クラス ライブラリ)</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.Practices.Prism.Mvvm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Shared.ViewModels</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">MainWindowViewModel</span> : <span class="title">BindableBase</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">string</span> _Text1;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Text1</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._Text1;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                SetProperty(<span class="keyword">ref</span> <span class="keyword">this</span>._Text1, <span class="keyword">value</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">string</span> _Text2;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Text2</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._Text2;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                SetProperty(<span class="keyword">ref</span> <span class="keyword">this</span>._Text2, <span class="keyword">value</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnScrollChanged</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> random = <span class="keyword">new</span> System.Random();</span><br><span class="line">            <span class="keyword">this</span>.Text1 = random.Next(<span class="number">0</span>, <span class="number">10000</span>).ToString();</span><br><span class="line">            <span class="keyword">this</span>.Text2 = random.Next(<span class="number">0</span>, <span class="number">10000</span>).ToString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>MainWindow.xaml (UWP)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;Page x:Class&#x3D;&quot;UWP.MainPage&quot;</span><br><span class="line">      xmlns&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&#x2F;presentation&quot;</span><br><span class="line">      xmlns:x&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&quot;</span><br><span class="line">      xmlns:d&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;expression&#x2F;blend&#x2F;2008&quot;</span><br><span class="line">      xmlns:mc&#x3D;&quot;http:&#x2F;&#x2F;schemas.openxmlformats.org&#x2F;markup-compatibility&#x2F;2006&quot;</span><br><span class="line">      xmlns:viewModels&#x3D;&quot;using:Shared.ViewModels&quot;</span><br><span class="line">      xmlns:interactivity&#x3D;&quot;using:Microsoft.Xaml.Interactivity&quot;</span><br><span class="line">      xmlns:core&#x3D;&quot;using:Microsoft.Xaml.Interactions.Core&quot;</span><br><span class="line">      mc:Ignorable&#x3D;&quot;d&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Page.DataContext&gt;</span><br><span class="line">        &lt;viewModels:MainWindowViewModel &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;Page.DataContext&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Grid Background&#x3D;&quot;&#123;ThemeResource ApplicationPageBackgroundThemeBrush&#125;&quot;&gt;</span><br><span class="line">        &lt;Grid.RowDefinitions&gt;</span><br><span class="line">            &lt;RowDefinition Height&#x3D;&quot;*&quot; &#x2F;&gt;</span><br><span class="line">            &lt;RowDefinition Height&#x3D;&quot;30&quot; &#x2F;&gt;</span><br><span class="line">            &lt;RowDefinition Height&#x3D;&quot;30&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;Grid.RowDefinitions&gt;</span><br><span class="line">        &lt;ScrollViewer x:Name&#x3D;&quot;_ScrollViewer&quot;</span><br><span class="line">                      HorizontalScrollBarVisibility&#x3D;&quot;Auto&quot;</span><br><span class="line">                      VerticalScrollBarVisibility&#x3D;&quot;Auto&quot;&gt;</span><br><span class="line">            &lt;interactivity:Interaction.Behaviors&gt;</span><br><span class="line">                &lt;core:EventTriggerBehavior EventName&#x3D;&quot;ViewChanged&quot; SourceObject&#x3D;&quot;&#123;Binding ElementName&#x3D;_ScrollViewer&#125;&quot;&gt;</span><br><span class="line">                    &lt;core:CallMethodAction MethodName&#x3D;&quot;OnScrollChanged&quot; TargetObject&#x3D;&quot;&#123;Binding&#125;&quot;&#x2F;&gt;</span><br><span class="line">                &lt;&#x2F;core:EventTriggerBehavior&gt;</span><br><span class="line">            &lt;&#x2F;interactivity:Interaction.Behaviors&gt;</span><br><span class="line"></span><br><span class="line">            &lt;Image Source&#x3D;&quot;ms-appx:&#x2F;&#x2F;&#x2F;Assets&#x2F;kyoto.jpg&quot; Stretch&#x3D;&quot;None&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;ScrollViewer&gt;</span><br><span class="line">        &lt;TextBlock Grid.Row&#x3D;&quot;1&quot; Text&#x3D;&quot;&#123;Binding Text1&#125;&quot; &#x2F;&gt;</span><br><span class="line">        &lt;TextBlock Grid.Row&#x3D;&quot;2&quot; Text&#x3D;&quot;&#123;Binding Text2&#125;&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;Grid&gt;</span><br><span class="line">&lt;&#x2F;Page&gt;</span><br></pre></td></tr></table></figure><p><strong>MainWindow.xaml (WPF)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;Window x:Class&#x3D;&quot;WPF.MainWindow&quot;</span><br><span class="line">        xmlns&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&#x2F;presentation&quot;</span><br><span class="line">        xmlns:x&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&quot;</span><br><span class="line">        xmlns:d&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;expression&#x2F;blend&#x2F;2008&quot;</span><br><span class="line">        xmlns:ei&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;expression&#x2F;2010&#x2F;interactions&quot;</span><br><span class="line">        xmlns:i&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;expression&#x2F;2010&#x2F;interactivity&quot;</span><br><span class="line">        xmlns:mc&#x3D;&quot;http:&#x2F;&#x2F;schemas.openxmlformats.org&#x2F;markup-compatibility&#x2F;2006&quot;</span><br><span class="line">        xmlns:viewModels1&#x3D;&quot;clr-namespace:Shared.ViewModels;assembly&#x3D;Shared&quot;</span><br><span class="line">        Title&#x3D;&quot;MainWindow&quot;</span><br><span class="line">        Width&#x3D;&quot;525&quot;</span><br><span class="line">        Height&#x3D;&quot;350&quot;</span><br><span class="line">        mc:Ignorable&#x3D;&quot;d&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Window.DataContext&gt;</span><br><span class="line">        &lt;viewModels1:MainWindowViewModel &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;Window.DataContext&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Grid&gt;</span><br><span class="line">        &lt;Grid.RowDefinitions&gt;</span><br><span class="line">            &lt;RowDefinition &#x2F;&gt;</span><br><span class="line">            &lt;RowDefinition Height&#x3D;&quot;30&quot; &#x2F;&gt;</span><br><span class="line">            &lt;RowDefinition Height&#x3D;&quot;30&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;Grid.RowDefinitions&gt;</span><br><span class="line">        &lt;ScrollViewer HorizontalScrollBarVisibility&#x3D;&quot;Auto&quot; VerticalScrollBarVisibility&#x3D;&quot;Auto&quot;&gt;</span><br><span class="line">            &lt;i:Interaction.Triggers&gt;</span><br><span class="line">                &lt;i:EventTrigger EventName&#x3D;&quot;ScrollChanged&quot;&gt;</span><br><span class="line">                    &lt;ei:CallMethodAction MethodName&#x3D;&quot;OnScrollChanged&quot; TargetObject&#x3D;&quot;&#123;Binding&#125;&quot; &#x2F;&gt;</span><br><span class="line">                &lt;&#x2F;i:EventTrigger&gt;</span><br><span class="line">            &lt;&#x2F;i:Interaction.Triggers&gt;</span><br><span class="line">            &lt;Image Source&#x3D;&quot;Images&#x2F;kyoto.jpg&quot; Stretch&#x3D;&quot;None&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;ScrollViewer&gt;</span><br><span class="line">        &lt;TextBlock Grid.Row&#x3D;&quot;1&quot; Text&#x3D;&quot;&#123;Binding Text1&#125;&quot; &#x2F;&gt;</span><br><span class="line">        &lt;TextBlock Grid.Row&#x3D;&quot;2&quot; Text&#x3D;&quot;&#123;Binding Text2&#125;&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;Grid&gt;</span><br><span class="line">&lt;&#x2F;Window&gt;</span><br></pre></td></tr></table></figure><p><strong>実行画面 (UWP Release Build)</strong></p><p><a href="../../../../public/2016/03/2016-03-26-14.28.51.png"><img src="../../../../public/2016/03/2016-03-26-14.28.51.png" alt="Release ビルド実行画面"></a></p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>原因は不明です。<br>仕方がないので、仕事ではコードビハインドにイベントハンドラを記述しています。</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/UWP1">https://github.com/takuya-takeuchi/Demo/tree/master/UWP1</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> C# </category>
          
          <category> Universal Windows Platform </category>
          
          <category> WinRT </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでOneDriveを試してみる 第1回</title>
      <link href="2016/03/21/597/"/>
      <url>2016/03/21/597/</url>
      
        <content type="html"><![CDATA[<p><strong><a href="https://products.office.com/ja-jp/office-365-solo">Microsoft Office 365 Solo</a></strong> を契約してるので、1TBの <strong>OneDrive</strong> クラウドストレージの使用権を保持しています。</p><a id="more"></a><p>ということでまた新しい企画。というか <strong>.NETでOneDriveを～</strong> って普通じゃん。<br>でも、一応私の中のプライベートプロジェクトとしては、色々関連性があるんですね。<br>そのために、軽く調べているんですが….あまり情報がありません。</p><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>私見ですが、Microsoftのストレージ戦略は安定していない印象です。<br>私は、<strong>Windows Live Folder</strong>と呼ばれていたストレージサービスを使っていたことがありますが、かなりサービスが変わっています。<br><a href="http://jz5.jp/2014/02/20/onedrive-history/">jz5.jp様</a> がOneDriveに至るまでの素晴らしい概要図を提供されていますので、参考に。</p><p>で、安定していないので、開発者としては注力しづらいんですよね。<br>当時、SkyDriveのAPIが公開されたときは、開発者が自由にアクセスして自由にファイルを保存できるアプリを作れる、って興奮しましたが、何だか中途半端な感じだったのを覚えています。<br>例えば、拡張子の制限とか、REST APIとかで、面倒な感じでした。</p><p>で、時は移ろい、商標問題とかWindows 8とかで、ブランドを一新したのは記憶に新しいでしょう。<br>(つい最近、無制限のストレージ仕様を撤回して、顰蹙を買った世間を驚かせたのも。私はそこまで影響はなかったですが。)</p><p>そんなOndDriveはGitHubでSDKを公開しています。<br>ここで面白いのは、C#だけでなく、iPhone,Android,Python向けのSDKも同時に公開している点です。<br>CEOにSatya Nadellaが就任してから、オープンソース戦略を恐ろしいほどの積極さで進めているMicrosoftですが、SDKを自社のエコシステム以外でも使える形で提供しているのは、単にソフトを売る戦略からサービスを使ってもらう戦略に注力し、そのためには開発者の力を使って広くMicrosoftのサービスを知ってもらうほうが得策だと考えたのでしょう。</p><p>話がずれましたが、SDKは<a href="https://dev.onedrive.com/sdks.htm">ここ</a>からプラットフォームに応じたGitHubのページに飛べます。</p><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>C#向けとあって、非常に高いレベルで洗練されたSDKになっています。<br>従来のSkyDrive APIでREST APIを組み立てていたのが嘘みたいです。<br><a href="https://github.com/onedrive/onedrive-sdk-csharp">GitHubのページ</a>の</p><blockquote><p>var drive = await oneDriveClient<br>.Drive<br>.Request()<br>.GetAsync();</p></blockquote><p>を見れば、そのシンプルなAPIがよくわかります。<br>C#の <strong>async/await構文</strong> も相まって、非同期処理もシンプルにかけます。</p><p>では、最初は認証処理から。WPFで作ります。WinFormsは疲れました。<br>この手のサービスは認証が全てです。その都度認証キーを送るのか、Cookieにトークンを保持して、その手の処理を意識させないのか、等色々あると思いますが。<br>OndDrive SDKはOAuthを採用したようです。OAuthについては<a href="https://ja.wikipedia.org/wiki/OAuth">Wikipedia</a>を見てね。<del>説明できないから。</del></p><p>今回のサンプルは、<a href="https://github.com/takuya-takeuchi/Demo/tree/master/OnDrive1">ここ</a>にあります。</p><h3 id="1-開発準備"><a href="#1-開発準備" class="headerlink" title="1. 開発準備"></a>1. 開発準備</h3><p>最新のリリースを落としてきます。執筆時点では1.1.20です。対象は.NET 4.5.1以上かつWindows 8.1以上です。<br>中身の <strong>OneDriveSdk.sln</strong> を Windows7 で開こうとすると、Windows 8.1以上が必要なプロジェクト云々のエラーが出ますし、ビルドはできますが、実行時に、<strong>TargetInvocationException</strong> を吐いて落ちます。</p><p>続いて、Nugetパッケージの復元を実行します。OneDriveSDKプロジェクトは <strong>ポータブルクラスライブラリ (PCL)</strong> で作られおり、Nugetパッケージの <strong>Newtonsoft.Json</strong> を使っていますので、これを復元します。<br>(別のプロジェクトは、<strong>Microsoft.IdentityModel.Clients.ActiveDirectory</strong> とかを使用していますが。同時に復元されます。)</p><p>復元完了後、OneDriveSDKプロジェクトをビルドします。ビルド完了後、<strong>OneDriveSdk\bin</strong> 直下の Debug か Release フォルダにOneDriveSdk.dll、Newtonsoft.Json.dllが出力されているので、これを回収しておきます。</p><p>次に、SDKを使用するためにアプリケーションの登録を行います。<br>Twitterとかのクライアントと同じように、サービスを使用するアプリケーションを識別するための情報を取得します。<br><a href="http://go.microsoft.com/fwlink/p/?LinkId=193157">Microsoft account Developer Center</a> から登録します。</p><p>Microsoft アカウントでログインしてください。<br>ログイン後、マイアプリケーションの作成、とでるので画面の指示に従ってください。<br>完了後、<strong>クライアント ID</strong>と<strong>クライアント シークレット</strong> が手に入ります。</p><p>これで準備完了です。</p><h3 id="2-実装"><a href="#2-実装" class="headerlink" title="2. 実装"></a>2. 実装</h3><p>認証機能を実装します。<br>WPFなので、MVVMのサポートライブラリがないと、つらたん、なので<strong>MVVM Light Toolkit</strong>をNugetで参照します。別に<strong>Livet</strong>とかでもいいですよ？この辺はご自由に。</p><p>認証時、OneDriveへのサインインが行われるのですが、これは単純にWebBrowserにページを表示させているだけです。<br>なので、任意のUserControlやWindowに表示させることも可能ですが、WPFでMVVMを意識して実装するとNavigatedイベントとかが超絶面倒なので、認証ダイアログはGitHubのWinFroms実装にある</p><p><code>https://github.com/OneDrive/onedrive-sdk-csharp/tree/master/src/OneDriveSdk.WindowsForms/Web</code></p><p>をコピーしてきました。<br>そして実装したのが下記のコードです。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">ExecuteSingIn</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._OneDriveClient == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>._OneDriveClient = OneDriveClient.GetMicrosoftAccountClient(</span><br><span class="line">            ClientId,</span><br><span class="line">            ReturnUrl,</span><br><span class="line">            Scopes,</span><br><span class="line">            webAuthenticationUi: <span class="keyword">new</span> FormsWebAuthenticationUi());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>._OneDriveClient.IsAuthenticated)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">await</span> <span class="keyword">this</span>._OneDriveClient.AuthenticateAsync();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._OneDriveClient.IsAuthenticated)</span><br><span class="line">        &#123;</span><br><span class="line">            MessageBox.Show(</span><br><span class="line">                <span class="string">&quot;Authentication was successful&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Authentication was successful&quot;</span>,</span><br><span class="line">                MessageBoxButton.OK);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (OneDriveException exception)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!exception.IsMatch(OneDriveErrorCode.AuthenticationCancelled.ToString()))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (exception.IsMatch(OneDriveErrorCode.AuthenticationFailure.ToString()))</span><br><span class="line">            &#123;</span><br><span class="line">                MessageBox.Show(</span><br><span class="line">                    <span class="string">&quot;Authentication failed&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Authentication failed&quot;</span>,</span><br><span class="line">                    MessageBoxButton.OK);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> httpProvider = <span class="keyword">this</span>._OneDriveClient.HttpProvider <span class="keyword">as</span> HttpProvider;</span><br><span class="line">                <span class="keyword">if</span> (httpProvider != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    httpProvider.Dispose();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>._OneDriveClient = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>冒頭の <strong>OneDriveClient.GetMicrosoftAccountClient</strong> で認証の準備を行っています。<br>最後の引数 <strong>FormsWebAuthenticationUi</strong> は、<strong>Microsoft.OneDrive.Sdk.IWebAuthenticationUi</strong> を実装しており、唯一のメソッド、<strong>Task&lt;Collections.Generic.IDictionary&lt;string, string&gt;&gt; AuthenticateAsync(Uri requestUri, Uri callbackUri)</strong> 内で認証ダイアログを表示させるUI要素を用意しています。<br>その後、クライアントで認証済みかどうかを判定して、<strong>AuthenticateAsync</strong> メソッドで実際に認証処理を始めます。</p><p><font color="red">注意</font></p><p>サンプルの <strong>OneDrive1.ViewModels.MainViewModel.ClientId</strong> は空文字になっているので、自身で取得したクライアントIDを設定しください。</p><h3 id="3-実行結果"><a href="#3-実行結果" class="headerlink" title="3. 実行結果"></a>3. 実行結果</h3><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/OnDrive1">サンプルソース</a>を実行した結果は、下記のようになります。<br>(1) 初期画面</p><p><a href="../../../../public/2015/12/StartWindow.png"><img src="../../../../public/2015/12/StartWindow.png" alt="StartWindow"></a></p><p>(2) アクセス許可画面</p><p><a href="../../../../public/2015/12/AccessAllow.png"><img src="../../../../public/2015/12/AccessAllow.png" alt="AccessAllow"></a></p><p>(3) サインイン画面</p><p><a href="../../../../public/2015/12/Singin.png"><img src="../../../../public/2015/12/Singin.png" alt="Singin"></a></p><p>(4) 認証結果</p><p><a href="../../../../public/2015/12/Result.png"><img src="../../../../public/2015/12/Result.png" alt="Result"></a></p><p>認証処理自体は非常に簡単です (認証画面の用意だけは面倒かもしれませんが…)。<br>次回はOneDrive内部を閲覧してみたいと思います。</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/OneDrive1">https://github.com/takuya-takeuchi/Demo/tree/master/OneDrive1</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> C# </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> OneDrive </category>
          
          <category> .NETでOneDriveを試してみる </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでディープラーニングを試してみる CNTK編 第1回</title>
      <link href="2016/03/19/897/"/>
      <url>2016/03/19/897/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/03/06/889">前回</a>は評価データをExcelで可視化しました。今回は.NETから使ってみます。</p><a id="more"></a><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>CNTKのソースコード自体、現在進行形で進化しています。入手できるバイナリも現時点 (2016/03/18) でも動作しません。<br>実行は最新ソースを取得してビルドする必要があります。<br>また、設定ファイルやソースコードもトライアンドエラーで試した結果です。</p><h1 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h1><p>対象データは、MNISTとします。<br>ネットワークモデルは、<strong>Examples\Image\MNIST</strong> にあります。<br>ただし、データそのものは、含まれていません。</p><p><a href="http://yann.lecun.com/exdb/mnist/">THE MNIST DATABASE</a> から入手できるのですが、ここから入手しても、CNTKが読み込める形式にはなっていません。<br><strong>Examples\Image\MNIST\AdditionalFiles</strong> に、データの入手、変換を行うPython のスクリプトが入っているのですが、Python環境がないと使えません。<br>ですので、後述のサンプルプログラムにデータを含めておきました。<br>data\mnist.zip になります。これを解凍してできる、<strong>Train-28x28.txt</strong>、<strong>Test-28x28.txt</strong> を <strong>Examples\Image\MNIST\Data</strong> にコピーします。</p><p>次に設定ファイルを変更します。<br><strong>Examples\Image\MNIST\Config\01_OneHidden.cntk</strong> を開いて、</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deviceId &#x3D; 0</span><br><span class="line">imageLayout &#x3D; &quot;cudnn&quot;</span><br></pre></td></tr></table></figure><p>を</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deviceId &#x3D; -1</span><br><span class="line">imageLayout &#x3D; &quot;legacy&quot;</span><br></pre></td></tr></table></figure><p>に変更します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># stderr &#x3D; &quot;$OutputDir$&#x2F;01_OneHidden_out&quot;</span><br></pre></td></tr></table></figure><p>を</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stderr &#x3D; &quot;$OutputDir$&#x2F;01_OneHidden_out&quot;</span><br></pre></td></tr></table></figure><p>に変更して学習途中のログを生成することもおすすめしておきます。<br>以上で準備が完了です。</p><h2 id="ビルド"><a href="#ビルド" class="headerlink" title="ビルド"></a>ビルド</h2><p>最新ソースを取得してビルドします。<br>個人的には、GPUを使わない方が良いと思います。</p><p>ただし、3/18の時点では、<a href="https://taktak.jp/2016/03/13/900">ディープラーニング CNTK 雑談1 動かない api-ms-win-core-path-l1-1-0.dll がない</a> で報告したバグが直っていないので、Windows7で動かすなら、記事を参考にソースを修正してからビルドしてください。</p><h2 id="学習"><a href="#学習" class="headerlink" title="学習"></a>学習</h2><p>ビルド完了後、出来上がるパスをメモします。CNTK.slnがあるディレクトリから見て、<strong>x64\Release_CpuOnly</strong> または <strong>x64\Release_CpuOnly</strong> になると思います。<br>コマンドプロンプトを開いて、CNTK.slnがあるディレクトリにカレントディレクトリを移動します。<br>そして、次のコマンドを実行します。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="built_in">PATH</span>=&quot;<span class="variable">%CD%</span>\x64\Release_CpuOnly&quot;;<span class="variable">%PATH%</span></span><br><span class="line"><span class="built_in">set</span> CURRENT=<span class="variable">%CD%</span></span><br><span class="line"><span class="built_in">rmdir</span> &quot;Examples\Image\MNIST\Output&quot; /s /q</span><br><span class="line"><span class="built_in">cd</span> &quot;Examples\Image\MNIST\Config&quot;</span><br><span class="line">CNTK configFile=<span class="number">01</span>_OneHidden.cntk deviceId=-<span class="number">1</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">%CURRENT%</span></span><br></pre></td></tr></table></figure><p>これでしばらくすると、<strong>Examples\Image\MNIST\Output\Models</strong> に学習済みのモデルファイルが出来上がっているはずです。<br>ログは、<strong>Examples\Image\MNIST\Output\01_OneHidden_out_MNISTtrain_MNISTtest.log</strong> になります。</p><p>さらっとながめてみますと、</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Allocating matrices for forward and&#x2F;or backward propagation.</span><br><span class="line">UCIFastReader: Starting at epoch 0, counting lines to determine record count...</span><br><span class="line"> 10000 records found.</span><br><span class="line">starting epoch 0 at record count 0, and file position 0</span><br><span class="line">already there from last epoch</span><br><span class="line">RandomOrdering: 1989 retries for 10000 elements (19.9%) to ensure window condition</span><br><span class="line">RandomOrdering: recached sequence for seed 0: 2334, 3830, ...</span><br><span class="line">Minibatch[1-500]: SamplesSeen &#x3D; 8000    err: ErrorPrediction&#x2F;Sample &#x3D; 0.024125    ce: CrossEntropyWithSoftmax&#x2F;Sample &#x3D; 0.076922514</span><br><span class="line">Minibatch[501-625]: SamplesSeen &#x3D; 2000    err: ErrorPrediction&#x2F;Sample &#x3D; 0.0155    ce: CrossEntropyWithSoftmax&#x2F;Sample &#x3D; 0.060455356</span><br><span class="line">Final Results: Minibatch[1-625]: SamplesSeen &#x3D; 10000    err: ErrorPrediction&#x2F;Sample &#x3D; 0.0224    ce: CrossEntropyWithSoftmax&#x2F;Sample &#x3D; 0.073629082    Perplexity &#x3D; 1.0764075</span><br><span class="line"></span><br><span class="line">Action &quot;test&quot; complete.</span><br><span class="line"></span><br><span class="line">COMPLETED</span><br></pre></td></tr></table></figure><p>とあり、エラー率2.24%と出ています。まずまずです。</p><h2 id="NETからテスト"><a href="#NETからテスト" class="headerlink" title=".NETからテスト"></a>.NETからテスト</h2><p>テスト自体は、既にログを見るとおりわかっているのですが、これを.NETから可視化します。<br>実は、.NETのラッパーライブラリ自体は既にサンプル付きでCNTKに含まれています。<br><a href="https://github.com/Microsoft/CNTK/tree/master/Source/Extensibility">https://github.com/Microsoft/CNTK/tree/master/Source/Extensibility</a> がそれです。<br>ソースである、<a href="https://github.com/Microsoft/CNTK/blob/master/Source/Extensibility/CSEvalClient/Program.cs">Program.cs</a>を見ると非常に簡単であることがわかります。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> model = <span class="keyword">new</span> IEvaluateModelManagedF())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Initialize model evaluator</span></span><br><span class="line">    <span class="keyword">string</span> config = GetFileContents(Path.Combine(Environment.CurrentDirectory, <span class="string">@&quot;..\Config\01_OneHidden.cntk&quot;</span>));</span><br><span class="line">    model.Init(config);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Load model</span></span><br><span class="line">    <span class="keyword">string</span> modelFilePath = Path.Combine(Environment.CurrentDirectory, <span class="string">@&quot;..\Output\Models\01_OneHidden&quot;</span>);</span><br><span class="line">    model.CreateNetwork(<span class="keyword">string</span>.Format(<span class="string">&quot;deviceId=-1\nmodelPath=\&quot;&#123;0&#125;\&quot;&quot;</span>, modelFilePath));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate random input values in the appropriate structure and size</span></span><br><span class="line">    <span class="keyword">var</span> inputs = GetDictionary(<span class="string">&quot;features&quot;</span>, <span class="number">28</span>*<span class="number">28</span>, <span class="number">255</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We can call the evaluate method and get back the results (single layer)...</span></span><br><span class="line">    outputs = model.Evaluate(inputs, <span class="string">&quot;ol.z&quot;</span>, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>です。<br>Init関数には、設定ファイルのパスを、CreateNetworkには、コマンドプロンプトで渡す記述を渡すだけです。</p><p>ただし、わかりにくいのが、<strong>inputs</strong> と <strong>outputs</strong> です。</p><p>inputsは、<strong>System.Collections.Generic.Dictionary&lt;string, System.Collections.Generic.List<float>&gt;</strong> ですが、GetDictionaryで得られる戻り値は、**”features”** というキー、長さ28_28の <strong>System.Collections.Generic.List<float></strong> の値のペアが一つです。<br>値の中身は0-255の値がランダムに入っています。<br>MNISTは28_28なのでそういう条件なのです。<br>*.cntkにも784という数字が書いてありましたが、まさしくこれです。</p><p><strong>outputs</strong> は、<strong>System.Collections.Generic.List<float></strong> です。<br>今回は長さ10で、添え字0-9が、MNISTで認識する0-9の数値にそのまま対応しています。<br>また、各要素の値は、入力データが、添え字に対応する数字のどれに対応するか、という確率を返します。</p><p>では、**”features”** と <strong>“ol.z”</strong> は何を意味するのでしょうか？ これは、入力データと出力データを識別するキーになります。<br>ディープラーニングでは、各レイヤー毎に複数の入出力を持つことが可能です。その入出力を識別するためのキーになります。<br><a href="http://caffe.berkeleyvision.org/">Caffe</a> でいう、Bottom (入力)、Top (出力)になります。</p><p>では、この定義はどこにあるのか、というと <strong>Examples\Image\MNIST\Config\01_OneHidden.ndl</strong> を見るとわかります。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FeatureNodes &#x3D; (features)</span><br><span class="line">LabelNodes &#x3D; (labels)</span><br><span class="line">CriterionNodes &#x3D; (ce)</span><br><span class="line">EvalNodes &#x3D; (err)</span><br><span class="line">OutputNodes &#x3D; (ol)</span><br></pre></td></tr></table></figure><p>という記述がまさにそれです。<br>ただし、<strong>ol</strong> だけは、**”.z”** を付与しないと、実行時にエラーを投げてしまいますので、そうしています。</p><p>さて、実行するとわかりますが、戻ってくる値には、負数が含まれており、全部の数値を合計しても確率を表すと思われる、1または100になりません。<br>これは、後述のサンプルソースで含まれるSoftmaxメソッドで確率に変換すること目的を達成できます。</p><p>ディープラーニングでは、出力層で得られた結果をSoftmaxで確率に変換することで識別を行います。<br>説明は<a href="https://en.wikipedia.org/wiki/Softmax_function">Softmax_function</a> でわかりますが、簡単にソースで示すと、</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> IList&lt;<span class="keyword">double</span>&gt; <span class="title">Softmax</span>(<span class="params">IList&lt;<span class="keyword">float</span>&gt; outputs</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> results = <span class="keyword">new</span> <span class="keyword">double</span>[outputs.Count];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> total = <span class="number">0</span>d;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>, length = results.Length; index &lt; length; index++)</span><br><span class="line">    &#123;</span><br><span class="line">        results[index] = Math.Exp(outputs[index]);</span><br><span class="line">        total += results[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>, length = results.Length; index &lt; length; index++)</span><br><span class="line">    &#123;</span><br><span class="line">        results[index] /= total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> results;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>になります。簡単ですね。</p><h1 id="テストする"><a href="#テストする" class="headerlink" title="テストする"></a>テストする</h1><p>が、先のサンプルは、入力データがランダムな値で全くもって意味がありません。<br>ですので、MNISTの画像を使って実際にテストしてみたいと思います。<br>入力画像は28*28の8bit画像です。</p><p>これをGUIで実行するのが、</p><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/CNTK6">https://github.com/takuya-takeuchi/Demo/tree/master/CNTK6</a></p><p>になります。<br>ビルドする際は、<strong>CNTK6\assemblies\CNTK</strong> というフォルダを作って、そこに EvalWrapper.dll をコピーしてください。<br>また、実行する際は、CNTKで出力される全てのバイナリを実行フォルダにコピーしてください。</p><p>実行すると、こんな感じです。</p><p><a href="../../../../public/2016/03/8902e16d1b34c914ec3b34aca8ce52d0.png"><img src="../../../../public/2016/03/8902e16d1b34c914ec3b34aca8ce52d0.png" alt="サンプルアプリ"></a></p><p>下のリストビューに確率がでており、この画像だと6である可能性が一番高いことを示唆しています。</p><p>入力画像は8、24、32bitに対応しており、それぞれバイナリに変換します。<br>ですので、MNIST以外にも使えます。<strong>CIFAR-100</strong> でも利用できます。<br>(CIFAR-100で最初はテストしていましたが、結果がいまいちなので、MNISTにしまいた。)</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>ついに.NET から利用できるようになりました。<br>これで利用までの敷居がぐっと下がったような気がします。<br>アプリへの組み込みも他のディープラーニングのフレームワークに比べて楽になります。</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/CNTK6/source/CNTK6">https://github.com/takuya-takeuchi/Demo/tree/master/CNTK6/source/CNTK6</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> %e3%83%87%e3%82%a3%e3%83%bc%e3%83%97%e3%83%a9%e3%83%bc%e3%83%8b%e3%83%b3%e3%82%b0 </category>
          
          <category> CNTK </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> オープンソース </category>
          
          <category> gpupu </category>
          
          <category> ディープラーニング </category>
          
          <category> .NETでディープラーニングを試してみる </category>
          
          <category> CUDA </category>
          
          <category> GPUPU </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ディープラーニング CNTK 雑談1 動かない api-ms-win-core-path-l1-1-0.dll がない</title>
      <link href="2016/03/13/900/"/>
      <url>2016/03/13/900/</url>
      
        <content type="html"><![CDATA[<p>最新ソース (2016/03/13) を取得したら動かなかったのでその対応。</p><a id="more"></a><h1 id="エラー"><a href="#エラー" class="headerlink" title="エラー"></a>エラー</h1><h2 id="現象"><a href="#現象" class="headerlink" title="現象"></a>現象</h2><p><a href="../../../../public/2016/03/218a3bf5e8a9cba7ec685c06d174ad66.png"><img src="../../../../public/2016/03/218a3bf5e8a9cba7ec685c06d174ad66.png" alt="Missing api-ms-win-core-path-l1-1-0.dll"></a></p><p>DLLがないとのこと。<br>つい最近まではそんなことなかったのに。</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>調べました。<br>どうも <strong>api-ms-win-core-path-l1-1-0.dll</strong> は Windows8 のみのdllのよう。<br><a href="https://msdn.microsoft.com/ja-jp/library/windows/desktop/dn505783(v=vs.85).aspx">Windows 8 API Sets</a> にありました。</p><p>今回は、PathCchRemoveFileSpec関数を使う修正が入ったため、Windows7で動作しなくなったようです。</p><h2 id="修正"><a href="#修正" class="headerlink" title="修正"></a>修正</h2><p>公式の対応を待つべきですが、暫定修正。<br><strong>Source/Common/File.cpp</strong> の </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">&quot;Pathcch.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>を </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Shlwapi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">&quot;Shlwapi.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>に。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> hr = PathCchRemoveFileSpec(&amp;path[<span class="number">0</span>], path.size());</span><br></pre></td></tr></table></figure><p>を </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> hr = PathRemoveFileSpec(&amp;path[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p>に。</p><p>この2つの修正でエラーが出なくなります。<br>ただし、修正後の関数は <strong>deprecated</strong> ですし、バッファーオーバーランの危険があります。<br>あくまで暫定的な修正です。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p><a href="https://github.com/Microsoft/CNTK/issues/224">Issue #224</a> で問題が上がってましたので、コメントしておきました。<br>公式が直してくれることを期待。</p><p><font color="red">2016.03.26追記</font></p><p>私の修正が、<a href="https://github.com/Microsoft/CNTK/pull/237">PullRequest #237</a> としてマージされたため、現在は発生しません。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> %e3%83%87%e3%82%a3%e3%83%bc%e3%83%97%e3%83%a9%e3%83%bc%e3%83%8b%e3%83%b3%e3%82%b0 </category>
          
          <category> CNTK </category>
          
          <category> オープンソース </category>
          
          <category> gpupu </category>
          
          <category> ディープラーニング </category>
          
          <category> CUDA </category>
          
          <category> GPUPU </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでGPUPUを試してみる CUDA編 第3回</title>
      <link href="2016/03/12/740/"/>
      <url>2016/03/12/740/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/02/16/735">前回</a>はCUDAの性能を改善しましたが、今一歩及ばずというところです。</p><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>ところで、これまで.NETが一度も出てきていないのにこのタイトルは詐欺なんじゃないですかねぇ(震え声)</p><h1 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h1><h2 id="Tread-thread-Thread"><a href="#Tread-thread-Thread" class="headerlink" title="Tread!thread!!Thread!!!"></a>Tread!thread!!Thread!!!</h2><p>前回はスレッドを使って大幅に性能を改善しました。<br>が、それでもCPUが純粋にシーケンシャルで処理する方が速かったです。</p><p>CUDAに対する理解が全く足りていないのでもう少し調べてみます。<br>前回登場した、<strong>CUDA_C_Programming_Guide.pdf</strong> で、スレッドに関する記述を見てみます。</p><blockquote><p>2.2. Thread Hierarchy For convenience, threadIdx is a 3-component vector, so that threads can be identified using a one-dimensional, two-dimensional, or three-dimensional thread index, forming a one-dimensional, two-dimensional, or three-dimensional block of threads, called a thread block. This provides a natural way to invoke computation across the elements in a domain such as a vector, matrix, or volume.</p></blockquote><p><code>訳: 2.2. スレッドの階層 便利なことに、threadIdxは3成分のベクトルであり、つまりスレッドは1次元、2次元、3次元のスレッドインデックス、で識別することができ、スレッドブロックと呼ばれる1次元、2次元、3次元のスレッドのブロックを形作る。これは、ベクトル、行列、ボリューム (訳注：ここでいうベクトルは、力学のベクトルではなく、配列のような1次元データで、行列は2次元、ボリュームは3次元という意味) のようなドメイン内の要素を横断する計算を実行するための自然な方法を提供する。</code></p><p>といっています。<br>ブロックという単語が出てきました、これは前回でも出てきましたが、流しました。<br>要するに、スレッドはブロックという単位になっていることです。</p><blockquote><p>The index of a thread and its thread ID relate to each other in a straightforward way: For a one-dimensional block, they are the same; for a two-dimensional block of size $$(D_x, D_y)$$ ,the thread ID of a thread of index $$(x, y)$$ is $$(x + y, D_x)$$; for a three-dimensional block of size $$(D_x, D_y, D_x)$$, the thread ID of a thread of index $$(x, y, x)$$ is $$(x + y D_x + z D_x D_y)$$.</p></blockquote><p><code>訳: スレッドのインデックスとそのスレッドIDは素直なやり方で互いに関連している。1次元のブロックではそれらは同一であり、2次元のブロックのサイズ (Dx, Dy)、スレッドのインデックス (x, y) のスレッドIDは (x + y, Dx); 3次元のブロックのサイズ (Dx, Dy, Dx)、スレッドのインデックス (x, y, z) のスレッドIDは (x + y Dx + z Dx Dy)である。</code></p><p>つまるところ、各ブロックにスレッドが存在するっていってます。</p><blockquote><p>There is a limit to the number of threads per block, since all threads of a block are expected to reside on the same processor core and must share the limited memory resources of that core. On current GPUs, a thread block may contain up to 1024 threads. However, a kernel can be executed by multiple equally-shaped thread blocks, so that the total number of threads is equal to the number of threads per block times the number of blocks. Blocks are organized into a one-dimensional, two-dimensional, or three-dimensional grid of thread blocks as illustrated by Figure 6. The number of thread blocks in a grid is usually dictated by the size of the data being processed or the number of processors in the system, which it can greatly exceed.<br><a href="../../../../public/2015/12/Figure6.png"><img src="../../../../public/2015/12/Figure6-300x254.png" alt="Figure6"></a></p></blockquote><p><code>訳: 1ブロック毎のスレッド数には制限があり、一つのブロックの全スレッドは、プロセッサーコアから予測でき、コアの制限されたメモリリソースを共有しなくてはならない。現在のGPUにて、スレッドブロックは1024スレッドまで内包するかもしれない。しかし、カーネルは複数の同一形状のスレッドブロックで実行され、ゆえにスレッドの合計数はブロックの個数と1ブロックあたりのスレッドの個数の積になる。 ブロックは、Figure 6で図示された、スレッドブロックの1次元、2次元、3次元のグリッドを形作る。1つのグリッド内におけるスレッドブロックの数は通常、処理されるデータのサイズまたはシステムのプロセッサー数から規定される。(訳注：最後のwhichはどこにかかっているのかわかりませんでしたので、最後のwhich以降は無視します)</code></p><br><p><strong>スレッドの合計数はブロックの個数と1ブロックあたりのスレッドの個数の積</strong></p><br><p>なんか凄いこと書いてあります。<br>ってか、前回書いた記事で1ブロックあたり最大512スレッド、って書きましたけど、あれは間違い？ 当時のCUDA搭載GPUの最大値なのか？</p><p>とりあえず、自分のGPU性能を詳しく知りたい。<br><a href="http://www.gdep.jp/page/view/250">第3回　CUDA4.0のインストール</a>によれば、<strong>deviceQuery.exe</strong> というプログラムが性能を詳しく教えてくれるとのこと。<br>これはCUDA Toolkitインストール時にコピーされており、デフォルトは。<strong>C:\ProgramData\NVIDIA Corporation\CUDA Samples\v7.5\1_Utilities\deviceQuery</strong> に入っていると。<br>とりあえず、自分でビルドして実行</p><p><a href="../../../../public/2015/12/deviceQuery.png"><img src="../../../../public/2015/12/deviceQuery-204x300.png" alt="deviceQuery"></a></p><p>結果として、1プロセッサーあたり1536スレッド、1ブロックあたり最大1024スレッド起動できることがわかりました。最大1536スレッドでしょぼくない？と思ったら、上に <strong>(4) Multiprocessors</strong> ってあるので、全部で1536*4=6144スレッドってこと？</p><p>とりあえず可能な限りスレッドを活用するべくコードを修正。<br>また、スレッド数を活用できるようなカーネルに内容を変更します。<br>サンプルコードはページの末尾を参照。<br>変更点は</p><ul><li>ベクトルの和の計算を行列乗算の計算に変更。1000x1000の行列なので1000^3 の計算</li><li>スレッド数指定</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">32</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MATRIX_SIZE = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">cudaError_t <span class="title">addWithCuda</span><span class="params">(<span class="keyword">float</span> *c, <span class="keyword">const</span> <span class="keyword">float</span> *a, <span class="keyword">const</span> <span class="keyword">float</span> *b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">addKernel</span><span class="params">(<span class="keyword">float</span> *c, <span class="keyword">const</span> <span class="keyword">float</span> *a, <span class="keyword">const</span> <span class="keyword">float</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> row = blockIdx.y * blockDim.y + threadIdx.y;</span><br><span class="line">    <span class="keyword">int</span> col = blockIdx.x * blockDim.x + threadIdx.x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (row &lt; MATRIX_SIZE &amp;&amp; col &lt; MATRIX_SIZE)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> v = <span class="number">0.f</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> x = <span class="number">0</span>; x &lt; MATRIX_SIZE; x++)</span><br><span class="line">        &#123;</span><br><span class="line">            v += a[row * MATRIX_SIZE + x] * b[x * MATRIX_SIZE + col];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        c[row * MATRIX_SIZE + col] = v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>こんな感じ。<br>ホスト側は省略。<br>結果は</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">threadsPerBlock.X =32, threadsPerBlock.y = 32</span><br><span class="line">numBlocks.X =32, numBlocks.y = 32</span><br><span class="line">CUDA is</span><br><span class="line">        time = &#123;117&#125;</span><br><span class="line">No CUDA is</span><br><span class="line">        time = &#123;7076&#125;</span><br></pre></td></tr></table></figure><p>やりました。60倍のパフォーマンスをたたき出しています。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>そもそもの原因として、CUDAの得意領域に持ち込んでいなかったのが問題でした。<br>如何にスレッドを有効活用するか、というところに主眼をおいて実装を進める必要があります。</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/CUDA3">https://github.com/takuya-takeuchi/Demo/tree/master/CUDA3</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> gpupu </category>
          
          <category> CUDA </category>
          
          <category> GPUPU </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ディープラーニング CNTK その5 評価の可視化</title>
      <link href="2016/03/06/889/"/>
      <url>2016/03/06/889/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/03/03/882">前回</a>は自分でデータの学習 (train) と評価 (test) を実行しました。今回は結果を検証してみます。</p><a id="more"></a><h1 id="可視化"><a href="#可視化" class="headerlink" title="可視化"></a>可視化</h1><h2 id="write"><a href="#write" class="headerlink" title="write"></a>write</h2><p><a href="https://taktak.jp/2016/02/29/866">前々回</a>の設定説明の際、CNTKが対応しているタスクまたはアクションに、ノードをファイルへ書き出す write があることを説明しました。<br>これを使ってテスト結果を可視化します。</p><h2 id="設定ファイルの追加"><a href="#設定ファイルの追加" class="headerlink" title="設定ファイルの追加"></a>設定ファイルの追加</h2><p>既存の設定ファイルに追加する形でも良いですが、そうすると、学習、テストのたびにファイル書き出しが実行されてしまいます。<br>別に大した負荷でもないですが、あえて別にします。</p><p>まず、前回使った <strong>01_Conv.cntk</strong> をコピーして、<strong>02_Eval.cntk</strong> とでも名前を変えます。<br>次に、<strong>Test</strong> コマンド全体をコピーして、<strong>Eval</strong> コマンドに名前を変えます。名前は任意です。<br>そして、<strong>Train</strong> コマンド、<strong>Test</strong> コマンド全体を削除します。<br>これで残るのはEvalコマンドだけになります。<br>次は、<strong>command=Train:Test</strong> となっている個所を、<strong>command=Eval</strong> に変更します。<br>そして、Evalコマンド内の <strong>action</strong> を <strong>write</strong> に変更します。<br>最後に、actionと同じ位置に <strong>outputPath = “$OutputDir$/Eval.txt”</strong> と追加します。<br>これがないと</p><p><strong>write command: You must specify either ‘writer’or ‘outputPath’</strong></p><p>というエラーを吐きますので。</p><h1 id="検証"><a href="#検証" class="headerlink" title="検証"></a>検証</h1><p>前回と同じディレクトリ <strong>(Examples\Image\Miscellaneous\CIFAR-100)</strong> から、下記のコマンドをたたきます。<br>コマンドプロンプトを再起動していないのでしたら、最初の一行目は無視できます。<br>前回TrainとTestを実行済みで <strong>Output</strong> フォルダに <strong>Models</strong> が出力されているものとします。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="built_in">PATH</span>=&quot;..\..\..\..\Release&quot;;<span class="variable">%PATH%</span></span><br><span class="line">cntk configFile=<span class="number">02</span>_Eval.cntk deviceId=<span class="number">0</span></span><br></pre></td></tr></table></figure><p>これで、Outputフォルダ直下に <strong>01_Conv_Eval.log</strong> と <strong>Eval.txt.OutputNodes.z</strong> が出力されます。<br>前者は、*.cntkファイルで指定した stderr で指定したファイル名のポストフィックスに実行したコマンド名を付与したファイルです。<br>今回はcommandでEvalを実行したのでこうなりました。これがあれば、コマンドプロンプトでわざわざリダイレクトする必要はありません。</p><p>後者は、今回の目的である可視化された評価結果です。outputPathで指定したものです。<br>内容は、与えられた入力が、各出力 (つまり100個の出口) で評価された場合、どの程度、その出口に近いか、つまり今回であれば、そのラベルに近いかを数値で表します。<br>数値が大きいほど、そのラベルである確率が高いです。いわゆる確信度です。</p><p>下記はExcelで集計した結果です。Eval.txt.OutputNodes.zが半角スペースで区切られているので、これをタブに変換してからExcelに張り付けています。</p><p><a href="../../../../public/2016/02/result.png"><img src="../../../../public/2016/02/result-1024x618.png" alt="評価結果"></a></p><p>前回のエラー率と同じ数値が出ています。<br>集計は、横軸からラベル番号 (0-99) を算出するために、最大値を <strong>MATCH 関数の結果 - 1</strong> を使って探してラベル番号を計算しています。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>評価もできるようになりました。<br>できれば、次は .NET から利用したりしたいです。<br>例えば、一枚の画像を指定して与えると、それの評価を出してくれる、みたいなやつ。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> %e3%83%87%e3%82%a3%e3%83%bc%e3%83%97%e3%83%a9%e3%83%bc%e3%83%8b%e3%83%b3%e3%82%b0 </category>
          
          <category> CNTK </category>
          
          <category> オープンソース </category>
          
          <category> gpupu </category>
          
          <category> ディープラーニング </category>
          
          <category> CUDA </category>
          
          <category> GPUPU </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ディープラーニング CNTK その4 自分で学習</title>
      <link href="2016/03/03/882/"/>
      <url>2016/03/03/882/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/02/29/866">前回</a>は軽くCNTKの設定の仕方について説明しました。今回は自分で学習させてみます。</p><a id="more"></a><h1 id="データの準備"><a href="#データの準備" class="headerlink" title="データの準備"></a>データの準備</h1><h2 id="CIFAR-100"><a href="#CIFAR-100" class="headerlink" title="CIFAR-100"></a>CIFAR-100</h2><p>CIFAR-100というデータを用意します。<br>データは<a href="https://www.cs.toronto.edu/~kriz/cifar.html">ここ</a>から入手できます。<br>ページ下の <strong>CIFAR-100 binary version (suitable for C programs)</strong> からダウンロードできます。<br>このデータを用意したのはCaffeを説明した際に少しだけ名前が出てきた <strong>ALXENET</strong> の考案者である <strong>Alex Krizhevsky氏</strong> です。感謝です。</p><p>CIFAR-10やMNISTをテストしているブログは多いですが、CIFAR-100をテストしている人は少ないので、これを選びました。<br>また、CNTKにもCIFAR-10しかないので、これを選んだのが理由です。</p><p>まずは、ダウンロードしたデータから教師データを作成します。</p><h2 id="教師データ作成-画像編"><a href="#教師データ作成-画像編" class="headerlink" title="教師データ作成 画像編"></a>教師データ作成 画像編</h2><p>結論から言いますと、ダウンロードしたデータはそのままでは使うことができません。<br>CIFAR-100のデータも画像そのもの、というわけではありません。</p><p>まず教師データである画像データは test.binとtrain.binにバイナリで含まれています。<br>binデータは</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;1 x coarse label&gt;&lt;1 x fine label&gt;&lt;3072 x pixel&gt;</span><br><span class="line">...</span><br><span class="line">&lt;1 x coarse label&gt;&lt;1 x fine label&gt;&lt;3072 x pixel&gt;</span><br></pre></td></tr></table></figure><p>という順でバイナリに含まれています。<br>つまり1ファイル3074バイトです。<br>coarse labelは、雑なラベル付けで、「魚」、「昆虫」とかいう大雑把なラベルです。<br>fine labelは、もっと詳細なラベル付けで、「鮫」、「蝶」とかいう具体的なラベルです。<br>0から始まる整数値でそれぞれ、coarse_label_names.txt、fine_label_names.txtの先頭の行番号-1と対応します。<br>ここで注意するのが、画像領域の3072バイトが、先頭1024バイトに赤、次の1024バイトに緑、残りに青の画素が含まれています。<br>これをBGRの順で1ピクセルずつ格納しなおす必要があります。<br>つまり</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dst は出力先のビットマップ領域</span></span><br><span class="line"><span class="comment">// src は入力元の3072バイト領域</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>; index &lt; <span class="number">1024</span>; index++)</span><br><span class="line">&#123;</span><br><span class="line">    dst[index * <span class="number">3</span> + <span class="number">2</span>] = src[<span class="number">1024</span> * <span class="number">0</span> + index];</span><br><span class="line">    dst[index * <span class="number">3</span> + <span class="number">1</span>] = src[<span class="number">1024</span> * <span class="number">1</span> + index];</span><br><span class="line">    dst[index * <span class="number">3</span> + <span class="number">0</span>] = src[<span class="number">1024</span> * <span class="number">2</span> + index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>こういう感じです。<br>これに直してビットマップで出力すると、Windowsで表示できます。<br>例えば、test.binの最初のデータは</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 49 199 196...</span><br></pre></td></tr></table></figure><p>となっています。これを画像にすると、large_natural_outdoor_scenes(10+1=11行目)のmountain(49+1=50行目)なので、</p><p><a href="../../../../public/2016/02/moutain.png"><img src="../../../../public/2016/02/moutain.png" alt="山"></a></p><p>になります (実際は32x32ですが、8倍に拡大してあります)。<br>では、画像には変換できましたが、これをCNTKが理解できる形式にする必要があります。</p><p>前回の章で説明した<strong>Reader Block</strong>で指定できる形式ですので、<strong>UCIFastReader</strong>で読み込める形式です。<br>これは、CSVと同じで、タブでバイトを1つずつ区切ります。一つの画像が終わったら改行します。<br>注意するのは改行コードですが、CR+LFにします。<br>左から順に、coarse label、fine label、1画素目の青、1画素目の緑、1画素目の赤、2画素目の青とつなげていきます。</p><p>ですので、下記のようになります</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10\t49\t249\t215...</span><br></pre></td></tr></table></figure><p>以上の変換を自動で実行するプログラムを作りました。</p><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/CNTK4">https://github.com/takuya-takeuchi/Demo/tree/master/CNTK4</a></p><p>coarse_label_names.txt、fine_label_names.txt、test.bin、train.binと同一のフォルダで <strong>CNTK4.exe</strong> を、実行すると、下記のファイルとフォルダを出力します。</p><ul><li>test.txt : テスト用のデータ</li><li>train.txt : 学習用のデータ</li><li>test : テスト用の画像データをラベルごとにフォルダわけしてBmpにしたもの</li><li>train : 学習用の画像データをラベルごとにフォルダわけしてBmpにしたもの</li><li>train_Label.txt : 学習用データのラベルのリスト</li><li>test_Label.txt : テスト用データのラベルのリスト</li></ul><h2 id="教師データ作成-ラベル編"><a href="#教師データ作成-ラベル編" class="headerlink" title="教師データ作成 ラベル編"></a>教師データ作成 ラベル編</h2><p>次はラベルです。<br>CNTKはラベルを文字として受けるとことができません。<br>ですので、fine_label_names.txt等をそのままラベルとして使うことができません。<br>今回はfine_label_names.txtをラベルとして使いますので、このファイルを上書きするか別のファイルに0から99の値を1行ごとに改行したテキストファイルを作成します。<br>改行コードですが、CR+LFにします。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">..</span><br></pre></td></tr></table></figure><p>こんな感じです。</p><h2 id="設定ファイルデータ作成"><a href="#設定ファイルデータ作成" class="headerlink" title="設定ファイルデータ作成"></a>設定ファイルデータ作成</h2><p>流石に設定ファイルは1から作るのは厳しいので、<strong>\CNTK\Examples\Image\Miscellaneous\CIFAR-10</strong> を改造します。CIFAR-10フォルダから下記のファイルをコピーして、どこか別のフォルダに移動します。<br><strong>01_Conv.cntk 01_Convolution.ndl Macros.ndl</strong> ここでは、<strong>\CNTK\Examples\Image\Miscellaneous\CIFAR-100</strong>にコピーしました。<br>まず、01_Conv.cntkを修正します。</p><ol><li>Train.reader.features.start、Test.reader.features.startを <strong>2</strong> に修正</li><li>Train.reader.labels.start、Test.reader.labels.startを <strong>1</strong> に修正</li><li>Train.reader.labels.labelDim、Test.reader.labels.labelDimを <strong>100</strong> に修正</li><li>Train.reader.labels.labelMappingFile、Test.reader.labels.labelMappingFileを  <strong>$DataDir$/fine_label_names.txt</strong> に修正</li></ol><p>Train.reader.labels.start値は、それぞれ、test.txt、train.txtの各行の左から何列目かを表しています。0基準で、今回はfine_labelを使うので、1になったというわけです。<br>Train.reader.features.start値も同様です。<br>labelDimはラベルの個数です。fine_labelは100個のラベルですので、100と入力します。<br>labelMappingFileは先ほど、0-99を入力したファイルを指定します。中止するのは、フルパスで入力してもよいですが、今回は、すべてのファイルが同一ディレクトリにある前提ですので、上のように直します。</p><p>次は、01_Convolution.ndlです。</p><ol><li>ndlMnistMacros.LabelDimを <strong>100</strong> に修正</li></ol><p>これだけです。<br>以上で終了です。<br>Macros.ndlは修正しませんが、ないと動かないと思います。</p><h1 id="学習！"><a href="#学習！" class="headerlink" title="学習！"></a>学習！</h1><p><strong>CNTK\Examples\Image\Miscellaneous\CIFAR-100</strong>フォルダに、教師データ作成の段で出力されたファイルと修正したラベルファイルをコピーします。<br>現時点で、</p><ul><li>01_Conv.cntk</li><li>01_Convolution.ndl</li><li>fine_label_names.txt</li><li>Macros.ndl</li><li>test.txt</li><li>train.txt</li></ul><p>が存在します。<br>いよいよ実行します。<br>コマンドプロンプトで、CNTK.slnのあるディレクトリから</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="built_in">PATH</span>=&quot;<span class="variable">%CD%</span>\Release&quot;;<span class="variable">%PATH%</span></span><br><span class="line"><span class="built_in">cd</span> Examples\Image\Miscellaneous\CIFAR-<span class="number">100</span></span><br><span class="line">CNTK configFile=<span class="number">01</span>_Conv.cntk deviceId=<span class="number">0</span> <span class="number">1</span>&gt; out.txt <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure><p>のようにたたきます。<br>しばらく待つと <strong>CNTK\Examples\Image\Miscellaneous\CIFAR-100\Output\01_Conv_Train_Test.log</strong> に結果が出力されます。<br>エラーがなければ末尾に <strong>COMPLETED</strong> と表示されます。<br>GPUを指定しましたが、私の環境で9分強かかりました。<br>また、学習済みモデルが <strong>CNTK\Examples\Image\Miscellaneous\CIFAR-100\Output\Models</strong> に結果が出力されます。</p><h1 id="ところがどっこい"><a href="#ところがどっこい" class="headerlink" title="ところがどっこい"></a>ところがどっこい</h1><h2 id="エラー-0"><a href="#エラー-0" class="headerlink" title="エラー 0"></a>エラー 0</h2><p>出力のログを見ると、末尾にエラー率等の情報が出ます。<br>ですが、なぜか0。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Minibatch[<span class="number">1</span>-<span class="number">500</span>]: Samples Seen = <span class="number">8000</span>    err: ErrorPrediction/Sample = <span class="number">0</span>    ce: CrossEntropyWithSoftmax/Sample = <span class="number">0</span></span><br><span class="line">Minibatch[<span class="number">501</span>-<span class="number">625</span>]: Samples Seen = <span class="number">2000</span>    err: ErrorPrediction/Sample = <span class="number">0</span>    ce: CrossEntropyWithSoftmax/Sample = <span class="number">0</span></span><br><span class="line">Final Results: Minibatch[<span class="number">1</span>-<span class="number">625</span>]: Samples Seen = <span class="number">10000</span>    err: ErrorPrediction/Sample = <span class="number">0</span>    ce: CrossEntropyWithSoftmax/Sample = <span class="number">0</span>    Perplexity = <span class="number">1</span></span><br><span class="line">COMPLETED</span><br></pre></td></tr></table></figure><p>どう考えてもありえません。<br>100%の認識率などあり得ません。</p><p>なので、ネットワーク設定がおかしいのか？と思いいろいろ見直しました。<br>それでもわからない。</p><p>結論から言えば、GitHubでコンパイル済みのバイナリを使ったらうまくいきました。<br>下記はその結果です。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Allocating matrices <span class="keyword">for</span> forward and/or backward propagation.</span><br><span class="line"><span class="function">UCIFastReader: <span class="title">Starting</span> <span class="title">at</span> <span class="title">epoch</span> 0, <span class="title">counting</span> <span class="title">lines</span> <span class="title">to</span> <span class="title">determine</span> <span class="title">record</span> <span class="title">count</span>...</span></span><br><span class="line"><span class="function"> 10000 <span class="title">records</span> <span class="title">found</span>.</span></span><br><span class="line"><span class="function"><span class="title">starting</span> <span class="title">epoch</span> 0 <span class="title">at</span> <span class="title">record</span> <span class="title">count</span> 0, <span class="title">and</span> <span class="title">file</span> <span class="title">position</span> 0</span></span><br><span class="line"><span class="function"><span class="title">already</span> <span class="title">there</span> <span class="title">from</span> <span class="title">last</span> <span class="title">epoch</span></span></span><br><span class="line"><span class="function"><span class="title">RandomOrdering</span>: 1989 <span class="title">retries</span> <span class="title">for</span> 10000 <span class="title">elements</span> (19.9%) <span class="title">to</span> <span class="title">ensure</span> <span class="title">window</span> <span class="title">condition</span></span></span><br><span class="line"><span class="function"><span class="title">RandomOrdering</span>: <span class="title">recached</span> <span class="title">sequence</span> <span class="title">for</span> <span class="title">seed</span> 0: 2334, 3830, ...</span></span><br><span class="line"><span class="function"><span class="title">Minibatch</span>[1-500]: <span class="title">Samples</span> <span class="title">Seen</span> = 8000    <span class="title">Err</span>: <span class="title">ErrorPrediction</span>/<span class="title">Sample</span> = 0.58    <span class="title">CE</span>: <span class="title">CrossEntropyWithSoftmax</span>/<span class="title">Sample</span> = 2.2598516</span></span><br><span class="line"><span class="function"><span class="title">Minibatch</span>[501-625]: <span class="title">Samples</span> <span class="title">Seen</span> = 2000    <span class="title">Err</span>: <span class="title">ErrorPrediction</span>/<span class="title">Sample</span> = 0.5805    <span class="title">CE</span>: <span class="title">CrossEntropyWithSoftmax</span>/<span class="title">Sample</span> = 2.2639628</span></span><br><span class="line"><span class="function"><span class="title">Final</span> <span class="title">Results</span>: <span class="title">Minibatch</span>[1-625]: <span class="title">Samples</span> <span class="title">Seen</span> = 10000    <span class="title">Err</span>: <span class="title">ErrorPrediction</span>/<span class="title">Sample</span> = 0.5801    <span class="title">CE</span>: <span class="title">CrossEntropyWithSoftmax</span>/<span class="title">Sample</span> = 2.2606739    <span class="title">Perplexity</span> = 9.5895492</span></span><br><span class="line"><span class="function"><span class="title">COMPLETED</span></span></span><br></pre></td></tr></table></figure><p>エラー率58%。よくないですが、まぁこんなものでしょう。</p><p>なぜこうなったし。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>ついに自分で学習できました。<br>が、ビルドしたものがおかしいという悲劇。CUDA 7.5をつかったのがダメだったのか？ 次回はお待ちかねの評価を実施します。</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/CNTK4">https://github.com/takuya-takeuchi/Demo/tree/master/CNTK4</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> %e3%83%87%e3%82%a3%e3%83%bc%e3%83%97%e3%83%a9%e3%83%bc%e3%83%8b%e3%83%b3%e3%82%b0 </category>
          
          <category> CNTK </category>
          
          <category> オープンソース </category>
          
          <category> gpupu </category>
          
          <category> ディープラーニング </category>
          
          <category> CUDA </category>
          
          <category> GPUPU </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ディープラーニング CNTK その3 説明</title>
      <link href="2016/02/29/866/"/>
      <url>2016/02/29/866/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/02/27/861">前回</a>はCNTK付属のサンプルを使って、テストをしてみました。今回は、CNTKを自分で使うための説明です。基本公式ページの訳ですが、日本語に直したほうがわかりやすいので。</p><a id="more"></a><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><h2 id="前書き"><a href="#前書き" class="headerlink" title="前書き"></a>前書き</h2><p>このページは <a href="https://github.com/Microsoft/CNTK/wiki/CNTK-usage-overview">CNTK usage overview</a> を訳しただけのページです。<br>ですので、訳がおかしかったり間違いがあるかもしれません。<br>それによって生じた損害は私は負えません。あしからず。</p><h2 id="CNTK-usage-overview-CNTK-使い方-概要"><a href="#CNTK-usage-overview-CNTK-使い方-概要" class="headerlink" title="CNTK usage overview (CNTK 使い方 概要)"></a>CNTK usage overview (CNTK 使い方 概要)</h2><blockquote><p>To use CNTK you need to either download the executable binaries or download the source code and compile it on your machine (details). There are three main tasks (or actions) that are supported by CNTK:</p><ul><li><strong>Train</strong> - Define a network and train it to produce a trained model using training data</li><li><strong>Evaluate</strong> - Test a trained model to assess its performance using test data</li><li><strong>Deploy</strong> - Use a trained model, e.g. in your own solution, to classify new instances</li></ul><p>A brief overview for each of these tasks is given below and pointers to a more detailed description are provided. In addition there are other tasks that CNTK supports such as <strong>edit</strong> existing models and <strong>write</strong> node outputs to a file. A description of these is provided in the Advanced Topics section on the Top-level commands page.</p></blockquote><h4 id="訳："><a href="#訳：" class="headerlink" title="訳："></a>訳：</h4><p>CNTKを使うためには、実行可能バイナリのダウンロードまたはソースコードのダウンロードとマシン上でのコンパイルが必要である。CNTKは3つの主要なタスク (またはアクション) をサポートしている。</p><ul><li><strong>学習</strong> - ネットワークの定義、そして教師データを用いて学習済みモデルを生成するための学習</li><li><strong>評価</strong> - テストデータ用いて性能を査定するために学習済みモデルをテストすること</li><li><strong>デプロイ</strong> - 学習済みモデルを使用すること。例えば、自身のソリューションにおいて、新しいインスタンスを分類すること</li></ul><p>各タスクの詳しい概要については下記に示してあり、より詳細な説明がポインタ (訳注：おそらくリンク) で提供している。それに加えて、CNTKは既存のモデルの<strong>編集</strong>とノードをファイルへ出力する<strong>書き出し</strong>をサポートしている。これらの詳細はトップレベルコマンドページの高度なトピックスで提供している。</p><h2 id="Training-a-model-using-CNTK-CNTKでモデルの学習"><a href="#Training-a-model-using-CNTK-CNTKでモデルの学習" class="headerlink" title="Training a model using CNTK (CNTKでモデルの学習)"></a>Training a model using CNTK (CNTKでモデルの学習)</h2><blockquote><p>In the following we use the CNTK configuration and results from the MNIST example, in particular the configuration ‘01_OneHidden.cntk’ (see Image/MNIST and 01_OneHidden.cntk for full details). To train a model using CNTK you need to provide a configuration file as the first argument when calling the CNTK executable, cntk configFile=01_OneHidden.cntk in our example (see also Config file overview for more details on config files). The following snippet provides an overview of the config file contents that are relevant for training.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">ModelDir &#x3D; &quot;$OutputDir$&#x2F;Models&quot;</span><br><span class="line">deviceId &#x3D; 0</span><br><span class="line">command &#x3D; MNISTtrain</span><br><span class="line"></span><br><span class="line">modelPath &#x3D; &quot;$ModelDir$&#x2F;01_OneHidden&quot;</span><br><span class="line"></span><br><span class="line">MNISTtrain &#x3D; [</span><br><span class="line">    action &#x3D; &quot;train&quot;</span><br><span class="line"></span><br><span class="line">    NDLNetworkBuilder &#x3D; [</span><br><span class="line">        networkDescription &#x3D; &quot;$ConfigDir$&#x2F;01_OneHidden.ndl&quot;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    SGD &#x3D; [</span><br><span class="line">        ...</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    reader &#x3D; [</span><br><span class="line">        readerType &#x3D; &quot;UCIFastReader&quot;</span><br><span class="line">        file &#x3D; &quot;$DataDir$&#x2F;Train-28x28.txt&quot;</span><br><span class="line">        ...</span><br><span class="line">    ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>The above code snippet defines a command called MNISTtrain with action = “train”. Other supported actions are for example test or write. The deviceId parameter specifies whether to use CPU or GPU. When set to auto CNTK picks the best available device. Set it to -1 to use the CPU or to a value &gt;=0 to use a specific GPU. The modelPath defines where to store the intermediate and final trained models. In this example it uses the ModelDir variable defined at the beginning of the configuration file. The three main configuration blocks for training define the network itself and the parameters for the training algorithm and the data reader.</p><ul><li>Network builder - here you define the topology and the details of the network such as the size and number of layers and the type of nodes. You can use the Simple Network Builder or the NDL Network Builder. Please refer to the corresponding Wiki pages for details.</li><li>SGD - this block lets you parameterize the training algorithm (stochastic gradient descent). Options include using momentum, adaptive learning rate, adaptive minibatch size or parallel training. See SGD block for more details.</li><li>reader - the reader block defines which reader to use and where the corresponding input files are. CNTK provides several data readers for different formats and tasks (see Reader block).</li></ul><p>Finally, the line command = “MNISTtrain” specifies which of the defined tasks to execute. To execute several tasks consecutively, e.g. training and evaluation, simply add more tasks to the command separated by a colon: command = “MNISTtrain:MNISTtest”</p></blockquote><h4 id="訳：-1"><a href="#訳：-1" class="headerlink" title="訳："></a>訳：</h4><p>下記に、CNTKで使用する設定とMNIST (訳注：Mixed National Institute of Standards and Technology、つまりアメリカ国立標準技術研究所がミックスしたもの) のサンプルの結果、特に 01_OneHidden.cntk (詳細は<a href="https://github.com/Microsoft/CNTK/blob/master/Examples/Image/MNIST/README.md">Image/MNIST</a> と <a href="https://github.com/Microsoft/CNTK/blob/master/Examples/Image/MNIST/Config/01_OneHidden.cntk">01_OneHidden.cntk</a> を) を示す。<br>CNTKでモデルを学習するために、CNTK実行ファイルを呼び出すとき;cntk configFile=01_OneHidden.cntk に渡した第一引数である設定ファイルを渡す必要がある。下記のスニペットで、トレーニングための正しい設定ファイルの内容の概要を示す。</p><p>(訳注：ここのコードは原文にあるので省略)</p><p>上のコードスニペットは action = “train” を備えた MNISTTrain と呼ばれるコマンドを定義している。ほかのコマンド、例えば test または write もサポートしています。<br>deviceId パラメータはCPUまたはGPUを使うかどうかを指定します。auto をセットした時は CNTK が利用可能な最適なデバイスを採用します。-1 をセットすると、CPU を使用し、0 以上の値を設定することで GPU を使います。modelPath は中間、最終学習済みモデルの保存先を定義します。サンプルでは、設定ファイルの先頭で定義されている ModelDir 変数を使っています。<br>学習のための主な3つの設定ブロックは、ネットワークの定義、学習アルゴリズムのためのパラメータとデータリーダーを定義します。</p><ul><li>ネットワークビルダー - ここは、トポロジーと、サイズやレイヤーの枚数のようなネットワークの詳細と、ノードの種別を定義します。<a href="https://github.com/Microsoft/CNTK/wiki/Simple-Network-Builder">Simple Network Builder</a> または <a href="https://github.com/Microsoft/CNTK/wiki/NDL-Network-Builder">NDL Network Builder</a> を使うことができます。詳細は対応する Wiki ページを。</li><li>SGD - このブロックは学習アルゴリズム (stochastic gradient descent : 確率的勾配降下法) をパラメータ化させます。オプションはモメンタム、適応的学習率、適応的ミニバッチサイズ、または並列学習です。詳細は <a href="https://github.com/Microsoft/CNTK/wiki/SGD-block">SGD bock</a> を。</li><li>リーダー - リーダーブロックは、どのリーダーを使用するか、対応する入力ファイルがどこにあるかを定義します。CNTKは、異なるフォーマットとタスクのために、いくつかのデータリーダーを提供しています。(詳細は <a href="https://github.com/Microsoft/CNTK/wiki/Reader-block">Reader block</a>).</li></ul><p>最後に、command = “MNISTtrain” 行は、実行する定義済みのタスクを指定します。連続していくつかのテスクを実行するためには、例えば、学習と評価の場合、単純に以降のタスクを “;” で区切って、コマンドに追加します。command = “MNISTtrain:MNISTtest”。</p><h2 id="Evaluating-a-trained-model-学習済みモデルの評価"><a href="#Evaluating-a-trained-model-学習済みモデルの評価" class="headerlink" title="Evaluating a trained model (学習済みモデルの評価)"></a>Evaluating a trained model (学習済みモデルの評価)</h2><blockquote><p>To evaluate a trained model you can use the eval or test command (see also Train, Test, Eval for full details). The corresponding configuration in the MNIST 01_OneHidden.cntk example looks as follows.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MNISTtest &#x3D; [</span><br><span class="line">    action &#x3D; &quot;test&quot;</span><br><span class="line">    minibatchSize &#x3D; 16</span><br><span class="line"></span><br><span class="line">    reader &#x3D; [</span><br><span class="line">        readerType &#x3D; &quot;UCIFastReader&quot;</span><br><span class="line">        file &#x3D; &quot;$DataDir$&#x2F;Test-28x28.txt&quot;</span><br><span class="line">        ...</span><br><span class="line">    ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>The MNISTtest block uses action = “test”. For the test action you need to define a model that should be used for testing using the modelPath parameter. In this example the modelPath is not defined inside the MNISTtest block but on the top level (see training part above) and is used by both the train and test actions. Inside the reader block you specify the data file that should be used for testing, Test-28x28.txt in the example. Finally, you have to set command = MNISTtest and run cntk configFile=01_OneHidden.cntk to execute the testing. The result on the command line is:</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Final Results: Minibatch[1-625]: Samples Seen = 10000    err: ErrorPrediction/Sample = 0.0239    ce: CrossEntropyWithSoftmax/Sample = 0.076812531    Perplexity = 1.0798396</span><br><span class="line">COMPLETED</span><br></pre></td></tr></table></figure><h4 id="訳：-2"><a href="#訳：-2" class="headerlink" title="訳："></a>訳：</h4><p>学習済みモデルを評価するために、evalまたはtestコマンドを使うことができます。(詳細は <a href="https://github.com/Microsoft/CNTK/wiki/Train%2C-Test%2C-Eval">Train, Test, Eval</a>)。下記のMNIST <a href="https://github.com/Microsoft/CNTK/blob/master/Examples/Image/MNIST/Config/01_OneHidden.cntk">01_OneHidden.cntk</a> サンプル内の対応する設定を見ます。</p><p>(訳注：ここのコードは原文にあるので省略)</p><p>MNISTtest ブロックでは、action = “test” を使います。test アクションでは、modelPath パラメータを使ってテストのために使用するモデルを定義する必要があります。このサンプルで、modelPath はMNISTTest ブロック内ではなくトップレベルで定義され (Training a model using CNTK を見てください)、trainとtestコマンドの両方が使用されています。readerブロック内では、テストに使用されるデータファイル;サンプルではTest-28x28.txt、を指定します。最後に、command = MNISTtestの設定と、テストを実行するために cntk configFile=01_OneHidden.cntk を走らせなくてはなりません。コマンドラインの結果は (訳注：ここのコードは原文にあるので省略)</p><h2 id="Using-a-trained-model-in-your-own-solution-学習済みモデルの評価"><a href="#Using-a-trained-model-in-your-own-solution-学習済みモデルの評価" class="headerlink" title="Using a trained model in your own solution (学習済みモデルの評価)"></a>Using a trained model in your own solution (学習済みモデルの評価)</h2><blockquote><p>To use a trained CNTK model in your own solution you can either use the EvalDll from C++ or wrap the EvalDll to call it from other languages. An example for a .NET wrapper and a C# client is provided in Source/Extensibility/CSEvalClient. The example shows how to use the trained MNIST 01_OneHidden model to classify an image. The following code snippet is taken from Program.cs in Source/Extensibility/CSEvalClient.</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">Dictionary&lt;<span class="keyword">string</span>, List&lt;<span class="keyword">float</span>&gt;&gt; outputs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> model = <span class="keyword">new</span> IEvaluateModelManagedF())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Initialize model evaluator</span></span><br><span class="line">    <span class="keyword">string</span> config = GetConfig();</span><br><span class="line">    model.Init(config);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Load model</span></span><br><span class="line">    <span class="keyword">string</span> modelFilePath = Path.Combine(Environment.CurrentDirectory, <span class="string">@&quot;..\Output\Models\01_OneHidden&quot;</span>);</span><br><span class="line">    model.LoadModel(modelFilePath);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate random input values in the appropriate structure and size</span></span><br><span class="line">    <span class="keyword">var</span> inputs = GetDictionary(<span class="string">&quot;features&quot;</span>, <span class="number">28</span>*<span class="number">28</span>, <span class="number">255</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We can call the evaluate method and get back the results (single layer)...</span></span><br><span class="line">    <span class="comment">// List&lt;float&gt; outputList = model.Evaluate(inputs, &quot;ol.z&quot;, 10);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ... or we can preallocate the structure and pass it in (multiple output layers)</span></span><br><span class="line">    outputs = GetDictionary(<span class="string">&quot;ol.z&quot;</span>, <span class="number">10</span>, <span class="number">1</span>);</span><br><span class="line">    model.Evaluate(inputs, outputs);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p>See Program.cs for full details. If you get an exception Cannot move externally owned matrices to the preferred device. please specify deviceId=-1 in the config file.</p></blockquote><h4 id="訳：-3"><a href="#訳：-3" class="headerlink" title="訳："></a>訳：</h4><p>学習済みのCNTKモデルをソリューションで使用するために、C++から <a href="https://github.com/Microsoft/CNTK/tree/master/Source/EvalDll">EvalDll</a>、または 他の言語から呼び出すためにEvalDll をラップしたものを使うことができます。サンプルのために、.NETラッパーとC#クライアントが <a href="https://github.com/Microsoft/CNTK/tree/master/Source/Extensibility/CSEvalClient">Source/Extensibility/CSEvalClient</a> で提供されています。サンプルでは、学習済みのMNIST 01_OneHidden モデルを画像の分類のためにどのように使うかを示してします。下記のコードスニペットは <a href="https://github.com/Microsoft/CNTK/tree/master/Source/Extensibility/CSEvalClient">Source/Extensibility/CSEvalClient</a> 内の、Program.cs です。</p><p>(訳注：ここのコードは原文にあるので省略)</p><p>詳細は、<a href="https://github.com/Microsoft/CNTK/blob/master/Source/Extensibility/CSEvalClient/Program.cs">Program.cs</a> を。もし、Cannot move externally owned matrices to the preferred device (訳注 : 訳は「優先デバイスに所有権のある行列を外部に移動することはできません」ですが、CNTKの内部例外は日本語にならないので、このままにしました) という例外を受け取った場合は、deviceID=-1 を設定ファイルで指定してください。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>訳のレベルが低すぎるのはご愛嬌。<br>.NETのラッパーがサンプルで提供されていることが発覚しました。<br>これは面白くなってきました。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> %e3%83%87%e3%82%a3%e3%83%bc%e3%83%97%e3%83%a9%e3%83%bc%e3%83%8b%e3%83%b3%e3%82%b0 </category>
          
          <category> CNTK </category>
          
          <category> オープンソース </category>
          
          <category> gpupu </category>
          
          <category> ディープラーニング </category>
          
          <category> CUDA </category>
          
          <category> GPUPU </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ディープラーニング CNTK その2 テスト</title>
      <link href="2016/02/27/861/"/>
      <url>2016/02/27/861/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/02/27/845">前回</a>はCNTKをソースコードからビルドしました。今回は実際にテストしてみます。</p><a id="more"></a><h1 id="テスト"><a href="#テスト" class="headerlink" title="テスト"></a>テスト</h1><h2 id="まず実行"><a href="#まず実行" class="headerlink" title="まず実行"></a>まず実行</h2><p>Microsoftが動作検証用にサンプルをCNTKに置いてくれていますので既にクローン済みです。<br>サンプルは <strong>CNTK/Examples/Other/Simple2d/</strong> になります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/Microsoft/CNTK/tree/master/Examples/Other/Simple2d</span><br></pre></td></tr></table></figure><p>このサンプルについて、</p><blockquote><p>This example trains a simple network and can be directed to use either CPU or GPU, which helps quickly ensure that CNTK is functioning properly.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">訳：このサンプルは単純なネットワークの学習、並びにCPUとGPUのどちらを使うかを指示しCNTKが正しく動作することを簡単にチェックします。</span><br></pre></td></tr></table></figure><p>とあります。検証用ですね、まさに。<br>次にCNTKのフォルダに移動します。<strong>CNTK.sln</strong> が存在するディレクトリです。<br>その後、次のコマンドをたたくと、テストが実行されます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> PATH=<span class="string">&quot;%CD%\Release&quot;</span>;%PATH%</span><br><span class="line"><span class="built_in">cd</span> Examples\Other\Simple2d\Data</span><br><span class="line">cntk configFile=../Config/Simple.cntk</span><br></pre></td></tr></table></figure><p>実行後、エラーがなければ <strong>COMPLETED</strong> の文字が出るはずです。</p><p><a href="../../../../public/2016/02/test-1.png"><img src="../../../../public/2016/02/test-1-300x218.png" alt="テスト"></a></p><p>学習が完了したので、次にもう一度学習をしたい場合は、学習済みのモデル、つまり今回の出力を削除する必要があります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del ..\Output\Models\*.*</span><br></pre></td></tr></table></figure><h2 id="GPUを使う"><a href="#GPUを使う" class="headerlink" title="GPUを使う"></a>GPUを使う</h2><p>今度GPUを使ってみます。前段では使っていなかったようで、GPUを使うように指示したビルドでも、明示的に指示する必要があるようです。<br>まずは、出力を削除してください。<br>次に下記のコマンドをたたきます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cntk configFile=../Config/Simple.cntk deviceId=auto 1&gt; out.txt 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p>するとOut.txtに出力結果がリダイレクトされるので中を確認します。<br>テキスト中に</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SimpleNetworkBuilder Using GPU 0</span><br></pre></td></tr></table></figure><p>というのがあるはずです。ただし、0の部分は環境依存です。<br>通常この部分は</p><ul><li>-1 : CPUを使用。デフォルト値</li><li>0以上 : GPUを使用。deviceIdに対応した値で例えば deviceId=0ならGPU 0 を示すとのこと。複数台のGPUを搭載している場合でしょう。</li><li>auto : GPUを自動選択</li></ul><p>ということです。<br>私の環境なら、</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cntk configFile=../Config/Simple.cntk deviceId=0 1&gt; out.txt 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p>は、先のコマンドと同一の結果を出します。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>無事に動いていることが確認できました。<br>折角Windowsで動かしたのだから、自分でネットワークを構築したりして学習させてみたいです。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> %e3%83%87%e3%82%a3%e3%83%bc%e3%83%97%e3%83%a9%e3%83%bc%e3%83%8b%e3%83%b3%e3%82%b0 </category>
          
          <category> CNTK </category>
          
          <category> オープンソース </category>
          
          <category> gpupu </category>
          
          <category> ディープラーニング </category>
          
          <category> CUDA </category>
          
          <category> GPUPU </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ディープラーニング CNTK その1 環境構築</title>
      <link href="2016/02/27/845/"/>
      <url>2016/02/27/845/</url>
      
        <content type="html"><![CDATA[<p>前回はUbuntuからディープラーニングのフレームワークの一つである <strong>Caffe</strong> をインストールしてテストしました。でもやっぱりWindowsで実行したいよね、ということで別のフレームワークを導入します。<br>別にLinuxが面倒だから、という理由ではないです。ﾎﾝﾄｳﾀﾞﾖ。</p><a id="more"></a><h1 id="CNTK"><a href="#CNTK" class="headerlink" title="CNTK"></a>CNTK</h1><p>Microsoftが公開した、オープンソースで開発が進んでいるディープラーニングのフレームワークです。<br><strong>CNTK</strong> は、公式によれば、<strong>Computational Network Toolkit</strong>とのこと。</p><p>公式ページは<a href="https://github.com/Microsoft/CNTK">Github</a>です。</p><h1 id="環境構築"><a href="#環境構築" class="headerlink" title="環境構築"></a>環境構築</h1><h2 id="ソースコード"><a href="#ソースコード" class="headerlink" title="ソースコード"></a>ソースコード</h2><p>流石Microsoft、というかバイナリ版も用意していますが、ここはソースコードからビルドします。<br>公式ページに<a href="https://github.com/Microsoft/CNTK/wiki/Setup-CNTK-on-Windows">説明</a>がすべて書かれています。が英語。いや、別に大した英語でもないのでビビる必要はないです。<br>ただ、注意として、<strong>64bitOS限定</strong>です。</p><p>まずはGitクライアントを使ってCloneします。<br>私は <strong>TortoiseGit</strong> を使ってCloneしましたが、お好みでどうぞ。<br>コマンドなら</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/Microsoft/CNTK</span><br></pre></td></tr></table></figure><p>です。好きなディレクトリでどうぞ。</p><h2 id="Visual-Studio-2013"><a href="#Visual-Studio-2013" class="headerlink" title="Visual Studio 2013"></a>Visual Studio 2013</h2><p>バージョン指定があるようです。<br>Visual Studio 2013 Update 5またはそれ以降、とあります。<br>Update5以降を指すようですが、現時点ではありません。</p><h2 id="CUDA-7-0"><a href="#CUDA-7-0" class="headerlink" title="CUDA 7.0"></a>CUDA 7.0</h2><p><a href="https://developer.nvidia.com/cuda-toolkit-70">NVidiaのサイト</a>から <strong>CUDA 7.0</strong> をダウンロードします。<br>インストールは簡単ですので割愛します。<br>CUDA 7.5でしたら<a href="https://taktak.jp/2016/02/11/713">以前の記事</a>にインストール手順があります。<br>インストール完了後</p><ul><li>CUDA_PATH=C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.0</li><li>CUDA_PATH_V7_0=C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.0</li></ul><p>が環境変数に追加されたことを確認。<br>インストール先に応じて変わりますのでご注意。</p><p>CUDA 7.5でも動く、みたいなことがIssueにあがっています。<br>7.5をすでにインストールしているので、それを利用します。</p><h2 id="NVidia-CUB"><a href="#NVidia-CUB" class="headerlink" title="NVidia CUB"></a>NVidia CUB</h2><p>NVIDIAによれば、CUBは <strong>CUDA UnBound</strong> とのこと。</p><blockquote><p>CUB provides state-of-the-art, reusable software components for every layer of the CUDA programming model:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">訳:CUBは最新式で、再利用可能なソフトウェアコンポーネントをCUDAプログラミングモデルのすべてのレイヤーに提供します。</span><br></pre></td></tr></table></figure><p>とあります。<br>最新版は1.5.1ですが、説明ページは1.4.1を案内していますので従います。<br><a href="https://github.com/NVlabs/cub/archive/1.4.1.zip">ここ</a>からです。</p><p>入手後、任意のフォルダに展開してパスを通します。<br>展開したフォルダに移動して、下記のコマンドを実行すればパスが通ります。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setx CUB_PATH &quot;<span class="variable">%CD%</span>&quot;</span><br></pre></td></tr></table></figure><p>下記のような感じになればOK。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CUB_PATH=c:\src\cub-<span class="number">1</span>.<span class="number">4</span>.<span class="number">1</span> </span><br></pre></td></tr></table></figure><h2 id="NVIDIA-CUDA-Deep-Neural-Network-library-cuDNN"><a href="#NVIDIA-CUDA-Deep-Neural-Network-library-cuDNN" class="headerlink" title="NVIDIA CUDA Deep Neural Network library (cuDNN)"></a>NVIDIA CUDA Deep Neural Network library (cuDNN)</h2><p>これもバージョン指定があります。<br><a href="http://developer.download.nvidia.com/compute/redist/cudnn/v4/cudnn-7.0-win-x64-v4.0-rc.zip">ここ</a>から入手。</p><p>先ほどと同じく、入手後、任意のフォルダに展開してパスを通します。<br>展開したフォルダに移動して、下記のコマンドを実行すればパスが通ります。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setx CUDNN_PATH &quot;<span class="variable">%CD%</span>&quot;</span><br></pre></td></tr></table></figure><p>下記のような感じになればOK。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CUDNN_PATH=C:\NVIDIA\cudnn-<span class="number">4</span>.<span class="number">0</span>\cuda </span><br></pre></td></tr></table></figure><h2 id="Boost"><a href="#Boost" class="headerlink" title="Boost"></a>Boost</h2><p>説明不要の有名ライブラリ群。<br>ですが、CNTKはユニットテストに使っている模様。<br>またバージョン指定で、1.59が必要で, <strong>Visual Studio 12 (2013)</strong> でビルドされたバイナリが必要になります。<br><a href="http://sourceforge.net/projects/boost/files/boost-binaries/1.59.0/boost_1_59_0-msvc-12.0-64.exe/download">Sourceforge</a>から入手。<br>入手後、インストールを実行します。<br>インストール先のフォルダに移動して、下記のコマンドを実行すればパスが通ります。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setx BOOST_INCLUDE_PATH &quot;<span class="variable">%CD%</span>&quot;</span><br><span class="line">setx BOOST_LIB_PATH &quot;<span class="variable">%CD%</span>\lib64-msvc-<span class="number">12</span>.<span class="number">0</span>&quot;</span><br></pre></td></tr></table></figure><p>下記のような感じになればOK。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BOOST_INCLUDE_PATH=c:\local\boost_1_59_0</span><br><span class="line">BOOST_LIB_PATH=c:\local\boost_1_59_0\lib64-msvc-<span class="number">12</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="ACML-またはMKL"><a href="#ACML-またはMKL" class="headerlink" title="ACML (またはMKL)"></a>ACML (またはMKL)</h2><p><strong>AMD Core Math Library</strong>です。<br>対して MKL は Intelの <strong>Math Kernel Library</strong> です。<br>Caffe 環境構築の際、BLAS (線形代数ライブラリ) を入手する際のオプションでした。MKLは有償なので、ACMLを使います。</p><p>ACMLは<a href="http://developer.amd.com/tools/cpu-development/amd-core-math-library-acml/acml-downloads-resources/">AMD website</a>から入手します。<br>たくさんありますが、利用するのは <strong>acml5.3.1-ifort64.exe</strong> のようなファイルです。<br>なので、<strong>Inter Fortran</strong> というのを使います。5.3.1以降を使います。<br>今回は6.1.0を使います。</p><p>先ほどと同じく、入手後、任意のフォルダに展開してパスを通します。<br>展開したフォルダに移動して、下記のコマンドを実行すればパスが通ります。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setx ACML_PATH &quot;<span class="variable">%CD%</span>/ifort64_mp&quot;</span><br></pre></td></tr></table></figure><p>下記のような感じになればOK。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ACML_PATH=C:\AMD\acml5.<span class="number">3</span>.<span class="number">1</span>\ifort64_mp </span><br></pre></td></tr></table></figure><h2 id="Microsoft-MPI"><a href="#Microsoft-MPI" class="headerlink" title="Microsoft MPI"></a>Microsoft MPI</h2><p>MPI は <strong>Message Passing Interface</strong> とのこと。<br>バージョン7以降が必要。<br><a href="https://msdn.microsoft.com/en-us/library/bb524831(v=vs.85).aspx">Microsoft Developer Network</a>から入手。</p><p>SDKとランタイムが必要です。それぞれインストーラは、<strong>msmpisdk.msi</strong>、<strong>MSMpiSetup.exe</strong> になります。</p><p>インストールは簡単なので割愛。</p><h2 id="OpenCV"><a href="#OpenCV" class="headerlink" title="OpenCV"></a>OpenCV</h2><p>こちらも説明不要なコンピュータビジョン向けライブラリ。<br>バージョン3.0.0が必要。<br><a href="http://opencv.org/downloads.html">ここ</a>から入手。</p><p>インストール後、環境変数 <strong>OPENCV_PATH</strong> を設定します。<br>OpenCVのbuildフォルダにパスを通します。buildフォルダに移動して、下記のコマンドを実行すればパスが通ります。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setx OPENCV_PATH &quot;<span class="variable">%CD%</span>&quot;</span><br></pre></td></tr></table></figure><p>下記のような感じになればOK。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OPENCV_PATH=C:\src\opencv\build </span><br></pre></td></tr></table></figure><h2 id="ビルド-事前準備"><a href="#ビルド-事前準備" class="headerlink" title="ビルド (事前準備)"></a>ビルド (事前準備)</h2><p>CUDA 7.0をインストールしている場合は、ここはスキップです。<br>CUDA 7.5を利用する場合は、プロジェクトファイルに記載してある各種参照を7.5用に書き換える必要があります。<br>書き換え対象は、</p><ul><li>Source\ActionsLib\ActionsLib.vcxproj</li><li>Source\CNTK\CNTK.vcxproj</li><li>Source\ComputationNetworkLib\ComputationNetworkLib.vcxproj</li><li>Source\EvalDll\EvalDll.vcxproj</li><li>Source\Math\Math.vcxproj</li><li>Source\Math\MathCUDA.vcxproj</li><li>Source\SGDLib\SGDLib.vcxproj</li><li>Tests\UnitTests\MathPerformanceTests\MathPerformanceTests.vcxproj</li><li>Tests\UnitTests\MathTests\MathTests.vcxproj</li></ul><p>になり、 </p><ul><li>cu***64_70.dll</li><li>CUDA 7.0.props </li><li>CUDA_PATH_V7_0</li></ul><p>という単語を書き換えます。<br>Grepで、</p><ul><li><strong>7.0</strong> を <strong>7.5</strong></li><li><strong>_70</strong> を <strong>_75</strong></li><li><strong>_V7_0</strong> を <strong>_V7_5</strong></li></ul><p>に置換すればOKです。</p><h2 id="ビルド"><a href="#ビルド" class="headerlink" title="ビルド"></a>ビルド</h2><p><strong>CNTK.sln</strong> を Visual Studio 2013 で開きます。<br>ソリューション構成は <strong>Debug</strong>、<strong>Debug_CpuOnly</strong>、<strong>Release</strong>、<strong>Release_CpuOnly</strong> の4つです。<br>お好みの構成でビルドしてください。</p><p>ですが、ビルドに失敗します。<br>下記は<strong>Release_CpuOnly</strong>でビルドした際のスクリーンショットです。<br><a href="../../../../public/2016/02/1-6.png"><img src="../../../../public/2016/02/1-6-300x63.png" alt="ビルドエラー"></a></p><p>とあります。Shift-Jisが不味いのでUTF-8に変換します。<br>ですので、面倒ですが、下記のファイルのエンコードをUTF8に変換します。</p><ul><li>C:\Program Files (x86)\Microsoft SDKs\MPI\Include\mpi.h</li><li>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5\Include\CUDA_runtime.h</li><li>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5\Include\CUDA_runtime_api.h</li><li>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5\Include\device_double_functions.h</li><li>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5\Include\device_functions.h</li><li>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5\Include\device_functions_decls.h</li><li>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5\Include\math_functions.h</li><li>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5\Include\sm_20_intrinsics.h</li><li>CNTK\Source\Common\Include\Config.h</li><li>opencv\build\Include\opencv2\core\mat.hpp</li><li>opencv\build\Include\opencv2\core\persistence.hpp</li><li>opencv\build\Include\opencv2\core\utility.hpp</li></ul><p><strong>メニュー</strong>→<strong>ファイル</strong>→<strong>名前をつけて保存</strong>で<strong>上書き保存のメニュー</strong>から<strong>エンコード付きで保存</strong>を選択します。</p><p><a href="../../../../public/2016/02/2.png"><img src="../../../../public/2016/02/2-300x187.png" alt="エンコード修正"></a></p><p><strong>Unicode (UTF-8 シグネチャ付き) - コードページ 65001</strong> で保存してください。</p><p>これでビルドが通りますが、GPUを使用するほうは、かなり時間がかかります。<br>コーヒーでも飲んでてください。<br>私の環境だと9分かかりました。<br>また、出力ファイルをRAMディスクに対比しているのですが、2GB以上途中ファイルとバイナリファイルを生成しますので、RAMディスクを活用している方は、空き容量には注意してください。</p><p>エラーなく終わると、<strong>CNTK\x64\Release\CNTK.exe</strong> が生成されます。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>Caffe以上に面倒な構築手順でした。</p><p>次回は実際に使えたらな、と思います。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> %e3%83%87%e3%82%a3%e3%83%bc%e3%83%97%e3%83%a9%e3%83%bc%e3%83%8b%e3%83%b3%e3%82%b0 </category>
          
          <category> CNTK </category>
          
          <category> オープンソース </category>
          
          <category> gpupu </category>
          
          <category> ディープラーニング </category>
          
          <category> CUDA </category>
          
          <category> GPUPU </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ディープラーニング Caffe その2 テスト</title>
      <link href="2016/02/21/832/"/>
      <url>2016/02/21/832/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/02/20/808">前回</a>はHyper-V上に作成したUbuntu上にcaffeをインストールしました。今回は実際に使ってみます。</p><a id="more"></a><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>caffeは大まかに下記の手順で実施します。</p><ol><li>データセットの用意</li><li>データの格納</li><li>パラメータの調整</li><li>学習</li><li>評価</li></ol><p>今回は、学習が完了した状態で、評価を行います。<br>ちなみに、データセットとは、<strong>学習(訓練)用</strong>、<strong>評価用</strong>の2種から構成されるデータ群です。<br>通常、学習する際に使用したデータを、検証用に使うことはできません。<br>学生のテストで試験範囲発表で問題そのものが公開されるわけではないのと同じです。学生を「テスト」する意味がないですから。</p><p>また、今回のテストはあらかじめ用意されているものを使います。<br>ネット上で解説されているものと同じですが、他と違うのは、きちんと説明を加えます。<br>何をしているのかよくわからないし、「おまじない」的な説明は極力避けます。</p><h1 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h1><h2 id="モデルの取得"><a href="#モデルの取得" class="headerlink" title="モデルの取得"></a>モデルの取得</h2><p>モデルとは、どういう手順、経路、方法でデータの学習を行うかを定義した多層ニューラルネットワークを指す。<br>モデルは、<strong>Caffe Model Zoo</strong>というCaffeの学習済モデルを公開したWikiがあり、そこで有力なモデルが公開されている。</p><p>下記のコマンドを実行します。caffeのフォルダは前回と同様であるものとします。<br>必要に応じてsudoするなりします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/caffe/</span><br><span class="line">python scripts/download_model_binary.py models/bvlc_reference_caffenet</span><br></pre></td></tr></table></figure><p>実行したスクリプトは大量のデータ (233MB) をダウンロードしますので時間がかかります。</p><h2 id="関連データの取得"><a href="#関連データの取得" class="headerlink" title="関連データの取得"></a>関連データの取得</h2><p>ilsvrc12の学習、評価に用いられる画像ファイル名の一覧、ラベル一覧などをダウンロードします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/caffe/data/ilsvrc12/</span><br><span class="line">chmod u+x get_ilsvrc_aux.sh</span><br><span class="line">./get_ilsvrc_aux.sh</span><br></pre></td></tr></table></figure><h2 id="画像データの取得"><a href="#画像データの取得" class="headerlink" title="画像データの取得"></a>画像データの取得</h2><p>検証に用いる画像のデータセット<a href="http://www.vision.caltech.edu/Image_Datasets/Caltech101/">Caltech 101</a>をダウンロードします。<br>ダウンロード先は任意です。<br>126MBあるので、これも時間がかかります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/caffe/</span><br><span class="line">mkdir dataset</span><br><span class="line"><span class="built_in">cd</span> dataset</span><br><span class="line">mkdir caltech101</span><br><span class="line">wget http://www.vision.caltech.edu/Image_Datasets/Caltech101/101_ObjectCategories.tar.gz</span><br><span class="line">tar xf 101_ObjectCategories.tar.gz</span><br></pre></td></tr></table></figure><p>これで準備完了です。</p><h1 id="検証"><a href="#検証" class="headerlink" title="検証"></a>検証</h1><h2 id="分類"><a href="#分類" class="headerlink" title="分類"></a>分類</h2><p>実際に画像を入力して分類してみます。<br>前提として、pycaffeをコンパイル済みであるものとします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/caffe/python</span><br><span class="line">python classify.py --raw_scale 255 /usr/<span class="built_in">local</span>/caffe/dataset/caltech101/101_ObjectCategories/airplanes/image_0001.jpg /usr/<span class="built_in">local</span>/caffe/dataset/caltech101/result.npy</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/caffe/dataset/caltech101/</span><br></pre></td></tr></table></figure><p><strong>classify.py</strong> によれば、 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">classify.py is an out-of-the-box image classifer callable from the command line.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">By default it configures and runs the Caffe reference ImageNet model.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> caffe</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">argv</span>):</span></span><br><span class="line">    pycaffe_dir = os.path.dirname(__file__)</span><br><span class="line"></span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    <span class="comment"># Required arguments: input and output files.</span></span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">&quot;input_file&quot;</span>,</span><br><span class="line">        help=<span class="string">&quot;Input image, directory, or npy.&quot;</span></span><br><span class="line">    )</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">&quot;output_file&quot;</span>,</span><br><span class="line">        help=<span class="string">&quot;Output npy filename.&quot;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># Optional arguments.</span></span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">&quot;--model_def&quot;</span>,</span><br><span class="line">        default=os.path.join(pycaffe_dir,</span><br><span class="line">                <span class="string">&quot;../models/bvlc_reference_caffenet/deploy.prototxt&quot;</span>),</span><br><span class="line">        help=<span class="string">&quot;Model definition file.&quot;</span></span><br><span class="line">    )</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">&quot;--pretrained_model&quot;</span>,</span><br><span class="line">        default=os.path.join(pycaffe_dir,</span><br><span class="line">                <span class="string">&quot;../models/bvlc_reference_caffenet/bvlc_reference_caffenet.caffemodel&quot;</span>),</span><br><span class="line">        help=<span class="string">&quot;Trained model weights file.&quot;</span></span><br><span class="line">    )</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">&quot;--gpu&quot;</span>,</span><br><span class="line">        action=<span class="string">&#x27;store_true&#x27;</span>,</span><br><span class="line">        help=<span class="string">&quot;Switch for gpu computation.&quot;</span></span><br><span class="line">    )</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">&quot;--center_only&quot;</span>,</span><br><span class="line">        action=<span class="string">&#x27;store_true&#x27;</span>,</span><br><span class="line">        help=<span class="string">&quot;Switch for prediction from center crop alone instead of &quot;</span> +</span><br><span class="line">             <span class="string">&quot;averaging predictions across crops (default).&quot;</span></span><br><span class="line">    )</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">&quot;--images_dim&quot;</span>,</span><br><span class="line">        default=<span class="string">&#x27;256,256&#x27;</span>,</span><br><span class="line">        help=<span class="string">&quot;Canonical &#x27;height,width&#x27; dimensions of input images.&quot;</span></span><br><span class="line">    )</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">&quot;--mean_file&quot;</span>,</span><br><span class="line">        default=os.path.join(pycaffe_dir,</span><br><span class="line">                             <span class="string">&#x27;caffe/imagenet/ilsvrc_2012_mean.npy&#x27;</span>),</span><br><span class="line">        help=<span class="string">&quot;Data set image mean of [Channels x Height x Width] dimensions &quot;</span> +</span><br><span class="line">             <span class="string">&quot;(numpy array). Set to &#x27;&#x27; for no mean subtraction.&quot;</span></span><br><span class="line">    )</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">&quot;--input_scale&quot;</span>,</span><br><span class="line">        type=float,</span><br><span class="line">        help=<span class="string">&quot;Multiply input features by this scale to finish preprocessing.&quot;</span></span><br><span class="line">    )</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">&quot;--raw_scale&quot;</span>,</span><br><span class="line">        type=float,</span><br><span class="line">        default=<span class="number">255.0</span>,</span><br><span class="line">        help=<span class="string">&quot;Multiply raw input by this scale before preprocessing.&quot;</span></span><br><span class="line">    )</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">&quot;--channel_swap&quot;</span>,</span><br><span class="line">        default=<span class="string">&#x27;2,1,0&#x27;</span>,</span><br><span class="line">        help=<span class="string">&quot;Order to permute input channels. The default converts &quot;</span> +</span><br><span class="line">             <span class="string">&quot;RGB -&gt; BGR since BGR is the Caffe default by way of OpenCV.&quot;</span></span><br><span class="line">    )</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">&quot;--ext&quot;</span>,</span><br><span class="line">        default=<span class="string">&#x27;jpg&#x27;</span>,</span><br><span class="line">        help=<span class="string">&quot;Image file extension to take as input when a directory &quot;</span> +</span><br><span class="line">             <span class="string">&quot;is given as the input file.&quot;</span></span><br><span class="line">    )</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    image_dims = [int(s) <span class="keyword">for</span> s <span class="keyword">in</span> args.images_dim.split(<span class="string">&#x27;,&#x27;</span>)]</span><br><span class="line"></span><br><span class="line">    mean, channel_swap = <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> args.mean_file:</span><br><span class="line">        mean = np.load(args.mean_file)</span><br><span class="line">    <span class="keyword">if</span> args.channel_swap:</span><br><span class="line">        channel_swap = [int(s) <span class="keyword">for</span> s <span class="keyword">in</span> args.channel_swap.split(<span class="string">&#x27;,&#x27;</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.gpu:</span><br><span class="line">        caffe.set_mode_gpu()</span><br><span class="line">        print(<span class="string">&quot;GPU mode&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        caffe.set_mode_cpu()</span><br><span class="line">        print(<span class="string">&quot;CPU mode&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Make classifier.</span></span><br><span class="line">    classifier = caffe.Classifier(args.model_def, args.pretrained_model,</span><br><span class="line">            image_dims=image_dims, mean=mean,</span><br><span class="line">            input_scale=args.input_scale, raw_scale=args.raw_scale,</span><br><span class="line">            channel_swap=channel_swap)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Load numpy array (.npy), directory glob (*.jpg), or image file.</span></span><br><span class="line">    args.input_file = os.path.expanduser(args.input_file)</span><br><span class="line">    <span class="keyword">if</span> args.input_file.endswith(<span class="string">&#x27;npy&#x27;</span>):</span><br><span class="line">        print(<span class="string">&quot;Loading file: %s&quot;</span> % args.input_file)</span><br><span class="line">        inputs = np.load(args.input_file)</span><br><span class="line">    <span class="keyword">elif</span> os.path.isdir(args.input_file):</span><br><span class="line">        print(<span class="string">&quot;Loading folder: %s&quot;</span> % args.input_file)</span><br><span class="line">        inputs =[caffe.io.load_image(im_f)</span><br><span class="line">                 <span class="keyword">for</span> im_f <span class="keyword">in</span> glob.glob(args.input_file + <span class="string">&#x27;/*.&#x27;</span> + args.ext)]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;Loading file: %s&quot;</span> % args.input_file)</span><br><span class="line">        inputs = [caffe.io.load_image(args.input_file)]</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;Classifying %d inputs.&quot;</span> % len(inputs))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Classify.</span></span><br><span class="line">    start = time.time()</span><br><span class="line">    predictions = classifier.predict(inputs, <span class="keyword">not</span> args.center_only)</span><br><span class="line">    print(<span class="string">&quot;Done in %.2f s.&quot;</span> % (time.time() - start))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Save</span></span><br><span class="line">    print(<span class="string">&quot;Saving results into %s&quot;</span> % args.output_file)</span><br><span class="line">    np.save(args.output_file, predictions)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main(sys.argv)</span><br></pre></td></tr></table></figure><p>とあります。<br>入力と出力は必須なので、最後の2つが入力画像と出力になります。<br>出力はnumpy標準のファイル形式です。<br><strong>--raw_scale 255</strong> は、前処理の前にこのスケール値だけ乗算するとあります。<br><a href="http://iwaki2009.blogspot.jp/2014/12/caffeimagenet.html">OpenCV 備忘録</a> によれば、入力値[0:1]をImageNetモデルの[0:255]に変更するとのこと。<br>実行後、うまくいって結果を確認、できません。<br>無慈悲なエラーが出ます。<br><a href="../../../../public/2016/02/1-4.png"><img src="../../../../public/2016/02/1-4-300x225.png" alt="無慈悲なエラー"></a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">File <span class="string">&quot;classify.py&quot;</span>, line 138, <span class="keyword">in</span> </span><br><span class="line">    main(sys.argv)</span><br><span class="line">  File <span class="string">&quot;classify.py&quot;</span>, line 110, <span class="keyword">in</span> main</span><br><span class="line">    channel_swap=channel_swap)</span><br><span class="line">  File <span class="string">&quot;/usr/local/caffe/python/caffe/classifier.py&quot;</span>, line 34, <span class="keyword">in</span> __init__</span><br><span class="line">    self.transformer.set_mean(in_, mean)</span><br><span class="line">  File <span class="string">&quot;/usr/local/caffe/python/caffe/io.py&quot;</span>, line 258, <span class="keyword">in</span> set_mean</span><br><span class="line">    raise ValueError(<span class="string">&#x27;Mean shape incompatible with input shape.&#x27;</span>)</span><br></pre></td></tr></table></figure><p>イラっとしますが、解析すると、**/usr/local/caffe/python/caffe/io.py** の258行目が例外を投げているように見えます。<br>Google先生に聞いてみると<a href="http://qiita.com/Bonnnou_108/items/41e6dadeff1310b4eb5d">OSX10.10でCaffeをインストール、リファレンスモデルで画像を分類</a>にて回答が。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ms != self.inputs[in_][<span class="number">1</span>:]:</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Mean shape incompatible with input shape.&#x27;</span>)</span><br></pre></td></tr></table></figure><p>を </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ms != self.inputs[in_][<span class="number">1</span>:]:</span><br><span class="line">    print(self.inputs[in_])</span><br><span class="line">    in_shape = self.inputs[in_][<span class="number">1</span>:]</span><br><span class="line">    m_min, m_max = mean.min(), mean.max()</span><br><span class="line">    normal_mean = (mean - m_min) / (m_max - m_min)</span><br><span class="line">    mean = resize_image(normal_mean.transpose((<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>)),in_shape[<span class="number">1</span>:]).transpose((<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>)) * (m_max - m_min) + m_min</span><br><span class="line">    <span class="comment">#raise ValueError(&#x27;Mean shape incompatible with input shape.&#x27;)</span></span><br></pre></td></tr></table></figure><p>に直せばよいとのこと。<br>修正後、再度実行すると、result.npyが出力されたことを示すメッセージが。</p><h2 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h2><p>うきうきしながら、result.npyを開くと。<br>開けません。というかバイナリファイルなのか読めません。<br>これを人間の目でわかる結果に直す必要があります。<br><a href="http://techblog.yahoo.co.jp/programming/caffe-intro/">Caffeで手軽に画像分類</a>にて、この結果を人間の目でわかる結果に直すスクリプトを公開してくださっています。感謝です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/caffe/python</span><br><span class="line">gedit show_result.py</span><br></pre></td></tr></table></figure><p>エディタを開いて下記のスクリプトを保存します。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys, numpy</span><br><span class="line"></span><br><span class="line">categories = numpy.loadtxt(sys.argv[<span class="number">1</span>], str, delimiter=<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">scores = numpy.load(sys.argv[<span class="number">2</span>])</span><br><span class="line">top_k = <span class="number">3</span></span><br><span class="line">prediction = zip(scores[<span class="number">0</span>].tolist(), categories)</span><br><span class="line">prediction.sort(cmp=<span class="keyword">lambda</span> x, y: cmp(x[<span class="number">0</span>], y[<span class="number">0</span>]), reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">for</span> rank, (score, name) <span class="keyword">in</span> enumerate(prediction[:top_k], start=<span class="number">1</span>):</span><br><span class="line">    print(<span class="string">&#x27;#%d | %s | %4.1f%%&#x27;</span> % (rank, name, score * <span class="number">100</span>))</span><br></pre></td></tr></table></figure><p>保存後。、 </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/caffe/python</span><br><span class="line">python show_result.py ../data/ilsvrc12/synset_words.txt /usr/<span class="built_in">local</span>/caffe/dataset/caltech101/result.npy</span><br><span class="line"><span class="comment">#1 | n04552348 warplane, military plane | 84.8%</span></span><br><span class="line"><span class="comment">#2 | n04008634 projectile, missile |  5.5%</span></span><br><span class="line"><span class="comment">#3 | n02690373 airliner |  5.1%</span></span><br></pre></td></tr></table></figure><p>という結果が出力されます。<br><a href="../../../../public/2016/02/1-5.png"><img src="../../../../public/2016/02/1-5-300x225.png" alt="入力画像"></a></p><p>入力画像 <strong>/usr/local/caffe/dataset/caltech101/101_ObjectCategories/airplanes/image_0001.jpg</strong> が戦闘機である確率が84.8%だと判断されました。<br>素晴らしい。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>長かったですが、きちんとcaffeが動作する様を確認できました。<br>次回はモデルを構築できたらな、と思います。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> %e3%83%87%e3%82%a3%e3%83%bc%e3%83%97%e3%83%a9%e3%83%bc%e3%83%8b%e3%83%b3%e3%82%b0 </category>
          
          <category> Caffe </category>
          
          <category> オープンソース </category>
          
          <category> ディープラーニング </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ディープラーニング Caffe その1 環境構築</title>
      <link href="2016/02/20/808/"/>
      <url>2016/02/20/808/</url>
      
        <content type="html"><![CDATA[<p><strong>codecademy</strong> でのPythonの学習が完了し、そのことを会社で伝えたら、ディープラーニングの <strong>Caffe</strong> を使ったプロジェクトに参加させられることになりました。<br>どうしてこうなった。</p><a id="more"></a><h1 id="Caffe"><a href="#Caffe" class="headerlink" title="Caffe"></a>Caffe</h1><p><font color="red">更新 (2017/04/23)<br><a href="https://taktak.jp/2017/04/23/2148">ディープラーニング Caffe その3 環境構築 with GPU</a>にて、GeForce GTX 750 Tiを使った環境構築方法をについて説明しています。</font></p><p>オープンソースで開発が進んでいるディープラーニングのフレームワークです。<br>非常に強力ですが、環境構築が手間だと専らの話。<br>Windows版なんかあるはずがありません。<br>(<a href="https://github.com/niuzhiheng/caffe">非公式のWindows版</a>が公式で紹介されています。)</p><h1 id="環境構築"><a href="#環境構築" class="headerlink" title="環境構築"></a>環境構築</h1><h2 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h2><p>というわけで、会社と同じ環境である <strong>Ubuntu 14.0.4 LTS Desktop 64bit</strong> をHyper-Vに用意しました。<br>インストールは特に問題ないです。GUIですし、選択肢も少なく優秀です。</p><p><a href="../../../../public/2016/02/1.png"><img src="../../../../public/2016/02/1-300x225.png" alt="デスクトップ画面"></a></p><p>Hyper-Vマシン前で作業するのは面倒なので、VNC経由で使えるようにします。<br>ここでかなり手間取りました。</p><h2 id="VNCの許可"><a href="#VNCの許可" class="headerlink" title="VNCの許可"></a>VNCの許可</h2><ol><li>ターミナルから下記のコマンドで <strong>dconf-editor</strong> をインストールします</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install dconf-tools </span><br></pre></td></tr></table></figure><ol start="2"><li>メニューから dconf-editor を呼び出します。</li></ol><p><a href="../../../../public/2016/02/1-2.png"><img src="../../../../public/2016/02/1-2-300x225.png" alt="dconf-editor"></a></p><ol start="3"><li>左のノードから <strong>org &gt; gnome &gt; desktop &gt; remote-access</strong> と進めます。<strong>enabled</strong> にチェック、<strong>require-encryption</strong> のチェックを外します。。</li></ol><p><a href="../../../../public/2016/02/1-3.png"><img src="../../../../public/2016/02/1-3-300x225.png" alt="dconf-editor2"></a></p><ol start="4"><li><p>メニューから <strong>Desktop Sharing</strong> を呼び出します。検索語は <strong>Vino</strong> です。</p></li><li><p><strong>You must confirm each access to this machine</strong> を外します。オプションで <strong>Show Notification Area Icon</strong> を <strong>Always</strong> に変更します。</p></li></ol><p>以上でVNCを利用できるようになります。<br>VHDのデータをこの時点で対比しておくと、環境をリセットしたいとき楽です。<br>Hyper-Vのチェックポイント機能がありますが、VHD一つ保存しておくだけで複製も楽ですので、私はこっちのが好みです。</p><h2 id="Caffeの導入"><a href="#Caffeの導入" class="headerlink" title="Caffeの導入"></a>Caffeの導入</h2><p><a href="http://caffe.berkeleyvision.org/installation.html">公式サイトの導入指示</a> では、 <strong>必須の依存ライブラリ</strong></p><ul><li>CUDA (GPUモードで使う場合)<ul><li>バージョン7以降の最新バージョン推奨。ただし、6系も良し。</li><li>5.5と5.0は互換性はあるが、レガシーです</li></ul></li><li>ATLAS、MKLまたはOpenBLAS</li><li>Boost (1.55以降)</li><li>protobuf</li><li>glog</li><li>gflags</li><li>hdf5</li></ul><p><strong>オプションの依存ライブラリ</strong></p><ul><li>OpenCV (3.0を含む2.4以降の)</li><li>lmdb</li><li>leveldb (snappyが必要)</li><li>cuDNN</li></ul><p><strong>Pycaffe と Matcaffe のインターフェース利用に必要なもの</strong></p><ul><li>Python Caffe<ul><li>Python (2.7または3.3以降)</li><li>numpy (1.7以降)</li><li>boost.python</li><li>lmdb</li></ul></li><li>MATLAB Caffe<ul><li>MATLAB (mexコンパイラ付き)</li></ul></li></ul><p>とのことなので指示に従いますが、実際作業中はオプションのものが必要になったりしました。<br>GPUは使わないので、CUDAは無視します。</p><p><strong>1. ATLAS</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libatlas-base-dev</span><br></pre></td></tr></table></figure><p><strong>2. Boost</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libboost-all-dev</span><br></pre></td></tr></table></figure><p><strong>3. protobuf</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libprotobuf-dev</span><br></pre></td></tr></table></figure><p><strong>4. glog</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libgoogle-glog-dev</span><br></pre></td></tr></table></figure><p><strong>5. gflags</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libgflags-dev</span><br></pre></td></tr></table></figure><p><strong>6. hdf5</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libhdf5-serial-dev</span><br></pre></td></tr></table></figure><p><strong>7. git</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><p><strong>8. g++ 4.6</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install g++-4.6</span><br></pre></td></tr></table></figure><p><strong>9. protobuf-compiler</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install protobuf-compiler</span><br></pre></td></tr></table></figure><p><strong>10. OpenCV</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libopencv-dev</span><br></pre></td></tr></table></figure><p><strong>11. leveldb</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libleveldb-dev</span><br></pre></td></tr></table></figure><p><strong>12. lmdb</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install liblmdb-dev</span><br></pre></td></tr></table></figure><p><strong>13. snappy</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libsnappy-dev</span><br></pre></td></tr></table></figure><p><strong>14. caffe本体のダウンロード</strong></p><p>gitのクローン先はどこでもいいです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/ git <span class="built_in">clone</span> https://github.com/BVLC/caffe.git</span><br></pre></td></tr></table></figure><p><strong>15. caffe本体のコンパイル準備</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> caffe cp Makefile.config.example Makefile.config sudo gedit Makefile.config</span><br></pre></td></tr></table></figure><p>下記のコメント行を有効化</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CPU\_ONLY := 1</span></span><br></pre></td></tr></table></figure><p>下記のコメント行の直下に追加</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CUSTOM\_CXX := g++ CUSTOM\_CXX := g++-4.6</span></span><br></pre></td></tr></table></figure><p>下記の行をコメントアウト</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CUDA\_DIR := /usr/local/cuda</span><br></pre></td></tr></table></figure><p>下記のコメント行を有効化</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CUDA\_DIR := /usr</span></span><br></pre></td></tr></table></figure><p><strong>16. caffe本体のコンパイル</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make make <span class="built_in">test</span> make runtest</span><br></pre></td></tr></table></figure><p>エラーが出ずに終了すれば構築は完了です。</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p>Pythonから使いたい場合は、もうひとがんばりです。</p><p><strong>1. Python</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-dev</span><br></pre></td></tr></table></figure><p><strong>2. pip</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-pip</span><br></pre></td></tr></table></figure><p><strong>3. numpy</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-numpy</span><br></pre></td></tr></table></figure><p><strong>4. skimage</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-skimage</span><br></pre></td></tr></table></figure><p><strong>5. 依存パッケージのダウンロード</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/caffe/python <span class="keyword">for</span> req <span class="keyword">in</span> $(cat requirements.txt); <span class="keyword">do</span> sudo pip install <span class="variable">$req</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><strong>6. pycaffeのコンパイル</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/caffe/ make pycaffe</span><br></pre></td></tr></table></figure><p><strong>7. 環境変数の設定</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit ~/.bashrc</span><br></pre></td></tr></table></figure><p>最終行に</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PYTHONPATH=/usr/<span class="built_in">local</span>/caffe/python/:<span class="variable">$PYTHONPATH</span></span><br></pre></td></tr></table></figure><p>を追加します</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p><strong>7. importのテスト</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python import caffe</span><br></pre></td></tr></table></figure><p>ここで、</p><p>libdc1394 error: Failed to initialize libdc1394 </p><p>と表示されますが、これ以外のエラーがなければ問題ないようです。<br><a href="http://stackoverflow.com/questions/12689304/ctypes-error-libdc1394-error-failed-to-initialize-libdc1394">stackoverflow</a> で、この問題の簡単な解決策が提示されていました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln /dev/null /dev/raw1394</span><br></pre></td></tr></table></figure><p>でエラーが消えるようです。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>不慣れなLinuxで時間がかかりましたが、これで環境の構築は完了です。<br>次回は実際に使えたらな、と思います。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux </category>
          
          <category> %e3%83%87%e3%82%a3%e3%83%bc%e3%83%97%e3%83%a9%e3%83%bc%e3%83%8b%e3%83%b3%e3%82%b0 </category>
          
          <category> Caffe </category>
          
          <category> オープンソース </category>
          
          <category> ディープラーニング </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでGPUPUを試してみる CUDA編 第2回</title>
      <link href="2016/02/16/735/"/>
      <url>2016/02/16/735/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/02/14/726">前回</a>はCUDAの性能がとんでもなく悪かったです。</p><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>明らかに悪い、とは思っていたけどここまで悪いとは思っていませんでした。<br>いや本当。</p><p>今回は、CUDAの仕組みから。</p><h1 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h1><h2 id="CUDAってどうやって動いている？"><a href="#CUDAってどうやって動いている？" class="headerlink" title="CUDAってどうやって動いている？"></a>CUDAってどうやって動いている？</h2><p>今さらですが。<br>CUDAはGPUを使って計算します。<br>が、ここで理解してほしいのは、そういう計算処理は本来、CPUがやることで、GPUに計算させているのはあくまでおまけ。<br>で、当然ながら、現在のPCの仕組み上、GPUとCPUには扱いに大きな差があります。</p><p>まず、CPUとメモリの間はレジスタとキャッシュ (1次とか2次とか)が備わっています。<br>これによりデータやプログラムが可能な限り再利用され、データの移動が最小限になります。</p><p>が、GPUとCPU側のメモリの間にそんなものはありません。<br>たしかに、GPUにはメモリが乗っていますけど、そこにプログラムが使っているデータはありません。<br>そもそもメモリ (要するにDRAM) はCPUの側に比べれば格段に遅い。</p><p>なので、プログラムからGPUに処理を任せるときは、データとプログラムを渡す必要があります。<br>これ大事。</p><p>で、先に話したように、GPUとプログラムの距離は非常に遠い、つまり遅いです。<br>そもそもDRAMの演算装置間の転送速度は遅いのに、CPU側のメモリとGPUではさらに遅い。<br>以上を踏まえると、<strong>命令やデータをCPU側メモリからGPUに何度も転送するのは最悪</strong>、ということです。</p><p>で、ここまで書いてあれですが、きちんと用語があって、CPU側のメモリ、とかいう表現はしません。</p><table><thead><tr><th align="left">Term</th><th align="left">Meaning</th></tr></thead><tbody><tr><td align="left">ホスト</td><td align="left">呼び出し側。CPU・プログラムと思ってくれれば</td></tr><tr><td align="left">デバイス</td><td align="left">GPU側</td></tr><tr><td align="left">カーネル</td><td align="left">デバイス上で実行される処理。ホスト上のソースコードに書かれたデバイス用の処理</td></tr></tbody></table><p>と定義されています。<br>もう一度言いますと、<strong>ホストとデバイス間のカーネルやデータの転送は最小限にする</strong>、ってことです。</p><h2 id="CUDAの真の実力"><a href="#CUDAの真の実力" class="headerlink" title="CUDAの真の実力"></a>CUDAの真の実力</h2><p>前段を踏まえて前回のプログラムの問題点を検証します。<br>まずデバイス側のカーネルは </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">addKernel</span><span class="params">(<span class="keyword">int</span> *c, <span class="keyword">const</span> <span class="keyword">int</span> *a, <span class="keyword">const</span> <span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = threadIdx.x;</span><br><span class="line">    c[i] = a[i] + b[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>になります。<br>CUDAプログラミングにおいて、関数がホスト側、デバイス側で実行されるかどうかの識別は下記の3つの関数修飾子で区別します。</p><h4 id="global"><a href="#global" class="headerlink" title="global"></a><strong>global</strong></h4><p>デバイス側で実行さ<br>れる、ホスト側から呼び出される関数であることを示します。戻り値は必ずvoidです。</p><h4 id="device"><a href="#device" class="headerlink" title="device"></a><strong>device</strong></h4><p>デバイス側で実行され、デバイス側から呼び出される関数であることを示します。要するに、デバイス側のprivateな関数。</p><h4 id="host"><a href="#host" class="headerlink" title="host"></a><strong>host</strong></h4><p>ホスト側で実行され、ホスト側から呼び出される関数であることを示します。要するに、ホスト側のprivateな関数。</p><p>それで、上の <strong>addKernel 関数</strong> は、<strong>global</strong>なので、デバイス側で実行され、ホスト側でコールされます。<br>この関数は、別に定義された <strong>cudaError_t addWithCuda(int *, const int *, const int *, unsigned int) 関数</strong> で呼ばれます。<br>前のコードでは、この addWithCuda 関数を10000回呼び出していました。すなわち10000回、カーネルとデータをデバイス間に転送していたことになります。<br>それは遅いに決まっています。<br>理想的なのは、デバイス側で10000回処理が実行されることです。</p><br><ul><li>×　デバイス側に処理を10000回依頼する</li><li>○　デバイス側で処理を10000回実行する</li></ul><br><p>ということです。<br>以上を踏まえコードを修正します。<br>サンプルコードはページの末尾を参照。<br>変更点は</p><ul><li>ループ回数を10000から100000000回に変更</li><li>addKernel 関数内でループを回すように変更</li><li>デバイス側の計測は addWithCuda 関数内で実行するよう変更</li><li>変数a,b,cはconstを外して、可変長に変更</li></ul><p>これだと、ループ回数は配列長*ループ回数なので、5億回になります。<br>これを実行させます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CUDA is</span><br><span class="line">        &#123;1,2,3,4,5&#125; + &#123;10,20,30,40,50&#125; = &#123;11,22,33,44,55&#125;</span><br><span class="line">        time = &#123;5556&#125;</span><br><span class="line">No CUDA is</span><br><span class="line">        &#123;1,2,3,4,5&#125; + &#123;10,20,30,40,50&#125; = &#123;11,22,33,44,55&#125;</span><br><span class="line">        time = &#123;0&#125;</span><br></pre></td></tr></table></figure><p>一気に改善しています。ですが、まだダメです。<br>というか、CPUが速すぎる気がします。</p><p>そこで、デバイス側をコメントアウトして、ホスト側だけの計測をしました。<br>その結果、ループ回数10億、配列長50で8000-9000msという結果が出ました。<br>少なくとも、計測処理は正しいことがわかりました。常に0になるとか、そういうのはない。<br>なので、ループ回数を1億にして、配列長50なら800-900msになるはず。<br>ループ回数が変化なし、配列長が10倍なら、CUDAはおよそ55000msになるはず。</p><h2 id="GPUの特性"><a href="#GPUの特性" class="headerlink" title="GPUの特性"></a>GPUの特性</h2><p>はい。<br>結果はそうなりませんでした。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CUDA is</span><br><span class="line">        &#123;1,2,3,4,5&#125; + &#123;10,20,30,40,50&#125; = &#123;11,22,33,44,55&#125;</span><br><span class="line">        time = &#123;5555&#125;</span><br><span class="line">No CUDA is</span><br><span class="line">        &#123;1,2,3,4,5&#125; + &#123;10,20,30,40,50&#125; = &#123;11,22,33,44,55&#125;</span><br><span class="line">        time = &#123;856&#125;</span><br></pre></td></tr></table></figure><p>CPUの計算量推定は正しかったのですが、GPUはそうなりませんでした。<br>結論を言えば、並列化が関係してます。<br><strong>addKernel 関数</strong> をみると、<strong>threadIdx</strong> なるオブジェクトがいます。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">addKernel</span><span class="params">(<span class="keyword">int</span> *c, <span class="keyword">const</span> <span class="keyword">int</span> *a, <span class="keyword">const</span> <span class="keyword">int</span> *b, <span class="keyword">const</span> <span class="keyword">int</span> loop)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = threadIdx.x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> t = <span class="number">0</span>; t &lt; loop; ++t)</span><br><span class="line">    &#123;</span><br><span class="line">        c[i] = a[i] + b[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これなんでしょう。<br>これ、<strong>NVIDIA GPU Computing Toolkit\CUDA\v7.5\include\device_launch_parameters.h</strong> に定義されています。<br>字面からみればスレッドIDです。</p><p><strong>CUDA_C_Programming_Guide.pdf</strong> がありますのでそれを見ます。</p><blockquote><p>B.4.4. threadIdx This variable is of type uint3 (see char, short, int, long, longlong, float, double ) and contains the thread index within the block.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">訳: B.4.4. threadIdx この変数はuint3 (char, short, int, long, longlong, float, double) 型であり、ブロック内のスレッドインデックスです。</span><br></pre></td></tr></table></figure><p>とあります。<br>字面の通りということでしょう。</p><p>だとするならば、CUDAはスレッド処理を実行しているはずです。ゆえに、CPUのような計算量推測ができなかったのでしょう。<br>では、どこでスレッドの起動を指定しているのか、というと </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Launch a kernel on the GPU with one thread for each element.</span></span><br><span class="line">addKernel &lt;&lt; &lt;<span class="number">1</span>, size &gt;&gt; &gt;(dev_c, dev_a, dev_b, g_loop);</span><br></pre></td></tr></table></figure><p>の <strong>&lt;1, size &gt;</strong> とのこと。<br>これは、1ブロックにつき最大sizeスレッドで関数を実行せよ、という意味らしい。<br><a href="http://www.gdep.jp/page/view/253">第6回　CUDAプログラミングモデル①</a>によれば、指定できるスレッド数は512が限界とのこと。</p><p>なので、現在sizeは配列長さと等しい。<br>つまり、配列の 1 要素に対して、1スレッドで動作するため、配列長さを10倍にしても、処理時間が変化しなかったのである。<br>ともすれば、GPUはCPUのスピードにはかなわないが、大量のスレッドでその分作業をこなすことで、高速化を図るしか道がないことになる。</p><p>なので、CPUは単純に配列長に比例し、GPUは配列長の影響を受けないので、配列帳が7-8倍になれば、ホストとデバイスの処理結果が近似または逆転するはずである。<br>試しに配列長を400にしてみた。<br>(倍数+1しないと一致しないはず)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CUDA is</span><br><span class="line">        &#123;1,2,3,4,5&#125; + &#123;10,20,30,40,50&#125; = &#123;11,22,33,44,55&#125;</span><br><span class="line">        time = &#123;5778&#125;</span><br><span class="line">No CUDA is</span><br><span class="line">        &#123;1,2,3,4,5&#125; + &#123;10,20,30,40,50&#125; = &#123;11,22,33,44,55&#125;</span><br><span class="line">        time = &#123;5295&#125;</span><br></pre></td></tr></table></figure><p>思い切って512にしてみる。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CUDA is</span><br><span class="line">        &#123;1,2,3,4,5&#125; + &#123;10,20,30,40,50&#125; = &#123;11,22,33,44,55&#125;</span><br><span class="line">        time = &#123;7489&#125;</span><br><span class="line">No CUDA is</span><br><span class="line">        &#123;1,2,3,4,5&#125; + &#123;10,20,30,40,50&#125; = &#123;11,22,33,44,55&#125;</span><br><span class="line">        time = &#123;6686&#125;</span><br></pre></td></tr></table></figure><p>追いつかない…</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>なんで、CUDAがとてつもなく遅かったのかは原因がつかめました。<br>が、期待した速度が出ていないこともまた事実。<br>次回は、もう少し原因を探っていきたいです。</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/CUDA2">https://github.com/takuya-takeuchi/Demo/tree/master/CUDA2</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> gpupu </category>
          
          <category> CUDA </category>
          
          <category> GPUPU </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでGPUPUを試してみる CUDA編 第1回</title>
      <link href="2016/02/14/726/"/>
      <url>2016/02/14/726/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/02/11/713">前回</a>は環境構築をしました。</p><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>ちょっと余所事を。<br>どうして.NETでGPUPUをやるかというと、WPFやWinFormsでUIは簡単に作れるからというのがあります。<br>別に、C++でもできなくはないでしょうが、やっぱり自分の実力も考えるとそれが妥当です。</p><p>.NETを使っていてよく言われるのが、</p><p><strong>パフォーマンスがねぇ…</strong></p><p>というセリフ。<br>そこは否定しません。NGENで最適化しようが、ポインタをフル活用しようが、どうやったって、ハードに近い部分を触れるC、C++に勝てるはずがありません。<br>でも開発効率はC#のが断然高いです。<br>どっちが優れている、というつもりもないです。</p><p>言いたいのは、どっちもいいとこどりをしたいんです。</p><ul><li>C#側からは、時間のかかる処理はC++に任せたい</li><li>C++側からは、リッチなUIをC#に任せたい</li></ul><p>というWin&amp;Winな関係を作りたいんです。<br>正直、このご時世に頑なにMFCを使う理由がわからないんですよ。<br>デモアプリであっても。</p><p>もうちょっと見た目にも気を使ってほしいなあ。って。</p><p>といったところです。</p><h1 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h1><h2 id="CUDAことはじめ"><a href="#CUDAことはじめ" class="headerlink" title="CUDAことはじめ"></a>CUDAことはじめ</h2><p>インストールが完了し、<strong>Visual Studio</strong> から <strong>新しいプロジェクト</strong>、<strong>インストール済み</strong>を選ぶと、<strong>NVIDIA</strong> とその下に <strong>CUDA X.X</strong> が追加されています。<br>(2010、2012、2013のみ。2015と2008は対象外でした。) </p><p><a href="../../../../public/2015/12/47e4add7ca4d3d0c818cbd5c4234bce9.png"><img src="../../../../public/2015/12/47e4add7ca4d3d0c818cbd5c4234bce9.png"></a></p><p>これを選択してプロジェクトを作成すると、C++のプロジェクトができ、<strong>kernel.cu</strong> というコードが表示されます。<br>これはサンプルのプログラムです。</p><p>まずはビルドしてみます。<br>バッチビルドを開くと、<strong>Win32</strong>、<strong>x64</strong> が対象になっています。<br>すべて選択してビルドしてみます。</p><p>警告がたくさん出ますが、一応ビルドが通ります。<br>実行すると </p><p><a href="../../../../public/2015/12/d69cf8eb94018b4b7da48a12673d4e69.png"><img src="../../../../public/2015/12/d69cf8eb94018b4b7da48a12673d4e69.png"></a></p><p>となります。<br>単純に、同一長のint配列の同一のindexの値同士の和を計算するプログラムです。<br>無事にCUDAが動いていることが確認できました。</p><h2 id="CUDAの実力"><a href="#CUDAの実力" class="headerlink" title="CUDAの実力"></a>CUDAの実力</h2><p>でも、これだとCUDAがすごいのかがよくわかりません。<br>私の開発機、</p><ul><li>Intel Core i7-2600 3.40GHz</li><li>Windows 7 Ultimate SP1 64bit</li><li>16.0GB</li></ul><p>最新とは言えないですが、今でもバリバリ現役です。<br>ひょっとしたら、CPUのがすごいかもしれません。</p><p>なので、試してみることにしました。</p><p>サンプルの計算を10000回繰り返して、経過した時間をCUDAと非CUDA、つまりC++の普通の実装で勝負させます。<br>私のC++のソースが酷いのは、<strong>お察しください</strong>。<br>どうでもいいけど、<strong>ReSharper C++</strong> すごいよーー！！ちゃんとインクルードが足りないと指摘してくれるよ！！しかも <strong>C++11</strong>。</p><p>こんな感じ</p><script src="https://gist.github.com/takuya-takeuchi/75c48bd9fb4a08a157d503269648b0b1.js"></script><p>結果は、</p><script src="https://gist.github.com/takuya-takeuchi/5cb192f5a3addd1da1223c21299f0c46.js"></script><br><br><br><p><strong>CUDA惨敗</strong></p><br><br><br><p>はぁ！？</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>まぁ明らかに演出な結果ですが、ここまでひどいとは思いませんでした。<br>当初はループ回数10000000回でしたけど、全く終わらなかったくらいですからwww</p><p>次回は原因の究明と解決を。</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/CUDA1">https://github.com/takuya-takeuchi/Demo/tree/master/CUDA1</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> gpupu </category>
          
          <category> CUDA </category>
          
          <category> GPUPU </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでGPUPUを試してみる CUDA編 第0回</title>
      <link href="2016/02/11/713/"/>
      <url>2016/02/11/713/</url>
      
        <content type="html"><![CDATA[<p>とりあえず環境構築だけ。</p><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>GPUPU</strong>とは、<a href="https://ja.wikipedia.org/wiki/GPGPU">Wiki先生</a>によれば、</p><blockquote><p>GPGPU（General-purpose computing on graphics processing units; GPUによる汎目的計算）とは、GPUの演算資源を画像処理以外の目的に応用する技術のことである。</p></blockquote><p>だそうな。<br>その一技術として各社からいろんなものが出ています。</p><ul><li>CUDA</li><li>AMD Accelerated Parallel Processing</li><li>OpenCL</li></ul><h4 id="CUDA"><a href="#CUDA" class="headerlink" title="CUDA"></a>CUDA</h4><p>Compute Unified Device Architecture。通称CUDA。<br><strong>nVidia</strong> から発表。</p><h4 id="AMD-Accelerated-Parallel-Processing"><a href="#AMD-Accelerated-Parallel-Processing" class="headerlink" title="AMD Accelerated Parallel Processing"></a>AMD Accelerated Parallel Processing</h4><p><strong>AMD</strong> に買収された <strong>ATI</strong> の <strong>ATI Stream</strong> の新しい名前。</p><h4 id="OpenCL"><a href="#OpenCL" class="headerlink" title="OpenCL"></a>OpenCL</h4><p>並列コンピューティングのオープンな仕様。その一部としてGPUPUが使える。</p><p>といったところです。</p><p>で、今回はCUDAを導入していきます。<br>個人的に一番勢いがある、と思っているからです。<br><del>ATI?なんか死にそう</del></p><p>資料も豊富で、<strong>C++/CLI</strong> を介して.NETで使うことも可能なので、CUDAを選びました。<br>いや、ATIもOpenCLもきっとそうなんでしょうけど。</p><p>何よりも、私のマシンに入っているのがnVidiaというのもあります。<br>ちなみに、<strong>NVIDIA GeForce GTX 550 Ti</strong> です。</p><p><a href="https://developer.nvidia.com/cuda-gpus">CUDA GPUs</a> というページで、GeForce のCUDA対応状況を見れますが、<strong>2.1</strong>。という数値。<br>これ、最低は <strong>2.0</strong> ですね。<br>この数値は性能を表しているわけではないですが、ちょっと悲しい。</p><h1 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h1><h2 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h2><p><a href="https://developer.nvidia.com/cuda-downloads">ここから</a>開発に必要な <strong>CUDA Toolkit</strong> をダウンロード。<br>執筆時点では7.5が最新です。<br>インストールは下記のような感じ。</p><p><a href="../../../../public/2015/12/debf3ad758ebe289fd1d138471a7f7ce.png"><img src="../../../../public/2015/12/debf3ad758ebe289fd1d138471a7f7ce.png"></a></p><p><a href="../../../../public/2015/12/eacfc9071588c201fa2ef12fcd02775a.png"><img src="../../../../public/2015/12/eacfc9071588c201fa2ef12fcd02775a.png"></a></p><p><a href="../../../../public/2015/12/147e994a32c35e14a311a37ee5bda5fb.png"><img src="../../../../public/2015/12/147e994a32c35e14a311a37ee5bda5fb.png"></a></p><p><a href="../../../../public/2015/12/0298d98a3d4673b0a3eaf9d21e754239.png"><img src="../../../../public/2015/12/0298d98a3d4673b0a3eaf9d21e754239.png"></a></p><p><a href="../../../../public/2015/12/695a64e2d8d85e1e3333eb6e3e02ccc2.png"><img src="../../../../public/2015/12/695a64e2d8d85e1e3333eb6e3e02ccc2.png"></a></p><p><a href="../../../../public/2015/12/41b65959c271aa2a56191ce926da9568.png"><img src="../../../../public/2015/12/41b65959c271aa2a56191ce926da9568.png"></a></p><p><a href="../../../../public/2015/12/04bce5395336e24b405ec5a033ab970e.png"><img src="../../../../public/2015/12/04bce5395336e24b405ec5a033ab970e.png"></a></p><p>ひたすら、次へで進めていくだけの作業です。<br>途中でディスプレイドライバーのインストール許可を求められますが、OKを。</p><p><a href="../../../../public/2015/12/e685bbd8500c2b1b04e73e693366ff92.png"><img src="../../../../public/2015/12/e685bbd8500c2b1b04e73e693366ff92.png"></a></p><p>Visual Studio に Nsight Visual Studio Edtion なるものが追加されたようだ。<br><a href="http://www.nvidia.co.jp/object/nsight-jp.html">NVIDIA Nsight</a>によればデバッグ支援ツールのよう。</p><p><a href="../../../../public/2015/12/9b90ad2cc94cbb5acb50a0c3b3df9dae.png"><img src="../../../../public/2015/12/9b90ad2cc94cbb5acb50a0c3b3df9dae.png"></a></p><p>インストール終了。</p><h2 id="環境チェック"><a href="#環境チェック" class="headerlink" title="環境チェック"></a>環境チェック</h2><p>きちんとインストールできたかを確認します。<br>コマンドプロンプトから下記のコマンドをたたいて結果を確認。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ nvcc -V</span><br><span class="line">nvcc: NVIDIA (R) Cuda compiler driver</span><br><span class="line">Copyright (c) 2005-2015 NVIDIA Corporation</span><br><span class="line">Built on Tue_Aug_11_14:49:10_CDT_2015</span><br><span class="line">Cuda compilation tools, release 7.5, V7.5.17</span><br></pre></td></tr></table></figure><p>きちんとインストールされていれば、環境変数が正しく設定されて、バージョン情報が見えます。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>今回はインストールまで。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> gpupu </category>
          
          <category> CUDA </category>
          
          <category> GPUPU </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでNoSQLを試してみる MongoDB編 最終回</title>
      <link href="2016/01/09/705/"/>
      <url>2016/01/09/705/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/01/06/695">前回</a>はインデックスの作成を行い、パフォーマンスの改善を達成しました。今回はデータベースのメンテナンスを実施したいと思います。</p><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>長期にわたってデータベースを利用していると、色々問題が発生してきます。<br>不要なインデックス、ログ、ジャーナルファイル、未使用領域の削除等。<br>そういう無駄をそぎ落とし、使い始めた頃の輝きを取り戻すためにメンテナンスが必要です。</p><p>NoSQLに限らずRDBMSでも当然の機能です。</p><h1 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h1><h2 id="Compact"><a href="#Compact" class="headerlink" title="Compact"></a>Compact</h2><p><a href="https://docs.mongodb.org/manual/reference/command/compact/">compact</a>によれば、</p><blockquote><p>Rewrites and defragments all data and indexes in a collection. On WiredTiger databases, this command will release unneeded disk space to the operating system.</p></blockquote><p><code>訳: コレクション内のすべてのデータ、インデックスの書き直しとデフラグを実行します。WiredTigerデータベースにおいて、このコマンドはオペレーティングシステムへ不要なディスク領域を変換します。</code></p><p>と言っています。<br>最後の一文が魅力的です。</p><p>ちょっと補足ですが、<strong>WiredTiger</strong> とは、MongoDBで採用しているストレージモデルです。<br>MongoDBでは下記の3モデルを利用可能です。</p><ul><li><strong>MMAPv1 Storage Engine</strong></li><li><strong>WiredTiger Storage Engine</strong></li><li><strong>In-Memory Storage Engine</strong></li></ul><p><strong>MMAPv1 Storage Engine</strong></p><p>MongoDB 3.2までは既定のストレージエンジンだったモデルです。</p><p><strong>WiredTiger Storage Engine</strong></p><p>MongoDB 3.0から採用された新ストレージエンジン。64bitで利用可能です。<br>マルチバージョン同時事実行コントロールを採用。オペレーション実行時、WiredTigerはデータのその時点でのスナップショットをトランザクションに提供します。スナップショットはインメモリーデータの一貫したビューを表します。</p><p><strong>In-Memory Storage Engine</strong></p><p>MongoDB Enterprise 3.2から始まった、64bitビルドで利用可能な。ベータテストを目的としたエンジンです。いくつかのメタデータを除き。インメモリストレージエンジンはディスク上にデータを維持せず、ディスクI/Oを避けるため、データベースオペレーションの予測可能な待ち時間を許容します。</p><p>実際にCompactコマンドを実行します。<br>対象はコレクションです。<br>現在私の環境には、5つのデータベースにそれぞれ1つのコレクションが存在します。<br>それらすべてにCompactコマンドを実施します。</p><p>コマンドの実行は下記になります。</p><blockquote><p><font color="red">WARNING</font><br> Always have an up-to-date backup before performing server maintenance such as the compact operation.</p></blockquote><p><code>訳: 警告 compactオペレーションのようなサーバメンテナンスを実行する前に、常に最新のバックアップを取得してください</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ mongo --port 27017</span><br><span class="line">&gt; use admin</span><br><span class="line">switched to db admin</span><br><span class="line">&gt; db.auth(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;password&quot;</span>)</span><br><span class="line">1</span><br><span class="line">&gt; use hogehoge</span><br><span class="line">&gt; db.runCommand ( &#123; compact: <span class="string">&#x27;foo&#x27;</span>&#125;)</span><br><span class="line">&#123; <span class="string">&quot;ok&quot;</span> : 1 &#125;</span><br></pre></td></tr></table></figure><p>データベースの修正が必要なので、admin権限で一度認証を通すためにadminデータベースにつないで認証します。<br>その後、対象のデータベースにつないでコレクション名を指定してコマンドを発行します。<br>私の環境だとすぐに結果が返ってきました。<br>下記は実行前後のデータベースの情報をmongo-expressで確認した結果です。</p><p>[table id=20 /]</p><p>変化した個所が1箇所しかないですし、微々たる変化です。<br>ストレージフォルダのサイズも <strong>19.5 GB (20,976,769,972 バイト)</strong> から <strong>19.5 GB (20,976,930,330 バイト)</strong> になって、むしろ増えています。</p><p>Insert,Select,インデックスの設定くらいしかしていないと、変化しないのでしょうね。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>かなり端折ったところもありますが、これで一区切りつけます。<br>自分としては、Insert,Select.Dropができればそれでよいデータベースが欲しく、SQLとか面倒だと思って、NoSQLの検討を始めた次第でしたが、思った以上にボリュームの多い内容になりました。</p><p>結論としては、MongoDBは、私には向かないかなぁ、って思いました。<br>MongoDBの採用するドキュメント型の仕組みは、キーと値がセットになっているがゆえに、型がわからないと復元もままならないご様子。<br>そこまで厳密な型付けは求めていません。<br>とはいうものの、拡張していくことを考えると、これはこれで問題ないのでしょうけど。</p><p>また、Node.jsに踏み込むとは、始めた時は全く考えていませんでした。<br>こういう思わぬ驚きがあるのが、テクノロジーの世界なんですね。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> C# </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> オープンソース </category>
          
          <category> .NETでNoSQLを試してみる MongoDB編 </category>
          
          <category> nosql </category>
          
          <category> JavaScript </category>
          
          <category> データベース </category>
          
          <category> MongoDB </category>
          
          <category> mongodb </category>
          
          <category> NoSQL </category>
          
          <category> mongo-express </category>
          
          <category> javascript </category>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows 10 Mobile Insider Preview に遅まきながら参加</title>
      <link href="2016/01/06/774/"/>
      <url>2016/01/06/774/</url>
      
        <content type="html"><![CDATA[<p>1年前のアメリカ出張の際に <strong>Amazon.com</strong> で注文した <strong>Lumia635</strong> を Windows 10 Mobile Insider Preview にアップデートしました。</p><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>手順は、アプリをダウンロードしてきて、そこから Insider Preview の Fast Ring 参加を設定することで設定から更新プログラム、すなわち Window 10 Mobileを適用できるという仕組みです。</p><h1 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h1><h2 id="更新-更新-更新"><a href="#更新-更新-更新" class="headerlink" title="更新!更新!!更新!!!"></a>更新!更新!!更新!!!</h2><ol><li><p>端末のブラウザから<a href="http://windows.microsoft.com/ja-jp/windows/preview-download-phone">ダウンロードページ</a>にアクセスしアプリを入手</p></li><li><p>アプリを起動する </p></li></ol><p><a href="../../../../public/2016/01/1.png"><img src="../../../../public/2016/01/1-180x300.png"></a></p><p><a href="../../../../public/2016/01/2.png"><img src="../../../../public/2016/01/2-180x300.png"></a></p><ol start="3"><li>設定から更新画面に移動して、更新プログラムの確認とインストールを実行 </li></ol><p><a href="../../../../public/2016/01/3.png"><img src="../../../../public/2016/01/3-180x300.png"></a></p><p><a href="../../../../public/2016/01/4.png"><img src="../../../../public/2016/01/4-180x300.png"></a></p><p><a href="../../../../public/2016/01/5.png"><img src="../../../../public/2016/01/5-180x300.png"></a></p><p><a href="../../../../public/2016/01/6.png"><img src="../../../../public/2016/01/6-180x300.png"></a></p><p><a href="../../../../public/2016/01/7.png"><img src="../../../../public/2016/01/7-180x300.png"></a></p><p><a href="../../../../public/2016/01/8.png"><img src="../../../../public/2016/01/8-180x300.png"></a></p><p><a href="../../../../public/2016/01/10.png"><img src="../../../../public/2016/01/10-180x300.png"></a></p><ol start="4"><li>この時点では、8.1になっただけでした。</li></ol><p><a href="../../../../public/2016/01/9.png"><img src="../../../../public/2016/01/9-180x300.png"></a></p><ol start="5"><li>Cortana が追加されました。</li></ol><p><a href="../../../../public/2016/01/11.png"><img src="../../../../public/2016/01/11-180x300.png"></a></p><ol start="6"><li>何回か設定-&gt;更新プログラムを繰り返してアップデートするとようやく完成。</li></ol><p><a href="../../../../public/2016/01/12.png"><img src="../../../../public/2016/01/12-180x300.png"></a></p><p><a href="../../../../public/2016/01/13.png"><img src="../../../../public/2016/01/13-180x300.png"></a></p><p>やったね。<br>アップデート直後はなぜかスクリーンショットの作成に失敗する旨のメッセージが出て、スクリーンショットがとれませんでしたが、再起動とか何回かしているとできるようになります。</p><h2 id="フォトが使いにくい"><a href="#フォトが使いにくい" class="headerlink" title="フォトが使いにくい"></a>フォトが使いにくい</h2><p>アップデート前はどうだったかはわかりませんが、<strong>OneDrive</strong> へのアップロードの際、写真を複数選択してShareしてもアップロードされるのは先頭のアイテムのみでした。<br>これ、バグでしょ？Connectに報告するか？</p><p><font color="red">2016/01/08 更新</font></p><p>最新版のOneDriveアプリ(17.6.1)に更新したら直りました。<br>OneDriveはOSアップデートで更新されなかったのね…</p><p><font color="red">2016/01/07 更新</font></p><p><a href="http://answers.microsoft.com/en-us/insider/forum/insider_wintp-insider_files/can-not-upload-multiple-photo-files-to-onedrive/92e4a55e-9e5b-460d-97e4-c7b1d0a60e1c?tm=1452093058005">Microsoft Community</a> に投稿しました。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>時間はかかりますが、アップデート終了です。<br>しょぼい端末なので、気持ちもっさりですが…</p><p>まもなく正式公開ですが、一足早くWindows Mobile 10を体験したい方はどうぞ。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> Windows Phone </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでNoSQLを試してみる MongoDB編 第7回</title>
      <link href="2016/01/06/695/"/>
      <url>2016/01/06/695/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/01/05/690">前回</a>はデータの読み込みのパフォーマンス測定を実施しました。今回はインデックスの作成を行い、読み込み性能の改善を行いたいと思います。</p><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>前回は、結果も課程も散々でした。<br>環境は前回と同じです。</p><h1 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h1><h2 id="インデックスの設定"><a href="#インデックスの設定" class="headerlink" title="インデックスの設定"></a>インデックスの設定</h2><p><a href="https://docs.mongodb.org/getting-started/csharp/indexes/">Indexes with C# Driver</a>によれば、</p><blockquote><p>Indexes can support the efficient execution of queries. MongoDB automatically creates an index on the _id field upon the creation of a collection.</p></blockquote><p><code>訳: インデックスは効率的なクエリの実行をサポートすることができます。MongoDBは自動的に _id フィールド上にコレクション作成時にインデックスを作成します。</code></p><p>と言っています。<br>既にインデックスが張られているといっています。<br>といっても、_idフィールドなので、これまでの検索には影響しないと思います。<br>追加で設定する場合は、</p><blockquote><p>var keys = Builders.IndexKeys.Ascending().Ascending(); await collection.Indexes.CreateOneAsync(keys);</p></blockquote><p>と、するようです。<br>というわけで、前回の3種のオブジェクトの <strong>No プロパティ</strong> に昇順のインデックスを設定してみます。<br>こんな感じです。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SetSmallIndex</span>(<span class="params">MongoClient mongoClient</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;SetSmallIndex&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> database = mongoClient.GetDatabase(DatabaseName);</span><br><span class="line">    <span class="keyword">var</span> collection = database.GetCollection&lt;SmallObjectData&gt;(CollectionName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> keys = Builders&lt;SmallObjectData&gt;.IndexKeys.Ascending(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">    collection.Indexes.CreateOne(keys);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="インデックスの設定後"><a href="#インデックスの設定後" class="headerlink" title="インデックスの設定後"></a>インデックスの設定後</h2><p>割と時間がかかりました。1,000,000件も登録されていればそうでしょう。</p><p><a href="../../../../public/2015/12/Index.png"><img src="../../../../public/2015/12/Index.png" alt="Index"></a></p><p>mongo-expressで確認すると、<strong>Indexes #</strong> が 2 になっています。</p><p>そして、前回と同じように、検索を実行します。検索結果の個数は10になります。<br>その結果が下記になります。</p><p>[table id=18 /]</p><p>劇的に改善しました。370倍です。Largeに至っては計測できるようにさえなりました。<br>Smallが悪化してますが、誤差でしょう。多分。<br>実行後、<strong>mongod.exe</strong> のメモリ量は大きく増えていません。</p><h2 id="検索結果の個数は影響するか？"><a href="#検索結果の個数は影響するか？" class="headerlink" title="検索結果の個数は影響するか？"></a>検索結果の個数は影響するか？</h2><p>前回、メモリ確保が原因なのか、途中で例外を投げて落ちました。<br>今回は、検索結果の個数が1,000,000から10になるようにしてあります。</p><p>では、これを変化させたら、検索速度はどう変化するでしょうか？ 1,000,000件のデータを対象に、検索結果の個数が増えていった場合のパフォーマンスを下記に記載します。</p><p>[table id=19 /]</p><p>増えていくごとに悪化していく傾向です。<br>ただし、劇的に悪化しているのは、初回のクエリだけ100秒とかで、それ以降はキャッシュが聞いています。それでも、後半は <strong>2,000 ms</strong> とかかかっていますが。<br>それでも、インデックスを設定する前と比べたら、劇的すぎる改善です。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>バイナリファイルを扱う際は、必ずインデックスを設定し、検索のパフォーマンスを向上させるのと、検索途中の結果でOutOfMemoryExceptionを発生させないようにする必要があります。<br>必要なら複数のインデックスを設定して、結果が少なくなるようするべきです。</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p>テストに使った最終的なコードは下記になります。<br><a href="https://github.com/takuya-takeuchi/Demo/tree/master/MongoDB7">https://github.com/takuya-takeuchi/Demo/tree/master/MongoDB7</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> C# </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> オープンソース </category>
          
          <category> .NETでNoSQLを試してみる MongoDB編 </category>
          
          <category> nosql </category>
          
          <category> JavaScript </category>
          
          <category> データベース </category>
          
          <category> MongoDB </category>
          
          <category> mongodb </category>
          
          <category> NoSQL </category>
          
          <category> mongo-express </category>
          
          <category> javascript </category>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでNoSQLを試してみる MongoDB編 第6回</title>
      <link href="2016/01/05/690/"/>
      <url>2016/01/05/690/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/01/04/680">前回</a>はデータの書き込みのパフォーマンス測定を実施しました。今回はデータの読み込みのパフォーマンス測定を行いたいと思います。</p><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>結果はともかく、測定の課程は散々でした。<br><strong>InsertOne</strong> してもメモリが解放されないのもあれですが。</p><p>環境は前回と同じです。</p><h1 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h1><h2 id="Read-Small-Objects"><a href="#Read-Small-Objects" class="headerlink" title="Read Small Objects"></a>Read Small Objects</h2><p>まず、下記のオブジェクトを1,000,000個書き込みます。<br>データベースは、<strong>SmallObjectData</strong>、コレクション名は、<strong>SmallObjectData</strong> です。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">SmallObjectData</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ObjectId Id</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span>;</span><br><span class="line">        <span class="keyword">set</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> No</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">set</span>;</span><br><span class="line">        <span class="keyword">get</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DateTime Established</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span>;</span><br><span class="line">        <span class="keyword">set</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>No プロパティ</strong>には 0 から 999,999 が入ります。<br>そのあと、<strong>No プロパティ</strong>を 100000 で剰余した余りが0のものだけを Select します。<br>下記のようなコードになります。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> collection = database.GetCollection&lt;SmallObjectData&gt;(CollectionName);</span><br><span class="line"><span class="keyword">var</span> list = collection.FindSync(data =&gt; data.No % <span class="number">100000</span> == <span class="number">0</span>).ToList();</span><br></pre></td></tr></table></figure><p>ToList メソッドをコールしているのは、この時点で検索結果を確定して、オブジェクトを取得するためです。<br>IEnumerable の場合、実際に使用するまでは、評価はされないので。<br>試行回数は3回で、平均値をとっています。<br>が、どうも最初だけ遅くて、あとはキャッシュが効いている感じがします。</p><p>なので、10回の試行で平均値をとります。<br>平均は<strong>420.8 ms</strong> でした。</p><h2 id="Read-Large-Objects"><a href="#Read-Large-Objects" class="headerlink" title="Read Large Objects"></a>Read Large Objects</h2><p>まず、下記のオブジェクトを1,000,000個書き込みます。<br>データベースは、<strong>LargeObjectData</strong>、コレクション名は、<strong>LargeObjectData</strong> です。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">LargeObjectData</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ObjectId Id</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span>;</span><br><span class="line">        <span class="keyword">set</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> No</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">set</span>;</span><br><span class="line">        <span class="keyword">get</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] DataBytes</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">set</span>;</span><br><span class="line">        <span class="keyword">get</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DateTime Established</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span>;</span><br><span class="line">        <span class="keyword">set</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>No プロパティ</strong>には 0 から 999,999 が入ります。<br>そのあと、<strong>No プロパティ</strong>を 100000 で剰余した余りが0のものだけを Select します。<br>Select コードは前段と同じです。<br><br></p><h4 id="が、結論から言うと、計測できませんでした。"><a href="#が、結論から言うと、計測できませんでした。" class="headerlink" title="が、結論から言うと、計測できませんでした。"></a>が、結論から言うと、計測できませんでした。</h4><br><p>剰余する数を増やそうが減らそうがとにかく、<strong>mongod.exe</strong> が <strong>OutOfMemoryException</strong> でこけます。<br>Selectする段階で、途中結果を解放していないのかしりませんが、メモリが急激に増えていって、こけます。</p><p>例外は、</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ハンドルされていない例外: System.FormatException: An error occurred while deserializing the DataBytes property of class MongoDB7.Program+MiddleObjectData: 種類 &#39;System.OutOfMemoryException&#39; の例外がスローされました。 ---&gt; System.OutOfMemoryException: 種類 &#39;System.OutOfMemoryException&#39; の例外がスローされました。</span><br><span class="line">   場所 MongoDB.Bson.IO.BsonStreamExtensions.ReadBytes(BsonStream stream, Int32 count)</span><br><span class="line">   場所 MongoDB.Bson.IO.BsonBinaryReader.ReadBytes()</span><br><span class="line">   場所 MongoDB.Bson.Serialization.Serializers.ByteArraySerializer.DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args)</span><br><span class="line">   場所 MongoDB.Bson.Serialization.Serializers.SealedClassSerializerBase&#96;1.Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args)</span><br><span class="line">   場所 MongoDB.Bson.Serialization.Serializers.SerializerBase&#96;1.MongoDB.Bson.Serialization.IBsonSerializer.Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args)</span><br><span class="line">   場所 MongoDB.Bson.Serialization.IBsonSerializerExtensions.Deserialize(IBsonSerializer serializer, BsonDeserializationContext context)</span><br><span class="line">   場所 MongoDB.Bson.Serialization.BsonClassMapSerializer&#96;1.DeserializeMemberValue(BsonDeserializationContext context, BsonMemberMap memberMap)</span><br><span class="line">   --- 内部例外スタック トレースの終わり ---</span><br><span class="line">   場所 MongoDB.Bson.Serialization.BsonClassMapSerializer&#96;1.DeserializeMemberValue(BsonDeserializationContext context, BsonMemberMap memberMap)</span><br><span class="line">   場所 MongoDB.Bson.Serialization.BsonClassMapSerializer&#96;1.DeserializeClass(BsonDeserializationContext context)</span><br><span class="line">   場所 MongoDB.Bson.Serialization.BsonClassMapSerializer&#96;1.Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args)</span><br><span class="line">   場所 MongoDB.Bson.Serialization.IBsonSerializerExtensions.Deserialize[TValue](IBsonSerializer&#96;1 serializer, BsonDeserializationContext context)</span><br><span class="line">   場所 MongoDB.Driver.Core.Operations.CursorBatchDeserializationHelper.DeserializeBatch[TDocument](RawBsonArray batch, IBsonSerializer&#96;1 documentSerializer, MessageEncoderSettings messageEncoderSettings)</span><br><span class="line">   場所 MongoDB.Driver.Core.Operations.AsyncCursor&#96;1.CreateCursorBatch(BsonDocument result)</span><br><span class="line">   場所 MongoDB.Driver.Core.Operations.AsyncCursor&#96;1.ExecuteGetMoreCommand(IChannelHandle channel, CancellationToken cancellationToken)</span><br><span class="line">   場所 MongoDB.Driver.Core.Operations.AsyncCursor&#96;1.GetNextBatch(CancellationToken cancellationToken)</span><br><span class="line">   場所 MongoDB.Driver.Core.Operations.AsyncCursor&#96;1.MoveNext(CancellationToken cancellationToken)</span><br><span class="line">   場所 MongoDB.Driver.IAsyncCursorExtensions.ToList[TDocument](IAsyncCursor&#96;1 source, CancellationToken cancellationToken)</span><br><span class="line">   場所 MongoDB.Driver.IAsyncCursorSourceExtensions.ToList[TDocument](IAsyncCursorSource&#96;1 source, CancellationToken cancellationToken)</span><br></pre></td></tr></table></figure><p>とでます。<br><strong>ReadBytes</strong> とあるので、mongod.exe からの結果の受け渡しか何かのためのバッファを作成するために、マネージドにメモリを作った際、LOHがたくさんあって、メモリが確保できずに例外発生、というように見えます。</p><h2 id="Read-Middle-Objects"><a href="#Read-Middle-Objects" class="headerlink" title="Read Middle Objects"></a>Read Middle Objects</h2><p>とにかくオブジェクトサイズを減らしてみます。<br><strong>GC</strong> が苦手とする <strong>85,000</strong> が問題としか思えませんので、オブジェクト全体が 85,000 バイトを超えないようにします。<br>前段のオブジェクト同じですが、<strong>DataBytes</strong> の長さを <strong>80,000</strong> にします。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">MiddleObjectData</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ObjectId Id</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span>;</span><br><span class="line">        <span class="keyword">set</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> No</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">set</span>;</span><br><span class="line">        <span class="keyword">get</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] DataBytes</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">set</span>;</span><br><span class="line">        <span class="keyword">get</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DateTime Established</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span>;</span><br><span class="line">        <span class="keyword">set</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これを1,000,000 個追加すると、下記の結果になりました。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Data Size 80.1 gb</span><br><span class="line">Storage Size 4.12 gb</span><br><span class="line">Avg Obj Size # 80.1 kb</span><br><span class="line">Objects # 1000000</span><br></pre></td></tr></table></figure><p>これで一つのオブジェクトの復元で <strong>85,000 バイトを超えない</strong>ので、 <strong>LOH</strong> にならず、GC の影響を避けることができます。<br>これでこれまでと同じようにselectしてみます。</p><p>今度は成功しました。が、べらぼうに遅いです。<br>でも、オブジェクトサイズによって、何かしら致命的な影響があるように見えます。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>3種のオブジェクトを検索した結果は下記になります。<br>[table id=17 /] .NETのGCの影響をもろに受けているとしか思えない感じです。<br>次回はインデックスを使って、検索速度の改善を試みたいと思います。</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p>テストに使った最終的なコードは下記になります。<br><a href="https://github.com/takuya-takeuchi/Demo/tree/master/MongoDB6">https://github.com/takuya-takeuchi/Demo/tree/master/MongoDB7</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> C# </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> オープンソース </category>
          
          <category> .NETでNoSQLを試してみる MongoDB編 </category>
          
          <category> nosql </category>
          
          <category> JavaScript </category>
          
          <category> データベース </category>
          
          <category> MongoDB </category>
          
          <category> mongodb </category>
          
          <category> NoSQL </category>
          
          <category> mongo-express </category>
          
          <category> javascript </category>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでNoSQLを試してみる MongoDB編 第5回</title>
      <link href="2016/01/04/680/"/>
      <url>2016/01/04/680/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/01/02/647">前回</a>は脇道にそれてパスワードの設定を実施しました。今回はデータの書き込みのパフォーマンス測定を行いたいと思います。</p><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>NpSQLの売りはデータの読み書きです。RDBMSが持つ柔軟な集計や検索をある程度犠牲にして得た特徴ですが、どの程度凄いのでしょうか。<br>大量のデータの読み書きのパフォーマンスを計測してみます。<br>環境は</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">OS:Windows 10 Pro 64bit</span><br><span class="line">CPU：Intel Core i3-4130 3.40GHz</span><br><span class="line">メモリ：16GB</span><br><span class="line">HDD：WesternDigital WD10EACS-22D6B0</span><br></pre></td></tr></table></figure><h1 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h1><h2 id="Write-Small-Objects"><a href="#Write-Small-Objects" class="headerlink" title="Write Small Objects"></a>Write Small Objects</h2><p>下記のオブジェクトを1,000,000個書き込みます。<br>試行回数は3回で、平均値をとっています。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">Data</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ObjectId Id</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span>;</span><br><span class="line">        <span class="keyword">set</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> No</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">set</span>;</span><br><span class="line">        <span class="keyword">get</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DateTime Established</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span>;</span><br><span class="line">        <span class="keyword">set</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MongoDB上では、書き込みの結果、下記の数値が得られました。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Data Size 51.0 mb</span><br><span class="line">Storage Size 14.4 mb</span><br><span class="line">Avg Obj Size # 51.0 bytes</span><br><span class="line">Objects # 1000000</span><br></pre></td></tr></table></figure><p>[table id=15 /]</p><p>OneとManyは、Insertに使うメソッドの違いです。単一のオブジェクトの挿入かIEnumrableの挿入かの違いです。<br>差はないも同然でしたが。<br>一応書き込みは0.1-0.2ms/個のようです。これは速いのか？</p><h2 id="Write-Large-Objects"><a href="#Write-Large-Objects" class="headerlink" title="Write Large Objects"></a>Write Large Objects</h2><p>次は下記のオブジェクトを1,000,000個書き込みます。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">LargeData</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ObjectId Id</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span>;</span><br><span class="line">        <span class="keyword">set</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] DataBytes</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">set</span>;</span><br><span class="line">        <span class="keyword">get</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DateTime Established</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span>;</span><br><span class="line">        <span class="keyword">set</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>試行回数は3回で、平均値をとっています。<br>byte[]のサイズは100,000です。少なくともGCが苦手とする85,000よりは大きくしました。</p><p>ですが、残念なことに、書き込み終わる前に <strong>OutOfMemoryException</strong> でサンプルプログラムが落ちました。<br>落ちた直後のデータベースは</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Data Size 100 gb</span><br><span class="line">Storage Size 8.22 gb</span><br><span class="line">Avg Obj Size # 100 kb</span><br><span class="line">Objects # 1000000</span><br></pre></td></tr></table></figure><p>となっていました。<br>(まぁこれは、InsertOneによる結果ですが)</p><p><a href="../../../../public/2015/12/TaskManager.png"><img src="../../../../public/2015/12/TaskManager.png" alt="TaskManager"></a></p><p>恐ろしいマネージャー。</p><p><a href="../../../../public/2015/12/Storage.png"><img src="../../../../public/2015/12/Storage.png" alt="Storage"></a></p><p>恐ろしいストレージ。</p><p>計測できないので、1桁落として、100,000個にします。<br>あと、データベースを一度全てリセットします。</p><p>が、これも落ちる。ちなみに落ちるのは、InsertMany メソッド。<br>ちょっとあれなので計算しました。</p><p><strong>100,000(個)*100(kb)=9765MB</strong></p><p>とすると、半分ならギリギリ大丈夫？<br>…ダメでした。25,000でようやくOKでしたが、それでもメモリは5GB近く確保したままでした。<br>でも、InsertOneなら1,000,000個挿入しても、7GBまで保持しました。なんで？</p><p>このテスト、すっごいHDDに負荷かかる(白目) ずっとHDD、100%なんだぜ？</p><p>[table id=16 /]</p><p>参考値ですが、オブジェクト数とスピードは比例に近い感じですね。<br>あと、0.81ms/個のようです。こちらは単純にオブジェクトサイズには比例しないようですが。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>予想以上に苦労しました。<br>まさかOutOfMemoryExpcetionで躓くとは予想外でした。<br>パフォーマンスとしては、あまり良いとも悪いとも言えないです。<br>どこかでRDMBSで似たデータ構造の比較試験がないでしょうか？</p><p>次は読み込みのパフォーマンス試験を予定です。</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p>テストに使った最終的なコードは下記になります。<br><a href="https://github.com/takuya-takeuchi/Demo/tree/master/MongoDB5">https://github.com/takuya-takeuchi/Demo/tree/master/MongoDB5</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> C# </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> オープンソース </category>
          
          <category> .NETでNoSQLを試してみる MongoDB編 </category>
          
          <category> nosql </category>
          
          <category> JavaScript </category>
          
          <category> データベース </category>
          
          <category> MongoDB </category>
          
          <category> mongodb </category>
          
          <category> NoSQL </category>
          
          <category> mongo-express </category>
          
          <category> javascript </category>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DynDNS の設定方法変更</title>
      <link href="2016/01/03/771/"/>
      <url>2016/01/03/771/</url>
      
        <content type="html"><![CDATA[<p><strong>buffalo</strong> のルータ <strong>WZR-1750DHP2</strong> で <strong>DDNS</strong> を使ってリモートアクセスを実現しているのですが、いつの間にか設定方法が変わっていたのでメモ。</p><a id="more"></a><p>以前は、ユーザ名とパスワードを設定することで同期を実現していたのですが、いつの間にかこの同期が失敗していることに気づきました。<br>そこで、DynDNSのページを見ていると見慣れない項目が。</p><p><a href="../../../../public/2016/01/dyndns.png"><img src="../../../../public/2016/01/dyndns-300x118.png" alt="dyndns"></a></p><p><strong>Updater Client Key?</strong></p><blockquote><p>An updater client key can be used to authenticate an updater client with Dyn in place of a password. This provides additional security as the key cannot be used to manage your account on Dyn.com. This can be used in the official client from the ‘Resources’ section of the Dyn website, or in a hardware based client such as in many routers with DDNS support.</p></blockquote><p><code>訳: 更新クライアントキーは、パスワードに変わって、Dynが更新クライアントを認証するために使用されます。これは、Dyn.comのアカウントを管理するのに利用できないキーを追加のセキュリティとして提供します。これは、Dyn Webサイトのセクション Resource から公式クライアント、またはDDNSをサポートしている多数のルータのようなハードウェアベースで利用できます。</code></p><p>ってあります。<br>いつから、こんなのになってのさ。</p><p>というわけで、パスワードに入力する文字列をこのキーに変更すると無事に同期されるようになりました。</p>]]></content>
      
      
      <categories>
          
          <category> 雑記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>codecademy 始めました</title>
      <link href="2016/01/03/765/"/>
      <url>2016/01/03/765/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.codecademy.com/">codecademy</a> という海外のプログラミング学習サイトで <strong>Python</strong> の学習を始めました。</p><a id="more"></a><p><strong>C#</strong> は十分使える (<strong>async/await</strong>、<strong>式木</strong> とかは超苦手) ので、第二言語として何か使えないかなぁ、って思って<strong>Python</strong> にしました。<br>一応Javaは使えるのですが、いかんせん <strong>Java5</strong> の知識。<br>読み書きにはさほど困らない程度ですが…</p><p><strong>Ruby</strong> にしようかなぁ、って思ったけど思った以上にWindowsで普及率が低い感じに見えるので断念。<br><strong>RubyMine</strong> が使えるから、一応できなくはないのですが…</p><p>数ヶ月でものにできればいいなぁ。<br>最近はDeepLeaningとかなんだかんだでPythonを見かけることが多いので。<br>会社でもPythonを使ったプロジェクトが出たので、ソースを読めた方が良いでしょう、という目論見も。<br>とはいえ、今日日一個言語を覚えれば、読むだけなら何とかなると思います。</p><p><strong>あ、関数型は無理。</strong></p>]]></content>
      
      
      <categories>
          
          <category> %e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%e8%a8%80%e8%aa%9e </category>
          
          <category> Python </category>
          
          <category> サービス紹介 </category>
          
          <category> プログラミング言語 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでNoSQLを試してみる MongoDB編 第4回</title>
      <link href="2016/01/03/665/"/>
      <url>2016/01/03/665/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/01/02/647">前回</a>はデータを確認してみました。今回は少しわき道にそれてパスワードを設定します。</p><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>前回まで、無防備状態でデータベースにアクセスしたり、サーバー走らせたりと、やりたい放題でした。</p><p>さすがにそれは不味い、ということでMongoDBとmongo-expressにパスワードを設定します。</p><h1 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h1><h2 id="mongo-express"><a href="#mongo-express" class="headerlink" title="mongo-express"></a>mongo-express</h2><p>早急にこっちをどうにかします。サーバーの脆弱性、とかいうお寒い状態は嫌なので。</p><p><a href="https://github.com/andzdroid/mongo-express">公式ページ</a>によればパスワードは <strong>config.js</strong> を修正する、って書いてあります。</p><blockquote><p>ME_CONFIG_BASICAUTH_USERNAME ME_CONFIG_BASICAUTH_PASSWORD</p></blockquote><p>この2つのようです。</p><p>書きえて、mongo-expressを再起動します。</p><p>どうも、ローカルでインストールした場合、<strong>node app</strong> で動いているコマンドプロンプトを終了または <strong>Ctrl + C</strong> で落とせば終了するようです。</p><p>で、書き換えて再起動すると、ちゃんと変わっていることが確認できました。</p><h2 id="BASIC-認証ってださいよねー"><a href="#BASIC-認証ってださいよねー" class="headerlink" title="BASIC 認証ってださいよねー"></a>BASIC 認証ってださいよねー</h2><p>その名の通り。</p><p>というか1Passwordが使えないから面倒。</p><p>で、もう一度調べてみると。</p><blockquote><p>mongo-express login name. Sending an empty string will disable basic authentication.</p></blockquote><p><code>訳: mongo-expreessのログイン名。空文字列を送ると、BASIC認証を無効化。</code> という記述を発見。</p><p>ん？でもこれだと、ユーザー名はどうなるの？と思ったが試してみることに。</p><p>あれ？BASIC認証のまま。</p><p>というか、ユーザ名が空文字でパスワードが変わらないだけじゃん。</p><p>どうも、BASIC認証を無効にして、別の認証にするわけではなく、そもそも認証があるかどうかしかないようだ。</p><p>でも空文字にしても設定が有効じゃん。</p><p>試行錯誤した結果</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-  useBasicAuth: process.env.ME_CONFIG_BASICAUTH_USERNAME !== &#x27;&#x27;,</span></span><br><span class="line"><span class="addition">+  useBasicAuth: process.env.ME_CONFIG_BASICAUTH_USERNAME || false,</span></span><br></pre></td></tr></table></figure><p>にすると、認証そのものがなくなり、さらなる無防備状態になるようだ。</p><p>もうこれでいいような。</p><h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><p>今度はこっちにパスワードを設定する。</p><p>mongo-expressからはそういうことはできないご様子。</p><p>ただ、さっきの <strong>config.js</strong> に</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &gt;&gt;&gt;&gt; If you are using an admin mongodb account, or no admin account exists, fill out section below // &gt;&gt;&gt;&gt; Using an admin account allows you to view and edit all databases, and view stats </span></span><br></pre></td></tr></table></figure><p>という記述があるのを発見。</p><p>MongoDBにはAdminユーザがあるってこと？と思いぐぐる。</p><p><a href="https://docs.mongodb.org/v3.0/tutorial/enable-authentication/">Enable Client Access Control</a>によると、</p><blockquote><p>Considerations With access control enabled, ensure you have a user with userAdmin or userAdminAnyDatabase role in the admin database. You can create users before enabling access control or you can create users after enabling access control. If you enable access control before creating any user, MongoDB provides a localhost exception which allows you to create a user administrator in the admin database. Once created, authenticate as the user administrator to create additional users as needed.</p></blockquote><p>`訳: 検討 アクセス制御を有効にすると、(あなたが)userAdminまたはuserAdminAnyDataaseロールを保持しているかどうかをadminデータベースで確認します。</p><p>(あなたが)アクセス制御を有効にする前にユーザーを作成することもできますし、アクセス制御を有効にした後でもユーザを作成することができます。もし、ユーザを作成する前にアクセス制御を有効にすると、MongoDBは、adminデータベース内にadministratorユーザを作成することを許可するlocalhost例外を提供します。一度作成すると、必要に応じて追加ユーザを作成するのにadministratorユーザとして認証します。` </p><p>とあるので、アクセス制御さえ有効にしてしまえば、外部からアクセスされる心配はないってことでは？ 少なくとも、外部からMongoDBにつなぐことは今のところないし。</p><p>でも一応管理者ユーザを作っておきます。</p><p>まずは、アクセス制御を有効にします。</p><p>現在はサービスとして有効にしているので、サービス起動時に読み込んでいる設定ファイルに必要な設定を書き込みます。</p><p>私の場合は、<strong>D:\MongoDB\mongd.cfg</strong> になります。</p><p><a href="https://docs.mongodb.org/manual/reference/configuration-options/#security-options">Configuration File Options</a> によれば、</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">security:</span></span><br><span class="line">   <span class="attr">authorization:</span> <span class="string">&lt;string&gt;</span></span><br></pre></td></tr></table></figure><p>とある。</p><p>既定は <strong>disabled</strong> なので <strong>enabled</strong> で追加してみる。</p><p>次はユーザを追加する。</p><p>まずはデータベースに接続します。ポート番号とは既定のままとします。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd c:\Program Files\MongoDB\Server\3.2\bin mongo --port 27017 </span><br></pre></td></tr></table></figure><p>次にユーザを追加します。</p><p>ユーザ名とパスワードは適宜変更を。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use admin</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> db.createUser( &#123; user: <span class="string">&quot;admin&quot;</span>, <span class="built_in">pwd</span>: <span class="string">&quot;password&quot;</span>, roles: [ &#123; role: <span class="string">&quot;root&quot;</span>, db: <span class="string">&quot;admin&quot;</span> &#125; ]  &#125;)</span></span><br></pre></td></tr></table></figure><p>上は、role に <strong>root</strong> を指定しています。</p><p>公式は <strong>userAdminAnyDatabase</strong> を使え、って言ってますが、それだと、mongo-expressが動きません。</p><p>これで <strong>3時間くらい</strong> 無駄にしました。</p><p>入力が終わると、 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Successfully added user: &#123;</span><br><span class="line">        &quot;user&quot; : &quot;admin&quot;,</span><br><span class="line">        &quot;roles&quot; : [</span><br><span class="line">                &#123;</span><br><span class="line">                        &quot;role&quot; : &quot;root&quot;,</span><br><span class="line">                        &quot;db&quot; : &quot;admin&quot;</span><br><span class="line">                &#125;</span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>と出力されれば成功です。これでadminデータベースにadminユーザが追加されました。</p><p>一度exitで終了します。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">exit</span> </span></span><br></pre></td></tr></table></figure><p>サービスを再起動します。</p><p>もう一度データベースに接続し、 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> use admin</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> show users </span></span><br></pre></td></tr></table></figure><p>とすると </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2015-12-30T00:17:41.833+0900 E QUERY    [thread1] Error: not authorized on admin to execute command &#123; usersInfo: 1.0 &#125; :</span><br></pre></td></tr></table></figure><p>と返ってきて認証エラーでユーザ一覧が表示できないことがわかります。</p><p>再度exitで終了しますが、今度は、 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo --port 27017 -u &quot;admin&quot; -p &quot;password&quot; --authenticationDatabase &quot;admin&quot;</span><br></pre></td></tr></table></figure><p>でログインし、adminデータベースにつないで、show usersします。</p><p>今度は、 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> show users</span></span><br><span class="line">&#123;</span><br><span class="line">        &quot;_id&quot; : &quot;admin.admin&quot;,</span><br><span class="line">        &quot;user&quot; : &quot;admin&quot;,</span><br><span class="line">        &quot;db&quot; : &quot;admin&quot;,</span><br><span class="line">        &quot;roles&quot; : [</span><br><span class="line">                &#123;</span><br><span class="line">                        &quot;role&quot; : &quot;root&quot;,</span><br><span class="line">                        &quot;db&quot; : &quot;admin&quot;</span><br><span class="line">                &#125;</span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>となり、認証機能が働いていることがわかります。</p><h2 id="mongo-expressのadmin対応"><a href="#mongo-expressのadmin対応" class="headerlink" title="mongo-expressのadmin対応"></a>mongo-expressのadmin対応</h2><p>もう一度、config.jsを開き、 </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//set admin to true if you want to turn on admin features</span><br><span class="line">//if admin is true, the auth list below will be ignored</span><br><span class="line">//if admin is true, you will need to enter an admin username/password below (if it is needed)</span><br><span class="line"><span class="attribute">admin</span>: false,</span><br></pre></td></tr></table></figure><p>を </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//set admin to true if you want to turn on admin features</span><br><span class="line">//if admin is true, the auth list below will be ignored</span><br><span class="line">//if admin is true, you will need to enter an admin username/password below (if it is needed)</span><br><span class="line"><span class="attribute">admin</span>: true,</span><br></pre></td></tr></table></figure><p>に修正。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//leave username and password empty if no admin account exists</span><br><span class="line"><span class="attribute">adminUsername</span>: process.env.ME_CONFIG_MONGODB_ADMINUSERNAME || &#x27;&#x27;,</span><br><span class="line"><span class="attribute">adminPassword</span>: process.env.ME_CONFIG_MONGODB_ADMINPASSWORD || &#x27;&#x27;,</span><br></pre></td></tr></table></figure><p>を </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//leave username and password empty if no admin account exists</span><br><span class="line"><span class="attribute">adminUsername</span>: process.env.ME_CONFIG_MONGODB_ADMINUSERNAME || &#x27;admin&#x27;,</span><br><span class="line"><span class="attribute">adminPassword</span>: process.env.ME_CONFIG_MONGODB_ADMINPASSWORD || &#x27;password&#x27;,</span><br></pre></td></tr></table></figure><p>に修正。</p><p>ユーザ名とパスワードは適宜変更を。</p><p>これでmongo-expressが動きます。</p><h2 id="プログラムからもデータベースを操作"><a href="#プログラムからもデータベースを操作" class="headerlink" title="プログラムからもデータベースを操作"></a>プログラムからもデータベースを操作</h2><p>以前のプログラムで、TestConnect メソッドを呼ぶと、ListDatabases メソッドをコールした時点で下記の例外が発生します。</p><p><code>型 &#39;MongoDB.Driver.MongoCommandException&#39; のハンドルされていない例外が MongoDB.Driver.Core.dll で発生しました 追加情報:Command listDatabases failed: not authorized on admin to execute command &#123; listDatabases: 1 &#125;.</code> </p><p>認証情報が足りないためなので、接続文字列を下記のように修正します。</p><p>修正後のソースは<a href="https://github.com/takuya-takeuchi/Demo/tree/master/MongoDB4">こちら</a>。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">string</span> UserName = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">string</span> Password = <span class="string">&quot;password&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> mongoClient = <span class="keyword">new</span> MongoClient(<span class="keyword">string</span>.Format(<span class="string">&quot;mongodb://&#123;0&#125;:&#123;1&#125;@localhost&quot;</span>, UserName, Password));</span><br><span class="line">    ・・TestConnect(mongoClient);</span><br><span class="line"></span><br><span class="line">    InsertData(mongoClient);</span><br><span class="line">    TestConnect(mongoClient);</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(<span class="string">&quot;Please enter any key...&quot;</span>);</span><br><span class="line">    Console.ReadKey();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ユーザ名とパスワードは適宜変更を。</p><p>これで新しいデータベースも追加できるようになりました。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>公式の罠にはまりましたが、何とかなりました。</p><p>詳しい原因はできたら次回以降に説明できればな、と思います。</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/MongoDB4">https://github.com/takuya-takeuchi/Demo/tree/master/MongoDB4</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> C# </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> .NETでNoSQLを試してみる MongoDB編 </category>
          
          <category> nosql </category>
          
          <category> JavaScript </category>
          
          <category> データベース </category>
          
          <category> MongoDB </category>
          
          <category> mongodb </category>
          
          <category> NoSQL </category>
          
          <category> mongo-express </category>
          
          <category> javascript </category>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでNoSQLを試してみる MongoDB編 第3回</title>
      <link href="2016/01/02/647/"/>
      <url>2016/01/02/647/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2016/01/01/639">前回</a>はデータを追加してみました。今回はデータを確認したいと思います。</p><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>RDBMSとは勝手が違うのがNoSQLですが、思った以上にやっかいです。既存の概念が通じません。<br>というか、データを見たいのに、未だに追加したデータのフィールド名すら見れません。なので、可視化ツールを導入したいと思います。</p><p>公式ページ<a href="https://docs.mongodb.org/ecosystem/tools/administration-interfaces/">Admin UIs</a>によると、たくさんツールがあります。<br><strong>mongo-express</strong> ってのがかっこいいですのでこれにします。<br><strong>MongoHub</strong> が一番いいのですが、MacOX用…インストール先がWindows10なので…いちいちMacにつなげなおしたり、リモートで入りなおすのも面倒だし。</p><h1 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h1><h2 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h2><p><a href="https://www.npmjs.com/package/mongo-express">公式サイト</a> によると、</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mongo-express</span><br></pre></td></tr></table></figure><p>または</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g mongo-express</span><br></pre></td></tr></table></figure><p>でインストールできるって言っています。</p></br></br></br><p><strong>(-ω- ?) npm って何？Linux?</strong></p></br></br></br><p>調べました。<br>hashrock様の<a href="http://qiita.com/hashrock/items/15f4a4961183cfbb2658">フロントエンド開発の３ステップ（npmことはじめ）</a> によれば、</p><blockquote><p>npm installは、npmリポジトリからライブラリをダウンロードしてくるコマンドです。</p></blockquote><p>とあります。Nugetみたいなもんか。<br>というか、<strong>Node.js</strong> ってことはJavaScript。そんな環境ない、と思いました。そもそもJavaScriptなんて、ちょっとしか触ったことないです。</p><p>でも、ひらめいた。そういや<strong>Visual Studio 2015</strong>インストールするとき、そんなのあった気が。</p><p><a href="../../../../public/2015/12/nodejs.png"><img src="../../../../public/2015/12/nodejs.png" alt="nodejs"></a></p><p><strong>おるでーーー^o^</strong></p><p>素敵やん。</p><p>もうちょい調べたところ。npm使うと、グローバルとローカルでパッケージを分けることができるよう。<br>unageanu様の<a href="http://unageanu.hatenablog.com/entry/20150308/1425779692">npmの基本的な使い方まとめ</a>によれば、</p><blockquote><ul><li><strong>ローカルインストール</strong><ul><li>開発中のアプリが依存するライブラリをインストールする場合に利用します。</li><li>インストールしたモジュールは、プロジェクト内のみで使えます。<ul><li>同じマシンで開発している他のプロジェクトからは使えないので、それぞれで別のバージョンを使用したりできます。</li><li>モジュールは、/node_modules にインストールされます。</li></ul></li></ul></li><li><strong>グローバルインストール</strong><ul><li>grunt のような、マシン全体で共有できる<a href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a>やライブラリをインストールする場合はこちら。</li><li>インストールしたモジュールは、マシン全体で共有されます。<ul><li>試した環境では、 –prefix=/usr/local を指定して<a href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB">コンパイル</a>しているので、モジュールは/usr/local/lib/node_modules/ にインストールされました。</li><li><a href="http://d.hatena.ne.jp/keyword/%A5%D1%A1%BC%A5%DF%A5%C3%A5%B7%A5%E7%A5%F3">パーミッション</a>に注意。EACCES エラーが起きる場合は、<a href="https://docs.npmjs.com/getting-started/fixing-npm-permissions">パーミッションか、インストール先を変更</a>します。</li></ul></li></ul></li></ul></blockquote><p>とのこと。今回はローカルかな。<br>管理者権限でコマンドプロンプトたちあげて、</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> c:\Program Files\MongoDB</span><br><span class="line">npm install mongo-express</span><br></pre></td></tr></table></figure><p>できたー！、というのは嘘。<br>エラーいっぱい出た。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">npm WARN peerDependencies The peer dependency kerberos@~0.0 included from mongodb-core will no</span><br><span class="line">npm WARN peerDependencies longer be automatically installed to fulfill the peerDependency</span><br><span class="line">npm WARN peerDependencies <span class="keyword">in</span> npm 3+. Your application will need to depend on it explicitly.</span><br><span class="line">/</span><br><span class="line">&gt; kerberos@0.0.17 install C:\Program Files\MongoDB\node_modules\mongo-express\node_modules\mongodb\node_modules\kerberos</span><br><span class="line">&gt; (node-gyp rebuild) || (<span class="built_in">exit</span> 0)</span><br><span class="line"></span><br><span class="line">C:\Program Files\MongoDB\node_modules\mongo-express\node_modules\mongodb\node_modules\kerberos&gt;<span class="keyword">if</span> not defined npm_config_node_gyp (node <span class="string">&quot;C:\Program Files (x86)\nodejs\node_modules\npm\bin\node-gyp-bin\..\..\node_modules\node-gyp\bin\node-gyp.js&quot;</span> rebuild )  <span class="keyword">else</span> (rebuild)</span><br><span class="line">gyp ERR! configure error</span><br><span class="line">gyp ERR! stack Error: Can<span class="string">&#x27;t find Python executable &quot;python&quot;, you can set the PYTHON env variable.</span></span><br><span class="line"><span class="string">gyp ERR! stack     at failNoPython (C:\Program Files (x86)\nodejs\node_modules\npm\node_modules\node-gyp\lib\configure.js:103:14)</span></span><br><span class="line"><span class="string">gyp ERR! stack     at C:\Program Files (x86)\nodejs\node_modules\npm\node_modules\node-gyp\lib\configure.js:64:11</span></span><br><span class="line"><span class="string">gyp ERR! stack     at FSReqWrap.oncomplete (evalmachine.&lt;anonymous&gt;:95:15)</span></span><br><span class="line"><span class="string">gyp ERR! System Windows_NT 6.3.9600</span></span><br><span class="line"><span class="string">gyp ERR! command &quot;node&quot; &quot;C:\Program Files (x86)\nodejs\node_modules\npm\node_modules\node-gyp\bin\node-gyp.js&quot; &quot;rebuild&quot;</span></span><br><span class="line"><span class="string">gyp ERR! cwd C:\Program Files\MongoDB\node_modules\mongo-express\node_modules\mongodb\node_modules\kerberos</span></span><br><span class="line"><span class="string">gyp ERR! node -v v0.12.2</span></span><br><span class="line"><span class="string">gyp ERR! node-gyp -v v1.0.3</span></span><br><span class="line"><span class="string">gyp ERR! not ok</span></span><br><span class="line"><span class="string">mongo-express@0.28.8 node_modules\mongo-express</span></span><br><span class="line"><span class="string">├── basic-auth-connect@1.0.0</span></span><br><span class="line"><span class="string">├── async@1.4.2</span></span><br><span class="line"><span class="string">├── consolidate@0.12.1</span></span><br><span class="line"><span class="string">├── underscore@1.8.3</span></span><br><span class="line"><span class="string">├── cookie-parser@1.4.0 (cookie-signature@1.0.6, cookie@0.2.2)</span></span><br><span class="line"><span class="string">├── commander@2.9.0 (graceful-readlink@1.0.1)</span></span><br><span class="line"><span class="string">├── serve-favicon@2.3.0 (fresh@0.3.0, ms@0.7.1, etag@1.7.0, parseurl@1.3.0)</span></span><br><span class="line"><span class="string">├── morgan@1.6.1 (on-headers@1.0.1, basic-auth@1.0.3, depd@1.0.1, debug@2.2.0, on-finished@2.3.0)</span></span><br><span class="line"><span class="string">├── method-override@2.3.5 (methods@1.1.1, vary@1.0.1, parseurl@1.3.0, debug@2.2.0)</span></span><br><span class="line"><span class="string">├── express-session@1.11.3 (cookie-signature@1.0.6, on-headers@1.0.1, cookie@0.1.3, utils-merge@1.0.0, parseurl@1.3.0, depd@1.0.1, crc@3.3.0, debug@2.2.0, uid-safe@2.0.0)</span></span><br><span class="line"><span class="string">├── errorhandler@1.4.2 (escape-html@1.0.2, accepts@1.2.13)</span></span><br><span class="line"><span class="string">├── body-parser@1.14.0 (bytes@2.1.0, content-type@1.0.1, depd@1.1.0, on-finished@2.3.0, debug@2.2.0, http-errors@1.3.1, qs@5.1.0, iconv-lite@0.4.11, type-is@1.6.10, raw-body@2.1.5)</span></span><br><span class="line"><span class="string">├── express@4.13.3 (escape-html@1.0.2, cookie@0.1.3, merge-descriptors@1.0.0, methods@1.1.1, utils-merge@1.0.0, cookie-signature@1.0.6, array-flatten@1.1.1, fresh@0.3.0, vary@1.0.1, etag@1.7.0, content-type@1.0.1, range-parser@1.0.3, parseurl@1.3.0, path-to-regexp@0.1.7, serve-static@1.10.0, content-disposition@0.5.0, depd@1.0.1, on-finished@2.3.0, finalhandler@0.4.0, debug@2.2.0, qs@4.0.0, proxy-addr@1.0.10, type-is@1.6.10, accepts@1.2.13, send@0.13.0)</span></span><br><span class="line"><span class="string">├── swig@1.4.2 (optimist@0.6.1, uglify-js@2.4.24)</span></span><br><span class="line"><span class="string">├── mongodb@2.1.2 (es6-promise@3.0.2, readable-stream@1.0.31, kerberos@0.0.17, mongodb-core@1.2.30)</span></span><br><span class="line"><span class="string">└── cli-color@1.1.0 (ansi-regex@2.0.0, d@0.1.1, es6-iterator@2.0.0, timers-ext@0.1.0, memoizee@0.3.9, es5-ext@0.10.11)</span></span><br></pre></td></tr></table></figure><p><strong>Python</strong> がいるのか。コマンドプロンプトで <strong>Python –version</strong> っていっても出ないから入ってないのだろう。<br><strong>3.5.1</strong> を<a href="https://www.python.org/downloads/">公式ページ</a>からダウンロードしてくる。<br>インストール後、一度コマンドプロンプトを再起動 (環境変数の反映) して、一度、</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -r mongo-express</span><br></pre></td></tr></table></figure><p>で削除してから、もう一度実行してみる。<br>でもだめー。<br>どうも、<strong>gyp</strong> とかいうのが、2.5.0以上3.0未満でないとダメって言ってる。面倒な。3.5.1 を削除、<strong>2.7.11</strong> をダウンロードして再インストールする。<br>あ、パスは手動で通すのね、2.7の場合。</p><p>次はワーニングとか出たけど、通った。</p><p>で、次は設定がいるのね。<a href="https://github.com/andzdroid/mongo-express">公式ページ</a>に</p><blockquote><p>To configure: Copy YOUR_PATH/node_modules/mongo-express/config.default.js into a new file called YOUR_PATH/node_modules/mongo-express/config.js.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">訳: YOUR_PATH&#x2F;node_modules&#x2F;mongo-express&#x2F;config.default.jsをYOUR_PATH&#x2F;node_modules&#x2F;mongo-express&#x2F;config.jsという名前でコピーしろ</span><br></pre></td></tr></table></figure><p>とあるので、従う。<br>実行は、</p><blockquote><p>cd YOUR_PATH/node_modules/mongo-express/ &amp;&amp; node app.js</p></blockquote><p>とあるので試してみる。たぶん、この&amp;&amp;は間違いだろうと思うが。<br>実行すると、ファイヤーウォールの警告が出るので、適宜許可。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">c:\Program Files\MongoDB\node_modules\mongo-express&gt;node app.js</span><br><span class="line">basicAuth credentials are <span class="string">&quot;admin:pass&quot;</span>, it is recommended you change this <span class="keyword">in</span> your config.js!</span><br><span class="line">Mongo Express server listening on port 8081 at 0.0.0.0</span><br><span class="line">Database connected</span><br><span class="line">Admin Database connected</span><br></pre></td></tr></table></figure><p>どうやら、8081ポートで動いているよう。アクセスしてみる。</p><p><a href="../../../../public/2015/12/edge.png"><img src="../../../../public/2015/12/edge.png" alt="認証"></a></p><p>認証画面が出るので、先の警告の通りデフォルトのユーザ名とパスを入れてみる。<br>無事に認証が通り、ページが表示されました。OK。</p><p><a href="../../../../public/2015/12/express.png"><img src="../../../../public/2015/12/express-1024x701.png" alt="mongo express"></a></p><h2 id="データを確認"><a href="#データを確認" class="headerlink" title="データを確認"></a>データを確認</h2><p>ようやくインストールが終わりました。パスワード設定とかは次回に…. 画面左の <strong>View Database</strong> でデータベースが見れるよう。</p><p>次のデータベース名が出るのでそこをクリック。<br>すると、よくわからない記号の羅列がでてくるので、そこをクリックすると、見えました。</p><p><a href="../../../../public/2015/12/result.png"><img src="../../../../public/2015/12/result-1024x701.png" alt="中身の確認"></a></p><p>よしよし。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>よーやくデータが見えるようになりました。<br>けど、mongo expressは使いやすい感じです。<br>また、思わぬところでnpmを使うことになり、少しレベルアップした感じです。<br>次は、パスワードの設定を。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> C# </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> .NETでNoSQLを試してみる MongoDB編 </category>
          
          <category> nosql </category>
          
          <category> JavaScript </category>
          
          <category> データベース </category>
          
          <category> MongoDB </category>
          
          <category> mongodb </category>
          
          <category> NoSQL </category>
          
          <category> mongo-express </category>
          
          <category> javascript </category>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETで画像処理を試してみる OpenCVSharp編 第3回</title>
      <link href="2016/01/01/755/"/>
      <url>2016/01/01/755/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2015/12/28/617">前回</a>は顔認識における前処理の説明を行いました。</p><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>前回、さりげなく、というかさらっとカメラを使っていたので、カメラの使い方を説明します。<br><strong>OpenCVSharp</strong> はカメラも簡単に使えます。<br>複数のカメラを接続して切り替えることも可能です。</p><h1 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h1><h2 id="ソースコード"><a href="#ソースコード" class="headerlink" title="ソースコード"></a>ソースコード</h2><p>説明するよりソースコードを見た方が早いです。<br>サンプルソースは末尾にあります。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MainViewModel</span> : <span class="title">ViewModelBase</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">region</span> フィールド</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IDisposable _CaptureHandler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CvCapture _CvCapture;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">region</span> コンストラクタ</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainViewModel</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">this</span>.CameraIndex = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">region</span> プロパティ</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BitmapSource _CameraImage;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> BitmapSource CameraImage</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>._CameraImage;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>._CameraImage = <span class="keyword">value</span>;</span><br><span class="line">            <span class="keyword">this</span>.RaisePropertyChanged();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> _CameraIndex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> CameraIndex</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>._CameraIndex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>._CameraIndex = <span class="keyword">value</span>;</span><br><span class="line">            <span class="keyword">this</span>.RaisePropertyChanged();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.ExecuteStart();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">region</span> メソッド</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">region</span> ヘルパーメソッド</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> CvCapture <span class="title">CreateCvCapture</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        CvCapture cvCapture = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            cvCapture = <span class="keyword">new</span> CvCapture(<span class="keyword">this</span>.CameraIndex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// ignore</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cvCapture;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ExecuteStart</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">this</span>.ExecuteStop();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>._CvCapture = <span class="keyword">this</span>.CreateCvCapture();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._CvCapture == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> ms = <span class="number">60</span>;</span><br><span class="line">        <span class="keyword">this</span>._CaptureHandler = Observable.Interval(TimeSpan.FromMilliseconds(ms), DispatcherScheduler.Current)</span><br><span class="line">            .Select(_ =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>._CvCapture == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> Cv.QueryFrame(<span class="keyword">this</span>._CvCapture);</span><br><span class="line">            &#125;)</span><br><span class="line">            .Where(frame =&gt; frame != <span class="literal">null</span>)</span><br><span class="line">            .Subscribe(frame =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> writeableBitmap = frame.ToWriteableBitmap();</span><br><span class="line">                frame.Dispose();</span><br><span class="line">                <span class="keyword">this</span>.CameraImage = writeableBitmap;</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ExecuteStop</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._CvCapture != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>._CvCapture.Dispose();</span><br><span class="line">            <span class="keyword">this</span>._CvCapture = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._CaptureHandler != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>._CaptureHandler.Dispose();</span><br><span class="line">            <span class="keyword">this</span>._CaptureHandler = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>CameraImage プロパティ</strong></p><p>XAMLのViewとバインディングされており、ここが変化するとカメラ映像が行進されます。</p><p><strong>CameraIndex プロパティ</strong></p><p>XAMLのViewとバインディングされており、ここが変化するとカメラが切り替わります。<br>基本は0以上の整数値です。<br>カメラに対応していない数値が設定されると、 <strong>CvCapture</strong> のコンストラクタで例外を投げて、その後の処理でカメラの処理が自動で停止します。</p><p><strong>ExecuteStart メソッド</strong></p><p>CameraIndex プロパティの変更で呼ばれます。<br>まずは既存のカメラを停止させます。<br>次に、<strong>Reactive Extensions</strong> の <strong>System.Reactive.Linq.Observable.Interval メソッド</strong> を使い指定した間隔でカメラ映像の取得を試みます。<br><strong>OpenCVSharp.Cv.QueryFrame メソッド</strong>に作成した CvCapture のインスタンスを渡すことで、<strong>OpenCVSharp.IplImage オブジェクト</strong>を返します。<br>あとは、次々の発生する IplImage を Where でフィルタして、<strong>CameraImage プロパティ</strong>設定します。</p><p><strong>Reactive Extensions</strong> 利用のアイデアはkattoshi様の<a href="http://qiita.com/kattoshi/items/d65c231865fbfddf82fa">Rx と OpenCVSharp を使用して 簡単にカメラキャプチャアプリを作成する</a> を参考にさせていただきました。<br>ありがとうございます。</p><p>重要なのは2つ。</p><p>まず、Interval メソッドの最後の引数は現在のスレッドの <strong>System.Windows.Threading.Dispatcher</strong> を渡します。<br>これにより、Viewに対する更新が自動的にバックグランドで実行されます。</p><p>次に、Subscribe メソッドの戻りをクラスメンバーに保持しておくことです。<br>この戻りは <strong>System.IDisposable インターフェイス</strong>です。<br>これを破棄することで、Interval メソッドによるイベントの発生が停止します。</p><p><strong>ExecuteStop メソッド</strong></p><p>CvCapture オブジェクトとSubscribe メソッドの戻りを破棄し、カメラを停止させます。</p><h2 id="動作イメージ"><a href="#動作イメージ" class="headerlink" title="動作イメージ"></a>動作イメージ</h2><p><a href="../../../../public/2016/01/Sample.png"><img src="../../../../public/2016/01/Sample.png"></a></p><p>サンプルには、<a href="http://www.mvvmlight.net/">MVVM Light Toolkit</a>、<a href="http://mahapps.com/">MahApps.Metro</a> を使っています。<br>味気ないデフォルトウィンドウ以外を使うだけで、なんかかっこよく見えます。<br>これ大事。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>OpenCVSharpを使えば、カメラも簡単に使えます。やったね。本当に。</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/OpenCV3">https://github.com/takuya-takeuchi/Demo/tree/master/OpenCV3</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> C# </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> マルチメディア </category>
          
          <category> 画像処理 </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> OpenCV </category>
          
          <category> .NETで画像処理を試してみる OpenCVSharp編 </category>
          
          <category> OpenCvSharp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでNoSQLを試してみる MongoDB編 第2回</title>
      <link href="2016/01/01/639/"/>
      <url>2016/01/01/639/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2015/12/30/633">前回</a>はインストールしました。今回は実際にデータを追加します。</p><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>MongoDB は親切にも<a href="https://docs.mongodb.org/ecosystem/drivers/">接続のためのドライバ</a>を用意してくれてます。しかも.NET用かつNuget経由で。素晴らしい。<br>恐ろしいことに、C、C++、C#、Java、Node.js、Perl、PHP、Python、Motor、Ruby、Scala用のドライバがオープンソースで用意してあります。<br>MongodDBおそろしい子！ 今回もきちんと公式ページを見てやります。ちゃんと英文訳します。参考にしてください。<br>…ちゃんと英語ドキュメント見ないと勉強になりませんから(白目)</p><h1 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h1><h2 id="開発環境構築"><a href="#開発環境構築" class="headerlink" title="開発環境構築"></a>開発環境構築</h2><p>何はともあれ、Nugetです。<br>Nugetでインストールは、GUIでもできますが、GUIだとMongoDBが2つ出てきます。片方は古いMongoDBのドライバです。<br><a href="../../../../public/2015/12/nuget.png"><img src="../../../../public/2015/12/nuget.png" alt="nuget"></a></p><p>コンソールで</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Install-Package MongoDB.Driver</span><br></pre></td></tr></table></figure><p>とやると確実です。<br>ちなみに、前回は最新版のMongoDB (執筆時点で3.2.0)をインストールし、今回はドライバのバージョンが2.2ですが、ちゃんと繋がるの？という方、<a href="https://docs.mongodb.org/ecosystem/drivers/csharp/">C# and .NET MongoDB Driver</a> にて互換性について説明があります。<br>2.2は <strong>MongoDB 2.4</strong>、<strong>MongoDB 2.6</strong>、<strong>MongoDB 3.0</strong>、<strong>MongoDB 3.2</strong> に繋がります。うん安心。<br>ただし、.NETの互換性が非常にタイトです。<br>2.0(ドキュメントには2.2とは書いてない)は.NET 4.5とMono 3.xでしか動きません。<br>逆に1.10は.NET 3.5以降をサポートしています。しかも <strong>Mono 2.10</strong>、<strong>Mono 3.x</strong> も。<br>また、MongoDBは、Visual Studio は2010、2012でビルドして、テストしたようです。2015でも、いけるよね？</p><h2 id="接続実験"><a href="#接続実験" class="headerlink" title="接続実験"></a>接続実験</h2><p>公式ページ<a href="https://docs.mongodb.org/ecosystem/tutorial/authenticate-with-csharp-driver/">Authenticate to MongoDB with the C# Driver</a>に説明があります。ちなみに、1.8以降のみの説明です。<br>のっけから意味のわからないことが書いてあります。<strong>Internal Authentication</strong>と<strong>External Authentication</strong>とあります。<br><strong>Internal Authentication</strong></p><blockquote><p>Internal authentication refers to accounts stored inside MongoDB. Currently, the only way to authenticate against internal accounts is to use the MongoDB Challenge Response mechanism, or MONGODB-CR. This is the default mechanism.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">訳:Internal authenticationは、内部のMongoDBに保存されているアカウントを参照します。現在、内部アカウントに対する認証する唯一の方法は、MogoDB Challenge Response メカニズム、または MONGODB-CR を使うことです。これは既定のメカニズムです。</span><br></pre></td></tr></table></figure><p><strong>External Authentication</strong></p><blockquote><p>External authentication refers to credentials validated outside of MongoDB. The external authentication provider currently used is Kerberos. To authenticate to a MongoDB cluster using Kerberos, you must specify the GSSAPI mechanism and a user name. On Windows, it is also possible to provide the password. Fundamentally, the process for connecting with Kerberos is the same for Windows and Linux systems; however, Linux systems require the use of kinit to acquire the security credentials whereas Windows systems perform this action transparently using SSPI based on the account running the current process when a password is not used.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 訳:External authenticationは、外部のMongoDB検証された資格情報を参照します。外部認証プロバイダーは現在Kerberosが使用されます。Kerberosを使用したMongoDBクラスターへ認証するために、GSSAPIメカニズムとユーザ名を必ず使用します。Windowsでは、パスワードを提供することも可能です。</span><br><span class="line">基本的には、Kerberosによる接続プロセスは、WindowsとLinuxでのそれと同一です。しかし、Linuxではセキュリティ認証を得るためにkinitの使用を、一方でWindowsでは、パスワードを利用しないとき、現在のプロセスを実行しているアカウントに基づくSSPIを利用した透過的なアクションを実行します。</span><br></pre></td></tr></table></figure><p>とあります。External authenticationのWindowsに対する最後の説明は意味不明ですが、要するに、サービスとして動いているローカルのMongoDBへのアクセスは、Internal、といことでしょう。きっと。Kerberosなんて言われても困ります。<br>で、Internalにのみ目を向けると、サンプルコードがあります。</p><blockquote><p>var credential = MongoCredential.CreateMongoCRCredential(“test”, “user1”, “password1”); <br><br>var settings = new MongoClientSettings <br><br>{ <br><br>Credentials = new[] { credential } <br><br>}; <br><br>var mongoClient = new MongoClient(settings);</p></blockquote><p>または、</p><blockquote><p>var connectionString = “mongodb://user1:password1@localhost/test”; <br><br>var mongoClient = new MongoClient(connectionString);</p></blockquote><p>はぁ？パスワード？と思ったあなた。ご安心を、パスワードはなくても接続できます。<br>前回は設定していませんしね(白目)</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoClient= <span class="keyword">new</span> MongoClient(<span class="string">&quot;mongodb://localhost&quot;</span>);</span><br></pre></td></tr></table></figure><p>これでOKです。<br>まずは前回設定したサービスを起動します。<br>で、起動後、下記のプログラムを実行します。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> MongoDB.Driver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MongoDB2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> mongoClient = <span class="keyword">new</span> MongoClient(<span class="string">&quot;mongodb://localhost&quot;</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> document <span class="keyword">in</span> mongoClient.ListDatabases().ToList())</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Document:&#123;0&#125;&quot;</span>, document);</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="keyword">var</span> name <span class="keyword">in</span> document.Names)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;Name:&#123;0&#125;&quot;</span>, name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実行後、コマンドプロンプトに</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Document:&#123; &quot;name&quot; : &quot;local&quot;, &quot;sizeOnDisk&quot; : 65536.0, &quot;empty&quot; : false &#125;</span><br><span class="line">Name:name</span><br><span class="line">Name:sizeOnDisk</span><br><span class="line">Name:empty</span><br></pre></td></tr></table></figure><p>と表示されるはずです。<br>データベースとかを既に追加していたら違う結果になると思いますが。<br>サービスが起動していないと、</p><p><a href="../../../../public/2015/12/exception.png"><img src="../../../../public/2015/12/exception.png" alt="タイムアウト"></a></p><p>って出ます。内容を見る限りタイムアウトは30秒のようです。<br>とりあえず接続試験はOKです。</p><h2 id="データベースって何？"><a href="#データベースって何？" class="headerlink" title="データベースって何？"></a>データベースって何？</h2><p>先のコードで、</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> document <span class="keyword">in</span> mongoClient.ListDatabases().ToList())</span><br></pre></td></tr></table></figure><p>って書きました。<br><strong>ListDatabases</strong> ってあるのに変数名がdocumentとか、センスないの？馬鹿なの？って思った人いるかもしれませんが、これは <strong>ListDatabases</strong> メソッドの戻りが、<strong>MongoDB.Driver.IAsyncCursor&lt;MongoDB.Bson.BsonDocument&gt;</strong> だからです。<br>Bsonって何？というと、Wiki先生は<a href="https://ja.wikipedia.org/wiki/BSON">こう仰っています</a>。</p><blockquote><p>BSONは主にMongoDBのデータストレージ及びネットワーク転送フォーマットとして利用されている、データ交換フォーマットである。<br><br>単純なデータ構造や連想配列（MongoDBではオブジェクトまたはドキュメントと表す）を示すバイナリ構造であり、 名称はJSON由来であり”バイナリ型JSON”の略語である。</p></blockquote><p>よーするにMongoDB用のデータ構造でJsonのバイナリ版だと。<br>で、BsonDocumentって何？って調べても、<strong>Represents a BSON document.</strong> としか書いてない。<br>これがデータベース？と思いきや、<strong>MongoClient.GetDatabase</strong> メソッドというのがあって、これの戻り値は <strong>MongoDB.Driver.IMongoDatabase</strong> となっていて、データベースは存在するよう。<br>じゃぁ、さっきのListDatabases メソッドはっていうと、<strong>Lists the databases on the server.</strong> って言っている。<br>これはAPIとしてどうなの？という感じがしないでもない。<br>MongoClient クラスには、DropDatabaseはあるから、作成はあっても良さそうな気がする。</p><h2 id="データベースを作る"><a href="#データベースを作る" class="headerlink" title="データベースを作る"></a>データベースを作る</h2><p>先の ListDatabases メソッドで戻ってきた BsonDocument はきっと初期状態で入っている、管理用のデータベースの中身、と仮定します。<br>なので、データベースを作れば結果が変わる、と信じてデータベースを作ってみます。<br>が、そんなAPIがない、というのは前章のとおり。<br>というわけでGoogle先生に聞いてみた。<br>公式にもない、というか見つからなかったが、<a href="http://putridparrot.com/blog/creating-a-simple-database-in-mongodb-with-c/">Creating a simple database in MongoDB with C#</a> によると、</p><blockquote><p>The line server.GetDatabase(“MyDatabase”) will get the database (if it exists) but also create a database if it doesn’t exist. Note: if you are creating a database using GetDatabase it will not exist until you actually store data in it.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> 訳: server.GetDatabase(“MyDatabase”) の行はデータベース (存在すれば) を取得しますが、存在しなければデータベースを作ったりもします。</span><br><span class="line"> </span><br><span class="line">ノート:GetDatabaseでデータベースを作ったとしても、データを突っ込むまでは、データベースは存在しません。</span><br></pre></td></tr></table></figure><p>って言ってます。<br>必要になるまでテーブルは要らない、ってことですか。</p><h2 id="データを追加する"><a href="#データを追加する" class="headerlink" title="データを追加する"></a>データを追加する</h2><p>データベース「だけ」を作る方法はないので、データを設定してみます。<br>さっきのページに、親切にも同じようなことが書いてあります。</p><blockquote><p>Like the creating of the database, if no employees currently exist we still get a collection object which we can then save data to.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">訳: データベースの作成のように、もしemployeesがそのときに存在しなければ、データを保存することのできるコレクションオブジェクトを取得します。</span><br></pre></td></tr></table></figure><p>とある。サンプルを見ると、</p><blockquote><p>public class Person { public ObjectId Id { get; set; } public string FirstName { get; set; } public string LastName { get; set; } public int Age { get; set; } } MongoClient client = new MongoClient(); MongoServer server = client.GetServer(); MongoDatabase db = server.GetDatabase(“MyDatabase”); MongoCollection collection = db.GetCollection(“employees”); Person p = new Person { Id = ObjectId.GenerateNewId(), FirstName = “Bob”, LastName = “Baker”, Age = 36 } collection.Save(p);</p></blockquote><p>とあるので、コレクションも必要になるまで反映されない、ってことですか。<br>というか、データベースの配下にコレクションなのね。そーいう構造ですか。<br>で、作ったサンプルは<a href="https://github.com/takuya-takeuchi/Demo/tree/master/MongoDB2">こちら</a>。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> mongoClient = <span class="keyword">new</span> MongoClient(<span class="string">&quot;mongodb://localhost&quot;</span>);</span><br><span class="line">        <span class="comment">//TestConnect(mongoClient);</span></span><br><span class="line"></span><br><span class="line">        InsertData(mongoClient);</span><br><span class="line">        TestConnect(mongoClient);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Please enter any key...&quot;</span>);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">InsertData</span>(<span class="params">MongoClient mongoClient</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;InsertData&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> database = mongoClient.GetDatabase(<span class="string">&quot;Database1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> c1 = <span class="keyword">new</span> Company</span><br><span class="line">        &#123;</span><br><span class="line">            Id = ObjectId.GenerateNewId(),</span><br><span class="line">            Name = <span class="string">&quot;Microsoft&quot;</span>,</span><br><span class="line">            Established = <span class="keyword">new</span> DateTime(<span class="number">1975</span>, <span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> c2 = <span class="keyword">new</span> Company</span><br><span class="line">        &#123;</span><br><span class="line">            Id = ObjectId.GenerateNewId(),</span><br><span class="line">            Name = <span class="string">&quot;Apple&quot;</span>,</span><br><span class="line">            Established = <span class="keyword">new</span> DateTime(<span class="number">1976</span>, <span class="number">4</span>, <span class="number">1</span>)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> collection = database.GetCollection&lt;Company&gt;(<span class="string">&quot;Companies&quot;</span>);</span><br><span class="line">        collection.InsertOne(c1);</span><br><span class="line">        collection.InsertOne(c2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> findFluent = collection.Find(FilterDefinition&lt;Company&gt;.Empty);</span><br><span class="line">        <span class="keyword">var</span> count = findFluent.Count();</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Count:&#123;0&#125;&quot;</span>, count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">Company</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ObjectId Id</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Name</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> DateTime Established</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">TestConnect</span>(<span class="params">MongoClient mongoClient</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;TestConnect&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> document <span class="keyword">in</span> mongoClient.ListDatabases().ToList())</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;\tDocument:&#123;0&#125;&quot;</span>, document);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> name <span class="keyword">in</span> document.Names)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;\t\tName:&#123;0&#125;&quot;</span>, name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>データの検索は、<strong>Find</strong> メソッドが使えることがわかりました。<br>で、先のBlogのページで使っていた <strong>Save</strong> メソッドはレガシーのAPI用だったようで、今は <strong>InserOne</strong> メソッドのでした。<br><strong>ObjectId</strong> とかわかりませんし、シリアライズできないオブジェクトはどうなるの？とか色々ありますがまずはこれだけ。<br>実行結果はこんな感じ。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">InsertData</span><br><span class="line">Count:2</span><br><span class="line">TestConnect</span><br><span class="line">        Document:&#123; &quot;name&quot; : &quot;Database1&quot;, &quot;sizeOnDisk&quot; : 8192.0, &quot;empty&quot; : false &#125;</span><br><span class="line">                Name:name</span><br><span class="line">                Name:sizeOnDisk</span><br><span class="line">                Name:empty</span><br><span class="line">        Document:&#123; &quot;name&quot; : &quot;local&quot;, &quot;sizeOnDisk&quot; : 65536.0, &quot;empty&quot; : false &#125;</span><br><span class="line">                Name:name</span><br><span class="line">                Name:sizeOnDisk</span><br><span class="line">                Name:empty</span><br><span class="line">Please enter any key...</span><br></pre></td></tr></table></figure><p>ドキュメントが増えただけ？</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>まだまだ、わからないことだらけです。手軽な感じはしますが、ちょっともやもやします。<br>人によっては、もっとシンプルな <strong>KVS (Key-Valueストア)</strong> な <strong>Redis</strong> とかのいいのでしょうか？Redisよく知らないけど。</p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/MongoDB2">https://github.com/takuya-takeuchi/Demo/tree/master/MongoDB2</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> C# </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> .NETでNoSQLを試してみる MongoDB編 </category>
          
          <category> nosql </category>
          
          <category> データベース </category>
          
          <category> MongoDB </category>
          
          <category> NoSQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでNoSQLを試してみる MongoDB編 第1回</title>
      <link href="2015/12/30/633/"/>
      <url>2015/12/30/633/</url>
      
        <content type="html"><![CDATA[<p>冬休みというのは暇ですね。こーいうときに新しい技術に触るのが正しい技術者でしょう。</p><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>NoSQL</strong> の説明は、<a href="https://ja.wikipedia.org/wiki/NoSQL">Wikipedia</a>によると、</p><blockquote><p>NoSQL系データベース管理システムには、データの格納および取得が高度に最適化されているものが多い。その最適化のために機能性を最小限にしているものもある。「値」およびそれを取得するための「キー」だけを格納できるKey-Value型データベースは、その最たる例である。</p></blockquote><p>とあります。<br>ぶっちゃけると、高速性、を目的としていると私は理解します。あと柔軟。<br><strong>RDBMS</strong> は使いにくいとは言いませんが、テーブル間の制約やデータ整合性に重きを置いているためパフォーマンスが出にくいのでしょう。<br>そこまで複雑なデータベースを必要としないなら、NoSQL で十分です。</p><p>NoSQL は色々ありますが、</p><ul><li><a href="https://www.mongodb.org/">MongoDB</a></li><li><a href="http://cassandra.apache.org/">Apache Cassandra</a></li><li><a href="http://hbase.apache.org/">Apache HBase</a></li><li><a href="http://fallabs.com/kyotocabinet/">Kyoto Cabinet</a></li><li><a href="http://okuyama-project.com/ja/index.html">okuyama</a></li><li><a href="https://github.com/google/leveldb">LevelDB</a></li><li><a href="https://github.com/hibari/hibari">Hibari</a></li></ul><p>といったところでしょう。もっとあります。詳しくはWikiで。<br>今回はMongoDBを使ってみます。</p><h2 id="MongoDBの特徴"><a href="#MongoDBの特徴" class="headerlink" title="MongoDBの特徴"></a>MongoDBの特徴</h2><p>MongoDBはサービスとして動作し、そこに対して各種要求を行うタイプです。<br><strong>MySQL</strong> とかと同じです。<strong>SQLite</strong> みたいな、データベースがファイルとして一つあって、それで完結するタイプではありません。</p><p>またライセンス形態が独特です。<strong>Affero General Public License (以下AGPL)</strong> です。</p><ul><li>コピーレフト (GPLと同じ)</li><li>サービスとして動作している、AGPL のソフトウェアに接続しているソフトウェアにもソースコードの公開が義務づけられている</li></ul><p>がざっくりとした特徴です。<br>ですが、開発元がクライアントからの接続のためのドライバ (ソフトウェア) を公開しているので、それを経由すれば問題ない、という感じです。(2次感染はしない、という見解) でも、Free Software Foundation は公式見解を出していません。</p><p>これについて、詳しいのは <a href="http://test.mongodb.jp/mongo/licence">http://test.mongodb.jp/mongo/licence</a> です。</p><h1 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h1><h2 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h2><p>何はともあれ、インストールです。<br>MongoDB は<a href="https://www.mongodb.org/downloads">ここ</a>からダウンロードできます。</p><ul><li>Windows 64-bit 2008R2+</li><li>Windows 64-bit 2008R2+ legacy</li><li>Windows 64-bit legacy</li><li>Windows 32-bit</li></ul><p>がありますが、一番上だけ、msi形式のみ。他はzipもあります。<br>ここは一番上にします。<br>他を選ぶと但し書きが出ます。</p><p><strong>Windows 64-bit 2008R2+ legacy</strong></p><blockquote><p>This distribution does not include SSL encryption.</p></blockquote><p>訳: このディストリビューション (頒布物) は SSL 暗号化 を含んでいません。</p><p><strong>Windows 64-bit legacy</strong></p><blockquote><p>The 64-bit legacy build does not include SSL encryption and lacks newer features of Windows that enhance performance. Use this build for Windows Server 2003, 2008, or Windows Vista</p></blockquote><p>訳: 64bitのレガシービルドは SSL 暗号化 を含んでいません。そして、パフォーマンスの改善するWindowsのより新しい機能もありません。Windows Server 2003、2008、Windows Vistaでこのビルドを使用します。</p><p><strong>Windows 32-bit</strong></p><blockquote><p>32-bit builds are limited to around 2GB of data. In general you should use the 64 bit builds. See here for more information. 32-bit builds are deprecated as of 3.2, and will no longer be produced for future releases.</p></blockquote><p>訳:32bitのビルドにはデータが2GBまでという制限があります。通常は64bitビルドを使用するべきです。詳しい情報はこちらを。32bitビルドは3.2で廃止予定で、将来のリリースにおいて作成されることはありません。</p><p>msiなのでさくっとインストールします。<br>特に問題なく終わります。<br>おわらなかったらGoogle先生に助けを求めるか、公式サイトのコミュニティに質問してください。<br>ちなみに私はWindows10 64bitにインストールしましたが、問題がありませんでした。まる。</p><h2 id="As-a-Service"><a href="#As-a-Service" class="headerlink" title="As a Service"></a>As a Service</h2><p>いちいち、起動するのも面倒なので、サービスとして動かしてみましょう。<br>各種設定を行います。正直、インストーラで指定できるようにして欲しかった。</p><p><a href="https://docs.mongodb.org/manual/tutorial/install-mongodb-on-windows/">公式ページに説明</a>があります。<br>全部訳していられないので、一部だけ抜き出して説明します。</p><p><strong>1. 概要</strong></p><p>のっけから注意書きです。</p><blockquote><p>IMPORTANT: If you are running any edition of Windows Server 2008 R2 or Windows 7, please install a hotfix to resolve an issue with memory mapped files on Windows.</p></blockquote><p>訳: 重要: もし、Windows Server 2008R2、Windows7 で動かすのだったら、<a href="https://support.microsoft.com/ja-jp/kb/2731284">Hotfix</a>をインストールしてね。</p><p>というわけで、必要なら当ててください。私はWindows10なので当ててません。</p><p><strong>2. インストール</strong></p><blockquote><p>You may specify an installation directory if you choose the “Custom” installation option. NOTE: These instructions assume that you have installed MongoDB to C:\mongodb.</p></blockquote><p>訳: “Custom” インストールオプションを選択して、インストール先を指定したかもしれません。<br>ノート: ここの説明は、インストール先が”C:\mongodb” だと仮定しています。</p><p>こんなところにインストールする人いるんでしょうか。Programs Filesの下でいいじゃんと思いますが、きっとパス文字列に空白を含むのがいやなんでしょう。<br><a href="https://taktak.jp/2012/10/13/bitnami-redmine-statck-%E3%81%8C%E8%B5%B7%E5%8B%95%E3%81%97%E3%81%AA%E3%81%84-%E3%81%A0%E3%81%A8/">う、頭が…</a></p><p><strong>3. 設定ファイル作成</strong></p><p>まず、データベースの保存先とログの出力先フォルダを作ります。<br>インストール先が、<strong>C:\Program Files\MongoDB</strong>、保存先はそれぞれ、<strong>D:\MongoDB\Storage</strong>、<strong>D:\MongoDB\Logs</strong> だとします。<br>フォルダは作成済みだとします。</p><p>次に、設定ファイルを作ります。<strong>mongod.cfg</strong> とします。UTF8で作っておけば安心かと。<strong>D:\MongoDB\mongod.cfg</strong> とします。<br>内容は、</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemLog:</span><br><span class="line">    destination: file</span><br><span class="line">    path: D:\MongoDB\Logs\mongod.log</span><br><span class="line">storage:</span><br><span class="line">    dbPath: D:\MongoDB\Storage</span><br></pre></td></tr></table></figure><p>とします。ログファイル名の部分は自由かな。<br>詳しい設定は<a href="https://docs.mongodb.org/manual/reference/configuration-options/">Configuration File Options</a>です。<br>ログのローリングとかできる感じです。</p><p><strong>4. 設定ファイル読み込み</strong></p><blockquote><p>IMPORTANT Run all of the following commands in Command Prompt with “Administrative Privileges”.</p></blockquote><p>訳: 重要: “管理者として実行”を指定してコマンドプロンプトを起動してください なので指示に従ってください。</p><p><font color="red">補足</font><br>複数のインスタンスでサービスを動かす場合は、この章を飛ばしてください。</p><p>MongoDBのインストール先に移動し、次のコマンドをたたきます。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod.exe --config &quot;D:\MongoDB\mongd.cfg&quot; --install</span><br></pre></td></tr></table></figure><p>エラーがなければ、すぐに終了します。<br><strong>mongod.exe</strong> と <strong>mongo.exe</strong> を間違えないでください。</p><p>間違えると、</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Error parsing command line: unrecognised option &#x27;--config&#x27;</span><br><span class="line">try &#x27;mongo.exe --<span class="built_in">help</span>&#x27; <span class="keyword">for</span> <span class="built_in">more</span> information</span><br></pre></td></tr></table></figure><p>って親切に教えてくれます(震え声) これで、MongoDBがサービスとして登録されます。</p><p><strong>5. マルチインスタンスで動かしたいです</strong></p><p>という方も安心。</p><blockquote><p>If needed, you can install services for multiple instances of mongod.exe or mongos.exe. Install each service with a unique –serviceName and –serviceDisplayName. Use multiple instances only when sufficient system resources exist and your system design requires it.</p></blockquote><p>訳: 必要なら、mongod.exeまたはmongos.exeの複数インスタンスをサービスとしてインストールできます。各サービスのインストール時に、ユニークな –serviceName と –serviceDisplayName をつけてください。複数のインスタンスは十分な権限とシステムリソースがあるとき、システム設計でそれが必要なときだけ使うことができます。</p><p>なので、サービス名を <strong>MongoDB1</strong>、表示名を <strong>MongoDB Main</strong> にしたいなら、</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod.exe --config &quot;D:\MongoDB\mongd.cfg&quot; --install --serviceName &quot;MongoDB1&quot; --serviceDisplayName &quot;MongoDB Main&quot;</span><br></pre></td></tr></table></figure><p>するとこんなメッセージでます。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2015</span>-<span class="number">12</span>-<span class="number">29</span>T17:<span class="number">25</span>:<span class="number">43</span>.<span class="number">489</span>+<span class="number">0900</span> I CONTROL  [main] log file &quot;D:\MongoDB\Logs\mongod.log&quot; exists; moved to &quot;D:\MongoDB\Logs\mongod.log.<span class="number">2015</span>-<span class="number">12</span>-<span class="number">29</span>T08-<span class="number">25</span>-<span class="number">43</span>&quot;.</span><br></pre></td></tr></table></figure><p>でこうなります。</p><p><a href="../../../../public/2015/12/service.png"><img src="../../../../public/2015/12/service.png" alt="複数インスタンス"></a></p><p>で、当然ですが、複数のインスタンスを作って、同じ設定ファイルを読み込むとたぶん悲劇でしょう。<br>特に公式ページに何も書いてありませんでしたが。</p><p>以上。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>長くなりましたが、インストールまでは終了です。<br>次は実際につないでみます。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> C# </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> .NETでNoSQLを試してみる MongoDB編 </category>
          
          <category> nosql </category>
          
          <category> データベース </category>
          
          <category> MongoDB </category>
          
          <category> NoSQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETで画像処理を試してみる OpenCVSharp編 第2回</title>
      <link href="2015/12/28/617/"/>
      <url>2015/12/28/617/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2015/12/26/590">前回</a>は顔認識を行いました。</p><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>顔認識を行う際、前処理を行いました。サンプルコードでは、<strong>グレイスケール化</strong>、<strong>縮小</strong>、<strong>ヒストグラムの均一化</strong>が前処理でした。</p><h3 id="グレイスケール化"><a href="#グレイスケール化" class="headerlink" title="グレイスケール化"></a>グレイスケール化</h3><p>カラー画像を256階調のグレーな画像に変換します。<br>通常、RGBの各色 (赤、緑、青)の各輝度を特定の比率で混ぜ合わせ、グレーの256階調に変換します。<br>変換式は、<strong>ITU-R (国際電気通信連合 無線通信部門)</strong> 勧告の <strong>BT.601</strong> の <strong>0.299 R + 0.587 G + 0.114 B</strong>、<strong>BT.709</strong> の <strong>0.2126 R + 0.7152 G + 0.0722 B</strong>、<strong>SMPTER (米国映画テレビ技術者協会)</strong> が定めた規格 <strong>240M</strong> の <strong>0.212 R + 0.701 G + 0.087 B</strong> 等があります。</p><h3 id="縮小"><a href="#縮小" class="headerlink" title="縮小"></a>縮小</h3><p>画像のサイズを小さくします。<br>単純に小さくすると言っても、縦横の比率を維持したり、そうでない方法もあります。<br>重要なのは、縮小の場合、消失する画素の情報をどのように、残される画素に含めるか、つまり補間するかということがあります。<br>単純なのは、消失する画素は完全に無視する方法です。<br>このあたりは、<strong>System.Drawing.Drawing2D.InterpolationMode 列挙体</strong> を参考にしてください。</p><h3 id="ヒストグラムの均一化"><a href="#ヒストグラムの均一化" class="headerlink" title="ヒストグラムの均一化"></a>ヒストグラムの均一化</h3><p>ヒストグラムの累積 (輝度値0から画素数を累積したもの) のグラフの傾きが一定になるように変換する処理です。コントラストの改善や明るさの偏りを修正することが可能です。<br>ヒストグラムの説明は省きますが、簡単に言うと、画像全体で0-255の輝度がそれぞれ何回登場するか、というデータと思ってくれれば結構です。</p><p>まずはこれらが何を意味するのか、どういう計算になるのかを想像してください。</p><h1 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h1><p>本題に入ります。<br>OpenCV、というよりも世の中にある画像処理ライブラリは、機能毎にメソッドや関数を提供しています。<br>でないと使い勝手が悪いからです。汎用性を重視しています。</p><p>全ての物事において、そうだとは言いませんが、汎用性を重視していると言うことは、性能を犠牲にしていることを意味します。<br>次の説明は極端ですが、とあるライブラリでこんなメソッドがあるとします。</p><ul><li>Bitmap GrayScaleScale(Bitmap, double, double)</li><li>Bitmap GrayScaleScaleEqulizer(Bitmap, double, double)</li><li>Bitmap GrayScaleEqulizer(Bitmap)</li><li>Bitmap ScaleGrayScale(Bitmap, double, double)</li><li>Bitmap EqulizerGrayScaleScale(Bitmap, double, double)</li></ul><p>単純に順番を変えたり、一部を省略しただけですが、字面を見ればなんとなく言いたいことはわかります。<br>正直、組み合わせ毎にメソッドを用意していたら、とんでもないことになります。こんな仕様を見たら投げたくなります。<br>ですが、これらは、一回の呼び出しで全てを実行してくれる、という点にメリットがあります。</p><p>たかが、コード1行の違い、と思うかもしれませんが、ここで言う、<strong>一回の呼び出しで全てを実行してくれる</strong>は、コーディングの記述量を意味しません。<br>前にも書いたように、汎用性によって性能を犠牲にしています。つまり汎用性の犠牲は性能の改善に繋がります。<br>画像処理の世界では、これは非常に重要です。</p><h2 id="実験"><a href="#実験" class="headerlink" title="実験"></a>実験</h2><p>ちょっとサンプルを出します。<br>800x600の24bit画像があります。<br>これに、グレイスケール、縮小、ヒストグラムの均一化を順番に行うと、ループ回数はどの程度になるでしょう？縮小率は0.5、縮小方法は <strong>NearestNeighbor</strong> とする。<br>(注：24bit画像なので、1画素にRGBの3要素にアクセスする、というのは1回にカウントします)</p><p>普通に考えると800x600+800x0.5x600x0.5+(800x0.5x600x0.5)x256x2になります。</p><h4 id="グレイスケール化-1"><a href="#グレイスケール化-1" class="headerlink" title="グレイスケール化"></a>グレイスケール化</h4><p><strong>800x600</strong> です。<br>全ての画素に対して処理を行います。</p><h4 id="縮小-1"><a href="#縮小-1" class="headerlink" title="縮小"></a>縮小</h4><p><strong>800x0.5x600x0.5</strong> です。<br>全ての画素に対して処理を実施せず、縮小率0.5なので、2画素に1回画素へのアクセスが発生します。</p><h4 id="ヒストグラムの均一化-1"><a href="#ヒストグラムの均一化-1" class="headerlink" title="ヒストグラムの均一化"></a>ヒストグラムの均一化</h4><p><strong>800x600</strong> です。<br>まず、画像全体のヒストグラムの計算で、<strong>800x0.5x600x0.5</strong> を消費します。<br>次に、取得したヒストグラムを使って、累積値とその比率を求めます。累積に256、その累積値を使ってヒストグラムの修正に256です。<br>最後に、画像全体の画素を補正します。<br>ですので、**(800x0.5x600x0.5)x2+256x2** で <strong>800x600+512</strong> になります。</p><p>合計 <strong>800x600x2.5+512</strong> です。</p><p>順番に処理を行うだけで、これだけ時間 (ループ処理が発生します) がかかります。<br>ですが、これを1回でまとめるとどうなるでしょう。</p><p>まず、今回は縮小がNearestNeighborなので、欠落する画素は無視できます。<br>すなわち、グレースケール化の前に縮小を行っても、結果は変わりません。<br>次に、グレースケール化ですが、縮小の時点で、欠落しない画素はわかりきっているので、この時点でグレースケール化を適用できます。</p><p>つまり、縮小とグレースケール化は同一のループで処理できます。800x0.5x600x0.5で済みます。<br>次はヒストグラムの均一化ですが、ヒストグラムの計算自体は、前のループで同時に計算できます。つまり、画素をグレースケール化できた時点でヒストグラムの計算が可能です。<br>最後のヒストグラムに基づいた補正自体は、ヒストグラム自体が計算できていないと実行できないため、800x0.5x600x0.5+512必要です。</p><p>よって、合計で <strong>800x0.5x600x0.5+800x0.5x600x0.5+512</strong> の <strong>800x600+512</strong> です。<br>ループ内の計算などがあるので、単純に比較はできませんが、ループ回数だけなら、4分の一で済みます。</p><p>上記を検証するためにサンプルプログラムを用意しました。<br>サンプルプログラムは<a href="https://github.com/takuya-takeuchi/Demo/tree/master/OpenCV2">https://github.com/takuya-takeuchi/Demo/tree/master/OpenCV2</a>。<br>サンプルで使用した画像は</p><blockquote><p><a href="https://commons.wikimedia.org/wiki/File:Landscape/_of/_Shadegan.jpg">https://commons.wikimedia.org/wiki/File:Landscape\_of\_Shadegan.jpg</a></p></blockquote><p>です。<br>ロジックはグレイスケール化、縮小、ヒストグラムの均一化を実行しますが、</p><ul><li><strong>Sequential</strong> =&gt; 順番に関数を実行。ループは関数毎になる。</li><li><strong>OpenCV</strong> =&gt; 前回の顔認識の前処理と同じ。ただし縮小がNearestNeighbor。</li><li><strong>Optimized</strong> =&gt; 可能な限りループをまとめている方法。</li><li><strong>Optimized (Parallel)</strong> =&gt; Optimized で、かつ　System.Threading.Tasks.Parallel</li><li><strong>Optimized (C++/CLI)</strong> =&gt; Optimized を C++/CLI に移植。</li></ul><p>のパターンで速度を計測しました。</p><h3 id="実験結果"><a href="#実験結果" class="headerlink" title="実験結果"></a>実験結果</h3><p>計測結果は</p><p>[table id=14 /]</p><p>となりました。</p><p>Seqentialはやはり遅いですね。全体的にOptimizedと比較して、2.0-2.5倍くらいの差です。ループ回数分の差だと言えます。<br>OpenCVのコアがNativeなので、Optimizedでもパフォーマンスに差が出るのは予想通りですが、それなりに善戦したと思います。<br>C++/CLIを使えばOpenCVを超えることも十分可能です。まぁそこまでするなら、最初からC++/CLIで全部コーディングするべきだと思いますが。<br>並列化は今回はあまり意味をなしませんでしたね。もっと大きな画像なら有意な差が出ると思うのですが。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>OpenCVは手軽に結果を確認できるあたりが良いです。<br>ですが、本気でパフォーマンスを追求するなら、OpenCVではなく、自分でロジックを実装することも必要です。<br>WPFやUWPでリッチなUIを実装し、高度な画像処理部はOpenCVまたは自分で実装するということになるでしょう。<br><del>MFC?知らねぇなぁ。</del></p><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p><a href="https://github.com/takuya-takeuchi/Demo/tree/master/OpenCV2">https://github.com/takuya-takeuchi/Demo/tree/master/OpenCV2</a></p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> C# </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> マルチメディア </category>
          
          <category> 画像処理 </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> OpenCV </category>
          
          <category> .NETで画像処理を試してみる OpenCVSharp編 </category>
          
          <category> OpenCvSharp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETで難読化を試してみる 第6回</title>
      <link href="2015/12/26/575/"/>
      <url>2015/12/26/575/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2015/12/19/560">前回</a>の続き。<br>今回は難読化を有効にした際、Any CPUのアセンブリがx86になる問題の解決策についてです。</p><a id="more"></a><h1 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h1><p>前回は最高レベルの難読化にしたが故に、x86のアセンブリになってしまいました。<br>難読化レベルがデフォルトでは起こらない問題でしたので、何かしらのオプションが作用しているのは間違いないでしょう。</p><p>そこで Babel Obfuscator のヘルプを覗くと下記のような記述が</p><blockquote><p>Obfuscating x64 Assemblies<br>Depending on the target platform, the Visual Studio compiler emits the desired CPU architecture into the PE header. Users of Visual Studio can set the target platform in the build project’s property page. The default platform is “Any CPU” which indicates that the compiled assembly can run on any version of Windows. When a managed executable is loaded, Windows examines the PE header to determine whether the application requires 32-bit or 64-bit CPU architecture to ensure that it matches the computer’s CPU type. Windows ensures the compatibility of 32-bit applications on 64-bit CPUs with a technology called WoW64 (Windows on Windows64) that emulates 32-bit instruction sets on a 64-bit CPU, albeit with a performance loss. When the application architecture is known, Windows loads the framework execution engine Just-In-Time compiler (JIT) specific to the executable target platform (x86, x64, Itanium). On x64 operating systems, the MSIL code of assemblies targeting “Any CPU” platform is validated by the .NET Framework runtime before execution.<br>To protect an assembly from being disassembled by tools like .NET Reflector, Babel can insert into any MSIL method invalid byte codes that do not correspond to any MSIL op-code instruction (–invalidopcodes). The resulting assembly is no longer IL verifiable and Windows can execute it only on a WoW64 subsystem. Suppose that the obfuscated assembly is a DLL referenced by an executable that runs in full 64-bit environment. When the runtime tries to load the DLL obfuscated with invalid op-codes, it checks the CPU JIT requirements, and because they do not match, it throws an InvalidProgramException exception. The only way to generate obfuscated DLLs or executables fully compatible with x64 is to disable the injection of invalid op-codes during obfuscation.</p></blockquote><p>訳) x64アセンブリの難読化<br>対象のプラットフォームへの依存、Visual Studio コンパイラはPEヘッダーに必要とするCPUアーキテクチャを発行する。Visual Studioのユーザはビルド設定のプロパティページで対象プラットフォームを設定できます。既定のプラットフォームは “Any CPU” で、コンパイルされたアセンブリがどのバージョンのWindowsでも動作できることを示します。(訳注：正しくは、x86, x64のCPUアーキテクチャの違いであって、Windowsのバージョンではない)。マネージドの実行ファイルがロードされるとき、WindowsはPEヘッダーを検証し、アプリケーションが必要とするのが、32bit CPUまたは64bit CPUかどうかを、コンピュータのCPUの種別と一致するかどうかで確認する。Windowsは64bit CPU上で32bit命令セットをエミュレートするWoW64 (Windows on Windows64) と呼ばれるテクノロジーを持つ64bit CPU上での32bitアプリケーションの互換性を保証するが、パフォーマンスの損失を伴う。アプリケーションのアーキテクチャが既知であるとき、Windowsは、実行可能な対象プラットフォーム (x86, x64, Itanium) を指定するための、フレームワーク実行エンジンである Just-In-Time コンパイラ (JIT) をロードします。x64 のOS上で、”Any CPU”プラットフォームを対象としているMSILコードのアセンブリは実行前に.NET Framework ランタイムによって検証されます。<br>.NET Reflectorのようなツールによる逆アセンブルからアセンブリを保護するために、BabelはいくつかのMSILメソッドの不正なバイトコード-どのMSILの命令コードにも対応しない (–invalidopcodes) -を挿入することができます。その結果のアセンブリは、もはや IL (中間言語) として検証可能ではなく、WindowsはWoW64のサブシステム上でのみでしか実行させることができません。<br>難読化されたアセンブリが、完全な64bit環境上で実行される実行可能ファイルから参照されることもあるでしょう。ランタイムが不正な命令コードで難読化されたDLLのロードを試みるとき、CPU JIT 要求仕様をチェックし、それらが合致しないが故に、InvalidProgramException例外をスローします。x64と完全な互換性を持つ、難読化されたDLLまたは実行可能ファイルを生成する唯一の手段は、難読化中の不正な命令コードの挿入を無効にすることです。</p><p>少し長いですが、要約すると、逆アセンブルを防ぐためのオプション (–invalidopcodes) を使うと、x64上での互換性を維持できなくなるよ、って言ってます。<br>なので、このオプションを無効にすればAny CPUを維持することができるはずです。<br>再度ヘルプのオプション説明を見ると、</p><blockquote><p>Use this option to emit invalid MSIL op-codes at the beginning of every method. This will stop reflection tools like .NET Reflector to display IL method disassembly. Warning: This will make your assembly not verifiable.<br>Normally, code that is not verifiable cannot run on x64 Operating Systems. This option should be switched off if the obfuscated assembly targets x64 platforms.</p></blockquote><p>訳) このオプションは不正なMSIL命令コードを全てのメソッドの先頭に挿入するために使用します。これは.NET Reflectorのような中間言語メソッドの逆アセンブルを表示するツールを阻止します。警告：このツールはアセンブルの検証不可にします。<br>通常、検証できないコードはx64OS上では実行できません。このオプションは難読化されるアセンブリがx64プラットフォームを対象とする場合はオフにするべきです。</p><p>とあります。<br>画面上、該当するオプションは、<strong>Control Flow Obfuscation</strong> の <strong>Emit Invalid Opcodes</strong> になります。<br>最初の説明を見ると、逆アセンブルを防ぐオプションが悪いので、<strong>Protection &amp; Code Generation</strong> の <strong>Anti Reflection</strong> や　<strong>Prevent ILdasm Disassembly</strong> が悪いように見えますが、<strong>全く無関係</strong>です。</p><p>Emit Invalid Opcodesだけ無効にして、再度難読化を実行します。</p><p><a href="../../../../public/2015/12/Emit_Invalid_Opcodes.png"><img src="../../../../public/2015/12/Emit_Invalid_Opcodes-1024x695.png" alt="Emit Invalid Opcodes"></a></p><p>(1) 実行結果の検証</p><p><strong>オプション有効時</strong></p><p><a href="../../../../public/2015/12/Before.png"><img src="../../../../public/2015/12/Before-1024x642.png" alt="Before"></a></p><p><strong>オプション無効時</strong></p><p><a href="../../../../public/2015/12/After.png"><img src="../../../../public/2015/12/After-1024x642.png" alt="After"></a></p><p>dotPeek での結果がAny CPUを表すようになったことがわかります。<br>最高の難読化レベルでもこのオプションは外しておいた方が無難かもしれません。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>一通り、難読化の処理を見てきましたが、ツールのオプションが豊富で、きちんと使い方を知っておかないと、思わぬ落とし穴にはまります。<br>国産の難読化ツールもありますが、正直海外製が一歩も二歩もリードしているのが印象でした。</p><p>自分は、オープンソースの開発を始めたので、難読化ツールの出番は減りますが、ひょっとしたら会社で使うようなことがあった場合に、この知識は有効になるでしょう。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> 難読化 </category>
          
          <category> .NETで難読化を試してみる </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETで画像処理を試してみる OpenCVSharp編 第1回</title>
      <link href="2015/12/26/590/"/>
      <url>2015/12/26/590/</url>
      
        <content type="html"><![CDATA[<p>難読化の話が一区切りついてすらいないのに新しい記事を書く男の人って…</p><a id="more"></a><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>仕事で画像処理を本格的にやる必要に駆られています。<br>アフィン変換とか、画像の描画などは普通に業務で使うことが非常に多く、**.NET** の <strong>System.Drawing 名前空間</strong>を使って、そつなくこなすのですが、ことは <strong>C++</strong> となると話は別。<br>メモリ確保とか色々面倒だし、何よりロジックに注力することよりも、コードを書くことそのものに気をとられてげんなりするわけです。</p><p>で、話を戻すと、画像処理のその仕事は C++ を使うのですが、 <strong>OpenCV</strong> を使って、検証して、必要ならば純粋な C++ にポーディングする作業とのこと。<br>つまり、検証作業をするのに OpenCV で何ができて、何がダメなのかを理解する必要があります。</p><p>とはいえ、C++ でごりごりコードを書くのは勘弁願いたいわけです。</p><p>なので、OpenCV の勉強は .NET のラッパーライブラリを使って行うことにします。<br>先人の方々が既に説明されていますが、OpenCV のラッパーライブラリは、調べた限り、5 つあります。</p><h3 id="OpenCvSharp"><a href="#OpenCvSharp" class="headerlink" title="OpenCvSharp"></a>OpenCvSharp</h3><p><a href="http://schima.hatenablog.com/archive/category/OpenCvSharp">作者様サイト</a>。</p><h3 id="Emgu-CV"><a href="#Emgu-CV" class="headerlink" title="Emgu CV"></a>Emgu CV</h3><p><a href="http://www.emgu.com/">公式サイト</a>。</p><h3 id="OpenCV-NET"><a href="#OpenCV-NET" class="headerlink" title="OpenCV.NET"></a>OpenCV.NET</h3><p><a href="https://bitbucket.org/horizongir/opencv.net">公式サイト</a>。</p><h3 id="OpenCVLib"><a href="#OpenCVLib" class="headerlink" title="OpenCVLib"></a>OpenCVLib</h3><p><a href="http://www.geocities.jp/konbiki/tips/opencvdll2/index.html">作者様サイト</a>。</p><h3 id="OpenCV-NET-Wrapper"><a href="#OpenCV-NET-Wrapper" class="headerlink" title="OpenCV .NET Wrapper"></a>OpenCV .NET Wrapper</h3><p><a href="http://sourceforge.net/projects/opencvnet/">公式ページ</a>。</p><p>このうち、上2つが一番活発だと思いますが、特に、<strong>OpenCvSharp</strong> は<strong>日本人の方</strong>がリードしているため、非常に安心です。<br>そのため、これをベースに勉強していきます。</p><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>OpenCV は非常に多くの画像処理機能が含まれています。フィルター処理、行列演算、ラベリング、物体検出、機械学習、カメラ入力等々。<br>現在、バージョン3が開発されていますが、2.4系が安定版として、広く利用されています。<br>事実、OpenCvSharp も2.4系がメインで、3はアルファ版のようです。私も2.4系を使い、最新版は2.4.10</p><p>OpenCvSharpの良いところは、<strong>NuGet</strong> 経由でインストールが全て完結する点にあります。<br>ラッパーdllはもちろん、OpenCVに含まれている、opencv_core2410.dll 等のネイティブdll が <strong>x86</strong> と <strong>x64</strong> の両方が同時にインストールされる親切設計。流石日本製。</p><p>ただ、気をつけて欲しいのは、NuGetで検索すると、同じ名前のものがあって、どっちが正しいのかわかりづらい点にあります。<br>同じ名前のパッケージがNuGetで見つかります。片方は、ネイティブdllがインストールされないため、実行時にエラーが出ます。</p><p>…えぇ、私は罠にかかりました。</p><p><a href="../../../../public/2015/12/Nuget.png"><img src="../../../../public/2015/12/Nuget.png" alt="Nugetの罠"></a></p><p>インストールするのは、<strong>女性のアイコン (OpenCVの世界でおなじみの Lenna さん)</strong> の描かれたパッケージを選んでください。</p><p>長々書きましたが、最初は顔検出が簡単にできることを示します。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> CvHaarClassifierCascade _Cascade =</span><br><span class="line">            CvHaarClassifierCascade.FromFile(<span class="string">@&quot;haarcascade_frontalface_default.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> BitmapSource <span class="title">DetectFace</span>(<span class="params">Bitmap bitmap</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> colors = <span class="keyword">new</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> CvColor(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> minNeighbors = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> minSize = <span class="number">50</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> maxSize = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> img = bitmap.ToIplImage())</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> smallImg = <span class="keyword">new</span> IplImage(<span class="keyword">new</span> CvSize(img.Width, img.Height), BitDepth.U8, <span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Enhancement image to detect face</span></span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> gray = <span class="keyword">new</span> IplImage(img.Size, BitDepth.U8, <span class="number">1</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            Cv.CvtColor(img, gray, ColorConversion.BgrToGray);</span><br><span class="line">            Cv.Resize(gray, smallImg, Interpolation.Linear);</span><br><span class="line">            Cv.EqualizeHist(smallImg, smallImg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> storage = <span class="keyword">new</span> CvMemStorage())</span><br><span class="line">        &#123;</span><br><span class="line">            storage.Clear();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Detect face</span></span><br><span class="line">            <span class="keyword">var</span> faces = Cv.HaarDetectObjects(</span><br><span class="line">                smallImg,</span><br><span class="line">                <span class="keyword">this</span>._Cascade,</span><br><span class="line">                storage,</span><br><span class="line">                <span class="number">1.05</span>,</span><br><span class="line">                minNeighbors,</span><br><span class="line">                HaarDetectionType.FindBiggestObject,</span><br><span class="line">                <span class="keyword">new</span> CvSize(minSize, minSize),</span><br><span class="line">                <span class="keyword">new</span> CvSize(maxSize, maxSize));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Draw circle for detected area</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; faces.Total; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> r = faces[i].Value.Rect;</span><br><span class="line"></span><br><span class="line">                img.SetROI(r);</span><br><span class="line">                <span class="keyword">var</span> s = <span class="number">0.01</span>;</span><br><span class="line">                img.Scale(img, s, s);</span><br><span class="line">                img.Scale(img, <span class="number">1</span> / s, <span class="number">1</span> / s);</span><br><span class="line">                img.ResetROI();</span><br><span class="line"></span><br><span class="line">                img.Rectangle(r.X, r.Y, r.X + r.Width, r.Y + r.Height, colors[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> img.ToWriteableBitmap();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上のコードのメソッドの引数bitmapに人間の顔が写った画像を渡すと顔の部分に青の枠線が描画され、その中身がぼやけさせる結果の画像を返します。<br>下記にポイントを書きます。</p><h3 id="1-パラメータファイルが使えない"><a href="#1-パラメータファイルが使えない" class="headerlink" title="1. パラメータファイルが使えない"></a>1. パラメータファイルが使えない</h3><p>顔検出は、パラメータファイルを　OpenCV のGitHub から持ってきたのですが、各種のブログサイトにあるように、</p><p><code>https://github.com/Itseez/opencv/blob/master/data/haarcascades/haarcascade_frontalface_default.xml</code></p><p>を持ってきて、実行フォルダにコピーしても<strong>動きません</strong>。<br>こっちではなく、<strong>haarcascades_cuda</strong> というフォルダ内の下記の同名ファイルを使ってください (少なくとも、2.4.10では)。</p><p><code>https://github.com/Itseez/opencv/blob/master/data/haarcascades_cuda/haarcascade_frontalface_default.xml</code></p><h3 id="2-前処理"><a href="#2-前処理" class="headerlink" title="2. 前処理"></a>2. 前処理</h3><p>// Enhancement image to detect face というコメントがありますが、引数に渡した画像のコピー、つまり顔検出させる対象にエフェクトをかけています。<br>(エンハンス処理と私は好んで言っています)</p><p>エンハンスをすることによって、顔検出がしやすいようにします。<br>例えば、全体的に暗い画像を明るくし、コントラストを調整することで、顔などをくっきりさせて検出しやすくします。<br>こういう前処理は非常に重要です。画像サイズを縮小して、高速化したりすることもあります。</p><h3 id="3-画像中の顔のサイズの調整"><a href="#3-画像中の顔のサイズの調整" class="headerlink" title="3. 画像中の顔のサイズの調整"></a>3. 画像中の顔のサイズの調整</h3><p>顔検出は万能ではありません。<br>何が言いたいかというと、画像の中の顔のサイズがある程度わかっている必要がある、ということです。<br>コード中の Cv.HaarDetectObjects メソッドの最後の2つの引数は、推定される顔の最小・最大サイズを指定します。<br>すなわち、画像中のオブジェクトで、顔と思しきオブジェクトの大きさは、この範囲内に含まれる必要があります。<br>範囲を広くすると、顔ではないものが検出されて精度が落ちます。<br>このあたりの挙動は、HaarDetectionType.FindBiggestObject を変えると面白いです。</p><p>以上を踏まえて、カメラを使ってリアルタイムに検出した結果がこちら。<br>(カメラもOpenCVが提供しています。)</p><p><a href="../../../../public/2015/12/Sample.png"><img src="../../../../public/2015/12/Sample-1024x683.png" alt="モザイクは必須"></a></p><p>今回はここまで。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> C# </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> マルチメディア </category>
          
          <category> 画像処理 </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> OpenCV </category>
          
          <category> .NETで画像処理を試してみる OpenCVSharp編 </category>
          
          <category> OpenCvSharp </category>
          
          <category> 顔認識 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>x264 を使ってみる</title>
      <link href="2015/12/26/587/"/>
      <url>2015/12/26/587/</url>
      
        <content type="html"><![CDATA[<p>カメラを使ったアプリケーションをWPFで作っているのですが、取得した連続画像を動画に変換したいと思いいろいろ試行錯誤しています。</p><a id="more"></a><p><strong>WMV</strong>、<strong>AVI</strong>等様々な形式がありますが、画質やサイズを考えるとやっぱり <strong>H264</strong> が良いのですが、ライセンスやコストを考えると悩みます。<br>とはいうものの、ライセンスさえ妥協すればH264のデコード・エンコードをサポートしている <strong><a href="http://www.videolan.org/developers/x264.html">x264</a></strong> は良い選択かと。ライセンスは <strong>GPL</strong>。<br><strong>Cisco Systems</strong> が提供している <strong><a href="http://www.openh264.org/">OpenH264</a></strong> もありますが、こっちは使い方がよくわかりません。<br>OpenH264 の GitHub で<a href="https://github.com/cisco/openh264/issues/1260">連続画像の動画変換についての質問</a>がありました。</p><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><blockquote><p>Suppose I have some pictures with similar content, and I want to compress it using h264 format, making it into something similar to a video stream. Also, I want it to be able for me to get every frame’s picture whenever I want to, but after I’ve read through the api, I’m a little bit confused and here are some questions I have:<br>While encoding the pictures, do I just put these pictures into the encoder and let it encode?<br>How do I get the image of any frames? I didn’t find a seek method in the decoder’s api. How should I implement it?</p></blockquote><p>訳) 似た内容のいくつかの画像があんだけど、それをH264形式に圧縮して、ビデオストリームのようなものにしたいんだ。取得できる全てのフレーム画像に対してね。でも、APIドキュメントに目を通した後、ちょっと混乱してしまって、ここで質問をしたい。<br>画像をエンコードする時、エンコーダに画像を与えて、エンコードさせるのかい？ どうやってフレーム画像を取得するんだい？デコーダのAPIドキュメントには見当たらない。自分で実装するの？</p><h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><blockquote><p>Currently encoder supports only I420 input. You should change your pictures into this format, and let encoder encode one picture by one.<br>There is not an easy way to get the image of any frame, especially for all P picture coding. It’s not required as a pure enc/dec. I guess you need a player.</p></blockquote><p>訳) 今のところI420形式か入力はできないんだ。画像はそれに変換してくれ。で、エンコーダに画像を一つずつエンコードさせてね。<br>フレーム画像を取得する簡単な方法はないし、特に、全てのP画像 (訳注:Pの意味が不明。PNGのTypo?)はね。純粋なエンコーダ・デコーダに必要ではないね。<br>思うに、君には再生ソフトが必要だね。</p><p>訳は意訳だけど…<br>ということで、なんかダメな感じがする。</p><p>だから、少し調べてx264なら画像を動画に変えることができることがわかったからここにメモしておく・ <strong>ffmpeg</strong> でタイムラプスを作る記事は<a href="http://qiita.com/riocampos/items/2f4fe927b5cf99aff767">riocampos様が書いてます</a>が、ffmpegを使うつもりはないので…</p><p>x264のバイナリは適宜落としてきてください。<br>コマンドは、</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x264.exe &quot;input_%03d.png&quot; -o output.h264 -q 0 --input-range pc --range pc --muxer mp4</span><br></pre></td></tr></table></figure><p>こんな感じ。</p><table><thead><tr><th align="left">引数</th><th align="left">意味</th></tr></thead><tbody><tr><td align="left"><strong>“input_%03d.png”</strong></td><td align="left">input_000.png, input_001.png のような連番画像を入力</td></tr><tr><td align="left"><strong>-o output.h264</strong></td><td align="left">output.h264という名前で出力</td></tr><tr><td align="left"><strong>-q 0</strong></td><td align="left">品質。0-69 で指定して、0 はロスレス</td></tr><tr><td align="left"><strong>–input-range pc</strong></td><td align="left">入力カラー範囲を指定。auto、tv または pc を指定</td></tr><tr><td align="left"><strong>–range pc</strong></td><td align="left">カラー範囲を指定。auto、tv または pc を指定</td></tr><tr><td align="left"><strong>–muxer mp4</strong></td><td align="left">出力コンテナ形式を指定。auto、raw、mkv、flv または mp4 を指定</td></tr></tbody></table><p>とのこと。<br>画像は <strong>Jpeg</strong> か <strong>Png</strong> じゃないとだめかも。少なくとも、<strong>Bitmap</strong> はだめでした。<br>Jpegで試しましたところ、320x180のJpeg画像591枚5.5MBが15.5MB (23秒) になりました。<br>30fpsに少し足りませんが、まぁ良い塩梅でした。</p><p><font color="red">補足</font><br>出力コンテナ形式を指定する <strong>–muxer mp4</strong> を追加しました。</p>]]></content>
      
      
      <categories>
          
          <category> ソフトウェア紹介 </category>
          
          <category> マルチメディア </category>
          
          <category> オープンソース </category>
          
          <category> H264 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CI（継続的インテグレーション）の導入</title>
      <link href="2015/12/20/584/"/>
      <url>2015/12/20/584/</url>
      
        <content type="html"><![CDATA[<p>Red Armory を <a href="http://www.appveyor.com/">AppVeyor</a> による CI に対応させました。</p><a id="more"></a><p>AppVeyor は、.NET 開発者向けの CI &amp; デプロイツールです。GitHubの公開リポジトリに対してなら無料で利用できます。</p><p>CI によって、ビルドが通らないソースがコミットされると、すぐにわかるようになります。<br>なお、単体テストも自動で実施されますが、Bitnami Redmine Stack に関するテストは自動テストでは難しい、つまり環境依存になってしまうため、自動テストの実施は停止しています。</p>]]></content>
      
      
      <categories>
          
          <category> CI </category>
          
          <category> サービス紹介 </category>
          
          <category> オープンソース </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Bitnami Redmine Stack のバックアップ・復元ツールの公開</title>
      <link href="2015/12/20/582/"/>
      <url>2015/12/20/582/</url>
      
        <content type="html"><![CDATA[<p>オープンソースで公開します。詳細は <a href="https://taktak.jp/wordpress/apps/">APPS</a> または <a href="https://github.com/takuya-takeuchi/RedArmory">GitHub</a> をご覧ください。</p>]]></content>
      
      
      <categories>
          
          <category> ソフトウェア紹介 </category>
          
          <category> 自作ソフトウェア </category>
          
          <category> Red Armory </category>
          
          <category> オープンソース </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETで難読化を試してみる 第5回</title>
      <link href="2015/12/19/560/"/>
      <url>2015/12/19/560/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2015/12/19/537">前回</a>の続き。</p><p>今回は<strong>アゼンブリマージ</strong>を使った場合、参照アセンブリ一覧にマージしたはずのアセンブリが残っていた問題の打開について検証します。</p><a id="more"></a><h1 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h1><p>前回は、マージではなく埋め込みという方法でアセンブリの結合行いました。マージと結合は違います。ここ重要。<br>打開策の説明をする前にお知らせ。<br>今回の説明に <strong>Eazfuscator.NET</strong> は使いません。</p><p>それは、Eazfuscator.NET は有償化されたため、無償版はこれ以上サポートされないため、無償版は</p><ul><li>.NET Framework 4.5 はサポートされない</li><li>XAML 難読化の未サポート</li><li>高度な難読化の未サポート</li></ul><p>というのが理由です。<br><a href="http://www.gapotchenko.com/eazfuscator.net/purchase">公式サイトの購入ページ</a>には</p><blockquote><p>Eazfuscator.NET established wide user base while being a freely available product. If you are an existing customer of Eazfuscator.NET, the following fair upgrade rules apply:<br>All existing customers will get 30% off<br>People who made donations to Eazfuscator.NET will get 80% off<br>People who made donations larger than $49 will get Single Developer License for free</p></blockquote><p>訳) Eazfuscator.NET は、無償利用のプロダクトであった間に、広くユーザーベースに確立しました。もしあなたが Eazfuscator.NET の既存顧客なら、以下の公正なアップグレードルールを適用します</p><ul><li>全ての既存顧客は30%オフ</li><li>Eazfuscator.NET に寄付した人々は80%オフ</li><li>49ドル以上寄付した人々はシングルユーザライセンスの無償で入手</li></ul><p>とあります。<br>30%オフの権利はあるので、399ドルの30%オフで有償版を入手できますが….</p><p>これを機に難読化のソフトを見直しました。</p><p>今回選んだのは、<a href="http://babelfor.net/products/obfuscator">Babel Obfuscator</a> です。<br>以前紹介しましたが、GUIが秀逸です。<a href="https://www.devexpress.com/">DevExpressのコンポーネント</a>を使っているのか、かっこいいインターフェイスです。</p><p>ちなみに、私は気に入りましたので、有償版を購入しました。<br>執筆時点での最新版は 8.3.0.0 です。</p><h2 id="Assembly-Merge"><a href="#Assembly-Merge" class="headerlink" title="Assembly Merge"></a>Assembly Merge</h2><p>実際に使ってみます。<br>今回のサンプルソースは、**<a href="https://github.com/takuya-takeuchi/Demo/tree/master/Obfuscation5">GitHub</a>** にあります。</p><p>前回は、埋め込んだアセンブリに対してまでリフレクションを実行した、つまり既にわかっているアセンブリに対するアセンブリの埋め込みが問題を引き起こしたようです。<br>なので、今回のサンプルはアセンブリのLoadは実行しません。あくまで、メソッドのリフレクションのみです。</p><p>Babel Obfuscator起動後、左側のInputをクリックし、右側にObfuscation5.exeをドラッグアンドドロップします。<br>次に追加されたObfuscation5.exeの左側にある +マークをクリックし、ノードを展開します。<br>InputsタブのFileにObfuscation5Lib.dllを追加し、ActionをEmbedに変更します。<br>そして、左端のチェックボックスにチェックがついていることを確認します。</p><p><a href="../../../../public/2015/12/1-1.png"><img src="../../../../public/2015/12/1-1-300x204.png" alt="難読化準備"></a></p><p>これで準備は完了です。<br>一応他のSettingsやOptimzationsから難読化レベルや最適化が選択できますが今回は無視します。<br>(ちなみに、今回は使いませんが、これらの設定によって、アセンブリマージ後、使っていないPublicクラス等を削除して結合後のアセンブリを小さくできます。)</p><p>画面上部の再生マークみたいなボタンを押下します。すると、難読化が始まります。<br>既定では、最初に追加したアセンブリと同一フォルダに <strong>BabelOut</strong> というフォルダが作られ、そこに難読化されたアセンブリが追加されるようです。</p><p>(1) 実行結果の検証</p><p><strong>Before</strong></p><p><a href="../../../../public/2015/12/2-1.png"><img src="../../../../public/2015/12/2-1-300x218.png" alt="難読化前"></a></p><p><strong>After</strong></p><p><a href="../../../../public/2015/12/3-1.png"><img src="../../../../public/2015/12/3-1-300x218.png" alt="難読化後"></a></p><p>(2) 逆コンパイラによるソースコード解析</p><p><a href="../../../../public/2015/12/4-1.png"><img src="../../../../public/2015/12/4-1-300x188.png" alt="逆コンパイラによるソースコード"></a></p><p>どうでしょう？ きちんと参照からdllが消えて、アセンブリが埋め込まれているのがわかります。<br>デフォルトの設定でも、外部アセンブリでも一部はきちんと難読化されています。</p><p>ちなみにマージ後は、exe、dll ともに 5kbだったのが、37kbに増えています。</p><p>では、全ての設定を有効にして難読化した場合はどうなるでしょうか？ たぶん、一番気になるところでしょう。</p><p>SettingでObfuscation Level という右端のスライダーを一番上に。<br>OptimizationsでOptimizations Level という右端のスライダーを一番上に。</p><p>これで難読化を実行します。</p><p><a href="../../../../public/2015/12/5-1.png"><img src="../../../../public/2015/12/5-1-300x188.png" alt="最高レベルで難読化"></a></p><p>が、また参照にdllが復活しています。でも実行は上手くいきます。<br>ひょっとして、難読化の程度によって、こういう風になるのは仕様なのでしょうか？要調査です。<br>さらに、何故か難読化後、AnyCPU設定が外れてx86になっていました。これバグ？ さらにさらに、最適化はしたけど、ファイルサイズが74kbまでふくれあがっていました。<br>おそらく、削除したクラスの数よりも、難読化による弊害のが強く影響してしまったためでしょう。</p><p>ちなみに、Babel Obfuscatorは難読化後、どの程度難読化が適用されたのかをグラフで見せてくれます。</p><p><strong>シンボルのリネーム率</strong></p><p><a href="../../../../public/2015/12/6.png"><img src="../../../../public/2015/12/6-300x204.png" alt="シンボルのリネーム率"></a></p><p><strong>シンボルのリネーム率 2</strong></p><p><a href="../../../../public/2015/12/7.png"><img src="../../../../public/2015/12/7-300x204.png" alt="シンボルのリネーム率2"></a></p><p><strong>最適化率</strong></p><p><a href="../../../../public/2015/12/8.png"><img src="../../../../public/2015/12/8-300x204.png" alt="最適化率"></a></p><p><strong>難読化に要した時間</strong></p><p><a href="../../../../public/2015/12/9.png"><img src="../../../../public/2015/12/9-300x204.png" alt="難読化に要した時間"></a></p><p>今回は以上です。次回は…あるのか？</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> C# </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> 難読化 </category>
          
          <category> .NETで難読化を試してみる </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETで難読化を試してみる 第4回</title>
      <link href="2015/12/19/537/"/>
      <url>2015/12/19/537/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2012/05/24/139">前回</a>の続き。</p><p>ですが、前回は3年前です。<br>なのに、皆さん難読化に興味があるのか、Blogの人気記事は難読化です。</p><p>今回は<strong>リフレクション</strong>と<strong>アゼンブリマージ</strong>を使った場合の難読化について検証します。</p><a id="more"></a><h1 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h1><p>前回は、ソースコードの実行結果が、難読化前後で変化しないこと、逆アセンブルした後、人間が容易に理解できるようなソースコードではなくなっていたことを確認しました。<br>今回は、<strong>リフレクション</strong>と<strong>アゼンブリマージ</strong>がどう変化するのかを実際に見てみます。<br>サンプルソースは、**<a href="https://github.com/takuya-takeuchi/Demo/tree/master/Obfuscation4">GitHub</a>** に置きました。</p><p>前回のように、できあがった exe (今回は <strong>Obfuscation4.exe</strong>) を <strong>Eazfuscator.NET</strong> の右側の緑の領域に、作成したプログラムをドラッグアンドドロップします。</p><h2 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h2><p>(1) 実行結果の検証</p><p><strong>Before</strong></p><p><a href="../../../../public/2015/12/1.png"><img src="../../../../public/2015/12/1-300x218.png" alt="リフレクションの難読化前"></a></p><p><strong>After</strong></p><p><a href="../../../../public/2015/12/2.png"><img src="../../../../public/2015/12/2-300x218.png" alt="リフレクションの難読化後"></a></p><p>(2) 逆コンパイラによるソースコード解析</p><p><a href="../../../../public/2015/12/3.png"><img src="../../../../public/2015/12/3-300x157.png" alt="リフレクションの逆コンパイラ結果"></a></p><p>リフレクションは成功していることがわかります。</p><h2 id="Assembly-Merge"><a href="#Assembly-Merge" class="headerlink" title="Assembly Merge"></a>Assembly Merge</h2><p>ではアセンブリをマージしてみましょう。</p><p>次はできあがった exe と dll (<strong>Obfuscation4Lib.dll</strong>) を <strong>Eazfuscator.NET</strong> の右側の緑の領域に、作成したプログラムをドラッグアンドドロップします。<br>次にexeを実行すると…</p><p><a href="../../../../public/2015/12/4.png"><img src="../../../../public/2015/12/4-300x218.png" alt="アセンブリマージの実行結果"></a></p><p>失敗します。<br>直感的に、複数のアセンブリを複数ドロップすることでマージできそうですが、それでは失敗します。<br>結論から言うと、Eazfuscator.NET はアセンブリマージの機能は対応していますが、一工夫必要です。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.CompilerServices;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"></span><br><span class="line"><span class="comment">// アセンブリに関する一般情報は以下の属性セットをとおして制御されます。</span></span><br><span class="line"><span class="comment">// アセンブリに関連付けられている情報を変更するには、</span></span><br><span class="line"><span class="comment">// これらの属性値を変更してください。</span></span><br><span class="line">[<span class="meta">assembly: AssemblyTitle(<span class="meta-string">&quot;Obfuscation4&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">assembly: AssemblyDescription(<span class="meta-string">&quot;&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">assembly: AssemblyConfiguration(<span class="meta-string">&quot;&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">assembly: AssemblyCompany(<span class="meta-string">&quot;&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">assembly: AssemblyProduct(<span class="meta-string">&quot;Obfuscation4&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">assembly: AssemblyCopyright(<span class="meta-string">&quot;Copyright ©  2015&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">assembly: AssemblyTrademark(<span class="meta-string">&quot;&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">assembly: AssemblyCulture(<span class="meta-string">&quot;&quot;</span>)</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// ComVisible を false に設定すると、その型はこのアセンブリ内で COM コンポーネントから</span></span><br><span class="line"><span class="comment">// 参照不可能になります。COM からこのアセンブリ内の型にアクセスする場合は、</span></span><br><span class="line"><span class="comment">// その型の ComVisible 属性を true に設定してください。</span></span><br><span class="line">[<span class="meta">assembly: ComVisible(false)</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 次の GUID は、このプロジェクトが COM に公開される場合の、typelib の ID です</span></span><br><span class="line">[<span class="meta">assembly: Guid(<span class="meta-string">&quot;386f10d7-d505-4caf-9d63-98ef058b1088&quot;</span>)</span>]</span><br><span class="line"></span><br><span class="line">[<span class="meta">assembly: Obfuscation(Feature = <span class="meta-string">&quot;merge with Obfuscation4Lib.dll&quot;</span>, Exclude = false)</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// アセンブリのバージョン情報は、以下の 4 つの値で構成されています:</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//      Major Version</span></span><br><span class="line"><span class="comment">//      Minor Version</span></span><br><span class="line"><span class="comment">//      Build Number</span></span><br><span class="line"><span class="comment">//      Revision</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// すべての値を指定するか、下のように &#x27;*&#x27; を使ってビルドおよびリビジョン番号を</span></span><br><span class="line"><span class="comment">// 既定値にすることができます:</span></span><br><span class="line"><span class="comment">// [assembly: AssemblyVersion(&quot;1.0.*&quot;)]</span></span><br><span class="line">[<span class="meta">assembly: AssemblyVersion(<span class="meta-string">&quot;1.0.0.0&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">assembly: AssemblyFileVersion(<span class="meta-string">&quot;1.0.0.0&quot;</span>)</span>]</span><br></pre></td></tr></table></figure><p>上記コードの中央下の <strong>[assembly: Obfuscation(Feature = “merge with Obfuscation4Lib.dll”, Exclude = false)]</strong> によってマージするアセンブリを指定できます。</p><p>その後、exe だけを再びドラッグアンドドロップして難読化を実行します。<br>さらに、アセンブリがマージされたことを確認するため、exe だけを別の場所に配置して実行すると上手く<strong>いきません</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ハンドルされていない例外: System.IO.FileNotFoundException: ファイルまたはアセンブリ &#39;Obfuscation4Lib&#39;、またはその依存関係の 1 つが読み込めませんでした。指定されたファイルが見つかりません。</span><br><span class="line">場所 System.Reflection.RuntimeAssembly._nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark&amp; stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)</span><br><span class="line">場所 System.Reflection.RuntimeAssembly.InternalLoadAssemblyName(AssemblyNameassemblyRef, Evidence assemblySecurity, RuntimeAssembly reqAssembly, StackCrawlMark&amp; stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)</span><br><span class="line">場所 System.Reflection.RuntimeAssembly.InternalLoad(String assemblyString, Evidence assemblySecurity, StackCrawlMark&amp; stackMark, IntPtr pPrivHostBinder, Boolean forIntrospection)</span><br><span class="line">場所 System.Reflection.RuntimeAssembly.InternalLoad(String assemblyString, Evidence assemblySecurity, StackCrawlMark&amp; stackMark, Boolean forIntrospection)</span><br><span class="line">場所 System.Reflection.Assembly.Load(String assemblyString)</span><br><span class="line">場所 .(String[] )</span><br></pre></td></tr></table></figure><p><strong>(゜Д゜) ハア??</strong></p><p>という落とし穴があります。<br>どうも、Mergeには副作用があるようで、難読化等が失敗することがあるようです。<br>これはヘルプファイルに記載してあります。</p><blockquote><p>Usage of assemblies merging may lead to some side effects which may make obfuscation fail. If such is the case then use the principle of the least common denominator – merge just those assemblies which do not cause obfuscation failure.<br>Assemblies embedding can be used in conjunction or as an alternative to assemblies merging.</p></blockquote><p>訳) アセンブリマージの使用は難読化の失敗させるかもしれない副作用を引き起こすかもしれません。そのようなケースでは、最小公倍数の原理-難読化失敗を引き起こさないアセンブリだけマージします。<br>アセンブリの埋め込みは結合に使うことができ、またはアセンブリマージの代用にすることができます。</p><p>そのため、</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- [assembly: Obfuscation(Feature = &quot;merge with Obfuscation4Lib.dll&quot;, Exclude = false)]</span></span><br><span class="line"><span class="addition">+ [assembly: Obfuscation(Feature = &quot;embed Obfuscation4Lib.dll&quot;, Exclude = false)]</span></span><br></pre></td></tr></table></figure><p>のように変更します。<br>その後に、ビルド、exeのドラッグアンドドロップ実行、exeの隔離、実行をすると、今度こそ成功します。</p><p>ですが、先ほどと同じように <strong>JetBrains dotPeek</strong> で逆コンパイルして確認すると、参照アセンブリにObfuscation4Lib.dllが含まれたままです。</p><p><a href="../../../../public/2015/12/5.png"><img src="../../../../public/2015/12/5-300x188.png" alt="マージ後の逆コンパイル"></a></p><p>なのに、exeを隔離して実行しても上手くいくのは、単純にdotPeekが上手く処理できていないだけなのでしょうか？<br>ただ、思うところはあります。<br>アセンブリをマージしているのに、 <strong>Assembly.Load</strong>でマージ(埋め込み)対象のアセンブリを読み込もうとしているのを認識しているのでしょうか？<br>何はともあれ、参照済みのアセンブリをわざわざリフレクションでアセンブリをロードするのはやめた方が良いようです。イレギュラーでしょうし。</p><p>理由はこれ以上深く追求できませんしませんが、この問題を克服した結果をお見せします。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> C# </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> 難読化 </category>
          
          <category> .NETで難読化を試してみる </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>サテライトアセンブリが反映されないとき</title>
      <link href="2015/12/17/533/"/>
      <url>2015/12/17/533/</url>
      
        <content type="html"><![CDATA[<p><strong>WPF</strong> のプロジェクトで多言語化しているとき、<strong>Resources.xx-XX.resx</strong> みたいなファイルを追加したときの話。</p><a id="more"></a><p>通常は、プロジェクトファイルの下の <strong>Properties</strong> ノードに追加していきますが (直接は追加できないので、一度別ノードに追加してから移動)、その際、下の画像のようにリソースファイル名の名前を間違えると、 </p><p><img src="../../../../public/2015/12/Resource-300x288.png" alt="Resource.ja-JP.resxは間違い"></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ChangeCulture</span>(<span class="params"><span class="keyword">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Resources.Culture = CultureInfo.GetCultureInfo(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上のソースが無意味になります。</p><p>名前はきちんと Resource<font color="red"><b>s</b></font>.ja-JP.resx のようにしましょう。<br>これに気づかず1時間くらい時間を無駄にしました。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> C# </category>
          
          <category> Windows Presentation Foundation </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BitNami Redmine Stack 3.2.0.0 で日本語が選択できない</title>
      <link href="2015/12/12/526/"/>
      <url>2015/12/12/526/</url>
      
        <content type="html"><![CDATA[<p>3.2.0.0にアップデートし、プラグインを更新してから何故か日本語が表示できない(´・ω・`)</p><p><a href="../../../../public/2015/12/MissingJapanese.png"><img src="../../../../public/2015/12/MissingJapanese-300x239.png" alt="日本語が行方不明"></a></p><p>プラグイン更新前は良かったのに…</p><p>でも、プラグインを全部空にしたら日本語が選択できるようになった。<br>マジで意味不明。</p><p>一つずつインストールしては、外して、確認を繰り返すと…犯人は</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redmine_comment_only</span><br></pre></td></tr></table></figure><p>でした。<br>何でさ… プラグインが言語選択に影響するって、どういうことよ…</p>]]></content>
      
      
      <categories>
          
          <category> プロジェクト管理 </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> Redmine </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BitNami Redmine Stack のアップデート 2.5.1-1 to 3.2.0.0</title>
      <link href="2015/12/12/511/"/>
      <url>2015/12/12/511/</url>
      
        <content type="html"><![CDATA[<p>またも久しぶりに<strong>BitNami Redmine Stack</strong>を更新しました。<br>そしてまた、今回も更新に手間取りました(白目)。<br>苦労話は<a href="https://taktak.jp/2014/05/10/489">前回</a>を参照。</p><a id="more"></a><p>基本のアップデート手順は<a href="https://taktak.jp/2014/05/10/489">以前 (2.0.3-1 to 2.1.0-0)</a>と同じです。</p><ul><li>バックアップ</li><li>BitNami Redmine Stack のアンインストール</li><li>復元</li><li>アップデート</li></ul><p>です。<br>今は、バックアップとリストアはバッチファイルで自動になっているので、苦労はしませんが、アップデートが面倒です。<br>いつもGemがないだの、よくわからないエラーが出てしまい、そのたびにGoogle先生に泣きついているのですから…</p><p>今回はアップデートに絞って記録をつけます。</p><h3 id="マイグレーション"><a href="#マイグレーション" class="headerlink" title="マイグレーション"></a>マイグレーション</h3><p>バックアップしたSQLとプラグインを復元し終わった後は、マイグレーション作業が必要です。<br>その前に、プラグインは一度、どこかに退避しておきます。</p><p><strong>スタートメニュー</strong>-&gt;<strong>BitNami Redmine Stack</strong>-&gt;<strong>Use BitNami Redmine Stack</strong> でコマンドプロンプトを起動。<br>以下のコマンドを順次実行 (カレントディレクトリは私の環境です)。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">BitNami</span>\<span class="title">Redmine</span>&gt;<span class="title">cd</span> <span class="title">apps</span>\<span class="title">redmine</span>\<span class="title">htdocs</span></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">BitNami</span>\<span class="title">Redmine</span>\<span class="title">apps</span>\<span class="title">redmine</span>\<span class="title">htdocs</span>&gt;<span class="title">bundle</span> <span class="title">exec</span> <span class="title">rake</span> <span class="title">db:migrate</span> <span class="title">RAILS_ENV</span>=<span class="title">production</span></span></span><br></pre></td></tr></table></figure><p>すると、</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">in</span> C:/BitNami/Redmine/apps/redmine/htdocs)</span><br><span class="line">DL is deprecated, please use Fiddle</span><br><span class="line">== <span class="number">20150113194759</span> CreateEmailAddresses: migrating =============================</span><br><span class="line">-- create_table(:email_addresses)</span><br><span class="line">rake aborted!</span><br><span class="line"><span class="function">StandardError: <span class="title">An</span> <span class="title">error</span> <span class="title">has</span> <span class="title">occurred</span>, <span class="title">all</span> <span class="title">later</span> <span class="title">migrations</span> <span class="title">canceled</span>:</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Mysql2</span>::<span class="title">Error</span>: <span class="title">Table</span> &#x27;<span class="title">email_addresses</span>&#x27; <span class="title">already</span> <span class="title">exists</span>: <span class="title">CREATE</span> <span class="title">TABLE</span> `<span class="title">email_addresses</span>` (`<span class="title">id</span>` <span class="title">int</span>(11) <span class="title">auto_increment</span> <span class="title">PRIMARY</span> <span class="title">KEY</span>, `<span class="title">user_id</span>` <span class="title">int</span>(11) <span class="title">NOT</span> <span class="title">NULL</span>, `<span class="title">address</span>` <span class="title">varchar</span>(255) <span class="title">NOT</span> <span class="title">NULL</span>, `<span class="title">is_default</span>` <span class="title">tinyint</span>(1) <span class="title">DEFAULT</span> 0 <span class="title">NOT</span> <span class="title">NULL</span>, `<span class="title">notify</span>` <span class="title">tinyint</span>(1) <span class="title">DEFAULT</span> 1 <span class="title">NOT</span> <span class="title">NULL</span>, `<span class="title">created_on</span>` <span class="title">datetime</span> <span class="title">NOT</span> <span class="title">NULL</span>, `<span class="title">updated_on</span>` <span class="title">datetime</span> <span class="title">NOT</span> <span class="title">NULL</span>) <span class="title">ENGINE</span>=<span class="title">InnoDBC</span>:/<span class="title">BitNami</span>/<span class="title">Redmine</span>/<span class="title">apps</span>/<span class="title">redmine</span>/<span class="title">htdocs</span>/<span class="title">vendor</span>/<span class="title">bundle</span>/<span class="title">ruby</span>/2.0.0/<span class="title">gems</span>/<span class="title">activerecord</span>-4.2.5/<span class="title">lib</span>/<span class="title">active_record</span>/<span class="title">connection_adapters</span>/<span class="title">abstract_mysql_adapter.rb</span>:305:<span class="title">in</span> `<span class="title">query</span>&#x27;</span></span><br><span class="line"><span class="function"><span class="title">C</span>:/<span class="title">BitNami</span>/<span class="title">Redmine</span>/<span class="title">apps</span>/<span class="title">redmine</span>/<span class="title">htdocs</span>/<span class="title">vendor</span>/<span class="title">bundle</span>/<span class="title">ruby</span>/2.0.0/<span class="title">gems</span>/<span class="title">activerecor</span></span></span><br></pre></td></tr></table></figure><p>という長いエラーが出ます。<br>**’email_addresses’** というテーブルが既に存在するからテーブル作成できませーん！って怒っています。</p><p>コマンドプロンプトから削除してもいいのですが、CUIは嫌いですし、何より視覚的に中に何が入っているかがわかりにくいので、GUIツールを使います。<br><strong>MySQL Workbench</strong> というツールが<a href="http://dev.mysql.com/downloads/workbench/">ここ</a>から入手できるので環境に応じてダウンロード。</p><p>接続先の情報は、<strong>Redmine\apps\redmine\htdocs\config\database.yml</strong> にあります。<br>削除は下記のように行います。(削除する前に中身を確認してください。自己責任で。)</p><p><a href="../../../../public/2015/12/mysql_droptable-2.png"><img src="../../../../public/2015/12/mysql_droptable-2-300x226.png" alt="テーブルの削除"></a></p><p>削除したら、<strong>bundle exec rake db:migrate RAILS_ENV=production</strong> を再度実行し、類似のエラーが出なくなるまで繰り返します。<br>最終的に、</p><ul><li>email_addresses</li><li>roles_managed_roles</li><li>imports</li><li>import_items</li><li>custom_field_enumerations</li></ul><p>をドロップしました。<br>結果も、</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">in</span> C:/BitNami/Redmine/apps/redmine/htdocs)</span><br><span class="line">DL is deprecated, please use Fiddle</span><br><span class="line">== <span class="number">20151025072118</span> CreateCustomFieldEnumerations: migrating ====================</span><br><span class="line">-- create_table(:custom_field_enumerations)</span><br><span class="line">   -&gt; <span class="number">0</span>.<span class="number">0060</span>s</span><br><span class="line">== <span class="number">20151025072118</span> CreateCustomFieldEnumerations: migrated (<span class="number">0</span>.<span class="number">0070</span>s) ===========</span><br><span class="line"></span><br><span class="line">== <span class="number">20151031095005</span> AddProjectsDefaultVersionId: migrating ======================</span><br><span class="line">-- column_exists?(:projects, :default_version_id, :integer)</span><br><span class="line">   -&gt; <span class="number">0</span>.<span class="number">0030</span>s</span><br><span class="line">-- add_column(:projects, :default_version_id, :integer, &#123;:default=&gt;nil&#125;)</span><br><span class="line">   -&gt; <span class="number">0</span>.<span class="number">0130</span>s</span><br><span class="line">== <span class="number">20151031095005</span> AddProjectsDefaultVersionId: migrated (<span class="number">0</span>.<span class="number">0170</span>s) =============</span><br></pre></td></tr></table></figure><p>のようになりました。</p><h3 id="起動"><a href="#起動" class="headerlink" title="起動"></a>起動</h3><p>サービスを一度全て再起動して、ログイン、チケットの作成、閲覧、削除ができるかをテストします。</p><p><a href="../../../../public/2015/12/redmine320.png"><img src="../../../../public/2015/12/redmine320-300x191.png" alt="アップデート後"></a></p><h3 id="プラグインの更新"><a href="#プラグインの更新" class="headerlink" title="プラグインの更新"></a>プラグインの更新</h3><p>会社で使っている</p><ul><li>redmine_work_time</li><li>redmine_knowledgebase</li></ul><p>が3.2.0で使えなければ話になりません。<br>というわけでプラグインの更新です。</p><p>まず、退避したプラグインを戻し、各プラグインを最新版に更新します。<br>そして</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">BitNami</span>\<span class="title">Redmine</span>\<span class="title">apps</span>\<span class="title">redmine</span>\<span class="title">htdocs</span>\<span class="title">plugins</span>&gt;<span class="title">bundle</span> <span class="title">install</span></span></span><br></pre></td></tr></table></figure><p>を実行して依存関係を解決します。<br>が、</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">You are trying to install <span class="keyword">in</span> deployment <span class="built_in">mode</span> after changing</span><br><span class="line">your Gemfile. Run `bundle install` elsewhere and add the</span><br><span class="line">updated Gemfile.lock to version control.</span><br><span class="line"></span><br><span class="line"><span class="keyword">If</span> this is a development machine, remove the Gemfile freeze</span><br><span class="line">by running `bundle install --no-deployment`.</span><br></pre></td></tr></table></figure><p>なるエラーが出て先に進めない。<br>調べてみると、解決策が。<a href="http://www.oiax.jp/rails/zakkan/how_to_apply_rails_security_updates.html">Ruby on Rails with OIAX様の記事</a> によれば、</p><blockquote><p>この場合は、.bundle ディレクトリにある config ファイルをVimなどのエディタで開きます。その中に、次のような書かれた箇所がありますので、その行を削除してください。<br>BUNDLE_FROZEN: “1”<br>そして、もう一度 bundle update rails コマンドを実行してください。</p></blockquote><p>この説明に従った後は、bundle installが成功しますので、プラグインをインストールするべく</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">BitNami</span>\<span class="title">Redmine</span>\<span class="title">apps</span>\<span class="title">redmine</span>\<span class="title">htdocs</span>\<span class="title">plugins</span>&gt;<span class="title">bundle</span> <span class="title">exec</span> <span class="title">rake</span> <span class="title">redmine:plugins</span>:<span class="title">migrate</span> <span class="title">RAILS_ENV</span>=<span class="title">production</span></span></span><br></pre></td></tr></table></figure><p>を実行します。その後、問題がなければ、</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">BitNami</span>\<span class="title">Redmine</span>\<span class="title">apps</span>\<span class="title">redmine</span>\<span class="title">htdocs</span>\<span class="title">plugins</span>&gt;<span class="title">bundle</span> <span class="title">exec</span> <span class="title">rake</span> <span class="title">tmp:cache</span>:<span class="title">clear</span></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">BitNami</span>\<span class="title">Redmine</span>\<span class="title">apps</span>\<span class="title">redmine</span>\<span class="title">htdocs</span>\<span class="title">plugins</span>&gt;<span class="title">bundle</span> <span class="title">exec</span> <span class="title">rake</span> <span class="title">tmp:sessions</span>:<span class="title">clear</span></span></span><br></pre></td></tr></table></figure><p>を実行して、キャッシュとセッションをクリアします。<br>その後、プラグインが動くかどうかをチェックします。</p><p>以上で全ての更新は完了です。</p>]]></content>
      
      
      <categories>
          
          <category> プロジェクト管理 </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> Redmine </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ReSharper Ultimate を All Products Pack に更新しました</title>
      <link href="2015/12/11/509/"/>
      <url>2015/12/11/509/</url>
      
        <content type="html"><![CDATA[<p><strong>ReSharper Ultimate</strong> を <strong>IntelliJ IDEA</strong>, <strong>ReSharper</strong>, <strong>ReSharper C++</strong>, <strong>dotTrace</strong>, <strong>dotMemory</strong>, <strong>dotCover</strong>, <strong>AppCode</strong>, <strong>CLion</strong>, <strong>PhpStorm</strong>, <strong>PyCharm</strong>, <strong>RubyMine</strong>, <strong>WebStorm</strong> が全部一緒になった <strong>All Products Pack</strong> に更新しました。</p><a id="more"></a><p>既存の有効なサブスクリプションがあったので <strong>199ドル</strong> で2年分ですよ。<br>3年目は <strong>149ドル</strong> ですよ。お得です。</p><p>個人ライセンスだけど、会社でも使えるので非常に助かります。これがないとストレスがたまります。<br>ReSharper だけでも試しに使ってみると世界が変わります。いやほんと。</p>]]></content>
      
      
      <categories>
          
          <category> ソフトウェア紹介 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ご無沙汰しておりました</title>
      <link href="2015/12/06/507/"/>
      <url>2015/12/06/507/</url>
      
        <content type="html"><![CDATA[<p>久しぶりにBlogを更新しました。2015年度ももう終わりますが、来年も何卒よろしくお願いいたします。</p>]]></content>
      
      
      <categories>
          
          <category> 未分類 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BitNami Redmine Stack のアップデート 2.3.0-0 to 2.5.1-1</title>
      <link href="2014/05/10/489/"/>
      <url>2014/05/10/489/</url>
      
        <content type="html"><![CDATA[<p>久しぶりに<strong>BitNami Redmine Stack</strong>を更新しました。<br>が、今回はいつも以上に更新に手間取りました。</p><a id="more"></a><p>基本のアップデート手順は<a href="https://taktak.jp/2012/09/21/280">前回 (2.0.3-1 to 2.1.0-0)</a>と同じですが、**(8)** の手順は実行しないでください。<br>つまり (7) まで実行した段階で、次からの手順を実行します。</p><h3 id="1-プラグインの退避"><a href="#1-プラグインの退避" class="headerlink" title="(1) プラグインの退避"></a>(1) プラグインの退避</h3><p><strong>&lt;InstallDir&gt;\apps\redmine\htdocs\plugins</strong> (InstallDirはBitNami Redmine Stackのインストール先) から、プラグインを一度全部別のフォルダに移動します。<br>私の場合は、</p><ul><li>redmine_logs</li><li>redmine_comment_only</li><li>redmine_knowledgebase</li></ul><p>でした。</p><h3 id="2-データベースのマイグレーション"><a href="#2-データベースのマイグレーション" class="headerlink" title="(2) データベースのマイグレーション"></a>(2) データベースのマイグレーション</h3><p>データベースの更新を実行。<strong>スタートメニュー</strong>-&gt;<strong>BitNami Redmine Stack</strong>-&gt;<strong>Use BitNami Redmine Stack</strong> でコマンドプロンプトを起動。<br>以下のコマンドを順次実行 (カレントディレクトリは私の環境です)。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">BitNami</span>\<span class="title">Redmine</span>&gt;<span class="title">cd</span> <span class="title">apps</span>\<span class="title">redmine</span>\<span class="title">htdocs</span></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">BitNami</span>\<span class="title">Redmine</span>\<span class="title">apps</span>\<span class="title">redmine</span>\<span class="title">htdocs</span>&gt;<span class="title">rake</span> <span class="title">db:migrate</span> <span class="title">RAILS_ENV</span>=&quot;<span class="title">production</span>&quot;</span></span><br></pre></td></tr></table></figure><p>すると、</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">BitNami</span>\<span class="title">Redmine</span>\<span class="title">apps</span>\<span class="title">redmine</span>\<span class="title">htdocs</span>&gt;<span class="title">bundle</span> <span class="title">exec</span> <span class="title">rake</span> <span class="title">db:migrate</span> <span class="title">RAILS_ENV</span>=&quot;<span class="title">pr</span></span></span><br><span class="line"><span class="function"><span class="title">oduction</span>&quot;</span></span><br><span class="line"><span class="function"><span class="title">rake</span> <span class="title">aborted</span>!</span></span><br><span class="line"><span class="function"><span class="title">An</span> <span class="title">error</span> <span class="title">has</span> <span class="title">occurred</span>, <span class="title">all</span> <span class="title">later</span> <span class="title">migrations</span> <span class="title">canceled</span>:</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Mysql2</span>::<span class="title">Error</span>: <span class="title">Table</span> &#x27;<span class="title">queries_roles</span>&#x27; <span class="title">already</span> <span class="title">exists</span>: <span class="title">CREATE</span> <span class="title">TABLE</span> `<span class="title">queries_roles</span></span></span><br><span class="line"><span class="function">` (`<span class="title">query_id</span>` <span class="title">int</span>(11) <span class="title">NOT</span> <span class="title">NULL</span>, `<span class="title">role_id</span>` <span class="title">int</span>(11) <span class="title">NOT</span> <span class="title">NULL</span>) <span class="title">ENGINE</span>=<span class="title">InnoDBC</span>:/<span class="title">BitN</span></span></span><br><span class="line"><span class="function"><span class="title">ami</span>/<span class="title">Redmine</span>/<span class="title">apps</span>/<span class="title">redmine</span>/<span class="title">htdocs</span>/<span class="title">vendor</span>/<span class="title">bundle</span>/<span class="title">ruby</span>/1.9.1/<span class="title">gems</span>/<span class="title">activerecord</span>-3.2.1</span></span><br><span class="line"><span class="function">7/<span class="title">lib</span>/<span class="title">active_record</span>/<span class="title">connection_adapters</span>/<span class="title">abstract_mysql_adapter.rb</span>:245:<span class="title">in</span> `<span class="title">query</span>&#x27;</span></span><br></pre></td></tr></table></figure><p>のようなエラーが出ました。<br>どうも<strong>queries_roles</strong>が既に存在しているとのことなので、このテーブルを削除します。<br><strong>※削除前にこのテーブルを削除していいかは確認してください</strong></p><p>まず<strong>mysql</strong>に接続します。<br>データベースのパスワードは <strong>&lt;InstallDir&gt;\apps\redmine\htdocs\config\database.yml</strong> に書かれています。<br>引き続きコマンドプロンプトに下記のように入力します。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql -u bitnami -p bitnami_redmine</span><br><span class="line">Enter password: (ここはdatabase.ymlに記述されているパスワードを入力)</span><br><span class="line">drop table queries_roles;</span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure><p>これで<strong>queries_roles</strong>が削除されます。<br>もう一度マイグレーションを試みますが、今度は、</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">BitNami</span>\<span class="title">Redmine</span>\<span class="title">apps</span>\<span class="title">redmine</span>\<span class="title">htdocs</span>&gt;<span class="title">bundle</span> <span class="title">exec</span> <span class="title">rake</span> <span class="title">db:migrate</span> <span class="title">RAILS_ENV</span>=&quot;<span class="title">pr</span></span></span><br><span class="line"><span class="function"><span class="title">oduction</span>&quot;</span></span><br><span class="line"><span class="function">==  <span class="title">CreateCustomFieldsRoles</span>: <span class="title">migrating</span> ========================================</span></span><br><span class="line"><span class="function">-- <span class="title">create_table</span>(:<span class="title">custom_fields_roles</span>, &#123;:<span class="title">id</span>=&gt;<span class="title">false</span>&#125;)</span></span><br><span class="line"><span class="function"><span class="title">rake</span> <span class="title">aborted</span>!</span></span><br><span class="line"><span class="function"><span class="title">An</span> <span class="title">error</span> <span class="title">has</span> <span class="title">occurred</span>, <span class="title">all</span> <span class="title">later</span> <span class="title">migrations</span> <span class="title">canceled</span>:</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Mysql2</span>::<span class="title">Error</span>: <span class="title">Table</span> &#x27;<span class="title">custom_fields_roles</span>&#x27; <span class="title">already</span> <span class="title">exists</span>: <span class="title">CREATE</span> <span class="title">TABLE</span> `<span class="title">custom_</span></span></span><br><span class="line"><span class="function"><span class="title">fields_roles</span>` (`<span class="title">custom_field_id</span>` <span class="title">int</span>(11) <span class="title">NOT</span> <span class="title">NULL</span>, `<span class="title">role_id</span>` <span class="title">int</span>(11) <span class="title">NOT</span> <span class="title">NULL</span>) <span class="title">E</span></span></span><br><span class="line"><span class="function"><span class="title">NGINE</span>=<span class="title">InnoDBC</span>:/<span class="title">BitNami</span>/<span class="title">Redmine</span>/<span class="title">apps</span>/<span class="title">redmine</span>/<span class="title">htdocs</span>/<span class="title">vendor</span>/<span class="title">bundle</span>/<span class="title">ruby</span>/1.9.1/<span class="title">gems</span></span></span><br><span class="line"><span class="function">/<span class="title">activerecord</span>-3.2.17/<span class="title">lib</span>/<span class="title">active_record</span>/<span class="title">connection_adapters</span>/<span class="title">abstract_mysql_adapte</span></span></span><br><span class="line"><span class="function"><span class="title">r.rb</span>:245:<span class="title">in</span> `<span class="title">query</span>&#x27;</span></span><br></pre></td></tr></table></figure><p>と表示され、同じように<strong>custom_fields_roles</strong>が既に存在しているとのことなので、下記のコマンドでこのテーブルを削除します。<br><strong>※削除前にこのテーブルを削除していいかは確認してください</strong></p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql -u bitnami -p bitnami_redmine</span><br><span class="line">Enter password: (ここはdatabase.ymlに記述されているパスワードを入力)</span><br><span class="line">drop table custom_fields_roles;</span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure><p>その後、マイグレーションを実行すると成功します。</p><h3 id="3-プラグインのマイグレーション-その1"><a href="#3-プラグインのマイグレーション-その1" class="headerlink" title="(3) プラグインのマイグレーション その1"></a>(3) プラグインのマイグレーション その1</h3><p>退避したプラグインを <strong>&lt;InstallDir&gt;\apps\redmine\htdocs\plugins</strong> に戻します。<br>ただし、<strong>redmine_knowledgebase</strong>は削除します。<br><strong>※redmine_knowledgebaseを使っていない人は何もしません</strong></p><p>戻した後下記のコマンドでプラグインのマイグレーションを実施します。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bundle install</span><br><span class="line">bundle exec rake redmine:plugins:migrate RAILS_ENV=production</span><br><span class="line">bundle exec rake tmp:cache:clear</span><br><span class="line">bundle exec rake tmp:sessions:clear</span><br></pre></td></tr></table></figure><p>成功したら、<strong>redmine manager tool</strong> から全てのサービス再起動。<br>その後、redmineにログインしてエラーが無いことを確認したら、2.5.1-1への更新が完了します。</p><h3 id="4-プラグインのマイグレーション-その2"><a href="#4-プラグインのマイグレーション-その2" class="headerlink" title="(4) プラグインのマイグレーション その2"></a>(4) プラグインのマイグレーション その2</h3><p><strong>redmine_knowledgebase</strong>を使っている方はこの作業が必須になります。<br>まず、最新のredmine_knowledgebaseを入手します (2014/05/10時点で3.0.4が最新)。<br>下記のコマンドを入力します。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">BitNami</span>\<span class="title">Redmine</span>&gt;<span class="title">cd</span> <span class="title">apps</span>\<span class="title">redmine</span>\<span class="title">htdocs</span>\<span class="title">plugins</span></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">BitNami</span>\<span class="title">Redmine</span>&gt;<span class="title">cd</span> <span class="title">apps</span>\<span class="title">redmine</span>\<span class="title">htdocs</span>\<span class="title">plugins</span>&gt;<span class="title">git</span> <span class="title">clone</span> <span class="title">git</span>://<span class="title">github.com</span>/<span class="title">alexbevi</span>/<span class="title">redmine_knowledgebase.git</span> <span class="title">redmine_knowledgebase</span></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">BitNami</span>\<span class="title">Redmine</span>&gt;<span class="title">cd</span> <span class="title">apps</span>\<span class="title">redmine</span>\<span class="title">htdocs</span>\<span class="title">plugins</span>&gt;<span class="title">bundle</span> <span class="title">install</span> --<span class="title">no</span>-<span class="title">deployment</span></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">BitNami</span>\<span class="title">Redmine</span>&gt;<span class="title">cd</span> <span class="title">apps</span>\<span class="title">redmine</span>\<span class="title">htdocs</span>\<span class="title">plugins</span>&gt;<span class="title">bundle</span> <span class="title">exec</span> <span class="title">rake</span> <span class="title">redmine:plugins</span>:<span class="title">migrate</span> <span class="title">RAILS_ENV</span>=<span class="title">production</span></span></span><br></pre></td></tr></table></figure><p>これでエラー無く更新が完了します。<br>前項と同じくサービスを再起動してログインします。</p><p>そこでおかしな事に気づきます。</p><p><a href="../../../../public/2014/05/redmine.png"><img src="../../../../public/2014/05/redmine-300x199.png"></a></p><p>上部のメニューに<strong>知識DB</strong>の項目がありません。<br>代わりにプロジェクトのメニューに<strong>ナレッジベース</strong>の文字が追加されています。</p><p><a href="https://github.com/alexbevi/redmine_knowledgebase">公式サイト</a>によると、redmine_knowledgebaseの仕様が変わったようです。</p><blockquote><p>Upon restarting Redmine, the Knowledgebase entry will no longer appear as a :top_menu entry. The knowledgebase is now project-specific, and therefore must be included in at least one project to work properly. If you wish to use it like v2.x, you can make a public project that will only be used to store knowledgebase articles. You will need to go into your database now and change the kb_articles and kb_categories project_id to the project id of the knowledgebase project you just created.</p></blockquote><p>と記載があります。<br>これは</p><blockquote><p>Redmineを再起動するにあたり、Knowledgebaseの項目がトップメニューの項目に表示されないでしょう。<br>Knowledgebaseの現在のプロジェクトの仕様により、最低1つの正常に動作しているプロジェクトに含めなくてはなりません。もし、2.X系 (恐らくredmine_knowledgebaseのバージョン)のように使用した場合、記事を保存するためだけのパブリックなプロジェクトを作成します。<br>kb_articlesとkb_categories内のproject_id列を、作成したプロジェクト (記事を格納するために作成したもの)のproject_idに変更する必要があります。</p></blockquote><p>と訳せます。</p><p>纏めれば、従来の記事はRedmine全体のシステムに関連づけられるのではなく、特定のプロジェクトの配下に関連づけられるようになったため、記事を移動する必要があるということです。<br>そのため、記事を移行させるためのSQLを実行します。</p><h3 id="5-記事の移動"><a href="#5-記事の移動" class="headerlink" title="(5) 記事の移動"></a>(5) 記事の移動</h3><p>まず移動先のプロジェクトを作成します (既存のプロジェクトでも構いません)。<br>移動先のプロジェクトの<strong>識別子</strong>を確認します。<br>識別子は<strong>設定</strong>-&gt;<strong>情報</strong>-&gt;<strong>識別子</strong>から確認できます。</p><p>次に、下記のように、<strong>mysql</strong>に繋いで、<strong>project_id</strong>を確認します。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -u bitnami -p bitnami_redmine</span><br><span class="line">Enter password: (ここはdatabase.ymlに記述されているパスワードを入力)</span><br><span class="line">SELECT id FROM bitnami_redmine.projects WHERE identifier=&#x27;識別子&#x27;;</span><br></pre></td></tr></table></figure><p>すると、</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+----+</span><br><span class="line">| id |</span><br><span class="line">+----+</span><br><span class="line">| <span class="number">27</span> |</span><br><span class="line">+----+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0</span>.<span class="number">00</span> sec)</span><br></pre></td></tr></table></figure><p>のような感じで、project_idを取得できます。ここでは27とします。<br>次にこの値で<strong>kb_articles</strong>と<strong>kb_categories</strong>内の<strong>project_id</strong>を更新します。<br>続けて下記のSQLを実行します。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> bitnami_redmine.kb_articles <span class="keyword">SET</span> project_id=<span class="string">&#x27;27&#x27;</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> bitnami_redmine.kb_categories <span class="keyword">SET</span> project_id=<span class="string">&#x27;27&#x27;</span>;</span><br></pre></td></tr></table></figure><p>これで記事の移動は完了しました。<br>Redmineで移動先のプロジェクトの<strong>ナレッジベース</strong>を確認します。</p><p><a href="../../../../public/2014/05/redmine1.png"><img src="../../../../public/2014/05/redmine1-300x167.png"></a></p><p>このような感じになると思います。</p><p>以上で<strong>redmine_knowledgebase</strong>の更新は完了です。</p>]]></content>
      
      
      <categories>
          
          <category> プロジェクト管理 </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> Redmine </category>
          
          <category> ソフトウェア工学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows Server 2012 R2 #1 -ユーザー インターフェイスが戻せない-</title>
      <link href="2014/05/09/486/"/>
      <url>2014/05/09/486/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2014/05/05/456">前回</a>はWindows Server 2012 R2をデュアルブートでインストールしました。<br><a href="http://www.microsoft.com/ja-jp/learning/mcp/exam.aspx?cert=1&id=70-410">MCP 70-410 Windows Server 2012 のインストールおよび構成</a>を受験すべくMVA等で勉強を始めたのですが早速はまったので備忘録がてら残しておきます。</p><a id="more"></a><h1 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h1><p>Windows Server 2012 R2には下記の4つのユーザー インターフェイスが用意されています。</p><ul><li>なし</li><li>グラフィカル管理ツールとインフラストラクチャ</li><li>フル インストール オプション</li><li>インストール済みデスクトップ エクスペリエンス機能</li></ul><p>それぞれの違いは<a href="http://technet.microsoft.com/ja-jp/library/hh831786.aspx">Windows Server インストール オプションのリファレンス表</a>を参照してください。<br>それで、自分はインストール時、<strong>フル インストール オプション</strong>でインストールを実行し、<strong>Server Core インストール オプション</strong> がどのようなものか分かりませんでした。<br>だから、インストール後変更できると知り、コマンドプロンプトから</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Uninstall-WindowsFeature</span> Server<span class="literal">-Gui</span><span class="literal">-Shell</span> <span class="literal">-remove</span></span><br></pre></td></tr></table></figure><p>と叩いて、GUIが消えました。<br>で、一通り触った飽きた後、「さぁ戻すか」と思って、</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Install-WindowsFeature</span> Server<span class="literal">-Gui</span><span class="literal">-Shell</span></span><br></pre></td></tr></table></figure><p>とやったが戻らない＼(^o^)／<br>黒背景のコマンドプロンプトに赤文字でエラーの旨が表示され恐怖心MAX。<br>片っ端から調べてみたところ、どうもインストールメディアが必要とのこと。<br>インストールメディアが無くても出来てる人がネットに居るのは何故？</p><h1 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h1><p>結論から言えば、インストールメディアを挿入した状態で</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Install-WindowsFeature</span> Server<span class="literal">-Gui</span><span class="literal">-Shell</span> –Restart –Source wim:D:\source\install.wim:<span class="number">4</span></span><br></pre></td></tr></table></figure><p>と入力すれば戻ります。<br><strong>※D:\source\の部分はインストールメディアのドライブに応じて変更</strong></p><p>初心者にServerOSは厳しい道のりなのか…</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> Windows Server </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows 7 &amp; Server 2012 R2 をデュアルブートさせる</title>
      <link href="2014/05/05/456/"/>
      <url>2014/05/05/456/</url>
      
        <content type="html"><![CDATA[<p>会社の上期の目標として、ISV資格でサーバー系の資格を取るという、自身のキャリアから外れた目標を立ててしまったため、休みを通して実機環境を作成しました。<br>(開発系の資格って<strong>MCSD Windows Store Apps</strong>、<strong>MCSD Web Applications</strong>、<strong>MCSD Application Lifecycle Management</strong>、<strong>MCSD SharePoint Applications</strong>になっていてデスクトップどこー？って状況なんですよね…)</p><a id="more"></a><p>それで、家に空きマシンがないので、どうしたものか考えていると、Server 2012は**VHD (Virtual Hard Disk)**からOS起動できるということを思い出したので、せっかくだから試してみることに。<br>ちなみにデュアルブートは人生初の試み。</p><p><strong>MSDN</strong>からServer 2012 R2のisoをダウンロードしてきて、ふと気づく。<br>ブランクメディアがないじゃん＼(^o^)／</p><p>コンビニ直行か？と思ったが、最近はUSBからインストールできるということで、それを試してみた。</p><h2 id="1-USBブートディスクの作成"><a href="#1-USBブートディスクの作成" class="headerlink" title="1. USBブートディスクの作成"></a>1. USBブートディスクの作成</h2><p>まず、<strong>Windows 7 USB/DVD Download Tool</strong>を<a href="http://images2.store.microsoft.com/prod/clustera/framework/w7udt/1.0/en-us/Windows7-USB-DVD-tool.exe">ここ</a>から入手。</p><p>起動すると、画面の指示に従っていくだけ。<br><strong>Windows 7</strong>と銘打っていますが、<strong>Windows Server 2012 R2</strong>でも大丈夫です。</p><p><a href="../../../../public/2014/05/58fc2145d7ef47037a3357abf3dcc1cc.png"><img src="../../../../public/2014/05/58fc2145d7ef47037a3357abf3dcc1cc-300x158.png"></a></p><p>最初は、先ほどダウンロードしてきたisoファイルを指定 </p><p><a href="../../../../public/2014/05/ca99454ba8e23c603d0a3ec4db1640a7.png"><img src="../../../../public/2014/05/ca99454ba8e23c603d0a3ec4db1640a7-300x158.png"></a></p><p>OSのバックアップ先ほど選択したisoを、USBデバイスかDVDメディアのどちらに展開するか。<br>今回は<strong>USB device</strong> </p><p><a href="../../../../public/2014/05/1bcc71726762fdeaaac160e3a958eec3.png"><img src="../../../../public/2014/05/1bcc71726762fdeaaac160e3a958eec3-300x158.png"></a></p><p>展開先のUSBデバイスを指定。</p><p><a href="../../../../public/2014/05/eec1504dcb76d26710babaa00788614c.png"><img src="../../../../public/2014/05/eec1504dcb76d26710babaa00788614c-300x93.png"></a></p><p>「続行するには、選択したデバイスを消去する必要があります。デバイスからすべての中身を削除してもいいですか？」という確認。<br><strong>Erase USB Device</strong>をクリック</p><p><a href="../../../../public/2014/05/8e7f8c5c54eebf97eefc9471b0dd644b.png"><img src="../../../../public/2014/05/8e7f8c5c54eebf97eefc9471b0dd644b-300x112.png"></a></p><p>本当に消すよ？いい？っていう優しい最終確認。<br>もちろん<strong>はい</strong></p><p><a href="../../../../public/2014/05/1d6a4704ae0937b9103fc551f3e50431.png"><img src="../../../../public/2014/05/1d6a4704ae0937b9103fc551f3e50431-300x158.png"></a></p><p>コピー完了までお待ちください。<br>終わったら、右上の <strong>×ボタン</strong> で終了</p><h2 id="2-VHDの作成"><a href="#2-VHDの作成" class="headerlink" title="2. VHDの作成"></a>2. VHDの作成</h2><p>次は、OSをインストールする先の箱となるVHDの作成。<br>管理者でコマンドプロンプトを開きます。</p><p><a href="../../../../public/2014/05/d27f865484828918fe59340b37fdf439.png"><img src="../../../../public/2014/05/d27f865484828918fe59340b37fdf439-300x218.png"></a></p><p>まず下記のように入力。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diskpart</span><br></pre></td></tr></table></figure><p><a href="../../../../public/2014/05/6a43d188ba13634c7319d2251e203258.png"><img src="../../../../public/2014/05/6a43d188ba13634c7319d2251e203258-300x218.png"></a></p><p>次に下記のように入力。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create vdisk file=&quot;D:\VHD\WinServer2012R2.vhd&quot; maximum=<span class="number">65536</span></span><br></pre></td></tr></table></figure><p><strong>※D:\VHD\WinServer2012R2.vhd</strong> はお好みのパスで。ここはフルパス指定。<br><strong>65536</strong>はVHDのサイズ。単位はMBなので、この場合は64GB。</p><p>しばらく待っていると終わるので、exitでdiskpartを抜けて、コマンドプロンプトは終了。</p><h2 id="3-インストール"><a href="#3-インストール" class="headerlink" title="3. インストール"></a>3. インストール</h2><p>先ほど作成したUSBをPCに接続して、OSを再起動して、USBからブートします。<br>BIOSの設定で、そのUSBからブートする指定にすればよいと思います。<br>これは個人の環境によりけりなので、詳しくはBIOSのマニュアルをチェック。</p><p>ブートしたら、<strong>Windowsのインストール場所を選んでください</strong>という画面までインストールを進めてください。</p><p><a href="../../../../public/2014/05/2014-05-05-15.00.18.jpg"><img src="../../../../public/2014/05/2014-05-05-15.00.18-300x225.jpg"></a></p><p>ここで<strong>Shift+F10キー</strong>を押してコマンドプロンプトを立ち上げてください。</p><p><a href="../../../../public/2014/05/2014-05-05-15.01.17.jpg"><img src="../../../../public/2014/05/2014-05-05-15.01.17-300x225.jpg"></a></p><p><strong>diskpart</strong>を実行します。<br>写真にはありませんが、<strong>list volume</strong>で利用できるドライブの一覧が表示されるので、その情報を参考に先のVHDのありかを見つけてください。<br>(ドライブの場所は変わっているかもしれませんので注意)</p><p>その後、下記のように入力し、成功したら、exitでコマンドプロンプトを閉じます。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select vdisk file=&quot;D:\VHD\WinServer2012R2.vhd&quot;</span><br><span class="line">attach vdisk</span><br></pre></td></tr></table></figure><p><a href="../../../../public/2014/05/2014-05-05-15.01.46.jpg"><img src="../../../../public/2014/05/2014-05-05-15.01.46-300x225.jpg"></a></p><p><strong>最新の情報に更新</strong>を押すと、先のVHDの領域が選択できるので、<strong>新規</strong>、<strong>フォーマット</strong>で利用可能にしてください。<br><strong>※このドライブに Windows をインストールすることはできません</strong>と出てきますが、問題なくインストールできます。</p><p>あとは、このまま進めるだけです。<br>再起動したらBIOS画面が出る前にUSBは抜いておきましょう。そこからまたブートしてしまうので。</p><p>最後、起動時にブートするOSを選択する画面が出るので、<strong>Windows Server 2012 R2</strong>を選んで残りのインストールを完了させれば、デュアルブート環境完成です。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> Windows Server </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Xamarin.iOS at VisualStudio #4 -その他のコントロール その2-</title>
      <link href="2014/05/04/445/"/>
      <url>2014/05/04/445/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2014/05/02/431">前回</a>の続き。</p><a id="more"></a><h1 id="Experimentation"><a href="#Experimentation" class="headerlink" title="Experimentation"></a>Experimentation</h1><h2 id="1-UISegmentedControl"><a href="#1-UISegmentedControl" class="headerlink" title="1. UISegmentedControl"></a>1. UISegmentedControl</h2><p>まずは、<strong>MonoTouch.UIKit.UISegmentedControl</strong>を追加します。<br>これは <strong>.NET</strong> でいう <strong>System.Windows.Forms.TabControl</strong> になります。</p><script src="https://gist.github.com/takuya-takeuchi/8ac78671d7b01977103ce0451d4addcf.js"></script><p>ボタンの上にUISegmentedControlが追加されました。<br>ビルド実行するとこうなります。</p><p><a href="../../../../public/2014/05/b279f35134b1d30a540cee2b476b1556.png"><img src="../../../../public/2014/05/b279f35134b1d30a540cee2b476b1556-300x240.png"></a></p><p>Left,Center,Rightの領域をタップすると、その項目の文字列がアラートビューで表示されます。</p><p><a href="../../../../public/2014/05/4f01bbd84827d41aa328e983a00dbc8b.png"><img src="../../../../public/2014/05/4f01bbd84827d41aa328e983a00dbc8b-300x240.png"></a></p><h2 id="2-UIDatePicker"><a href="#2-UIDatePicker" class="headerlink" title="2. UIDatePicker"></a>2. UIDatePicker</h2><p>次は<strong>MonoTouch.UIKit.UIDatePicker</strong>を追加します。<br>これは <strong>.NET</strong> でいう <strong>System.Windows.Forms.MonthCalendar</strong>です。<br>ただし、表示スタイルに、下記のモードが用意されています。</p><ul><li>UIDatePickerModeDateAndTime：月日時分</li><li>UIDatePickerModeDate：年月日</li><li>UIDatePickerModeTime：時分</li><li>UIDatePickerModeCountDownTimer:カウントダウン</li></ul><p>サンプルを修正します。</p><script src="https://gist.github.com/takuya-takeuchi/ec986daa06d2e5f7fcdd6db39390d30f.js"></script><p>ビルドして、ボタンを押下すると、日時を選択できます。</p><p><a href="../../../../public/2014/05/89fe451c288648620239caad769dc78f.png"><img src="../../../../public/2014/05/89fe451c288648620239caad769dc78f-300x240.png"></a></p><p>選択後、Doneボタンを押下すると、選択した日付+現在時刻がアラートビューで表示されます。</p><p><a href="../../../../public/2014/05/5c5231ea8074dbba2660e108357a82ce.png"><img src="../../../../public/2014/05/5c5231ea8074dbba2660e108357a82ce-300x240.png"></a></p><p>今回のサンプルはかなり趣が異なっています。<br>というのも<strong>UIDatePicker</strong>は<strong>MonoTouch.UIKit.UIViewController.View</strong>に表示されるのでは無く、<strong>MonoTouch.UIKit.UIActionSheet</strong>に表示されています。<br><strong>UIActionSheet</strong>はアクションシートと呼ばれる、ユーザに選択肢を提示するコントロールです。</p><p>ある種の別ウィンドウを作成し、そのウィンドウ内にUIDatePickerとUIButtonを追加しています。</p><h2 id="3-UIStepper"><a href="#3-UIStepper" class="headerlink" title="3. UIStepper"></a>3. UIStepper</h2><p>最後は<strong>MonoTouch.UIKit.UIStepper</strong>を追加します。<br>これは <strong>.NET</strong> でいう <strong>System.Windows.Forms.NumericUpDown</strong>です。<br>ただし、表示部分は自分で用意する必要があります。</p><script src="https://gist.github.com/takuya-takeuchi/e852f8ea7bca9a6b6b94515b7a13f8c0.js"></script><p>ビルドするとUIStepperが追加されています。</p><p><a href="../../../../public/2014/05/ea56fd41aafeb354fecde1a439c981a9.png"><img src="../../../../public/2014/05/ea56fd41aafeb354fecde1a439c981a9-300x240.png"></a></p><p>+,-をタップすると、左の数値部分が変化します。</p><p><a href="../../../../public/2014/05/f2c577b7d241ff0f7b0017c0a92a9f51.png"><img src="../../../../public/2014/05/f2c577b7d241ff0f7b0017c0a92a9f51-300x240.png"></a></p><p>また、タップしたままにすると、数値の変動速度が加速されていきます。<br>そして、最小値、または最大値に達すると、その側はタップできなくなります。</p><p><a href="../../../../public/2014/05/4d4c019674c6683654befcc36b5dfa5f.png"><img src="../../../../public/2014/05/4d4c019674c6683654befcc36b5dfa5f-300x240.png"></a></p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>今回は、</p><ul><li><strong>System.Windows.Forms.TabControl</strong>に対応する<strong>MonoTouch.UIKit.UISegmentedControl</strong></li><li><strong>System.Windows.Forms.MonthCalendar</strong>に対応する<strong>MonoTouch.UIKit.UIDatePicker</strong></li><li><strong>System.Windows.Forms.NumericUpDown</strong>に対応する<strong>MonoTouch.UIKit.UIStepper</strong></li></ul><p>を使用しました。<br>今回も、対応する云々というのは私の偏見ですが、どういうものに似ているか、という認識は取っつきにくさを解消するための方便だと思います。</p><p>メインとなるコントロールは次で最後になると思います。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> Xamarin </category>
          
          <category> C# </category>
          
          <category> Apple </category>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Microsoft Virtual Academy #4 -いまさら聞けない Windows アプリ開発入門 XAML/C# 編-</title>
      <link href="2014/05/04/441/"/>
      <url>2014/05/04/441/</url>
      
        <content type="html"><![CDATA[<p>タイトルの講義は<a href="http://www.microsoftvirtualacademy.com/training-courses/windows-app-xamlcs">こちら</a>です。<br>今回は下記のモジュールを受講しました。</p><ul><li>Windows ストア アプリ開発入門</li><li>Hello World ～ストア アプリ/C# 編～</li><li>アプリ公開までの道のり</li><li>Windows ストア アプリ審査の注意点</li></ul><p>本当に今更聞けないような内容ですが…<br>ざっくりとストアアプリ開発の流れが分かります。</p><p>Hello Worldアプリは<strong>TextBlock</strong>を配置しただけのアプリですが…</p><p>ただ、「誰でも簡単にストアアプリが作れます」というお題目はどうかと思います。<br>年間で5000円近くの開発ライセンス料を支払う必要がありますし、ストアの審査にも合格する必要があります。</p><p>また、従来のデスクトップアプリのように、<a href="http://www.vector.co.jp/">Vector</a>や<a href="http://www.forest.impress.co.jp/">窓の杜</a>のようなソフトウェア紹介サイトを経由できず、個人で気軽にソフトウェアを登録できる時代では無くなった感じがします。</p><p>ひとえに、Appleによる<strong>App Store</strong>の成功によって、開発者を特定のプラットフォームに囲い込み、あまつさえソフトウェアの開発に必要以上に資金を必要とするような流れになったのは個人開発者にとっては悲しいばかりです。</p><p>逆に、新たなマーケットと見て飛び込むのもありですが、「気軽」という言葉からはほど遠いのが現状だと思います。</p><p>そういう意味では企業内で公開できる<strong>サイドローディング</strong>の利用をモチベーションに、ストアアプリ開発のスキルを習得していくべきでは、と個人的に思いました。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> C# </category>
          
          <category> Microsoft Virtual Academy </category>
          
          <category> Visual Studio </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Xamarin.iOS at VisualStudio #4 -その他のコントロール その1-</title>
      <link href="2014/05/02/431/"/>
      <url>2014/05/02/431/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2014/05/01/418">昨日</a>の続き。</p><a id="more"></a><h1 id="Experimentation"><a href="#Experimentation" class="headerlink" title="Experimentation"></a>Experimentation</h1><h2 id="1-UISlider"><a href="#1-UISlider" class="headerlink" title="1. UISlider"></a>1. UISlider</h2><p>まずは、<strong>MonoTouch.UIKit.UISlider</strong>を追加します。<br>これは <strong>.NET</strong> でいう <strong>System.Windows.Forms.TrackBar</strong>になります。<br>また、UISliderの現在値を表示する<strong>MonoTouch.UIKit.UILabel</strong>も一緒に追加します。<br>これは <strong>.NET</strong> でいう <strong>System.Windows.Forms.Label</strong>になります。</p><script src="https://gist.github.com/takuya-takeuchi/0d9921f4ea7283d1843bbd0a861fb194.js"></script><p>ボタンの上にUISliderが追加されました。<br>あと、 ビルド実行するとこうなります。</p><p><a href="../../../../public/2014/05/94fea354519387cb284042d78a0e56e4.png"><img src="../../../../public/2014/05/94fea354519387cb284042d78a0e56e4-300x240.png"></a></p><p>スライダーを動かすと、スライダーの位置に応じてラベルの数値が変化します。<br><a href="../../../../public/2014/05/120172322376ff7aa0dd02372c45e181.png"><img src="../../../../public/2014/05/120172322376ff7aa0dd02372c45e181-300x240.png"></a></p><h2 id="2-UIAlertView"><a href="#2-UIAlertView" class="headerlink" title="2. UIAlertView"></a>2. UIAlertView</h2><p>次は<strong>MonoTouch.UIKit.UITextView</strong>を追加します。<br>これは <strong>.NET</strong> でいう <strong>System.Windows.Forms.MessageBox</strong>です。<br>iOSの世界では<strong>アラートビュー</strong>ですね。<br>サンプルを修正します。</p><script src="https://gist.github.com/takuya-takeuchi/ae8614447d2a479a6c575e9bae2fba7b.js"></script> ビルドして、ボタンを押下すると、スライダーの値をユーザにアラートビューで通知します。<p><a href="../../../../public/2014/05/3db0c9f32315462e7ba3f8603f54aed1.png"><img src="../../../../public/2014/05/3db0c9f32315462e7ba3f8603f54aed1-300x240.png"></a></p><h2 id="3-UISwitch"><a href="#3-UISwitch" class="headerlink" title="3. UISwitch"></a>3. UISwitch</h2><p>最後は<strong>MonoTouch.UIKit.UISwitch</strong>を追加します。<br>これは <strong>.NET</strong> でいう <strong>System.Windows.Forms.CheckBox</strong>です。<br>iOSの世界では<strong>スイッチコントロール</strong>ですね。<br>**中間値(Indeterminate)**は対応しているんでしょうか? サンプルを修正します。</p><script src="https://gist.github.com/takuya-takeuchi/c9bb856bdca07145fa8647960f2f7f9c.js"></script><p>ビルドするとスイッチコントロールが追加されています。</p><p><a href="../../../../public/2014/05/3ce6dae65fed6aa626071f4602b086fb.png"><img src="../../../../public/2014/05/3ce6dae65fed6aa626071f4602b086fb-300x240.png"></a></p><p>スイッチを動かすと、ラベルの色が赤に変化します。</p><p><a href="../../../../public/2014/05/e896dd40f038175c1e8e43ffc50b40c6.png"><img src="../../../../public/2014/05/e896dd40f038175c1e8e43ffc50b40c6-300x240.png"></a></p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>今回は、</p><ul><li><strong>System.Windows.Forms.Label</strong>に対応する<strong>MonoTouch.UIKit.UILabel</strong></li><li><strong>System.Windows.Forms.TrackBar</strong>に対応する<strong>MonoTouch.UIKit.UISlider</strong></li><li><strong>System.Windows.Forms.MessageBox</strong>に対応する<strong>MonoTouch.UIKit.UIAlertView</strong></li><li><strong>System.Windows.Forms.CheckBox</strong>に対応する<strong>MonoTouch.UIKit.UISwitch</strong></li></ul><p>を使用しました。<br>あくまで、対応するというのは私の偏見ですが、どういうものに似ているか、という認識は取っつきにくさを解消するための方便だと思います。</p><p>まだ、紹介していないコントロールは次回に回します。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> Xamarin </category>
          
          <category> C# </category>
          
          <category> Apple </category>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Microsoft Virtual Academy #3 -C# プログラミング ジャンプ スタート (MCP 試験: 70-483)-</title>
      <link href="2014/05/02/429/"/>
      <url>2014/05/02/429/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2014/04/30/413">前回</a>の続きです。<br>タイトルの講義は<a href="http://www.microsoftvirtualacademy.com/Content/ViewContent.aspx?et=4186&m=4178&ct=19780">こちら</a>です。</p><p>今回は下記のモジュールを受講しました。</p><ul><li>06 | アセンブリーとWinMDの分割、 診断と器具編成</li><li>07 | ファイルシステムとの相互作用、 ウェブサービスの活用</li><li>08 | オブジェクトとXMLに対するLINQの使用、シリアル化の基礎</li></ul><p>タイトルにはありませんが、<strong>非同期処理(asyncとawait)</strong> についても触れられていました。<br>まだ仕事でこれをつかったことは無いのですが、使いこなせれば相当便利でしょう。すくなくとも「使える」ぐらいにはならなくてはなりませんが。</p><p><strong>08 | オブジェクトとXMLに対するLINQの使用、シリアル化の基礎</strong>では、<strong>Entity Framework</strong>を使用したデモがありました。<br>これも使ったこと無いです。今の仕事の案件で使えそうかな、と思いましたが、すでに仕様書ではデータベースを使わないって書いたからもう駄目ですね。</p><p>大凡8時間の抗議でしたが、本来これは5日間の講義をオンライン向けに1日に纏めたものですので、かなり端折っていました。<br>それでも身になる講義でしたし、何より講師の<strong>Jerry</strong>と<strong>Daren</strong>の冗談を交えた掛け合いは非常に面白く、聴講者を退屈させません。</p><p>これで字幕の訳さえ良ければ(完璧とは言いません)、というのが唯一の心残りです。</p><p>これでこの講義は終了です。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> C# </category>
          
          <category> Microsoft Virtual Academy </category>
          
          <category> Visual Studio </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Xamarin.iOS at VisualStudio #3 -基本的なテキスト入力-</title>
      <link href="2014/05/01/418/"/>
      <url>2014/05/01/418/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2014/04/29/398">昨日</a>の続き。</p><a id="more"></a><h1 id="Experimentation"><a href="#Experimentation" class="headerlink" title="Experimentation"></a>Experimentation</h1><h2 id="1-UITextBox"><a href="#1-UITextBox" class="headerlink" title="1. UITextBox"></a>1. UITextBox</h2><p>前回はボタンが中央に配置するだけでしたが、今回は<strong>MonoTouch.UIKit.UITextField</strong>を追加します。<br>これは <strong>.NET</strong> でいう <strong>System.Windows.Forms.TextBox</strong>になります。<br>では前回のサンプルに幾つか手を加えます。</p><script src="https://gist.github.com/takuya-takeuchi/130e6c6d28f26747255f61bf814e6d9d.js"></script><p>ボタンの上にUITextFieldが追加されました。<br>ビルド実行するとこうなります。</p><p><a href="../../../../public/2014/05/1eb6d9c767e1236580fc9f3eeb738e40.png"><img src="../../../../public/2014/05/1eb6d9c767e1236580fc9f3eeb738e40-300x240.png"></a></p><p>ボタンをクリックすると、ボタンのテキストがUITextFieldにコピーされます。<br>テキストも手入力できます。</p><p><a href="../../../../public/2014/05/ad1a874400fc5816060e96b0d5940b7d.png"><img src="../../../../public/2014/05/ad1a874400fc5816060e96b0d5940b7d-300x240.png"></a></p><p>UITextField上でEnterキーを押下すると、<strong>Select | Select All</strong>のお馴染みのポップアップもきちんと表示されます。</p><p>ところで、表示されたキーボードはどう非表示にするのでしょうか？</p><h2 id="2-UITextView"><a href="#2-UITextView" class="headerlink" title="2. UITextView"></a>2. UITextView</h2><p>もう少し手を加えます。<br>次は<strong>MonoTouch.UIKit.UITextView</strong>を追加します。<br>これは <strong>.NET</strong> でいう <strong>System.Windows.Forms.TextBox</strong>と同じですが、先のUITextBoxとの違いは、複数行入力が可能、読み取り専用にすることが可能という違いがあります。<br>さっきのサンプルを修正します。</p><script src="https://gist.github.com/takuya-takeuchi/87b59df60c7e75e8381ac7950e72ea1f.js"></script><p>最上部にUITextViewが追加されました。<br>複数行テキストを入力できます。</p><p><a href="../../../../public/2014/05/9a84978e4a7e086362d8a6ebad6cd658.png"><img src="../../../../public/2014/05/9a84978e4a7e086362d8a6ebad6cd658-300x240.png"></a></p><p>ちなみに、<strong>UITextView.Editable プロパティ</strong>に<strong>false</strong>をセットすることで読み取り専用にできます。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>他にもできることはありますが、簡単にまとめると、</p><ul><li><strong>MonoTouch.UIKit.UITextBox</strong>は単一行の<strong>System.Windows.Forms.TextBox</strong>。</li><li><strong>MonoTouch.UIKit.UITextView</strong>は複数行の<strong>System.Windows.Forms.TextBox</strong>で読み取り専用設定も付与可能</li></ul><p>という感じです。</p><p>何はともあれ、どのコントロールがどこにあるか、どういうことが出来るのかは覚えておかないと話になりません。<br>あと、<strong>UIButton</strong>の表示文字列は<strong>SetTitle メソッド</strong>で設定したから<strong>GetTitle メソッド</strong>で取得可能かと思ったら、<strong>CurrentTitle プロパティ</strong>で取得可能とかわかりにくすぎです。<br>この設計は<strong>WinForms</strong>から<strong>WPF</strong>へ移行するときの関門に通じるものがあります。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> Xamarin </category>
          
          <category> C# </category>
          
          <category> Apple </category>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Microsoft Virtual Academy #2 -C# プログラミング ジャンプ スタート (MCP 試験: 70-483)-</title>
      <link href="2014/04/30/413/"/>
      <url>2014/04/30/413/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2014/04/27/372">前回</a>の続きです。<br>タイトルの講義は<a href="http://www.microsoftvirtualacademy.com/Content/ViewContent.aspx?et=4186&m=4178&ct=19780">こちら</a>です。</p><p>今回は下記のモジュールを受講しました。</p><ul><li>03 | プログラムの流れををコントロールする; タイプとストリングを操る</li><li>04 | コードの反映と情報、 ガーベッジコレクションを使った作業</li><li>05 | 高度のC#、タイプと値の検証、 暗号化テクニック</li></ul><p>どれもほとんど既存の知識(03はif,else if,elseやfor,foreach等の構文など初歩の内容)ではありますが、復習にはなると思います。<br>ちなみに、04の<strong>コードの反映と情報</strong>ですが、正しくは、<strong>コードのリフレクションと情報</strong>のはずです。<br>訳が直訳すぎるんでよね。<br>文脈の意図を汲まずに訳すから専門用語とかも訳されてしまっています。</p><p>例えば、<strong>SetName</strong>というメソッドがデモの中で登場するんですが、これ、字幕だと<strong>セット名</strong>って言ってますからね。<br>字幕の作成はアウトソーシングしているんのかもしれませんが、開発に一定の理解のあるスタッフが校閲したりしないんでしょうか？ <strong>アルゴリズム</strong>が<strong>アルゴイズム</strong>になっていたり。</p><p>それを除けば、<strong>高度のC#、タイプと値の検証、 暗号化テクニック</strong>は素晴らしい内容でした。<br><strong>コントラクト</strong>とか、私は知ってはいますが、使ったことがない人間なので、デモの内容は非常にグッときました。</p><p>こういう知識の再確認は重要ですよね。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> C# </category>
          
          <category> Microsoft Virtual Academy </category>
          
          <category> Visual Studio </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Microsoft Virtual Academy #0 -足跡-</title>
      <link href="2014/04/30/411/"/>
      <url>2014/04/30/411/</url>
      
        <content type="html"><![CDATA[<p>個人用の<strong>MVA</strong>の受講履歴を記録しておきます。</p><p>[table id=11 /]</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> C# </category>
          
          <category> Microsoft Virtual Academy </category>
          
          <category> Visual Studio </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Xamarin.iOS at VisualStudio #2 -Hello, World!!-</title>
      <link href="2014/04/29/398/"/>
      <url>2014/04/29/398/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2014/04/29/376">昨日</a>の続き。</p><a id="more"></a><h1 id="Experimentation"><a href="#Experimentation" class="headerlink" title="Experimentation"></a>Experimentation</h1><p>サンプルのコードを動かすと、背景白で中央に<strong>Click me</strong>と表示されているボタンがいますが、どこまでがボタンなのかこれでは分かりません。<br>なので、サンプルを</p><script src="https://gist.github.com/takuya-takeuchi/b0d5f545e6ad7aca94f9a40775f13614.js"></script> <p><a href="../../../../public/2014/04/f5ef1711784b2fccd94d13c3a2e60b6c.png"><img src="../../../../public/2014/04/f5ef1711784b2fccd94d13c3a2e60b6c-300x240.png"></a></p><p><a href="../../../../public/2014/04/667511d2c1bbfacae98efa80c010fa2b.png"><img src="../../../../public/2014/04/667511d2c1bbfacae98efa80c010fa2b-300x240.png"></a></p><p>黒い背景に白いボタンが配置されています。<br><strong>Finder &gt; ハードウェア &gt; 時計回りに回転</strong>で回転してもボタンの向きがいじされています。<br>ボタンの高さだけ維持されて、左右のマージンが固定されて回転しています。</p><p>自動でリサイズしているようなので、これをなくしてみようかと。<br>直感的にこれというコードをコメントアウトします。</p><script src="https://gist.github.com/takuya-takeuchi/4ab51b79169b09f28fcfdff2b92bd3e6.js"></script><p>このコードで時計回りに回転させると、ボタンの座標が維持されて回転したので、画面中央に来なくなりました。</p><p><a href="../../../../public/2014/04/fb0f74049fcda7730d1575c29f13d8cd.png"><img src="../../../../public/2014/04/fb0f74049fcda7730d1575c29f13d8cd-300x240.png"></a></p><p><strong>UIViewAutoresizing.FlexibleWidth</strong>っていうのは、可変で幅を変更する感じですね。<br>恐らく初期のX座標を維持する形で幅の変更でしょう。<br><strong>UIViewAutoresizing.FlexibleTopMargin</strong>、<strong>UIViewAutoresizing.FlexibleBottomMargin</strong>は、上下のマージンを可変にするのでしょう。<br>だからボタンの高さが変化しなかったのでしょう。</p><p>なので、逆に幅を維持して、高さを可変にするなら。</p><script src="https://gist.github.com/takuya-takeuchi/dff14c08dd5e10f90cf49a66d2553faa.js"></script><p>これで結果は…</p><p><a href="../../../../public/2014/04/3be33e3d0e43ee963ec5238fafa67ee8.png"><img src="../../../../public/2014/04/3be33e3d0e43ee963ec5238fafa67ee8-300x240.png"></a></p><p>(°Д°)ﾊｧ?</p><p>ボタン黒くなったし。<br>しかも<strong>Click me</strong>をクリックしても反応しない…</p><p>どういうこと？ 何回か画面を回転させてると、</p><p><a href="../../../../public/2014/04/af154108fe5c70e272f896944b9fb808.png"><img src="../../../../public/2014/04/af154108fe5c70e272f896944b9fb808-300x240.png"></a></p><p>ボタンが白くなった。でも、元の向きだし、元のサイズとも変わってしまっている… ボタンのクリックに反応する。</p><p>また回転させたけど、また黒いし…</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>よくわからない結果になりましたが、<strong>iOS</strong>は画面の回転を考慮した処理を簡単に追加できるようです。<br>プロパティ名も <strong>.NET</strong> と似た感じです(全く変わってしまったものもありますけど)</p><p>次はボタン以外のコントロールを触ってみたいです。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> Xamarin </category>
          
          <category> C# </category>
          
          <category> Apple </category>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Xamarin.iOS at VisualStudio #1 -Hello, World!!-</title>
      <link href="2014/04/29/376/"/>
      <url>2014/04/29/376/</url>
      
        <content type="html"><![CDATA[<p>トライアル版を放り込んだのが土曜日ですが、色々あって、もう火曜日です。<br>月曜は9時半まで残業でした。<br>仕様書書くの面倒です。<br>愚痴終了。<br>本題。</p><a id="more"></a><p>タイトル通り、初心に返ってHello,World!!しましょう。<br>こんなの書いたの何年ぶりかと。<br>C#に触れたのが大学1年か2年だから？7年振りくらいですね、この気持ち。</p><p>さて、とりあえずさくっと、サンプルを作りますか。</p><p><a href="../../../../public/2014/04/1.png"><img src="../../../../public/2014/04/1-300x207.png" alt="1"></a></p><p><strong>Xamarin.iOS</strong>をインストールするとこんな項目が増えています。<strong>iPad</strong>,<strong>iPhone</strong>,<strong>Universal</strong>。<br>ここはどっちでも動きそうなUniversalにしましょうか。</p><p>で、<strong>HelloWorld Application</strong>を選択して作成。</p><p>で、しばらくMacと接続してると、準備が終わってソリューションエクスプローラーに出てきます。</p><p><a href="../../../../public/2014/04/2.png"><img src="../../../../public/2014/04/2-240x300.png" alt="2"></a></p><ul><li>MyViewController.cs</li><li>AppDelegate.cs</li><li>Info.plist</li><li>Main.cs</li></ul><p><strong>Info.plist</strong>って何？</p><p><a href="../../../../public/2014/04/3.png"><img src="../../../../public/2014/04/3-300x181.png" alt="3"></a></p><p>って開いたのがこれ。<br>設定ファイルみたいものね。<br>ちなみにエクスプローラーから開くと中身はただのxmlでした。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">plist</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span> <span class="meta-string">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>[]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>UIDeviceFamily<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">integer</span>&gt;</span>1<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">integer</span>&gt;</span>2<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>UISupportedInterfaceOrientations<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>UIInterfaceOrientationPortrait<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>UIInterfaceOrientationLandscapeLeft<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>UIInterfaceOrientationLandscapeRight<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>UISupportedInterfaceOrientations~ipad<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>UIInterfaceOrientationPortrait<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>UIInterfaceOrientationPortraitUpsideDown<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>UIInterfaceOrientationLandscapeLeft<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>UIInterfaceOrientationLandscapeRight<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>MinimumOSVersion<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>3.2<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Xamarinの<a href="http://docs.xamarin.com/guides/cross-platform/getting_started/introducing_xamarin_studio/">ページ</a>によると、</p><blockquote><p>Info.plist In addition to source code editing, the tabbed interface includes support for certain platform specific files. For example, when opening an Info.plist file, which is used by iOS applications to store various configuration data, the following user interface is presented to allow easy editing of the file:</p></blockquote><p><strong>訳</strong> ～略～。例えば、Info.plistを開くと、これは。様々な設定データを保存するためにiOSアプリケーションに使用され、下(※この説明文の下に画像があります)のユーザーインターフェイスはこのファイルを簡単に編集できるのがわかります。</p><p>やっぱり設定ファイルですね。</p><p>で、とりあえずビルド。<br>が、動きません。</p><p><a href="../../../../public/2014/04/4.png"><img src="../../../../public/2014/04/4-300x33.png"></a></p><p>とりあえず、</p><p><strong>Application Name is not set in iOS Application Property Page Identifier is not set in iOS Application Property Page</strong></p><p>これは、アプリケーション名がiOSアプリケーションのプロパティページで設定されていません iOSアプリケーションプロパティページで識別子が設定されていません</p><p>ですんで、<strong>Info.plist</strong>を見ます。</p><p>まあそれらしいのがあるけど、何入れるの？</p><p>Xamarinの<a href="http://docs.xamarin.com/guides/cross-platform/getting_started/introducing_xamarin_studio/">ページ</a>によると、</p><p><code>Application name: Corpy2 Indentifier:com.zamarin.sample.corpy2 Version:1</code></p><p>ってあった。Application nameはわかるけど、IdentifierってJavaの名前空間みたいね。きもちわるいわー。<br>とりあえず適当に放り込んで…</p><p>クラッシュした＼(^o^)／</p><p>気持ち新たにもう一回。</p><p>あれ？入力しても保存されない？ビルドしても同じエラー。<br>なんぞ？よーわからんので、プロジェクトファイルのプロパティを見ると…</p><p><a href="../../../../public/2014/04/5.png"><img src="../../../../public/2014/04/5-300x181.png"></a></p><p>こんなん出ましたけどー。</p><p><a href="../../../../public/2014/04/6.png"><img src="../../../../public/2014/04/6-300x181.png"></a></p><p>なので、<strong>iOS Application</strong>から、Application name、Indentifier、Versionを放り込んで再度ビルド。</p><p>ｷﾀ―――(ﾟ∀ﾟ)―――― !! 嘘です。</p><p><a href="../../../../public/2014/04/7.png"><img src="../../../../public/2014/04/7-300x41.png"></a></p><p><strong>ERROR: Could not find the selected device Available devices: iPhone (Retina) 7.1 iPad 7.1 iPad (Retina) 7.1 Try to refresh the device list with the Refresh button</strong></p><p>？<br>選択したデバイスが見つかりません。利用可能なのは、iPhone (Retina) 7.1,iPad 7.1,iPad (Retina) 7.1。リフレッシュボタンを押してデバイスリストを更新して。</p><p>って言われても…</p><p>ん？<br>これですか？</p><p><a href="../../../../public/2014/04/8.png"><img src="../../../../public/2014/04/8-300x61.png"></a></p><p>どっちにつなぐの？Windows?Mac?<br>Macにつないでみたら、VisualStudioの表示が変わりました。</p><p><a href="../../../../public/2014/04/9.png"><img src="../../../../public/2014/04/9-300x69.png"></a></p><p>だめだ、ビルドしても同じエラー。困った。<br>…ひょっとして、実機は駄目？<br>というか、<strong>iPhoneSimulator</strong>が無いんですが？ </p><p><a href="../../../../public/2014/04/11.png"><img src="../../../../public/2014/04/11-300x106.png"></a></p><p>…あ、ソリューションプラットフォームから選択ですか？ <strong>iPhone</strong>になっているのを<strong>iPhoneSimulator</strong> これでビルド！！ </p><p><a href="../../../../public/2014/04/101.png"><img src="../../../../public/2014/04/101-300x187.png"></a></p><p>動きましたーーーー 1時間くらい経ってようやくここまできました。<br>実機が駄目だったりしましたが、とりあえず動かすことが出来たので、次はソースを編集してサンプルをいじくり回したいと思います。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> Xamarin </category>
          
          <category> C# </category>
          
          <category> Apple </category>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>キーボード/マウスレスなMac Mini</title>
      <link href="2014/04/28/368/"/>
      <url>2014/04/28/368/</url>
      
        <content type="html"><![CDATA[<p><strong>Xamarin.iOS</strong>で遊びたいが為に<strong>Mac Mini</strong>を買いました。<br>が、ディスプレイは無論、キーボードもマウスも買わず、家にあるあり合わせで間に合わせることになった。<br>常にリモートから接続するんだけど、起動時に毎回毎回<strong>Bluetooth設定アシスタント</strong>なるシステムアプリがキーボードを探しにいく。</p><p>目障りこの上ないので、口を封じることに。</p><p><strong>Appleメニュー</strong>→<strong>システム環境設定</strong>→<strong>Bluetooth</strong>→<strong>詳細設定</strong>から</p><ul><li>起動時にキーボードが検出されない場合はBluetooth設定アシスタントを開く</li><li>起動時にマウスが検出されない場合はBluetooth設定アシスタントを開く</li></ul><p>の2項目のチェックを外すことで解決。</p>]]></content>
      
      
      <categories>
          
          <category> Apple </category>
          
          <category> Mac </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Microsoft Virtual Academy #1 -C# プログラミング ジャンプ スタート (MCP 試験: 70-483)-</title>
      <link href="2014/04/27/372/"/>
      <url>2014/04/27/372/</url>
      
        <content type="html"><![CDATA[<p>特に受講する必要があるような講義では無いけど受講しました。<br>とはいったものの、まだ最初の2セッションだけですが。<br>タイトルの講義は<a href="http://www.microsoftvirtualacademy.com/Content/ViewContent.aspx?et=4186&m=4178&ct=19780">こちら</a>です。</p><h3 id="What’s-MVA"><a href="#What’s-MVA" class="headerlink" title="What’s MVA?"></a>What’s MVA?</h3><p>Microsoft Virtual Academyの略です。オンラインで動画やPDFファイルが公開されていて特定の技術についてのスキル強化できます。自分の好きなときに学習するオンデマンドコースと現実の特定の日時に提供されるライブイベントがあります。</p><p>動画が基本英語(だと思います)ですが、字幕があります(全てにある？)。</p><p>でも、時折誤字脱字とか訳す必要の無いところを訳していたりするはご愛敬。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> C# </category>
          
          <category> Microsoft Virtual Academy </category>
          
          <category> Visual Studio </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Xamarin.iOS 始めました</title>
      <link href="2014/04/27/363/"/>
      <url>2014/04/27/363/</url>
      
        <content type="html"><![CDATA[<p>1年振りの更新ですが、何とか生きています。</p><p>掲題の通り、<strong>Xamarin.iOS</strong> を始めました。<br>いきなり、<strong>Mac Mini</strong>買ってきて、その日にMSDNサブスクリプション経由で90日間トライアル版をダウンロードしてきました。</p><p>で、Windows側、Mac側とインストールを進めていくんですが、ここで少し躓いたのでメモ。</p><ol><li>Mac側でインストーラ <strong>(XamarinInstaller.dmg)</strong> をダウンロードしてきて展開しても中身が空。隠し設定になっていたのか、ターミナルから設定を変えれば中身が見えました。隠しファイルの表示はターミナルで<strong>defaults write com.apple.finder AppleShowAllFiles -boolean true</strong> と入力する。</li><li>Visual Studio側と接続しようと、<strong>Build Host</strong>なるものをMac側で立ち上げようにも見つからない。<strong>Xamarin Studio</strong>を起動して、<strong>Check for Updates..</strong> で更新後、Mac側を再起動したら見つかった。</li></ol><p>とりあえずペアリングに成功。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> Xamarin </category>
          
          <category> C# </category>
          
          <category> Apple </category>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Redmine 2.3.0 &amp; 2.2.4 リリース</title>
      <link href="2013/03/20/360/"/>
      <url>2013/03/20/360/</url>
      
        <content type="html"><![CDATA[<p><a href="http://redmine.jp/">Redmine.jp</a> では、まだ告知されていませんが、<strong>Redmine 2.3.0</strong> が3/19にリリースされました。<br>当初は2月中リリースでしたが、一度3/10に延期されてから、その後もリリースされず、リリース日が告知されること無く今日まで来ましたが、ようやくリリースされました。</p><p>同時に、<strong>2.2.4</strong>もリリースされました。<br>ロードマップをみても、<strong>2.2.5</strong>が現時点出ないことから、2.2系列はこれが最後のようです。</p><p>ちなみに、既に<strong>2.3.1</strong>がロードマップに登場していることから、2.3系列の安定版はまだ先になりそうです。</p>]]></content>
      
      
      <categories>
          
          <category> プロジェクト管理 </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> Redmine </category>
          
          <category> ソフトウェア工学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BitNami Redmine Stack で Mercurial を使う</title>
      <link href="2013/03/02/348/"/>
      <url>2013/03/02/348/</url>
      
        <content type="html"><![CDATA[<p><strong>BitNami Redmine Stack</strong>の良いところは、既存の環境を壊さずに<strong>Redmine</strong>を使えることです。<br>既存の環境を壊さない、ということは削除が楽と言うことです。<br>Redmine一式だけでなく、ソースコード管理システムである、<strong>Subversion</strong>、<strong>Git</strong>も組み込まれます。<br>ところが、Redmineのプラグイン開発者の中には、GitでもSubversionでもなく、<strong>Mercurial</strong>でソースを管理している方が大勢います。<br>そのため、プラグインを入手・更新するのに、ダウンロード、展開、コピーという手間をかける必要があります。<br>それは面倒。ということでBitNami Redmine Stack自身にMercurialを組み込みます。</p><a id="more"></a><p>一番大事なのは、Mercurialをインストールしないということです。<br>大まかな手順は</p><ol><li>Mercurialをポータブル化</li><li>BitNami Redmine StackのコンソールからMercurialを呼べるようにする</li></ol><p>になります。</p><h3 id="1-Mercurialをポータブル化"><a href="#1-Mercurialをポータブル化" class="headerlink" title="1. Mercurialをポータブル化"></a>1. Mercurialをポータブル化</h3><p>基本は、<a href="http://hp.vector.co.jp/authors/VA052754/tips/mercurial_portable.html" title="Mercurial をポータブル化する方法">Mercurial をポータブル化する方法</a> を参考にしました。<br><strong>TortoiseHg</strong>を展開して中のファイル群を取り出す手法です。<br>この手順をバッチファイルに纏めました。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line">@<span class="built_in">set</span> INSTALLER=<span class="variable">%CD%</span>%~<span class="number">1</span></span><br><span class="line">@<span class="built_in">set</span> HGTEMP=<span class="variable">%CD%</span>hgtemp</span><br><span class="line">@<span class="built_in">set</span> HG=<span class="variable">%CD%</span>hg</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> *********************************************************</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span> インストーラを展開します。</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span> *********************************************************</span><br><span class="line"></span><br><span class="line">@<span class="built_in">mkdir</span> &quot;<span class="variable">%HGTEMP%</span>&quot;</span><br><span class="line">@msiexec.exe /a &quot;<span class="variable">%INSTALLER%</span>&quot; targetdir=&quot;<span class="variable">%HGTEMP%</span>&quot; /qn</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span> *********************************************************</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span> 必要なファイル群を展開します。</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span> *********************************************************</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"></span><br><span class="line">@<span class="built_in">xcopy</span> &quot;<span class="variable">%HGTEMP%</span>\PFiles\TortoiseHg&quot; &quot;<span class="variable">%HG%</span>\&quot; /y /s /q /d /h</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span> *********************************************************</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span> 不要なファイル群を削除します。</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span> *********************************************************</span><br><span class="line"></span><br><span class="line">@<span class="built_in">rmdir</span> &quot;<span class="variable">%HGTEMP%</span>&quot; /s /q</span><br><span class="line">@<span class="built_in">rmdir</span> &quot;<span class="variable">%HG%</span>\i18n&quot; /s /q</span><br><span class="line">@<span class="built_in">rmdir</span> &quot;<span class="variable">%HG%</span>\locale&quot; /s /q</span><br><span class="line">@<span class="built_in">rmdir</span> &quot;<span class="variable">%HG%</span>\contrib&quot; /s /q</span><br><span class="line">@<span class="built_in">rmdir</span> &quot;<span class="variable">%HG%</span>\diff-scripts&quot; /s /q</span><br><span class="line">@<span class="built_in">rmdir</span> &quot;<span class="variable">%HG%</span>\doc&quot; /s /q</span><br><span class="line">@<span class="built_in">rmdir</span> &quot;<span class="variable">%HG%</span>\<span class="built_in">help</span>&quot; /s /q</span><br><span class="line">@<span class="built_in">rmdir</span> &quot;<span class="variable">%HG%</span>\hgrc.d&quot; /s /q</span><br><span class="line">@<span class="built_in">del</span> &quot;<span class="variable">%HG%</span>\ThgShellx64.dll&quot;</span><br><span class="line">@<span class="built_in">del</span> &quot;<span class="variable">%HG%</span>\TortoiseHgOverlayServer.exe&quot;</span><br><span class="line">@<span class="built_in">del</span> &quot;<span class="variable">%HG%</span>\TortoisePlink.exe&quot;</span><br><span class="line">@<span class="built_in">del</span> &quot;<span class="variable">%HG%</span>\COPYING.txt&quot;</span><br><span class="line">@<span class="built_in">del</span> &quot;<span class="variable">%HG%</span>\docdiff.exe&quot;</span><br><span class="line">@<span class="built_in">del</span> &quot;<span class="variable">%HG%</span>\extension-versions.txt&quot;</span><br><span class="line">@<span class="built_in">del</span> &quot;<span class="variable">%HG%</span>\kdiff3.exe&quot;</span><br><span class="line">@<span class="built_in">del</span> &quot;<span class="variable">%HG%</span>\Pageant.exe&quot;</span><br></pre></td></tr></table></figure><p>コマンドプロンプトでこのバッチファイルにTortoiseHgのインストーラを渡すだけです。</p><p><strong>例</strong></p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">portable.bat tortoisehg-<span class="number">2</span>.<span class="number">7</span>.<span class="number">0</span>-hg-<span class="number">2</span>.<span class="number">4</span>.<span class="number">2</span>+-x64.msi</span><br></pre></td></tr></table></figure><p>これにより、カレントディレクトリに<strong>hg</strong>フォルダができあがり、<strong>Hg.exe</strong>が入手できます。</p><h3 id="2-BitNami-Redmine-StackのコンソールからMercurialを呼べるようにする"><a href="#2-BitNami-Redmine-StackのコンソールからMercurialを呼べるようにする" class="headerlink" title="2. BitNami Redmine StackのコンソールからMercurialを呼べるようにする"></a>2. BitNami Redmine StackのコンソールからMercurialを呼べるようにする</h3><p>ここからが肝です。<br>まず、できあがったhgフォルダをBitNami Redmine Stackのインストール先にコピーします(gitフォルダがある階層です)。<br>このインストール先を_InstallDir_とします。</p><p><strong>InstallDir\scripts\setenv.bat</strong>をテキストエディタで開きます。</p><p>先頭行に</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="built_in">PATH</span>=InstallDir/git\<span class="built_in">cmd</span>;InstallDir/DevKit\bin;InstallDir/DevKit\mingw\bin;InstallDir/sqlite;InstallDir\imagemagick;InstallDir\ruby\bin;InstallDir/subversion\bin;C:/BitNami/Redmine/php;InstallDir/mysql\bin;<span class="variable">%PATH%</span></span><br></pre></td></tr></table></figure><p>のような記述があります。その直後に、</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="built_in">PATH</span>=InstallDir/hg;<span class="variable">%PATH%</span></span><br></pre></td></tr></table></figure><p>と追加してください。<br>これにより <strong>スタートメニュー-&gt;BitNami Redmine Stack-&gt;Use BitNami Redmine Stack</strong> からのコマンドプロンプトでMercurialを呼び出すことができます。</p><p><a href="../../../../public/2013/03/hg.png"><img src="../../../../public/2013/03/hg-300x265.png" alt="Mercurialの呼び出し"></a></p><p>次に。リポジトリを閲覧するための設定を変更します。</p><p><strong>InstallDir\apps\redmine\htdocs\config\configuration.yml</strong>をテキストエディタで開きます。</p><p>130行目あたりを</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- scm\_mercurial\_command:</span></span><br><span class="line"><span class="addition">+ scm\_mercurial\_command: InstallDir\hg\hg.exe</span></span><br></pre></td></tr></table></figure><p>に修正します。<br>その後、Redmineを再起動します。</p><p>再起動後、<strong>管理-&gt;設定-&gt;リポジトリ</strong>にて<strong>使用するバージョン管理システム</strong>を確認すると、Mercurialが使用できるようになっています。<br>(チェックボックスにチェックがついていないなら、チェックしてください)</p><p><a href="../../../../public/2013/03/config.png"><img src="../../../../public/2013/03/config-300x96.png" alt="使用するバージョン管理システム"></a></p><p>以上で終了です。</p>]]></content>
      
      
      <categories>
          
          <category> プロジェクト管理 </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> Redmine </category>
          
          <category> ソフトウェア工学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BitNami Redmine Stack のアップデート 2.1.2-0 to 2.2.0-0</title>
      <link href="2012/12/22/339/"/>
      <url>2012/12/22/339/</url>
      
        <content type="html"><![CDATA[<p>2012年9月にリリースされた<strong>Redmine 2.1.0</strong>以来のメジャーバージョンアップということで、<strong>Redmine 2.2.0</strong>が2012年12月18日リリースされました。<br>それに追随する形で翌日、<strong>BitNami Redmine Stack 2.2.0-0</strong>もリリースされました。<br>Bitnami Redmine Stackの2.1系はプラグインが使えなくなっており、途中からインストールを断念したのですが(詳しくは<a href="https://taktak.jp/2012/11/18/307" title="BitNami Redmine Stack 2.1.2-0にRedmine Backlogsをインストールする">BitNami Redmine Stack 2.1.2-0にRedmine Backlogsをインストールする</a>を参照)、<strong>Bitnami Redmine Stackの更新履歴</strong>に気になる記述があったので試してみました。</p><a id="more"></a><p>Bitnami Redmine Stackの更新履歴には、</p><blockquote><p>Version 2.2.0-0 2012-12-19<br>*Updated Redmine to 2.2.0<br>*Updated PHP to 5.4.9<br>*Reverted Ruby to 1.9.3-p194 only for Windows<br>because compatibility issues with plugins.<br>Version 2.1.5-0 2012-12-19<br>*Updated Redmine to 2.1.5<br>*Updated PHP to 5.4.9<br>*Downgrade the Ruby version on Windows<br>to 1.9.3p194 to fix the issue with plugins:<br><a href="http://www.redmine.org/boards/4/topics/34353">http://www.redmine.org/boards/4/topics/34353</a></p></blockquote><p>と記述されており、<strong>プラグインの互換性問題</strong>によってRubyを古いバージョンに戻しているようです。</p><p>これを見てもしかしたら!!と思い更新したところ見事に復活しました。<br>プラグインは<a href="https://github.com/alexbevi/redmine_knowledgebase">redmine_knowledgebase</a>が必須なので、前述の問題によってプラグインが動かなかった私にとって、今回の更新はまさに救いでした。</p><p>システムのバージョンアップの際の心配事の筆頭は、これまで使っていた資産との互換性である、ということを強く認識しました。<br>Redmineのバージョンアップの際は、いつもプラグインの互換性が気になってしまいます。</p><p><a href="http://www.redmine.org/projects/redmine/roadmap">Redmineのロードマップ</a>によれば、次のメジャーバージョンアップである<strong>2.3.0</strong>は<strong>2013/02/24</strong>とのこと。<br>それまでは、マイナーチェンジが繰り返されることでしょう。</p><p><img src="../../../../public/2012/12/Information-273x300.png" alt="2.2.0への更新結果"></p>]]></content>
      
      
      <categories>
          
          <category> プロジェクト管理 </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> Redmine </category>
          
          <category> ソフトウェア工学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>VSUG DAY 2012 Winter に行ってきました。</title>
      <link href="2012/12/16/332/"/>
      <url>2012/12/16/332/</url>
      
        <content type="html"><![CDATA[<p><strong>VSUG DAY 2012 Winter</strong> に参加してきました。詳細は<a href="http://vsug.jp/tabid/228/EventID/22/Default.aspx">こちら</a>。</p><p>どのセッションも濃い内容で非常にためになりましたが、<strong>GrapeCity</strong>の<strong>八巻さん</strong>(<a href="http://d.hatena.ne.jp/Yamaki/" title="Yuya Yamaki&#39;s blog">Yuya Yamaki’s blog</a>)と<strong>日本マイクロソフト株式会社 SQL Server 技術顧問</strong>の<strong>熊澤氏</strong>のセッションはとても興味深かったです。</p><p>特に熊沢氏のセッションは、非常に勢いと熱がこもっていたと思います。<br>熊沢氏も話し中、しきりに汗を拭うなど、熱いトークだったことがよくわかります。</p><p>何かと比較される<strong>Oracle</strong>と<strong>SQL Server</strong>ですが、熊沢氏はしきりに <strong>「これができるのはSQL Serverだけ！」</strong> とか <strong>「Oracleの人が見たら腰を抜かす」</strong> などアグレッシブでした。</p><p>2回目の参加で、今回は出張を利用できたので宿泊費だけで参加できました。<br>次も是非参加したいです。</p><p>お土産として<strong>Visual Studioのロゴの入ったスマートフォン用タッチペン</strong>をGETしました。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> その他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Office 2010 ダウンロード版のインストールに失敗する？</title>
      <link href="2012/12/09/330/"/>
      <url>2012/12/09/330/</url>
      
        <content type="html"><![CDATA[<p>今や<strong>猫も杓子もAmazon</strong>って感じですが、この度<strong>Microsoft Office XP</strong>を<strong>2010</strong>に更新しました。その際にAmzaonのダウンロード販売を利用したのですが、少しはまったので情報展開。<br>AmazonからダウンロードしたOfficeのインストーラを起動しても「このパッケージのインストールが失敗しました」とか出てインストールが開始できない状況になったのが発端。</p><a id="more"></a><p>最初は64bit版をダウンロードしたのですが、それがだめなの？と思い32bit版にしても同じ。</p><p>おかしい。<br>これは問い合わせか？と思ったが、ふと気づいた。</p><p><strong>インストーラを展開している段階でエラー→展開できない→書き込みに失敗している？</strong></p><p>という推測からTempフォルダの容量を確認したら、ビンゴ。<br>容量が1GBしかないwwww</p><p>というのも<strong>RAMディスク</strong>を採用しているため、高速化とセキュリティ確保のため、RAMディスクにTempフォルダを割り当てているのだが…その容量が少なめだったのだ。<br>これを4GBに調整して再度インストールしたら、無事終了。<br>最終的には<strong>3GB近く</strong>インストーラが消費していました。</p><p>RAMディスクへのTempフォルダ設定はくれぐれもご注意を。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> Office </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BitNami Redmine Stack のチケットに添付画像のサムネイルが表示されないのを修正する</title>
      <link href="2012/12/01/323/"/>
      <url>2012/12/01/323/</url>
      
        <content type="html"><![CDATA[<p><strong>Redmine 2.1</strong>の新機能として添付ファイルのサムネイル画像を表示する機能がありますが、<strong>BitNami Redmine Stack</strong> では何故かこの設定が無効です。<br>本来なら <code>管理-&gt;表示-&gt;添付ファイルのサムネイル画像を表示</code> を有効にすることで添付画像がサムネイルで表示されるはずですが、何故かチケットを見ても番号が表示されるだけです。</p><a id="more"></a><p>これを修正するには設定ファイルを修正する必要があります。<br><strong>BitNami Redmine Stack</strong> のインストールフォルダを <strong>&lt;InstallDir&gt;</strong> とします。</p><ol><li><p><strong>&lt;InstallDir&gt;\apps\redmine\htdocs\config\configuration.yml.example</strong> をコピーして、<strong>&lt;InstallDir&gt;\apps\redmine\htdocs\config\configuration.yml</strong> を作成します。</p></li><li><p><strong>default:</strong> と記述されている行の直下に下記のように記述します。InstallDir は 1. と同じですが、<strong>\</strong> を <strong>/</strong> に変更します。また、先頭は半角スペースを2文字挿入します。</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">imagemagick_convert_command:</span> <span class="string">&#x27;InstallDir/imagemagick/convert.exe&#x27;</span></span><br></pre></td></tr></table></figure><p>つまり、インストール先が <strong>C:\BitNami\Redmine</strong> なら </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">imagemagick_convert_command:</span> <span class="string">&#x27;C:/BitNami/Redmine/imagemagick/convert.exe&#x27;</span> </span><br></pre></td></tr></table></figure><p>になります。</p><ol><li><strong>BitNami Redmine Stack</strong> を再起動します。</li></ol><p>以上で終了です。これで添付ファイルが正しくサムネイルで表示されます。</p>]]></content>
      
      
      <categories>
          
          <category> プロジェクト管理 </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> Redmine </category>
          
          <category> ソフトウェア工学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BitNami Redmine Stack 2.1.2-0にRedmine Backlogsをインストールする</title>
      <link href="2012/11/18/307/"/>
      <url>2012/11/18/307/</url>
      
        <content type="html"><![CDATA[<p><strong>スクラム開発</strong>ってのが流行っている、というのでせっかくのBTS、<strong>Redmine</strong>を使って導入できないか？って調べたらプラグインがあるようなので導入してみた。<br>が、結構道のりは長かった。長かった。<br>ですので、多大な時間を労するのは、私だけで良いんです。これを見ている方々には、<strong>「ここは俺に任せてお前らは先に行け！」</strong> と言わせていただきたいwww</p><a id="more"></a><p>阿呆なコメントはさておき。<br>この記事の目標は簡単にスクラム環境をRedmineに導入するプラグイン<strong>Redmine Backlogs</strong>を簡単にインストールする事です。<br>たかがプラグインと思っていると躓きます。結構面倒です。というか、Redmineのプラグインは何かあると、<strong>すぐにRedmine本体が動かなくなります</strong>から本当に困ります。<br>導入対象環境は<strong>BitNami Redmine Stack 2.1.2-0</strong>です。<br>最新のバージョンは<strong>BitNami Redmine Stack 2.1.2-2</strong>ですが、これへの導入は失敗しました。<br>なんせ、既存のプラグインすら動かなくなった、どころかログインはできるが、その後の画面がすべて<strong>404</strong>とかなにそれwww</p><p>なので対象環境は<strong>BitNami Redmine Stack 2.1.2-0</strong>です。間違えないように。<br>では早速。</p><p>まずは下準備。</p><ol><li>必要なファイルをバックアップ</li><li>既存のBitNami Redmine Stackを一度アンインストール</li><li>インストール先はファイルパスに空白が含まれないこと (ここでは<strong>C:\BitNami\Redmine</strong>として説明します)</li><li>新しいBitNami Redmine Stackをインストール</li><li>バックアップから復元 (ただし、プラグインは復元しない)</li></ol><p>という手順まで終えてください。<br>つまりクリーンな環境にインストールすることを前提とします。<br>インストール先は、<a href="https://taktak.jp/2012/10/13/302">前回</a>と同じくファイルパスに空白が含まれない場所にします。<br>では早速。</p><p>(1) システムにパスを通します。<strong>システムのプロパティ-&gt;詳細設定-&gt;環境変数</strong>と進み、<strong>ユーザー環境変数</strong>に下記を追加します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RAILS_ENV&#x3D;production</span><br><span class="line">PATH&#x3D;C:\BitNami\Redmine\ruby\bin;C:\BitNami\Redmine\imagemagic</span><br></pre></td></tr></table></figure><p><strong>PATH</strong>の<strong>C:\BitNami\Redmine</strong>の部分は<strong>BitNami Redmine Stack</strong>のインストール先になりますので、適宜置き換えてください。<br><strong>PATH</strong>は既存の値の後ろに追加することになります。従って、PATHの既存の値が </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files (x86)\Visual Studio 2005 SDK\2007.02\VisualStudioIntegration\Tools\Sandcastle\ProductionTools\;</span><br></pre></td></tr></table></figure><p>なら、 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files (x86)\Visual Studio 2005 SDK\2007.02\VisualStudioIntegration\Tools\Sandcastle\ProductionTools\;C:\BitNami\Redmine\ruby\bin;C:\BitNami\Redmine\imagemagick</span><br></pre></td></tr></table></figure><p>になります。既存の値の末尾に <strong>;</strong> をつけてから、前述の値を追加することになります。終わったら<strong>OK-&gt;OK</strong>でプロパティを終了します。</p><p>(2) <strong>Ruby Development Kit</strong>をダウンロードします。<a href="http://rubyinstaller.org/downloads/">このページ</a>からダウンロードします。最新版は<strong>DevKit-tdm-32-4.5.2-20111229-1559-sfx.exe</strong>になります。</p><p>(3) ダウンロードしたファイルを展開します。</p><p><a href="../../../../public/2012/11/Extract.png"><img src="../../../../public/2012/11/Extract-300x121.png" title="Extract"></a></p><p>このようなウィンドウが開くのでRuby Development Kitを展開したいフォルダパスを指定します。ここも空白が含まれるパスは避けた方が無難です。ここでは、<strong>C:\BitNami\Redmine\DevKit</strong>にインストールします。</p><p>(4) <strong>スタートメニュー-&gt;BitNami Redmine Stack-&gt;Use BitNami Redmine Stack</strong> でコマンドプロンプトを起動。以下のコマンドを順次実行。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> DevKit ruby dk.rb init </span><br></pre></td></tr></table></figure><p>すると、 </p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> Initialization complete! Please review and modify the auto-generated</span><br><span class="line">&#x27;config.yml&#x27; file to ensure it contains the root directories to all</span><br><span class="line">of the installed Rubies you want enhanced by the DevKit.</span><br></pre></td></tr></table></figure><p>と出ます。<br>コマンドプロンプトはそのまま開いたままで。</p><p>(5) <strong>C:\BitNami\Redmine\DevKit</strong>に<strong>config.yml</strong>が生成されたはずなのでテキストファイルで開きます。</p><p>(6) 末尾に<strong>ruby</strong>のインストール先を追記します。rubyのインストール先は<strong>BitNami Redmine Stack</strong>の直下なので、 </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">C:\BitNami\Redmine\ruby</span> </span><br></pre></td></tr></table></figure><p>のように追記してください。</p><p>(7) 以下のコマンドを順次実行。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby dk.rb install </span><br></pre></td></tr></table></figure><p>すると、 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[INFO] Updating convenience notice gem override for &#39;C:&#x2F;BitNami&#x2F;Redmine&#x2F;ruby&#39;</span><br><span class="line">[INFO] Installing &#39;C:&#x2F;BitNami&#x2F;Redmine&#x2F;ruby&#x2F;lib&#x2F;ruby&#x2F;site_ruby&#x2F;devkit.rb&#39;.</span><br></pre></td></tr></table></figure><p>と出ます。<br>コマンドプロンプトはそのまま開いたままで。<br>これで<strong>Ruby Development Kit</strong>のインストールは完了です。<br>次に<strong>Redmine Backlogs</strong>をインストールします。</p><p>(7) 以下のコマンドを順次実行。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ..\apps\redmine\htdocs\plugins</span><br><span class="line">git clone https://github.com/backlogs/redmine_backlogs.git</span><br></pre></td></tr></table></figure><p>(8) <strong>C:\BitNami\Redmine\apps\redmine\htdocs\plugins</strong>の直下に<strong>redmine_backlogs</strong>フォルダがあるので、その直下の<strong>Gemfile</strong>というファイルをテキストエディタで開きます。<br>(9) 40行目を下記のように変更します。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- gem &quot;gherkin&quot;, &quot;=2.6.8&quot;</span></span><br><span class="line"><span class="addition">+ gem &quot;gherkin&quot;</span></span><br></pre></td></tr></table></figure><p>(10) 61行目を削除します。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- gem &quot;spork&quot;</span></span><br><span class="line"><span class="deletion">- gem &quot;test-unit&quot;, &quot;=1.2.3&quot; if RUBY_VERSION &gt;= &quot;1.9&quot;</span></span><br><span class="line"><span class="deletion">- gem &quot;timecop&quot;, &#x27;~&gt; 0.3.5&#x27;</span></span><br><span class="line"><span class="addition">+ gem &quot;spork&quot;</span></span><br><span class="line"><span class="addition">+ gem &quot;timecop&quot;, &#x27;~&gt; 0.3.5&#x27;</span></span><br></pre></td></tr></table></figure><p>(11) 以下のコマンドを実行。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem source --add http://production.s3.rubygems.org</span><br></pre></td></tr></table></figure><p>このコマンドは実行する必要はありませんが、この記事を書いた時点で、gemのインストールパッケージを保持しているミラーサイトが死んでいたので、日本のIPからはインストールできませんでしたのでその回避策です。<a href="http://toriniku.hatenablog.com/entry/2012/09/11/164446" title="鶏肉がいいよね。">toyko-m.rubygems.orgがエラー</a>を参考にさせて頂きました。ありがとうございます。</p><p>(12) 以下のコマンドを順次実行。<strong>gem</strong>を順次インストールします。<strong>bundle</strong>を使わないのはそれで失敗したからです。時間がかかるのでお茶でも飲んでてください。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">gem install timecop -v <span class="number">0</span>.<span class="number">3</span>.<span class="number">5</span></span><br><span class="line">gem install simplecov -v <span class="number">0</span>.<span class="number">6</span>.<span class="number">0</span></span><br><span class="line">gem install icalendar</span><br><span class="line">gem install holidays -v <span class="number">1</span>.<span class="number">0</span>.<span class="number">3</span></span><br><span class="line">gem install holidays</span><br><span class="line">gem install spork</span><br><span class="line">gem install open-uri-cached</span><br><span class="line">gem install prawn</span><br><span class="line">gem install inifile</span><br><span class="line">gem install spork</span><br><span class="line">gem install ZenTest -v <span class="number">4</span>.<span class="number">5</span>.<span class="number">0</span></span><br><span class="line">gem install autotest-rails</span><br><span class="line">gem install capybara</span><br><span class="line">gem install cucumber-rails</span><br><span class="line">gem install culerity</span><br><span class="line">gem install database_cleaner</span><br><span class="line">gem install hoe -v <span class="number">1</span>.<span class="number">5</span>.<span class="number">1</span></span><br><span class="line">gem install poltergeist -v <span class="number">0</span>.<span class="number">6</span>.<span class="number">0</span></span><br><span class="line">gem install rspec-rails -v <span class="number">2</span>.<span class="number">11</span>.<span class="number">0</span></span><br><span class="line">gem install rcov -v <span class="number">0</span>.<span class="number">9</span>.<span class="number">11</span></span><br><span class="line">gem install poltergeist -v <span class="number">0</span>.<span class="number">6</span>.<span class="number">0</span></span><br><span class="line">gem install redgreen</span><br></pre></td></tr></table></figure><p><strong>holidays</strong>が2回あるのは意図的です。<strong>Redmine Backlogs</strong>の公式ページでの<a href="http://www.redminebacklogs.net/en/installation.html">インストール方法説明ページ</a>に </p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">There is currently a known problem with the installer <span class="keyword">for</span> the holidays gem (<span class="number">1</span>.<span class="number">0</span>.<span class="number">4</span>). You can work around the problem by first installing an older version and then upgrading:</span><br><span class="line"></span><br><span class="line">gem install holidays --version <span class="number">1</span>.<span class="number">0</span>.<span class="number">3</span></span><br><span class="line">gem install holidays</span><br></pre></td></tr></table></figure><p><strong>訳: holidays gem (1.0.4)のインストーラには既知の問題がある。まず古いバージョンをインストールし、それからアップデートすると上手く問題に対処できる。</strong></p><p>と記載してあるためです。</p><p>(13) gemのインストールが上手くいきました。以下のコマンドを順次実行。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bundle exec rake redmine:plugins:migrate RAILS_ENV=production</span><br><span class="line">bundle exec rake tmp:cache:clear</span><br><span class="line">bundle exec rake tmp:sessions:clear</span><br></pre></td></tr></table></figure><p>この時点で、<strong>Could not find gem ～</strong>とか表示せず、<strong>Migrating redmine_backlogs (Redmine Backlogs)…**という表示から大量のログが出力されていたら成功です。</strong>Redmine Backlogs<strong>のインストールの</strong>下準備**が。</p><p>(14) <strong>下準備</strong>が終わりましたので、<strong>Redmine Backlogs</strong>をインストールします。以下のコマンドを実行。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bundle exec rake redmine:backlogs:install RAILS_ENV=production</span><br></pre></td></tr></table></figure><p>すると、 </p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">BitNami</span>\<span class="title">Redmine</span>\<span class="title">apps</span>\<span class="title">redmine</span>\<span class="title">htdocs</span>\<span class="title">plugins</span>&gt;<span class="title">bundle</span> <span class="title">exec</span> <span class="title">rake</span> <span class="title">redmine:backlogs</span></span></span><br><span class="line"><span class="function">:<span class="title">install</span> <span class="title">RAILS_ENV</span>=<span class="title">production</span></span></span><br><span class="line"><span class="function">(<span class="title">in</span> <span class="title">C</span>:/<span class="title">BitNami</span>/<span class="title">Redmine</span>/<span class="title">apps</span>/<span class="title">redmine</span>/<span class="title">htdocs</span>)</span></span><br><span class="line"><span class="function"><span class="title">You</span> <span class="title">are</span> <span class="title">running</span> <span class="title">backlogs</span> <span class="title">v0</span>.9.26, <span class="title">latest</span> <span class="title">version</span> <span class="title">is</span> 0.9.26</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">=====================================================</span></span><br><span class="line"><span class="function">             <span class="title">Redmine</span> <span class="title">Backlogs</span> <span class="title">Installer</span></span></span><br><span class="line"><span class="function">=====================================================</span></span><br><span class="line"><span class="function"><span class="title">Installing</span> <span class="title">to</span> <span class="title">the</span> <span class="title">production</span> <span class="title">environment</span>.</span></span><br><span class="line"><span class="function"><span class="title">Fetching</span> <span class="title">card</span> <span class="title">labels</span> <span class="title">from</span> <span class="title">http</span>://<span class="title">git.gnome.org</span>...<span class="title">done</span>!</span></span><br><span class="line"><span class="function"><span class="title">Configuring</span> <span class="title">story</span> <span class="title">and</span> <span class="title">task</span> <span class="title">trackers</span>...</span></span><br><span class="line"><span class="function">-----------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="title">Which</span> <span class="title">trackers</span> <span class="title">do</span> <span class="title">you</span> <span class="title">want</span> <span class="title">to</span> <span class="title">use</span> <span class="title">for</span> <span class="title">your</span> <span class="title">stories</span>?</span></span><br><span class="line"><span class="function">  1. 繝舌げ</span></span><br><span class="line"><span class="function">  2. 讖溯・</span></span><br><span class="line"><span class="function">  3. 繧ｵ繝昴・繝</span></span><br><span class="line"><span class="function"><span class="title">Separate</span> <span class="title">values</span> <span class="title">with</span> <span class="title">a</span> <span class="title">space</span> (<span class="title">e.g</span>. 1 3):</span></span><br></pre></td></tr></table></figure><p>のような表示が出ます。文字化けしています。実は、<strong>BitNami Redmine Stack 2.1.2-2</strong>でインストールすると文字化けしていません。というのも、<strong>BitNami Redmine Stack 2.1.2-2</strong>から<strong>Ruby Development Kit</strong>がデフォルトでインストールされるようになりました。その所為かもしれません。<strong>BitNami Redmine Stack 2.1.2-1</strong>は知りません。</p><p>(15) 文字化け部分は上から<strong>バグ、機能、サポート</strong>と表示されています。多分これは環境によって変わります。今回は新規インストールに等しいからかもしれません。これは後から変更できるので、とりあえず </p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> </span><br></pre></td></tr></table></figure><p>と入力します。すると、 </p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">You selected the following trackers: 繝舌げ, 讖溯・, 繧ｵ繝昴・繝・ Is this corre</span><br><span class="line">ct? (y/n)</span><br></pre></td></tr></table></figure><p>と出るので、 </p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y </span><br></pre></td></tr></table></figure><p>(16) 下記の質問が表示されます。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-----------------------------------------------------</span><br><span class="line">Creating a new task tracker.</span><br><span class="line">Please <span class="built_in">type</span> the tracker&#x27;s name:</span><br></pre></td></tr></table></figure><p>とりあえず、 </p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Task </span><br></pre></td></tr></table></figure><p>と入力します。すると、 </p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You typed &#x27;Task&#x27;. Is this correct? (y/n)</span><br></pre></td></tr></table></figure><p>と出るので、 </p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y </span><br></pre></td></tr></table></figure><p>とすると、しばらく処理待ちになりますのでココアでも飲んで待ちましょう。(途中でEnterキーを押す必要があったかも…) </p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Installation complete. Please restart Redmine.</span><br><span class="line">Thank you <span class="keyword">for</span> trying out Redmine Backlogs!</span><br></pre></td></tr></table></figure><p>と出たら終了です。</p><p>(17) 最後の指示通り、<strong>Redmine</strong>を再起動します。<strong>Manager tool</strong>から<strong>Restart All</strong>で<strong>ポチっ</strong>となって感じで再起動してください。</p><p>(18) Redmineにログインすると、<strong>スクラム統計</strong>ってのが見えるはずです。プラグインの設定から先ほどの文字化けしていたトラッカーの選択は変更できます。</p><p>以上で終了です。お疲れ様でした。<br>最新の<strong>BitNami Redmine Stack</strong>にインストールする、という目標は達成できました。</p><p>Redmineへのインストールはいろいろな方が挑戦していますが、<strong>普通のRedmine</strong>だったり、<strong>ALMinium</strong>だったり、<strong>BitNami Redmine Stack</strong>の<strong>2.0.X</strong>や<strong>1.4.0</strong>とかだったりして挑戦する勇気や生贄が不足していました。<br>ですが、これで<strong>BitNami Redmine Stack 2.1.2-0</strong>へのインストールは大丈夫でしょう。</p><p>願わくばこの記事がお役に立てることを。</p>]]></content>
      
      
      <categories>
          
          <category> プロジェクト管理 </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> Redmine </category>
          
          <category> ソフトウェア工学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BitNami Redmine Statck が起動しない...だと... (解決編)</title>
      <link href="2012/10/13/302/"/>
      <url>2012/10/13/302/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2012/10/13/295">前回</a>の問題に対する解決策の提示。</p><a id="more"></a><p>では早速 </p><ol><li><strong>BitNami Redmine Stack 2.1.2-0</strong>をパスに空白が含まれないディレクトリに新規インストール。</li></ol><p>デフォルトは、<strong>C:\Program Files\BitNami Redmine Stack</strong>なので、<strong>C:\BitNami\Redmine</strong>に変更。</p><p>はい。終了です。<br>バックアップ、リストアの方法は今までの記事を参考にすると良いと思います。</p><p>手抜きな記事ですが、これで解決です。</p><p>ついでに、2.1.0-0から2.1.2-0へのアップデートも兼ねました。ﾌﾋﾋ、ｻｰｾﾝ。</p>]]></content>
      
      
      <categories>
          
          <category> プロジェクト管理 </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> Redmine </category>
          
          <category> ソフトウェア工学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BitNami Redmine Statck が起動しない...だと...</title>
      <link href="2012/10/13/295/"/>
      <url>2012/10/13/295/</url>
      
        <content type="html"><![CDATA[<p>ということで原因探し。</p><a id="more"></a><p>現象は</p><p><strong>1. Redmineにアクセスしても、503 Service Temporarily Unavailable</strong><br><strong>2. BitNami Redmine StackのManager toolでチェックすると、Thin_redmine、Thin_redmine2がStopped</strong></p><p>という状態。</p><p><strong>1.</strong> の状態が原因なのは、<strong>2.</strong> が原因だというのはわかります。<br>が、<strong>2.</strong> に至る原因が不明です。<br>無駄とは知りつつも、とりあえずManager toolから全サービスを再起動するも、無駄無(ry</p><p>困ったときのGoogle先生、ということで質問すると、同じような人がいるでは無いですか。</p><p><a href="http://www.jp-z.jp/changelog/2012-06-17-1.html">win7にBitNami Redmine Stackを入れたら503エラーで動作しない</a><br><a href="http://d.hatena.ne.jp/kk_Ataka/20111129/1322569582">pikでインストールしたRubyでbundle exec rubyしたらエラーになった 解決編</a></p><p>にて原因と解決方法が判明した。</p><p><a href="http://www.jp-z.jp/changelog/2012-06-17-1.html">win7にBitNami Redmine Stackを入れたら503エラーで動作しない</a>では、インストールしたImageMagickが原因のようでしたが、こっちの原因は別物。サイトに書いてあるコマンドを<strong>スタートメニュー-&gt;BitNami Redmine Stack-&gt;Use BitNami Redmine Stack</strong> で実行。コマンドは下記。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> apps\redmine\htdocs</span><br><span class="line">bundle exec thin <span class="built_in">start</span> -e production -p <span class="number">3001</span> --prefix /redmine</span><br></pre></td></tr></table></figure><p>すると、</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ruby.exe: <span class="title">illegal</span> <span class="title">switch</span> <span class="title">in</span> <span class="title">RUBYOPT</span>: -<span class="title">F</span> (<span class="title">RuntimeError</span>)</span></span><br></pre></td></tr></table></figure><p>というメッセージ。日本語で(ry</p><p><a href="../../../../public/2012/10/cmd.png"><img src="../../../../public/2012/10/cmd-300x218.png" alt="コマンドプロンプトのメッセージ" title="コマンドプロンプトのメッセージ"></a></p><p>再びGoogle先生に泣きつくと、<a href="http://d.hatena.ne.jp/kk_Ataka/20111129/1322569582">pikでインストールしたRubyでbundle exec rubyしたらエラーになった 解決編</a>とストレートなタイトルで解決方法をGET!!</p><p>結論は。</p><p><strong>Rubyのインストールパスにスペースを含めるな(ﾟДﾟ)ｺﾞﾙｧ</strong></p><p><strong>Rubyのインストールパスにスペースを含(ry</strong> </p><p>…え？と思うじゃ無いですか。大事なことなので2回言いました。<br>でも、今までエラー出てなかったじゃん。<br>俺だってそう思いました。</p><p><strong>ところがどっこい‥‥‥‥夢じゃありません‥‥‥‥！ 現実です‥‥‥！ これが現実‥！</strong></p><p>まぁ、諦めたら(ryというヤツですので、何とかします。</p><p>というわけで、次回に解決プランを実行します。</p>]]></content>
      
      
      <categories>
          
          <category> プロジェクト管理 </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> Redmine </category>
          
          <category> ソフトウェア工学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BitNami Redmine Stack 2.1.0-1 のログ出力設定変更方法</title>
      <link href="2012/09/21/288/"/>
      <url>2012/09/21/288/</url>
      
        <content type="html"><![CDATA[<p><strong>BitNami Redmine Stack 2.1.0-1</strong> のログ出力設定の変更方法がわかったのでメモ。<br>2.0系から設定方法が変わったのか、今まで動かなかったのですが、これで余計なログが出力されなくなりました。</p><a id="more"></a><p>では早速</p><p>(1) <strong>C:\Program Files\BitNami Redmine Stack\apps\redmine\htdocs\config\additional_environment.rb</strong> に下記の記述を追記し、エラー、警告のみがログに記録されるように修正。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ログの出力を制限</span></span><br><span class="line">config.log_level = <span class="symbol">:warn</span></span><br></pre></td></tr></table></figure><p>また、ログのレベルは下記の内容が使用できるようです。</p><p>[table id=10 /]</p><p>これで終了です。<br>従来は、<strong>C:\Program Files\BitNami Redmine Stack\apps\redmine\config\environments\production.rb</strong> に</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ログの出力を制限</span></span><br><span class="line">config.logger = Logger.new(config.log_path)</span><br><span class="line">config.logger.level = Logger::WARN</span><br></pre></td></tr></table></figure><p>と記述しましたが、これをすると <strong>Thin_redmine</strong>、<strong>Thin_redmine2</strong> が停止してしまっていました。</p><p>ようやくログの制限ができるようになりました。<br>これで寝ることができます。</p>]]></content>
      
      
      <categories>
          
          <category> プロジェクト管理 </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> Redmine </category>
          
          <category> ソフトウェア工学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BitNami Redmine Stack のアップデート 2.0.3-1 to 2.1.0-0</title>
      <link href="2012/09/21/280/"/>
      <url>2012/09/21/280/</url>
      
        <content type="html"><![CDATA[<p>Windows 7 にインストールした <strong>BitNami Redmine Stack 2.0.3-1</strong> を <strong>2.1.0-0</strong> に更新することにしたので備忘録。<br>以前のエントリで2.0系へのアップデートを断念した、みたいに書いてましたが… スマヌ。あれは嘘でした。その後、空き時間にアップデートしてしまいました。ﾌﾋﾋ、ｻｰｾﾝwww</p><a id="more"></a><p><a href="https://taktak.jp/2012/05/12/bitnami-redmine-stack-%e3%81%ae%e3%82%a2%e3%83%83%e3%83%97%e3%83%87%e3%83%bc%e3%83%88-1-3-1-1-to-1-4-1-0/">前回のエントリ</a>にアップデートの手法が書かれているので基本は同じです。<br>今回の方法も、</p><p><strong>1. 必要なファイルをバックアップ</strong><br><strong>2. 既存のBitNami Redmine Stackを一度アンインストール</strong><br><strong>3. 新しいBitNami Redmine Stackをインストール</strong><br><strong>4. バックアップから復元</strong></p><p>というのが基本的な流れ。<br>では早速。</p><p>(1) 万が一に備えて、インストールした <strong>BitNami Redmine Stack</strong> をフォルダごとコピー。通常なら <strong>C:\Program Files\BitNami Redmine Stack</strong> のはず。</p><p>(2) <strong>Redmine</strong> のデータベース、プラグイン、テーマ、添付ファイルをバックアップ。パッチは<a href="https://taktak.jp/2012/05/12/bitnami-redmine-stack-%e3%81%ae%e3%82%a2%e3%83%83%e3%83%97%e3%83%87%e3%83%bc%e3%83%88-1-3-1-1-to-1-4-1-0/">前回のエントリ</a>を参考にしてください。</p><p>(3) コントロールパネルから <strong>BitNami Redmine Stack</strong> をアンインストール。以前とは違って <strong>Norton Internet Security Online</strong> が邪魔をしなくなりました….</p><p>(4) 新しい <strong>BitNami Redmine Stack</strong> をインストール。インストールは英語で行う。これも前回からの伝統。</p><p>(5) インストールが完了したので、一度ログインしておく(これは必須ではないかも…)</p><p>(6) バックアップしたデータベースを復元。</p><p>(7) バックアップで退避した、プラグイン、テーマファイルを復元。既に入っているプラグインやテーマファイルを上書きしないように注意。</p><p>(8) データベースの更新を実行。<strong>スタートメニュー-&gt;BitNami Redmine Stack-&gt;Use BitNami Redmine Stack</strong> でコマンドプロンプトを起動。以下のコマンドを順次実行。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">BitNami</span> <span class="title">Redmine</span> <span class="title">Stack</span>&gt;<span class="title">cd</span> <span class="title">apps</span>\<span class="title">redmine</span>\<span class="title">htdocs</span></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">BitNami</span> <span class="title">Redmine</span> <span class="title">Stack</span>\<span class="title">apps</span>\<span class="title">redmine</span>\<span class="title">htdocs</span>&gt;<span class="title">rake</span> <span class="title">db:migrate</span> <span class="title">RAILS_ENV</span>=&quot;<span class="title">production</span>&quot;</span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">BitNami</span> <span class="title">Redmine</span> <span class="title">Stack</span>\<span class="title">apps</span>\<span class="title">redmine</span>\<span class="title">htdocs</span>&gt;<span class="title">rake</span> <span class="title">redmine:plugins</span>:<span class="title">migrate</span> <span class="title">RAILS_ENV</span>=<span class="title">production</span></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">BitNami</span> <span class="title">Redmine</span> <span class="title">Stack</span>\<span class="title">apps</span>\<span class="title">redmine</span>\<span class="title">htdocs</span>&gt;<span class="title">rake</span> <span class="title">tmp:cache</span>:<span class="title">clear</span></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">BitNami</span> <span class="title">Redmine</span> <span class="title">Stack</span>\<span class="title">apps</span>\<span class="title">redmine</span>\<span class="title">htdocs</span>&gt;<span class="title">rake</span> <span class="title">tmp:sessions</span>:<span class="title">clear</span></span></span><br></pre></td></tr></table></figure><p>(9) 一応、<strong>Manager tool</strong> から全てのサービスを停止して、起動。</p><p>(10) Redmineにログインし、一通り、確認してエラーがないことを確認。</p><p><a href="../../../../public/2012/09/info.png"><img src="../../../../public/2012/09/info-289x300.png" alt="管理画面でのバージョン情報" title="管理画面でのバージョン情報"></a></p><p>管理画面でバージョン情報を確認して、Redmine 2.1.0 stableの文字が表示されているのを確認。</p><p>(11) 終了</p><p>以上で終了です。</p>]]></content>
      
      
      <categories>
          
          <category> プロジェクト管理 </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> Redmine </category>
          
          <category> ソフトウェア工学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>あと、１ヶ月待っていればorz</title>
      <link href="2012/06/05/271/"/>
      <url>2012/06/05/271/</url>
      
        <content type="html"><![CDATA[<p>衝撃のメールが来ました…. JetBrains ReSharper is approaching its new major release later this summer. We’re delighted to announce a limited 2-in-1 offer: all new and upgrade ReSharper 6 licenses purchased on or after <strong>June 1, 2012</strong>, are entitled to a free upgrade for the upcoming ReSharper 7. <strong>／(^o^)＼ナンテコッタイ</strong></p>]]></content>
      
      
      <categories>
          
          <category> ソフトウェア紹介 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows Phone does not come..</title>
      <link href="2012/05/31/269/"/>
      <url>2012/05/31/269/</url>
      
        <content type="html"><![CDATA[<p>29日の「ソフトバンクモバイル新商品発表会 2012 Summer | ソフトバンクモバイル」に一縷の望みを託しましたが、周りの予想通り<strong>Windows Phone</strong>は発表されませんでした。</p><p><strong>Nokia</strong>の<strong>Lumia900</strong>がソフトバンクから！！とか妄想していましたが、そんな幻想はぶち殺されました。そげぶ。</p><p>そういえば前のエントリで発表会2日前に <strong>「明日11:00から。」</strong> とかほざいてました。ﾌﾋﾋwwｻｰｾﾝww</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> Windows Phone </category>
          
          <category> 雑記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BitNami Redmine Stack のアップデート 1.4.1-0 to 2.0.1-0 (断念編)</title>
      <link href="2012/05/31/262/"/>
      <url>2012/05/31/262/</url>
      
        <content type="html"><![CDATA[<p>Windows 7 にインストールした BitNami Redmine Stack 1.4.1.0 を 2.0.1-0 に更新することにしたので備忘録。<br>が、<a href="https://taktak.jp/2012/05/12/162">前回</a>と違い、データベースの移行には成功したが、プラグインのインストールができなかった。<br>つまり今回は<strong>失敗談</strong>。</p><a id="more"></a><p>大まかな手順は前回を参照。</p><p>2.0.0への更新で、当然ながら幾つか変更点がある。</p><ol><li>Redmineのアプリケーションフォルダの構成が変更されている。そのため復元のバッチファイルが使えない。</li><li>ログの出力設定の方法が不明。従来の方法ではエラーが出る。</li><li>プラグインが全滅。プラグインが全滅。<strong>大事なことなので(ry</strong></li><li>httpdが変更されている</li></ol><h4 id="1-フォルダ構成の変更"><a href="#1-フォルダ構成の変更" class="headerlink" title="1. フォルダ構成の変更"></a>1. フォルダ構成の変更</h4><p>従来の<strong>app,conf,config,db,doc,extra,files,lib,log,public,script,scripts,test,tmp,vendorフォルダ</strong>のあった階層が一つ下に移動。<br><strong>旧</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\BitNami Redmine Stack\apps\redmine\app</span><br><span class="line">C:\Program Files\BitNami Redmine Stack\apps\redmine\conf</span><br><span class="line">            .</span><br><span class="line">            .</span><br><span class="line">            .</span><br><span class="line">C:\Program Files\BitNami Redmine Stack\apps\redmine\vendor</span><br></pre></td></tr></table></figure><p><strong>新</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\BitNami Redmine Stack\apps\redmine\conf</span><br><span class="line">C:\Program Files\BitNami Redmine Stack\apps\redmine\htdocs\app</span><br><span class="line">C:\Program Files\BitNami Redmine Stack\apps\redmine\htdocs\conf</span><br><span class="line">            .</span><br><span class="line">            .</span><br><span class="line">            .</span><br><span class="line">C:\Program Files\BitNami Redmine Stack\apps\redmine\htdocs\vendor</span><br><span class="line">C:\Program Files\BitNami Redmine Stack\apps\redmine\scripts</span><br></pre></td></tr></table></figure><p>に変更されました。<br>また、<strong>pluginsフォルダ</strong>の場所も変更されています。</p><p><strong>旧</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\BitNami Redmine Stack\apps\redmine\vendor\plugins</span><br></pre></td></tr></table></figure><p><strong>新</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\BitNami Redmine Stack\apps\redmine\plugins</span><br></pre></td></tr></table></figure><p>バッチファイルはこれに併せて書き直すだけです。これは簡単です。</p><h4 id="2-ログの出力設定の方法が不明"><a href="#2-ログの出力設定の方法が不明" class="headerlink" title="2. ログの出力設定の方法が不明"></a>2. ログの出力設定の方法が不明</h4><h4 id="3-プラグインが全滅"><a href="#3-プラグインが全滅" class="headerlink" title="3. プラグインが全滅"></a>3. プラグインが全滅</h4><h4 id="4-httpdの変更"><a href="#4-httpdの変更" class="headerlink" title="4. httpdの変更"></a>4. httpdの変更</h4><p><strong>Mongrel</strong>から<strong>Thin</strong>に変更されていた。</p><p>と、以上が失敗談。<br>時間が空いたら、1.4.2-0と2.0.1-0のデータベースの差分を取ってみて、一度データベースをきれいにしたいと思う。</p>]]></content>
      
      
      <categories>
          
          <category> プロジェクト管理 </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> Redmine </category>
          
          <category> ソフトウェア工学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BitNami Redmine Stack 2.0.0-0 ｷﾀｰ(^ω^)</title>
      <link href="2012/05/28/258/"/>
      <url>2012/05/28/258/</url>
      
        <content type="html"><![CDATA[<p>ので、土日に更新しようかと。<br>今回は1.4.1-0からのアップデートレポートになるかな？ ダウンロードサイトは<a href="http://bitnami.org/stack/redmine">こちら</a>です。</p>]]></content>
      
      
      <categories>
          
          <category> プロジェクト管理 </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> Redmine </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Visual Studio 高速化</title>
      <link href="2012/05/28/253/"/>
      <url>2012/05/28/253/</url>
      
        <content type="html"><![CDATA[<p><strong>Visual Studio</strong> を使っていると、まぁとにかくガリガリ音がするわけです。HDDの。<br>ビルドしたり、セーブしたり、インテリセンスが考えたり、<strong>Resharper</strong>が考えたり、等々のタイミングで。</p><p>特にビルド時のHDDガリガリは死活問題。HDDの健康度合いに響く。特にSSDならなおさら。</p><a id="more"></a><p>なので、幾つか対策をしてみた。</p><ol><li>ビルド時の出力先(<strong>bin</strong>、<strong>obj</strong> ディレクトリ)を<strong>RAMディスク</strong>に逃がす</li><li><strong>Resharper</strong>のCacheを<strong>RAMディスク</strong>に逃がす</li><li><strong>ReadyBoost</strong>や<strong>eBoostr</strong>によるキャッシュ利用でパフォーマンスの向上</li></ol><p>1.はビルド時にプロジェクトファイルと同一ディレクトリ(デフォルトの場合)にできる<strong>bin</strong>、<strong>obj</strong> ディレクトリをシンボリックリンクを使って、RAMディスクに逃がす。<br>欠点は、ソリューションのクリーンなどで、シンボリックリンクが切れてしまう場合があるが、これについては安いコストだと思って我慢する。<br>ツールを作って、ソリューション配下の全ての<strong>bin</strong>、<strong>obj</strong> ディレクトリに対してシンボリックリンクを張るツールを作ったのでそこまで苦にならない。<br>特に、HDDに対する書き込み頻度が確実に低下するので、目に見える速度の向上は無くても、HDDに優しいのは確実に断言できる。</p><p>2.はResharper使いなら当然かと。<br>Optionからキャッシュの出力先をソリューションファイルと同一ディレクトリからシステムの<strong>TEMP</strong>に変更。<br>既に開発環境のTEMPディレクトリはRAMディスクです。</p><p>3.はソフトの導入。<br>このために、<strong>eBoostr4</strong>を購入。それなりに効果は出ていると思います。<br><strong>eBoostr4</strong>で優先的にキャッシュするアプリケーションにVisualStudioを追加したので、ほとんどHDDへのアクセスが無くなりました。<br>(eBoostr4はHDDへのアクセス状況を視覚的に確認できます。)</p><p>自己満足の範疇かもしれませんが、健全な開発ライフを過ごすためにも精神的な安心感は必要かと。<br>というわけで、<strong>eBoostr4</strong>おすすめです。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> Visual Studio </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ソフトバンクモバイル新商品発表会 2012 Summer | ソフトバンクモバイル</title>
      <link href="2012/05/27/250/"/>
      <url>2012/05/27/250/</url>
      
        <content type="html"><![CDATA[<p>明日11:00から。</p><p>望み薄だとわかってはいるけれど。<br>Windows Phone採用スマホカムヒアアアアアア!!!!</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> その他 </category>
          
          <category> Windows Phone </category>
          
          <category> 雑記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETで難読化を試してみる 第3回</title>
      <link href="2012/05/24/139/"/>
      <url>2012/05/24/139/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2012/05/20/119">前回</a>の続き。</p><p>今回は<strong>Eazfuscator.NET</strong> による難読化の前後でプログラムがどう変化したのか、を検証します。</p><a id="more"></a><h1 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h1><p>前回は、AliceとBobが互いに挨拶する簡単なプログラムを難読化しました。<br>ソースコードは前回の記事を参照してください。</p><p>では、難読化前後での変化を検証してみます。</p><p>(1) 実行結果の検証</p><p><strong>難読化前</strong> </p><p><a href="../../../../public/2012/05/obfuscator32.png"><img src="../../../../public/2012/05/obfuscator32-300x218.png" title="obfuscator(3)"></a></p><p><strong>難読化後</strong> </p><p><a href="../../../../public/2012/05/obfuscator62.png"><img src="../../../../public/2012/05/obfuscator62-300x218.png" title="obfuscator(6)"></a></p><p>実行は無事にできています。</p><p>(2) 逆コンパイラによるソースコード解析</p><p><strong>難読化前</strong> </p><p><a href="../../../../public/2012/05/obfuscator02.png"><img src="../../../../public/2012/05/obfuscator02-300x180.png" title="obfuscator(0)"></a></p><p><strong>難読化後</strong><br><a href="../../../../public/2012/05/obfuscator72.png"><img src="../../../../public/2012/05/obfuscator72-300x180.png" title="obfuscator(7)"></a></p><p><strong>!?</strong><br>左側のツリーを見てください。AliceだBobだのという名前が一切ありません。<br>全部空白とか記号です。というか、<strong>クラスが増えています。</strong><br>また、右側はBog.Greetingメソッドの中身ですが、難読化前は　<strong>this.TeachNowTime()</strong>　という風に丸見えだったのが、<strong>this.()</strong> に変化しています。<br>Console.WriteLineメソッドの第1引数に渡した文字列も意味不明な記号に変化しています。</p><p>(3) プログラムのサイズ</p><p><strong>難読化前</strong> </p><p><a href="../../../../public/2012/05/obfuscator03.png"><img src="../../../../public/2012/05/obfuscator03-271x300.png" title="obfuscator(0)"></a></p><p><strong>難読化後</strong> </p><p><a href="../../../../public/2012/05/obfuscator12.png"><img src="../../../../public/2012/05/obfuscator12-271x300.png" title="obfuscator(1)"></a></p><p>かなりサイズが大きくなりました。プログラムが小さいうちは許容範囲ですが…</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>今回も駆け足でお伝えしましたが、どうだったでしょうか？ ここまで簡単だと拍子抜けですね。いや本当に。<br>こんなに簡単ですと、「とりあえず難読化しとく？」みたいな風潮になりませんかねぇ？ならないか。</p><p>恐ろしいのは、これが無料であることです。商用利用も可、とヘルプに書いてあります(執筆時時点で)。<br><strong>Babel.NET</strong>も無料で高機能だったらしいのですが、残念ながら有料化してしまいました。<br>まぁ、素晴らしいソフトなので、有償化してもお金を出します。<br>事実、私は <strong>.NET Reflector</strong> はVSPro版を購入していますし。<br>高度な技術の塊が低価格で手に入るのは良いのですが、競争が激しいですねぇ…</p><p>次は、更に踏み込んだ内容に入ろうと思います。<br>次回は、<strong>リフレクション</strong>と<strong>アゼンブリマージ</strong>を使った場合の難読化について検証します。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> C# </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> 難読化 </category>
          
          <category> .NETで難読化を試してみる </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Facebookに参入</title>
      <link href="2012/05/21/240/"/>
      <url>2012/05/21/240/</url>
      
        <content type="html"><![CDATA[<p>しました。</p><p>Wordpressからの投稿もFacebookに反映されますので、どうぞよろしくです。<br>twitterとの連携は追々考えます。</p><p>Facebookページは<a href="http://www.facebook.com/pages/%E3%81%A8%E3%81%82%E3%82%8B%E6%8A%80%E8%A1%93%E8%80%85%E3%81%AE%E5%8A%A3%E7%AD%89%E6%84%9F/430185140333252">こちら</a>。</p>]]></content>
      
      
      <categories>
          
          <category> その他 </category>
          
          <category> 雑記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETで難読化を試してみる 第2回</title>
      <link href="2012/05/20/119/"/>
      <url>2012/05/20/119/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2012/05/17/113">前回</a>の続き。</p><p>今回は<strong>Eazfuscator.NET</strong>のインストールと実行に挑戦します。</p><a id="more"></a><h1 id="Introduce"><a href="#Introduce" class="headerlink" title="Introduce"></a>Introduce</h1><p><a href="http://www.foss.kharkov.ua/g1/projects/eazfuscator/dotnet/Default.aspx">Eazfuscator.NET</a> から、最新のインストーラをダウンロードしてください。<br>執筆時点の最新版は <strong>Version 3.3 released on March 5, 2012</strong> になります。</p><p>ダウンロードした <strong>Eazfuscator.NET 3.3 Setup.msi</strong>というインストーラをダブルクリックします。<br>インストールは下記の手順に従ってください。</p><p>(1) [Next] をクリック。</p><p><a href="../../../../public/2012/05/obfuscator0.png"><img src="../../../../public/2012/05/obfuscator0-300x234.png" title="obfuscator(0)"></a></p><p>(2) 使用許諾契約書に同意できたら [<strong>I accept the terms in the License Agreement</strong>] にチェックをつけて、[Next] をクリック。</p><p><a href="../../../../public/2012/05/obfuscator1.png"><img src="../../../../public/2012/05/obfuscator1-300x234.png" title="obfuscator(1)"></a></p><p>(3) インストール先に問題がなければ、[Next] をクリック。問題があれば適宜変更してください。</p><p><a href="../../../../public/2012/05/obfuscator2.png"><img src="../../../../public/2012/05/obfuscator2-300x234.png" title="obfuscator(2)"></a></p><p>(4) ここまでの設定で問題がなければ、[Install] をクリック。問題があれば、[Back] をクリックして修正するか、インストールを中止してください。</p><p><a href="../../../../public/2012/05/obfuscator3.png"><img src="../../../../public/2012/05/obfuscator3-300x234.png" title="obfuscator(3)"></a></p><p>(5) インストール中です。</p><p><a href="../../../../public/2012/05/obfuscator5.png"><img src="../../../../public/2012/05/obfuscator5-300x234.png" title="obfuscator(5)"></a></p><p>(6) [Finish] をクリックしてインストーラを終了します。インストーラの終了後にEazfuscator.NETを起動したいなら [Launch Eazfuscator.NET] にチェックをつけてください。</p><p><a href="../../../../public/2012/05/obfuscator6.png"><img src="../../../../public/2012/05/obfuscator6-300x234.png" title="obfuscator(6)"></a></p><p>インストール終了です。<br>簡単ですね？</p><p>では、次に実行してみましょう。</p><p>(1) Windows 7 の画面で恐縮ですが、<strong>スタートメニュー</strong>-&gt;<strong>すべてのプログラム</strong>-&gt;<strong>Eazfuscator.NET</strong>と進んで、<strong>Eazfuscator.NET Assistant</strong> をクリックしてください。</p><p><a href="../../../../public/2012/05/obfuscator7.png"><img src="../../../../public/2012/05/obfuscator7-275x300.png" title="obfuscator(7)"></a></p><p>(2) Eazfuscator.NETが起動しました。</p><p><a href="../../../../public/2012/05/obfuscator8.png"><img src="../../../../public/2012/05/obfuscator8-300x183.png" title="obfuscator(8)"></a></p><p>(3) 難読化対象のプログラムです。Bobが面倒な人間っぽく見えますがご愛敬。</p><script src="https://gist.github.com/takuya-takeuchi/5906935cacb4a1a9c175f1f877685a54.js"></script><p>(4) Eazfuscator.NETの右側の緑の領域に、作成したプログラムをドラッグアンドドロップします。<br>(5) 難読化が始まります。</p><p><a href="../../../../public/2012/05/obfuscator41.png"><img src="../../../../public/2012/05/obfuscator41-300x245.png" title="obfuscator(4)"></a></p><p>(6) 難読化完了。[Done] をクリックしてダイアログを閉じます。</p><p><a href="../../../../public/2012/05/obfuscator51.png"><img src="../../../../public/2012/05/obfuscator51-300x245.png" title="obfuscator(5)"></a></p><p>これで終了です。<br>え？これだけ？って位拍子抜けです。</p><p>あ、気になったと言えば、作成したプログラムと同一のディレクトリにあった<strong>pdbファイル</strong>が難読化後消えていました。なぜ？</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>駆け足でお伝えしましたが、今日はここまでです。<br>というか簡単すぎですね。</p><p>次回は、難読化前後で、プログラムがどう変化したかを検証したいと思います。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> C# </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> 難読化 </category>
          
          <category> .NETで難読化を試してみる </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETで難読化を試してみる 第1回</title>
      <link href="2012/05/17/113/"/>
      <url>2012/05/17/113/</url>
      
        <content type="html"><![CDATA[<p>技術屋さんなので、プログラマーなのでそれらしいネタで情報提供しましょう、ってことで始めた <strong>「.NETで○○○を試してみる」シリーズ</strong> 第2弾。</p><p><a href="https://taktak.jp/2012/04/23/%E3%82%B3%E3%83%BC%E3%83%89-%E3%83%A1%E3%83%88%E3%83%AA%E3%83%83%E3%82%AF%E3%82%B9%E3%82%92%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B-%E7%AC%AC1%E5%9B%9E/">第1弾</a>はソフトウェア工学なんてお題目を掲げたものの、終始ソフトウェアの機能紹介と用語解説に甘んじてたようにも見える。<br>いや、ソースコードも書いていたし、一応<strong>C#**、</strong>.NET Framework**っていう範疇ではありましたが。</p><p>今回は<strong>難読化</strong>に挑戦します。</p><a id="more"></a><h1 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h1><p>まずは、難読化が何か、というところから。</p><p>そもそも、.NET 用に作成されたプログラムは、CやC++で作成されたプログラムに比べてリバース エンジニアリングが極めて容易です。<br>なぜなら、ソースコードがコンパイルされて作成された実行ファイルやアセンブリは、その時点ではネイティブコードに変換されていないためです。<br>C#やVisual Basic .NETで記述されたソースコードは、コンパイルが実行されると、<strong>MSIL (Microsoft Intermediate Language)</strong> に変換されます。<br>このMSILはマシン語であるネイティブコードよりも高度(ここで言う高度とは機能的な意味ではなく、人間に理解しやすいかどうか)であり、マシン語固有の知識が不要であるため解析が容易です。<br>CやC++で記述され、コンパイルによって生成されたプログラムに比べてリバース エンジニアリングが極めて容易、と言う理由はここにあります。</p><p>そこで、ソースコードからMSILに変換する段階で、処理結果に影響を与えないようにロジックの理解度を低下させます。<br>たとえば、変数名、メソッド名、クラス名等人間の理解力を補佐する情報を空白や記号に置換したりする等の手法が挙げられます。<br>これが難読化です。あくまで、<strong>読みにくくする</strong>、というのが目標ですので、人間には解読不可能だ!!!、リバースエンジニアリング不可能にする!!、とかそういうのはお門違いです。</p><p><strong>Microsoft</strong>は<a href="http://msdn.microsoft.com/ja-jp/library/ms227271%28v=vs.90%29.aspx">難読化が必要な理由</a>というページで下記のように述べています。</p><blockquote><p>NET 用に作成されたプログラムは、リバース エンジニアリングが簡単です。これは .NET のデザインに不備があるからではありません。最新の中間コンパイル言語が採用されているからです。.NET は表出的なファイル構文を使用して実行可能コード、すなわち MSIL (Microsoft Intermediate Language) を配信します。このような中間ファイルは、バイナリのマシン語コードよりも高度なもので、直接表示でき、最終的に理解可能な識別子やアルゴリズムを積み重ねたものです。判読性を高め、柔軟性と拡張性を持たせながら、同時に重要な部分を難読化することは、もちろん容易なことではありません。<br>.NET 逆コンパイラは誰でも無償で入手でき、これを使用してコードを簡単にリバース エンジニアリングできます。誰でもすぐに、ライセンス供与されたコード、コピー保護メカニズム、所有権を有するビジネス ロジックなどを、(合法的であるかどうかは別として) かなり判別しやすい状態にすることができます。どのような目的であれ、ソフトウェアの詳細を隅々まで調べることができるため、セキュリティ上の欠陥を探して利用したり、ユニークなアイデアを盗んだり、プログラムをクラックすることなども可能です。<br>これが必ずしもリスク、または重大な問題になるわけではありません。知的財産について懸念のある組織は、.NET プラットフォームを考える際、リバース エンジニアリングを防ぐためのソリューションが存在することを知っておく必要があります。難読化は、アセンブリ内のシンボルの名前をシームレスに変更する技法であり、その他にも逆コンパイラを妨害する対策を備えています。難読化を正しく適用すると、アプリケーションはそのままにして、さまざまな規模の逆コンパイルに対する保護を高めることができます。</p></blockquote><p>Microsoft自身はこのように警鐘を鳴らしてはいますが、Microsoftは難読化という<strong>ソリューションを提供してはいません。</strong><br>個人的には、MSILに対して一番理解がある(当たり前ですが)Microsoftが難読化の機能をVisualStudioなりに備えておくのが一番だと思いますが、そうなっていないなら仕方ありません。</p><p>そういうわけですので、難読化を行うための手段は3通りです。</p><ol><li>コーディング中に変数名、クラス名、メソッド名を記号や空白に置き換える。</li><li>特許が含まれるようなロジックはアンマネージドなアセンブリに退避させ <strong>P/Invoke呼び出し</strong> で利用する。</li><li>難読化ツールを利用する。</li></ol><p><strong>1.</strong> まぁ、どう考えてもないでしょう。コーディングやコードレビューの効率が著しく低下しますが、そこに膨大な工数を費やせる予算潤沢なプロジェクトならありでしょう。まぁ保守する人間が絶叫すること間違いないでしょうが..</p><p><strong>2.</strong> これは現実路線でしょう。というか特許云々は置いておいて、処理速度の関係からこうするソフトウェアもありますので、お馴染みの手法と言えばそうだと言えますが、既存の特許ロジックが.NETで作られている場合に、C++やCにポーティングする工数を考えるとこれは次善策でしょう。</p><p><strong>3.</strong> 今回の本命です。というかここに来るまでが長い。変数名等の難読化やリテラル文字列の暗号化など様々な機能を提供してくれます。が、ツールのコストは無料のものから数十万円と開きがあります。予算や顧客からの要求に応じて検討しましょう。</p><h1 id="Introduce"><a href="#Introduce" class="headerlink" title="Introduce"></a>Introduce</h1><p>現在、難読化機能を提供しているツールは調べた限り以下になります。<br><strong>無償</strong></p><ul><li><a href="http://uwa.potetihouse.com/soft/nandoku.html">NanDoKu</a> -&gt; 日本製</li><li><a href="http://www.foss.kharkov.ua/g1/projects/eazfuscator/dotnet/Default.aspx">Eazfuscator.NET</a></li><li><a href="http://ntcore.com/phoenix.php">Phoenix Protector</a></li><li><a href="http://code.google.com/p/obfuscar/">obfuscar</a></li><li><a href="http://sharpobfuscator.codeplex.com/">SharpObfuscator</a> <strong>有償</strong></li><li><a href="http://leapspec.com/exob/">Express Obfuscator</a> -&gt; 日本製</li><li><a href="http://babelfor.net/">Babel.NET</a> -&gt; I/Fが秀逸</li><li><a href="http://codefort.org/">CodeFort</a> -&gt; I/Fが秀逸</li><li><a href="http://www.preemptive.com/">Dotfuscator</a> -&gt; 無償版ありの業界標準？</li><li><a href="http://www.red-gate.com/products/dotnet-development/smartassembly/">SmartAssembly</a> -&gt; .NET Reflectorの開発元</li><li><a href="http://www.9rays.net/Category/55-spicesnet-obfuscator.aspx">Spices .Net Obfuscator</a></li><li><a href="http://www.deepseaobfuscator.com/">DeepSea Obfuscator</a></li><li><a href="http://www.secureteam.net/Obfuscator.aspx">CliSecure .NET obfuscator</a></li><li><a href="http://www.eziriz.com/dotnet_reactor.htm">.NET Reactor</a></li><li><a href="http://www.ssware.com/cryptoobfuscator/obfuscator-net.htm">Crypto Obfuscator For .Net</a></li><li><a href="http://www.remotesoft.com/salamander/protector.html">Salamander .NET protector</a></li><li><a href="http://www.rustemsoft.com/obfuscator_net.asp">Skater .NET Obfuscator</a></li><li><a href="http://www.cantelmosoftware.com/eng/obfuscator.html">Goliath .NET Obfuscator</a></li><li><a href="http://www.wiseowl.com/products/Products.aspx">Demeanor for.NET</a></li><li><a href="http://www.lesser-software.com/en/content/products/LSW%20DotNet-Tools/LSW_DotNet_IL-Obfuscator.htm">LSW IL-Obfuscator</a></li></ul><p>この中から、Webサイトの印象や評判やI/Fなどから選ぶと</p><ol><li><a href="http://www.foss.kharkov.ua/g1/projects/eazfuscator/dotnet/Default.aspx">Eazfuscator.NET</a></li><li><a href="http://leapspec.com/exob/">Express Obfuscator</a></li><li><a href="http://uwa.potetihouse.com/soft/nandoku.html">NanDoKu</a></li><li><a href="http://babelfor.net/">Babel.NET</a></li><li><a href="http://codefort.org/">CodeFort</a></li><li><a href="http://www.9rays.net/Category/55-spicesnet-obfuscator.aspx">Spices .Net Obfuscator</a></li><li><a href="http://www.red-gate.com/products/dotnet-development/smartassembly/">SmartAssembly</a></li><li><a href="http://www.preemptive.com/">Dotfuscator</a></li></ol><p>というのが個人的な順位付けになります。予算があるなら、Dotfuscatorとか選ぶんでしょうけど…</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>というわけで、次回は<strong>個人的ランキング1位</strong>に輝いた <strong>Eazfuscator.NET</strong> を使って難読化を行っていきたいと思います。<br>Web上でも利用しているというか使い方を説明している方が、<a href="http://uroboros-xna.blogspot.jp/2011/10/xna.html">UROBOROS XNA様</a>くらいしかいなかったので、私が人柱有意義な情報提供を行える人物になろうと思います。</p><p>あ、他のソフトについては未定です。<strong>SmartAssembly</strong>の使用レポをしろ!等という意見は受け付けません(お財布の暖かさ的な理由で)</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> C# </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> 難読化 </category>
          
          <category> .NETで難読化を試してみる </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ReSharper 6.0 C# Edition Personal License 購入したよ(^q^)</title>
      <link href="2012/05/13/206/"/>
      <url>2012/05/13/206/</url>
      
        <content type="html"><![CDATA[<p>149ドルだからだいたい12,000円。</p><p>体験版使っていて、それが期限切れ。<br>で、インストール前の状態に戻って。</p><p>何か、物足りない。って感じになってついポチッとやってしまった。<br>反省している。でも後悔してない。</p><p>使い倒すぜ。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> ソフトウェア紹介 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでコード メトリックスを試してみる 最終回</title>
      <link href="2012/05/12/194/"/>
      <url>2012/05/12/194/</url>
      
        <content type="html"><![CDATA[<p>いよいよ? 長かった「.NETで○○○を試してみる」シリーズ第1弾「.NETでコード メトリックスを試してみる」も最終回。<br>感動の、涙なしには語れない <del>(あまりの内容の薄さに哀れ過ぎて的な意味で)です。</del></p><p><a href="taktak.jp/2012/05/12/net%E3%81%A7%E3%82%B3%E3%83%BC%E3%83%89-%E3%83%A1%E3%83%88%E3%83%AA%E3%83%83%E3%82%AF%E3%82%B9%E3%82%92%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B-%E7%AC%AC7%E5%9B%9E/">前回</a>は、<strong>クラス結合度</strong> について説明をしました。</p><p>今回も、個々のメトリックス値がどのように変化していくのか、をテーマに <strong>コード行</strong> について説明します。</p><p>さぁキビキビいきませう。</p><a id="more"></a><h1 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h1><p>最後のおさらいですが、コード行はMSDNの<a href="http://msdn.microsoft.com/ja-jp/library/bb385914.aspx">コード メトリックス値</a>というページでの説明によると、</p><blockquote><p><strong>コード行</strong> - コード内の行の概数を示します。<br>この数は IL コードに基づいているため、ソース コード ファイル内の正確な行数ではありません。<br>数が非常に大きい場合、型またはメソッドでの処理が多すぎるため、分割が必要であることを示すことがあります。<br>また、型やメソッドの保守が困難なことを示す場合もあります。</p></blockquote><p>と定義されています。</p><p>今までで一番難しそうです(ネタの膨らませ方な意味で)</p><p>今回も簡単にソースコードを実査に観察して、<strong>コード行</strong>が変化する様子をソースコードを用いて観察してみましょう。</p><h1 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h1><p>今回のサンプルソースは下記です。<br>最後くらい真面目にやります。ええ。</p><script src="https://gist.github.com/takuya-takeuchi/28668c064b9903d08196555d31cd649b.js"></script><p>for,foreach,LINQ毎に、ShortとLongを用意しました。ShortとLongの際は、{,}で改行、空行を含むか否かです。<br>これを <strong>Metrics.exe</strong> で計測してみましょう。</p><p>下記はメトリックスの結果です。</p><p>[table id=8 /]</p><p>結果を見ると、配列の宣言は <strong>1 行</strong> として計算されています。<br>for文もforeach文も改行すれば、適切に行数をカウントしているようです。<br>{,},空行はカウントされていません。</p><p>おもしろいのは、<strong>LINQ</strong> です。<strong>System.Array.ForEach</strong> です。改行しようがしまいが <strong>2行</strong> としてカウントされています。</p><p>ここまで来て「おかしいのでは？」と思った方。正しいです。<br>そう。一部誤差はあれど、あまりにもソースコードに忠実なカウントになっています。</p><p>思い出してください。コード行の定義を。<strong>この数は IL コードに基づいているため、ソース コード ファイル内の正確な行数ではありません。</strong> というのを。</p><h1 id="The-truth"><a href="#The-truth" class="headerlink" title="The truth"></a>The truth</h1><p>単純というか、説明不足というか。いや私のせいなんですが。</p><p>実はコード メトリックスの結果はある種の補正がかかっています。<br>何のことはありません。<strong>Metrics.exe</strong> は解析の時に、解析対象のアセンブリと同一ディレクトリに存在している <strong>pdb (プログラムデータベースファイル)</strong> を参照していたのです。</p><p>というわけで、その補正を外して真?の結果を見せましょう。<br>先の解析を行った <strong>CodeMetricsTest.exe</strong> と同一のディレクトリに存在している <strong>CodeMetricsTest.pdb</strong> を削除して、再度解析します。</p><p><a href="../../../../public/2012/05/CodeMetrics.png"><img src="../../../../public/2012/05/CodeMetrics-300x218.png" title="CodeMetrics"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">warning : CA0068 : Debug information could not be found for target assembly &#39;Cod</span><br><span class="line">eMetricsTest.exe&#39;. For best analysis results, include the .pdb file with debug i</span><br><span class="line">nformation for &#39;CodeMetricsTest.exe&#39; in the same directory as the target assembl</span><br><span class="line">y.</span><br><span class="line">Writing report to CodeMetricsTest.xml...</span><br><span class="line">Done.</span><br></pre></td></tr></table></figure><p>警告が出ています。</p><p><strong>「解析対象のアセンブリ CodeMetricsTest.exe のデバッグ情報がないよ。最適な解析結果を出すためには、対象のアセンブリと同じディレクトリに CodeMetricsTest.exe のデバッグ情報を含む .pdb ファイルを含めててくれよ。」(意訳)</strong> </p><p>もそんなの関係ねぇ。<br>その結果が下記です。</p><p>[table id=9 /]</p><p>クラス結合度やサイクロマティック複雑度は変化していませんが、コード行が増加したため、保守容易性指数が低下しています。<br>正確な情報を必要とする場合は、PDBファイルは必須と言わざるを得ません。<br>また、デバッグ情報がないため、ShortとLongの結果が完全に一致しています。これこそ、<strong>「この数は IL コードに基づいているため、ソース コード ファイル内の正確な行数ではありません。」</strong>の証明に他なりません。<br>さらには、LinqShort、LinqLongのコード行が他より良くなっています。<br>が、これはまやかしです。</p><p><a href="../../../../public/2012/05/CodeMetrics2.png"><img src="../../../../public/2012/05/CodeMetrics2-300x184.png" title="CodeMetrics2"></a></p><p>上記の画像の左側に、**<LinqLong>b__2、<LinqShort>b__0** というメソッドがコンパイラによって追加されています。<br>右側は <strong><LinqLong>b__2</strong> の中身です。<br>単純に関数化してLinqShort、LinqLongのコード行が減ったように見えているだけです。</p><p>ただ、ILを見ても、コード行数の算出方法がわかりません。<br>どうやっているのでしょうか？これ。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>まとめると、<strong>コード行</strong> は、</p><ul><li>{,}や空行はカウントの対象外。</li><li>実行可能行のみカウントされるから、同じ内容でも、改行しないソースコードはコード行が低く見えてしまう。</li><li>正確なコード行を計算するなら pdb (プログラムデータベースファイル) は必須。でないと、コード行が大幅に増加してしまう可能性がある。でも、pdb があっても正確な数値は出ない。</li></ul><p>コード行を低下させるには、似たコードの関数化やロジックの見直しという地道な作業しか無いでしょう。<br>確かに改行を無くせばコード行は減りますが、それは本質では無いでしょう。<br>誤魔化した結果を用いたソフトウェア工学に何の意味があるのでしょう？そんなのは粉飾決算と同じです。</p><p>例の如く、最後まで、反省も無く、長くなってしまいましたが、コード行がどういうものかわかりました。<br>全部で8回に渡った <strong>「.NETでコード メトリックスを試してみる」</strong> でした。</p><p>難しい数式よりも実際のソースコードから結果の変化を見てもらうように努めましたがどうだったでしょうか？ もう少し突っ込んだ内容のが良かったかなぁ、と個人的に思いましたが、そこまでスキルがあるわけでは無いので涙を飲むことになりましたが…</p><p>次回は、別の題材で <strong>「.NETで○○○を試してみる」</strong> を行います。</p><p>ふふふ。実はネタはもうできているのです。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> C# </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> ソフトウェア工学 </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> .NETでコード メトリックスを試してみる </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでコード メトリックスを試してみる 第7回</title>
      <link href="2012/05/12/160/"/>
      <url>2012/05/12/160/</url>
      
        <content type="html"><![CDATA[<p>そろそろ、冒頭の挨拶がコピペっぽくなってきましたが、皆さんいかがお過ごしでしょうか？ </p><p><a href="taktak.jp/2012/05/12/net%E3%81%A7%E3%82%B3%E3%83%BC%E3%83%89-%E3%83%A1%E3%83%88%E3%83%AA%E3%83%83%E3%82%AF%E3%82%B9%E3%82%92%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B-%E7%AC%AC6%E5%9B%9E/">前回</a>は、<strong>継承の深さ</strong> について説明をしました。</p><p>残すところ、このシリーズも今回を含め2回。<br>今回も、個々のメトリックス値がどのように変化していくのか、をテーマに <strong>クラス結合度</strong> について説明します。</p><a id="more"></a><h1 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h1><p>おさらいですが、クラス結合度はMSDNの<a href="http://msdn.microsoft.com/ja-jp/library/bb385914.aspx">コード メトリックス値</a>というページでの説明によると、</p><blockquote><p><strong>クラス結合度</strong> - パラメーター、ローカル変数、戻り値の型、メソッド呼び出し、ジェネリックまたはテンプレートのインスタンス化、基本クラス、インターフェイス実装、外部の型で定義されたフィールド、および属性による装飾を使用して、一意のクラスへの結合度を測定します。 適切なソフトウェア デザインでは、型およびメソッドの連携は高まり、結合性は低くなります。 結合性が高いということは、他の型への依存関係が多いために再利用や保守が困難なデザインであることを示します。</p></blockquote><p>と定義されています。</p><p>ちょっと今回は難しそうです <del>(サンプルコードの準備的な意味で)</del></p><p>今回も簡単にソースコードを実査に観察して、<strong>クラス結合度</strong>が変化する様子をソースコードを用いて観察してみましょう。</p><h1 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h1><p>今回のサンプルソースは下記です。<br><strong>今回も</strong>管理人の趣味が多分に発揮されていますが無視してください。</p><script src="https://gist.github.com/takuya-takeuchi/2059d8453fd495a927d2d067be714a69.js"></script><p>これを <strong>Metrics.exe</strong> で計測してみましょう。</p><p>下記はメトリックスの結果のうち、<strong>Family クラス</strong>、<strong>FireVampire クラス</strong>に着目した表です。</p><p>[table id=6 /]</p><p><strong>Family クラス</strong> は、メンバに何もありません。<br>しかし、継承の深さが 1 なのは前回説明したとおりですが、クラス結合度は <strong>0</strong> です。<br>これは何を意味しているのでしょうか？ この結果についての解が<a href="http://msdn.microsoft.com/ja-jp/library/bb385914%28v=vs.90%29.aspx">こちら</a>に記述されています。</p><blockquote><p><strong>クラス結合度</strong> - パラメータ、ローカル変数、戻り値、メソッド呼び出し、ジェネリックまたはテンプレートのインスタンス化、基本クラス、インターフェイス実装、外部の型で定義されたフィールド、および属性による装飾を使用して、一意のクラスへの結合度を測定します。<strong>計算では、int32、string、object など、プリミティブ型や組み込み型は除外します。</strong> 適切なソフトウェア デザインでは、型およびメソッドの連携は高まり、結合性は低くなります。結合性が高いということは、他の型への依存関係が多いために再利用や保守が困難なデザインであることを示します。</p></blockquote><p>つまり、全てのクラスの継承元である <strong>Object クラス</strong> は結合度の計算から除外するわけですね。<br>他にも、プリミティブ型や組み込み型が除外されるとありますが、これらは<a href="http://msdn.microsoft.com/ja-jp/library/ms228360%28v=vs.80%29.aspx">こちらのページ</a>の<strong>組み込みのデータ型</strong>の章で確認できます。</p><p><strong>FireVampire クラス</strong> も、メンバに何もありませんが、クラス結合度が <strong>1</strong> なのは、<strong>Family クラス</strong> を継承しているから <strong>+1</strong> なのでしょう。</p><p>次は、<strong>Cthugha クラス</strong>、<strong>Nyarlathotep クラス</strong>に着目した表です。</p><p>[table id=7 /]</p><p><strong>Nyarlathotep クラス</strong> は前述の <strong>FireVampire クラス</strong> と同じです。<br>プロパティの String クラス、継承元の Object クラスは計算から除外されており、計算対象は継承元の <strong>GreatOldOne クラス</strong> のみが計算対象です。</p><p>問題は、<strong>Cthugha クラス</strong> です。<br>メンバに <strong>FireVampire クラス</strong> の配列を保持しています。<br>ここで1つ疑問が浮かびます。</p><p>クラス結合度の計算対象には、Object クラスを除外した継承元のクラスは計算対象になるのは前述の通りです。<br>では、この継承元のクラス、というのは、<strong>パラメータ、ローカル変数、戻り値、メソッド呼び出し、ジェネリックまたはテンプレートのインスタンス化、インターフェイス実装、外部の型で定義されたフィールド、および属性による装飾</strong> にも適用されるのでしょうか？ 結論から言えば答えは <strong>No</strong> です。</p><p>なぜなら、<strong>Cthugha クラス</strong> のクラス結合度は、継承元の <strong>GreatOldOne クラス</strong>、メンバに存在する配列の宣言型である <strong>FireVampire クラス</strong> の <strong>1 + 1 = 2</strong> というのがその答えです。<br>つまり、その継承元である <strong>Family クラス</strong> は計算に入っていないことになります。</p><p>その証拠に次の2つのソースではクラス結合度が異なります。</p><script src="https://gist.github.com/takuya-takeuchi/60c56931a518feb283dcfd658b6e9cbc.js"></script><script src="https://gist.github.com/takuya-takeuchi/ceacebc7c123658b5750020b2a2ceec4.js"></script><p>表は省略しますが、<strong>Cthugha クラス</strong> のクラス結合度は<strong>前者が 1、後者は 2</strong> となります。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>まとめると、<strong>クラス結合度</strong> は、</p><ul><li>プリミティブ型や組み込み型である <strong>Byte,SByte,Int32,UInt32,Int16,UInt16,Int64,UInt64,Single,Double,Char,Boolean,Object,String,Decimal</strong> はクラス結合度の計算から除外される。</li><li>クラスの継承がクラス結合度の計算に影響するのは、クラスの定義の際のみ。ローカル変数やメンバ等で使用した型の継承元まではクラス結合度にカウントされない。</li><li>クラスの継承で、カウントされるのは直接の親となるクラスのみ。</li></ul><p>クラス結合度を低下させるには、ポリモーフィズムを活用して、直接依存するクラスを減らす方法が挙げられます。</p><p>また、凝集度を高めることは結合度の低下にも繋がりやすいです。</p><p>今回も長くなりましたが、クラス結合度がどういうものかわかりました。<br>次回は <strong>コード行</strong> について、ソースコードを交えながら説明します。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> C# </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> ソフトウェア工学 </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> .NETでコード メトリックスを試してみる </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BitNami Redmine Stack のアップデート 1.3.1-1 to 1.4.1.0</title>
      <link href="2012/05/12/162/"/>
      <url>2012/05/12/162/</url>
      
        <content type="html"><![CDATA[<p>最近、仕事が忙しくて、更新もろくにできない状態でしたが、ようやく時間がとれたので予てからの課題を解決することに。<br>Windows 7 にインストールした <strong>BitNami Redmine Stack 1.3.1-1</strong> を <strong>1.4.1.0</strong> に更新することにしたので備忘録。</p><a id="more"></a><p>BitNami Redmine Stackの公式サイトの<a href="http://wiki.bitnami.org/Applications/BitNami_Redmine#How_to_upgrade_Redmine.3f">こちら</a>にアップデートの手法が書かれているが、これは無視。<br>というのも、この手法で行っても更新がうまくできなかったので…<br>今回の方法としては、**</p><ol><li>必要なファイルをバックアップ</li><li>既存のBitNami Redmine Stackを一度アンインストール</li><li>新しいBitNami Redmine Stackをインストール</li><li>バックアップから復元</li></ol><p>**というのが大まかな流れ。<br>では早速。</p><p>(1) 万が一に備えて、インストールした <strong>BitNami Redmine Stack</strong> をフォルダごとコピー。通常なら <strong>C:\Program Files\BitNami Redmine Stack</strong> のはず。</p><p>(2) <strong>Redmine</strong> のデータベース、プラグイン、テーマ、添付ファイルをバックアップ。下記はサンプルのバッチ。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> *********************************************************</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span> BitNami Redmine Stack のデータベースをバックアップします。</span><br><span class="line"><span class="built_in">echo</span> MySqlが停止状態ではないか確認してください。</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span> *********************************************************</span><br><span class="line"></span><br><span class="line">@<span class="built_in">set</span> BITNAMI=C:\Program Files\BitNami Redmine Stack</span><br><span class="line">@<span class="built_in">set</span> BACKUPDIR=E:\Backup\Redmine</span><br><span class="line">@<span class="built_in">set</span> DATETIME=<span class="variable">%DATE:/=%</span></span><br><span class="line">@<span class="built_in">set</span> ATTACHMENTS=<span class="variable">%BACKUPDIR%</span>\<span class="variable">%DATETIME%</span>\files</span><br><span class="line">@<span class="built_in">set</span> PLUGINS=<span class="variable">%BACKUPDIR%</span>\<span class="variable">%DATETIME%</span>\plugins</span><br><span class="line">@<span class="built_in">set</span> THEMES=<span class="variable">%BACKUPDIR%</span>\<span class="variable">%DATETIME%</span>\themes</span><br><span class="line"></span><br><span class="line">@<span class="built_in">mkdir</span> &quot;<span class="variable">%ATTACHMENTS%</span>&quot;</span><br><span class="line">@<span class="built_in">mkdir</span> &quot;<span class="variable">%PLUGINS%</span>&quot;</span><br><span class="line">@<span class="built_in">mkdir</span> &quot;<span class="variable">%THEMES%</span>&quot;</span><br><span class="line"></span><br><span class="line">@&quot;<span class="variable">%BITNAMI%</span>\mysql\bin\mysqldump.exe&quot; --default-character-<span class="built_in">set</span>=utf8 -u hoge --password=hogehoge --port=???? --database bitnami_redmine &gt; &quot;<span class="variable">%BACKUPDIR%</span>\<span class="variable">%DATETIME%</span>\dump_utf8.sql&quot;</span><br><span class="line">@<span class="built_in">xcopy</span> &quot;<span class="variable">%BITNAMI%</span>\apps\redmine\files&quot; &quot;<span class="variable">%ATTACHMENTS%</span>&quot; /y /s /q</span><br><span class="line">@<span class="built_in">xcopy</span> &quot;<span class="variable">%BITNAMI%</span>\apps\redmine\vendor\plugins&quot; &quot;<span class="variable">%PLUGINS%</span>&quot; /y /s /q</span><br><span class="line">@<span class="built_in">xcopy</span> &quot;<span class="variable">%BITNAMI%</span>\apps\redmine\public\themes&quot; &quot;<span class="variable">%THEMES%</span>&quot; /y /s /q</span><br><span class="line">@<span class="built_in">xcopy</span> &quot;Redmine <span class="built_in">Restore</span>.bat&quot; &quot;<span class="variable">%BACKUPDIR%</span>\<span class="variable">%DATETIME%</span>&quot; /y /s /q</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span> 完了しました。</span><br><span class="line"><span class="built_in">pause</span> &gt; <span class="built_in">nul</span></span><br></pre></td></tr></table></figure><p>(3) コントロールパネルから <strong>BitNami Redmine Stack</strong> をアンインストール。何故か、<strong>Norton Internet Security Online</strong> がアンインストールの邪魔をするので、一時的に <strong>Auto Protect</strong> を無効にして沈黙させてから実行。</p><p>(4) 新しい <strong>BitNami Redmine Stack</strong> をインストール。インストールは英語で行う。というのも、日本語でインストールを行うと、下記のように一部記述が欠けており、一抹の不安を覚えてしまうので、念のため。</p><p><a href="../../../../public/2012/05/redmine_install0.png"><img src="../../../../public/2012/05/redmine_install0-300x250.png" title="redmine_install(0)"></a></p><p><a href="../../../../public/2012/05/redmine_install1.png"><img src="../../../../public/2012/05/redmine_install1-300x250.png" title="redmine_install(1)"></a></p><p>(5) インストールが完了したので、一度ログインしておく(これは必須ではないかも…)</p><p>(6) バックアップしたデータベースを復元。下記はサンプルのバッチだが、バックアップ時とはユーザ名、パスワードが異なるので、適宜確認。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> *********************************************************</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span> BitNami Redmine Stack のデータベースをリストアします。</span><br><span class="line"><span class="built_in">echo</span> MySqlが停止状態ではないか確認してください。</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span> *********************************************************</span><br><span class="line"></span><br><span class="line">@<span class="built_in">set</span> BITNAMI=C:\Program Files\BitNami Redmine Stack</span><br><span class="line">@<span class="built_in">set</span> ATTACHMENTS=files</span><br><span class="line"></span><br><span class="line">@&quot;<span class="variable">%BITNAMI%</span>\mysql\bin\mysql&quot; -u hoge --password=hoge --database bitnami_redmine &lt; dump_utf8.sql</span><br><span class="line">@<span class="built_in">xcopy</span> &quot;<span class="variable">%ATTACHMENTS%</span>&quot; &quot;<span class="variable">%BITNAMI%</span>\apps\redmine\files&quot; /y /s /q</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span> 完了しました。</span><br><span class="line"><span class="built_in">pause</span> &gt; <span class="built_in">nul</span></span><br></pre></td></tr></table></figure><p>(7) 不足しているフィールドがデータベースにあるので、下記のsqlを発行。前項のユーザ名とパスワードでmysqlへログインできるはず。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> custom_fields <span class="keyword">add</span> multiple <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> repositories <span class="keyword">add</span> identifier <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">default</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> repositories <span class="keyword">add</span> is_default <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="string">&#x27;0&#x27;</span>;</span><br></pre></td></tr></table></figure><p>恐らく、<strong>multple</strong> は、<strong>Redmine 1.4</strong>より対応になったリポジトリの複数管理に関するものだと思われる…他は知らない。</p><p>(8) 一度、<strong>Manager tool</strong> から全てのサービスを停止。</p><p>(9) <strong>C:\Program Files\BitNami Redmine Stack\apps\redmine\config\environments\production.rb</strong> に下記の記述を追記し、エラー、警告のみがログに記録されるように修正。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ログの出力を制限</span></span><br><span class="line">config.logger = Logger.new(config.log_path)</span><br><span class="line">config.logger.level = Logger::WARN</span><br></pre></td></tr></table></figure><p>(10) <strong>C:\Program Files\BitNami Redmine Stack\apps\redmine\log</strong> 配下のファイルを削除。</p><p>(11) <strong>Manager tool</strong> から全てのサービスを開始。</p><p>(12) Redmineにログインし、一通り、確認してエラーがないことを確認。</p><p>(13) バックアップで退避した、プラグイン、テーマファイルを復元。既に入っているプラグインやテーマファイルを上書きしないように注意。</p><p>(14) 必要に応じてデータベースの再構築やサービスの再起動を実施。プラグインのインストール時に、</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Please install RDoc <span class="number">2</span>.<span class="number">4</span>.<span class="number">2</span>+ to generate documentation.</span><br></pre></td></tr></table></figure><p>なるメッセージがコマンドプロンプトに表示されるが無視。どうも警告らしいが…</p><p>(15) プラグインの動作を確認。</p><p>(16) 終了</p><p>以上で終了です。<br><strong>BitNami Redmine Stack</strong> は環境の構築は非常に簡単なのですが、更新が面倒極まりありません。<br>そもそも、公式サイトで紹介されているアップデートの手段も人力。<br>アップデートのためのソフトウェアを提供していただきたいものです。</p><p>私のように、<strong>BitNami Redmine Stack</strong> をインストールしたけど、アップデートできないよー(&gt;&lt;)、と困っている方がいると思いますので、こうして記事にしましたが如何でしたでしょうか？</p>]]></content>
      
      
      <categories>
          
          <category> プロジェクト管理 </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> Redmine </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでコード メトリックスを試してみる 第6回</title>
      <link href="2012/05/02/152/"/>
      <url>2012/05/02/152/</url>
      
        <content type="html"><![CDATA[<p><a href="taktak.jp/2012/05/12/net%E3%81%A7%E3%82%B3%E3%83%BC%E3%83%89-%E3%83%A1%E3%83%88%E3%83%AA%E3%83%83%E3%82%AF%E3%82%B9%E3%82%92%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B-%E7%AC%AC5%E5%9B%9E/">前回</a>は、<strong>サイクロマティック複雑度</strong> について説明をしました。</p><p>今回も、個々のメトリックス値がどのように変化していくのか、をテーマに <strong>継承の深さ</strong> について説明します。</p><a id="more"></a><h1 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h1><p>おさらいですが、継承の深さはMSDNの<a href="http://msdn.microsoft.com/ja-jp/library/bb385914.aspx">コード メトリックス値</a>というページでの説明によると、</p><blockquote><p><strong>継承の深さ</strong> - クラス階層構造のルートまでのクラス定義の数を示します。<br>階層構造が深くなるにつれて、特定のメソッドおよびフィールドが定義または再定義されている場所を把握することがより困難になる場合があります。</p></blockquote><p>と定義されています。</p><p>では、ありきたりな展開ではありますが…. 今回も簡単にソースコードを実査に観察して、<strong>継承の深さ</strong>が変化する様子をソースコードを用いて観察してみましょう。</p><h1 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h1><p>今回のサンプルソースは下記です。<br>管理人の趣味が多分に発揮されていますが無視してください。</p><script src="https://gist.github.com/takuya-takeuchi/321f03877da79f04919f79d58ebeade0.js"></script><p>今回はいつにも増して残念極まりないソースですが、これを <strong>Metrics.exe</strong> で計測してみましょう。</p><p>下記はメトリックスの結果のうち、クラスに着目した表です。</p><p>[table id=4 /]</p><p>次は、メトリックスの結果のうち、インターフェイスに着目した表です。</p><p>[table id=5 /]</p><p>そして、最後は、上記サンプルのクラスダイアグラム図になります。<br>図中の <strong>DI</strong> は　<strong>Depth of Inheritance (DI)</strong> の略です。</p><p><a href="../../../../public/2012/05/ClassDiagram.png"><img src="../../../../public/2012/05/ClassDiagram-300x180.png" title="ClassDiagram"></a></p><p> 前述の定義通りメトリックスの結果から、継承の深さは、クラス階層構造のルートである <strong>Object クラス</strong> までのクラスの数であることを証明してくれました。</p><p>ちなみに、Metrics.exeで <strong>mscorlib.dll</strong> を計測し、<strong>Object クラス</strong> のメトリックスを確認すると、継承の深さは <strong>0</strong> でした。</p><p>また、もうお気づきでしょうが、継承の深さの計算に、<strong>インターフェイスは含まれていません。</strong> インターフェイスはクラスに<strong>実装</strong>するものですし。継承とは言わないのでしょう。<br>でも、インターフェイスAを継承したインターフェイスBという実装もあるのですが、これも継承の深さにカウントされません。<br>前述の <strong>「クラス階層構造のルートまでのクラス定義の数」</strong> という定義をそのまま素直に受け止めればクラスではないインターフェイスは無関係なのでしょう。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>まとめると、<strong>継承の深さ</strong>は、</p><ul><li>継承を一切していないクラスを定義しても、<strong>1</strong> としてカウントされる。</li><li>インターフェイスを実装しても<strong>継承の深さに影響しない。</strong></li><li>インターフェイス自身が、別のインターフェイスを継承していたとしても継承の深さは常に <strong>0</strong> である。</li></ul><p>継承の深さを低下させるには、全体的な設計の見直しが挙げられます(というかこれ以外あります？) ただ、継承の深さにそこまで過敏になる必要はないのでは？と個人的には思います。<br>例えば、<strong>System.Windows.Control クラス</strong> を継承してカスタムコントロールを作成した時点で、継承の深さは 4 になってしまいます。<br>ともすれば、既存のクラスを再利用しようとすると、継承の深さは避けては通れない問題ではないのかなぁ、と思ってしまいます。</p><p>今回も長くなりましたが、継承の深さがどういうものかわかりました。<br>次回は <strong>クラス結合度</strong> について、ソースコードを交えながら説明します。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> C# </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> ソフトウェア工学 </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> .NETでコード メトリックスを試してみる </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでコード メトリックスを試してみる 第5回</title>
      <link href="2012/04/30/93/"/>
      <url>2012/04/30/93/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2012/04/29/net%e3%81%a7%e3%82%b3%e3%83%bc%e3%83%89-%e3%83%a1%e3%83%88%e3%83%aa%e3%83%83%e3%82%af%e3%82%b9%e3%82%92%e8%a9%a6%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b-%e7%ac%ac4%e5%9b%9e/">前回</a>は、<strong>保守容易性指数</strong> について説明をしました。</p><p>今回も、個々のメトリックス値がどのように変化していくのか、をテーマに <strong>サイクロマティック複雑度</strong> について説明します。</p><a id="more"></a><h1 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h1><p>おさらいですが、サイクロマティック複雑度はMSDNの<a href="http://msdn.microsoft.com/ja-jp/library/bb385914.aspx">コード メトリックス値</a>というページでの説明によると、</p><blockquote><p><strong>サイクロマティック複雑度</strong> - コードの構造上の複雑さを測定します。<br>これは、プログラムのフローにある、異なるコード パスの数を計算することで作成されます。<br>複雑な制御フローが含まれるプログラムでは、十分なコード カバレッジを実現するためにより多くのテストが必要となり、保守性が低下します。</p></blockquote><p>と定義されています。<br>制御フローとは、<strong>if</strong>、<strong>switch</strong>、<strong>do</strong>、<strong>while</strong>、<strong>foreach</strong>、<strong>for</strong> の6つのステートメントを指します。<br>サイクロマティック複雑度は数値が<strong>低い</strong>程良好であることを示します。<br>また、サイクロマティック複雑度の増加は、保守容易性指数が低下と、テストケースの増加による作業工数の増加を招きますね。</p><p>では、サイクロマティック複雑度はどういう風に算出されているのでしょうか？ 今回も簡単ではありますが、<strong>サイクロマティック複雑度</strong>が変化する様子をソースコードを用いて観察してみましょう。</p><h1 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h1><p>今回はステートメント毎に6つのメソッドに分離しました。</p><script src="https://gist.github.com/takuya-takeuchi/712fe00bdcfe758ad002e90ee4c0b08b.js"></script><p><strong>(2012.05.01 23:49 上記ソースが一部文字化けしていたのを修正しました。)</strong></p><p>今回もサンプルとしては良いかもしれませんが…的なソースですが、これを <strong>Metrics.exe</strong> で計測してみましょう。<br>その結果が下記になります。</p><p>[table id=3 /]</p><p>分岐ステートメントがあると <strong>サイクロマティック複雑度</strong> が1増加するのではなく、そこに含まれる条件式の個数分だけ増加するようです。<br>たとえば、Case6メソッドの2つめのfor文には2つの条件式があるので、最初のfor文と併せて、1+1+2=4とサイクロマティック複雑度が計算されています。</p><p>では、条件式が含まれれば、サイクロマティック複雑度が増加するかというとそうではないようです。</p><script src="https://gist.github.com/takuya-takeuchi/9366e53276ef7ffd12c0f75e30bee56f.js"></script><p>上記のソースコード中のCase1メソッドは、foreach以外の全ての分岐ステートメントを含んでいますが <strong>Metrics.exe</strong> で計測してみても、<strong>サイクロマティック複雑度は1のまま</strong>です。<br>つまり、「分岐が発生する」とサイクロマティック複雑度が1増加するため、分岐が発生し得ない、つまり必ず通る、通らないような条件式はカウントされません。<br>(foreach文は、要素列挙の終了条件がコレクション内部に隠蔽されているため、foraech文があるだけで+1されてしまうようです)</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>まとめると、<strong>サイクロマティック複雑度</strong>は、</p><ul><li>最も良好な値(分岐がない場合)は <strong>1</strong> であり、サイクロマティック複雑度の数値に上限はない。</li><li>分岐ステートメントに含まれる条件式が1つ増える毎に <strong>+1</strong> される。逆に分岐ステートメントがあっても、<strong>条件式が存在しない、または常に条件が同じであるような場合</strong>は +1 されない。</li><li><strong>foreach文は存在するだけで常に +1 される</strong>。なぜならforeach文の内部に入るかどうかは、列挙されるコレクションの実装に依存するため、それ自体が条件式になってしまうから。</li></ul><p>サイクロマティック複雑度を低下させるには、条件式を見直したり、条件式をメソッドとして抽出して、1つのメソッドに分岐を偏らせないようにする、等の方法が考えられます。</p><p>今回も長くなりましたが、サイクロマティック複雑度がどういうものかわかりました。<br>というわけで次回は <strong>継承の深さ</strong> について、ソースコードを交えながら説明します。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> C# </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> ソフトウェア工学 </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> .NETでコード メトリックスを試してみる </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>iKnow! 進捗報告 [4/22-4/29]</title>
      <link href="2012/04/30/91/"/>
      <url>2012/04/30/91/</url>
      
        <content type="html"><![CDATA[<p>今週は、 目標 : 05時間00分 実績 : 01時間42分 合計 : 07時間02分</p><h1 id="反省点"><a href="#反省点" class="headerlink" title="反省点"></a>反省点</h1><p>全然できなかったorz GW中に挽回しないと。モチベーションの維持も難しい…</p>]]></content>
      
      
      <categories>
          
          <category> iKnow! </category>
          
          <category> 英語 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでコード メトリックスを試してみる 第4回</title>
      <link href="2012/04/29/79/"/>
      <url>2012/04/29/79/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2012/04/28/net%E3%81%A7%E3%82%B3%E3%83%BC%E3%83%89-%E3%83%A1%E3%83%88%E3%83%AA%E3%83%83%E3%82%AF%E3%82%B9%E3%82%92%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B-%E7%AC%AC3%E5%9B%9E/">前回</a>は、<strong>Visual Studio Code Metrics PowerTool 10.0</strong> が提供する5つのコードメトリックス値について説明をしました。</p><p>今回は、個々のメトリックス値がどのように変化していくのか、をテーマに <strong>保守容易性指数</strong> について説明します。</p><a id="more"></a><h1 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h1><p>おさらいですが、保守容易性指数はMSDNの<a href="http://msdn.microsoft.com/ja-jp/library/bb385914.aspx">コード メトリックス値</a>というページでの説明によると、</p><blockquote><p><strong>保守容易性指数</strong> – コードの相対的な保守容易性を表す、0 ～ 100 のインデックス値を算出します。<br>値が大きいほど、保守容易性が優れていることを示します。<br>色分けしたコード評価を使用して、コード内の問題部分をすばやく識別することができます。<br>緑色の評価は 20 ～ 100 の範囲にあることを示し、コードの保守容易性が良好であることを示します。<br>黄色の評価は 10 ～ 19 の範囲にあることを示し、コードの保守容易性が中程度であることを示します。<br>赤の評価は 0 ～ 9 の範囲にあることを示し、保守容易性が低いことを示します。</p></blockquote><p>と定義されています。<br>上述の緑、黄、赤というのは、下記の画像(<a href="http://www.microsoft.com/japan/msdn/vstudio/2010/overview/about3.aspx">http://www.microsoft.com/japan/msdn/vstudio/2010/overview/about3.aspx</a>より拝借しております。不味かったら消します。)中の <strong>保守容易性イ…</strong> という列の四角いアイコンを指します。実に直感的です。</p><p><a href="../../../../public/2012/04/CodeMetrix.png"><img src="../../../../public/2012/04/CodeMetrix-300x234.png" title="CodeMetrix"></a></p><p>ところで、保守容易性指数はどういう風に算出されているのでしょうか？ …ありました。探せばあるものです。</p><p><a href="http://blogs.msdn.com/b/codeanalysis/archive/2007/11/20/maintainability-index-range-and-meaning.aspx">Code Analysis Team Blog</a><br>にて記述されていますが、</p><blockquote><p>Maintainability Index = MAX(0,(171 - 5.2 * ln(Halstead Volume) - 0.23 * (Cyclomatic Complexity) - 16.2 * ln(Lines of Code))*100 / 171)</p></blockquote><p>という数式から算出されているそうです。<br>つまり、保守容易性指数は、<strong>サイクロマティック複雑度</strong>と<strong>コード行</strong>と<strong>Halstead Volume</strong>なる指標に基づいた値のようです。</p><p>しかし、ここで突然Halstead Volumeなる値が出てきましたが、これはなんでしょうか？ <a href="http://en.wikipedia.org/wiki/Halstead_complexity_measures">Wikipedia</a>で苦労して見つけましたが、</p><blockquote><p><strong>Halstead complexity measures</strong> Halstead complexity measures are software metrics introduced by Maurice Howard Halstead in 1977[1] as part of his treatise on establishing an empirical science of software development. Halstead makes the observation that metrics of the software should reflect the implementation or expression of algorithms in different languages, but be independent of their execution on a specific platform. These metrics are therefore computed statically from the code. Halstead’s goal was to identify measurable properties of software, and the relations between them. This is similar to the identification of measurable properties of matter (like the volume, mass, and pressure of a gas) and the relationships between them (such as the gas equation). Thus his metrics are actually not just complexity metrics. == Calculation == For a given problem, Let: First we need to compute the following numbers, given the program: $$\eta_1$$ = the number of distinct operators $$\eta_2$$ = the number of distinct operands $$N_1$$ = the total number of operators $$N_2$$ = the total number of operands From these numbers, several measures can be calculated: Program vocabulary: $$\eta = \eta_1 + \eta_2$$ Program length: $$N = N_1 + N_2$$ Calculated program length: $$\hat{N} = \eta_1 \log_2 \eta_1 + \eta_2 \log_2 \eta_2$$ Volume: $$V = N \times \log_2 \eta$$ Difficulty : $$D = { \eta_1 \over 2 } \times { N_2 \over \eta_2 }$$ Effort: $$E = D \times V$$</p></blockquote><p>の、<strong>Volume</strong>がそれに該当するようです(可読性向上のため、数式をLatexで変換して引用しました)。</p><p>けれど、これではまだよくわかりません。<br>そこで簡単ではありますが、<strong>保守容易性指数</strong>が変化する様子をソースコードを用いて観察してみましょう。</p><h1 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h1><p><a href="https://taktak.jp/2012/04/26/42">前々回</a>で用意したサンプルのソースを下記のように改造しました。</p><script src="https://gist.github.com/takuya-takeuchi/5b708f53a179db642608d20f96d6c2bc.js"></script><p>現実的には、絶対にあり得ないコードですが、これを <strong>Metrics.exe</strong> で計測してみましょう。<br>その結果が下記になります。</p><p>[table id=2 /]</p><p><strong>サイクロマティック複雑度</strong>が変化していなくても、ただ<strong>コード行</strong>が増えるだけで、<strong>保守容易性指数</strong> が低下しているのがわかります。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>まとめると、<strong>保守容易性指数</strong>は、</p><ul><li>制御フローの数から算出されるコードの構造上の複雑さを表す<strong>サイクロマティック複雑度</strong></li><li>ILコードに基づいたコードの行数である<strong>コード行</strong></li><li>ソースコード中の演算子と非演算子の種類数、出現回数の総和から算出される<strong>Halstead Volume</strong></li></ul><p>の3つのメトリックス値に基づいていることがわかりました。<br>つまり、ソースコードの行数が長くなると、分岐が増えなくても、比例して演算子と非演算子の出現数が増えるから保守容易性指数も下がる(ソースコードはコンパクトに!!)という訳ですね。</p><p>長くなりましたが、コード行の長さが保守の用意さに結びついている(数値的な意味で)のがわかりました。<br>というわけで次回は <strong>サイクロマティック複雑度</strong> について、ソースコードを交えながら説明します。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> C# </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> ソフトウェア工学 </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> .NETでコード メトリックスを試してみる </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NET Reflector 7 のサポート&amp;アップグレード延長</title>
      <link href="2012/04/28/74/"/>
      <url>2012/04/28/74/</url>
      
        <content type="html"><![CDATA[<p>2日前だけど、こんなメールが来たんだ。</p><a id="more"></a><blockquote><p>Hi We’re getting in touch because we’re celebrating the first year of Reflector 7. To say thanks for your support, we’ve upgraded your license to include an extra year of Support and Upgrades. It’s a free upgrade, so when we release the next major version of Reflector, you’ll get that for free too. You don’t need to do anything to claim the upgrade – it’s already in effect. So if you had Support and Upgrades, you now have an additional year; if you didn’t, you’re entitled to all Reflector upgrades for free, for the next 12 months. We’re currently working on version 8 of Reflector, and version 7.5 is available now. It includes dynamic decompilation in Visual Studio, so you can go to the definition of any code (f12). For more information on the new features in version 7.5, check out our upgrade page: <a href="http://www.reflector.net/entry-upgrade/">http://www.reflector.net/entry-upgrade/</a> Or to find out about our future plans for Reflector, have a look at our Early Access Program: <a href="http://www.reflector.net/eap/">http://www.reflector.net/eap/</a> Thanks, Roger Hart The .NET Reflector Team</p></blockquote><p>要約すると </p><p><code>Reflector 7開発1周年だから連絡するよ。君たちの支援に感謝していること言うために、君たちの持つライセンス -サポートとアップグレード- を 1年間の延長したよ。これは無料だし、だから次のメジャーバージョンアップがただで手に入るさ。 君は何もしなくていい。だって既に反映済みだ。 僕たちはバージョン8の開発に取り組んでいる、そして7.5が今は利用可能だね。Visual Studio上での動的逆コンパイルを含むし、F12でコードの定義に移動できる。 Reflectorの将来の計画について知るには　アーリーアクセスプログラムを見てくれ。</code></p><p>.NET Reflector 7のVSProを持ってるんだけど、これはすごい嬉しい。これからも.NET Reflectorを当ブログは応援していきます(^q^)</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> ソフトウェア紹介 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでコード メトリックスを試してみる 第3回</title>
      <link href="2012/04/28/57/"/>
      <url>2012/04/28/57/</url>
      
        <content type="html"><![CDATA[<p><a href="https://taktak.jp/2012/04/26/42">前回</a>は <strong>Metrics.exe</strong> を使って実際にメトリックスを実施してみました。<br>今回はメトリックスの結果についての解説です。</p><a id="more"></a><h1 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h1><p>生成されたメトリックスの結果は下記のような <strong>XMLファイル</strong> でした。<br>生成元のコードについては、前回の記事を参照してください。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">CodeMetricsReport</span> <span class="attr">Version</span>=<span class="string">&quot;10.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Targets</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Target</span> <span class="attr">Name</span>=<span class="string">&quot;C:\Program Files (x86)\Microsoft Visual Studio 10.0\Team Tools\Static Analysis Tools\FxCop\CodeMetricsTest.exe&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Module</span> <span class="attr">Name</span>=<span class="string">&quot;CodeMetricsTest.exe&quot;</span> <span class="attr">AssemblyVersion</span>=<span class="string">&quot;1.0.0.0&quot;</span> <span class="attr">FileVersion</span>=<span class="string">&quot;1.0.0.0&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">Metrics</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Metric</span> <span class="attr">Name</span>=<span class="string">&quot;MaintainabilityIndex&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Metric</span> <span class="attr">Name</span>=<span class="string">&quot;CyclomaticComplexity&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;2&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Metric</span> <span class="attr">Name</span>=<span class="string">&quot;ClassCoupling&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Metric</span> <span class="attr">Name</span>=<span class="string">&quot;DepthOfInheritance&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Metric</span> <span class="attr">Name</span>=<span class="string">&quot;LinesOfCode&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">Metrics</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">Namespaces</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Namespace</span> <span class="attr">Name</span>=<span class="string">&quot;CodeMetricsTest&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">Metrics</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Metric</span> <span class="attr">Name</span>=<span class="string">&quot;MaintainabilityIndex&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Metric</span> <span class="attr">Name</span>=<span class="string">&quot;CyclomaticComplexity&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;2&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Metric</span> <span class="attr">Name</span>=<span class="string">&quot;ClassCoupling&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Metric</span> <span class="attr">Name</span>=<span class="string">&quot;DepthOfInheritance&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Metric</span> <span class="attr">Name</span>=<span class="string">&quot;LinesOfCode&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">Metrics</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">Types</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Type</span> <span class="attr">Name</span>=<span class="string">&quot;Program&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">Metrics</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Metric</span> <span class="attr">Name</span>=<span class="string">&quot;MaintainabilityIndex&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Metric</span> <span class="attr">Name</span>=<span class="string">&quot;CyclomaticComplexity&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;2&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Metric</span> <span class="attr">Name</span>=<span class="string">&quot;ClassCoupling&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Metric</span> <span class="attr">Name</span>=<span class="string">&quot;DepthOfInheritance&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Metric</span> <span class="attr">Name</span>=<span class="string">&quot;LinesOfCode&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">Metrics</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">Members</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Member</span> <span class="attr">Name</span>=<span class="string">&quot;Main(string[]) : void&quot;</span> <span class="attr">File</span>=<span class="string">&quot;D:\Software\Project\Source Code\Blog\BlogSamples\CodeMetricsTest\Program.cs&quot;</span> <span class="attr">Line</span>=<span class="string">&quot;11&quot;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">Metrics</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">Metric</span> <span class="attr">Name</span>=<span class="string">&quot;MaintainabilityIndex&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">Metric</span> <span class="attr">Name</span>=<span class="string">&quot;CyclomaticComplexity&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">Metric</span> <span class="attr">Name</span>=<span class="string">&quot;ClassCoupling&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">Metric</span> <span class="attr">Name</span>=<span class="string">&quot;LinesOfCode&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">Metrics</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">Member</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Member</span> <span class="attr">Name</span>=<span class="string">&quot;Program()&quot;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">Metrics</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">Metric</span> <span class="attr">Name</span>=<span class="string">&quot;MaintainabilityIndex&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">Metric</span> <span class="attr">Name</span>=<span class="string">&quot;CyclomaticComplexity&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">Metric</span> <span class="attr">Name</span>=<span class="string">&quot;ClassCoupling&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">Metric</span> <span class="attr">Name</span>=<span class="string">&quot;LinesOfCode&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">Metrics</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">Member</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">Members</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">Type</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">Types</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Namespace</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">Namespaces</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Module</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Targets</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">CodeMetricsReport</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ファイルを眺めていると</p><ul><li><strong>MaintainabilityIndex</strong></li><li><strong>CyclomaticComplexity</strong></li><li><strong>ClassCoupling</strong></li><li><strong>DepthOfInheritance</strong></li><li><strong>LinesOfCode</strong></li></ul><p>という単語が頻出しています。<br><strong>Microsoft</strong>によれば、</p><ul><li>MaintainabilityIndex -&gt; <strong>保守容易性指数</strong></li><li>CyclomaticComplexity -&gt; <strong>サイクロマティック複雑度</strong></li><li>ClassCoupling -&gt; <strong>クラス結合度</strong></li><li>DepthOfInheritance -&gt; <strong>継承の深さ</strong></li><li>LinesOfCode -&gt; <strong>コード行</strong></li></ul><p>であると定義しています。<br>また、<strong>MSDN</strong>の<a href="http://msdn.microsoft.com/ja-jp/library/bb385914.aspx">コード メトリックス値</a>というページでは、上述の語を下記のように定義しています。</p><blockquote><p><strong>保守容易性指数</strong> - コードの相対的な保守容易性を表す、0 ～ 100 のインデックス値を算出します。<br>値が大きいほど、保守容易性が優れていることを示します。<br>色分けしたコード評価を使用して、コード内の問題部分をすばやく識別することができます。<br>緑色の評価は 20 ～ 100 の範囲にあることを示し、コードの保守容易性が良好であることを示します。<br>黄色の評価は 10 ～ 19 の範囲にあることを示し、コードの保守容易性が中程度であることを示します。<br>赤の評価は 0 ～ 9 の範囲にあることを示し、保守容易性が低いことを示します。<br><strong>サイクロマティック複雑度</strong> - コードの構造上の複雑さを測定します。<br>これは、プログラムのフローにある、異なるコード パスの数を計算することで作成されます。<br>複雑な制御フローが含まれるプログラムでは、十分なコード カバレッジを実現するためにより多くのテストが必要となり、保守性が低下します。<br>メモ 場合によっては、Visual Studio 2010 のメソッドのサイクロマティック複雑度の計算が旧バージョンと異なります。<br>詳細については、「コード メトリックに関する問題のトラブルシューティング」で Visual Studio 2010 のコードの複雑度の計算における変更点についての説明を参照してください。<br><strong>継承の深さ</strong> - クラス階層構造のルートまでのクラス定義の数を示します。<br>階層構造が深くなるにつれて、特定のメソッドおよびフィールドが定義または再定義されている場所を把握することがより困難になる場合があります。<br><strong>クラス結合度</strong> - パラメーター、ローカル変数、戻り値の型、メソッド呼び出し、ジェネリックまたはテンプレートのインスタンス化、基本クラス、インターフェイス実装、外部の型で定義されたフィールド、および属性による装飾を使用して、一意のクラスへの結合度を測定します。<br>適切なソフトウェア デザインでは、型およびメソッドの連携は高まり、結合性は低くなります。<br>結合性が高いということは、他の型への依存関係が多いために再利用や保守が困難なデザインであることを示します。<br><strong>コード行</strong> - コード内の行の概数を示します。<br>この数は IL コードに基づいているため、ソース コード ファイル内の正確な行数ではありません。<br>数が非常に大きい場合、型またはメソッドでの処理が多すぎるため、分割が必要であることを示すことがあります。<br>また、型やメソッドの保守が困難なことを示す場合もあります。</p></blockquote><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>これらを踏まえて、サンプルである <strong>CodeMetricsTest.exe</strong> の結果を表に纏めてみました。</p><p>[table id=1 /]</p><p>極めてシンプルなコードのため結果も極めて良好です(当たり前) 結果を表に纏めるといろいろ見えてきます。</p><ul><li>メトリックスの対象は、<strong>アセンブリ</strong>、<strong>名前空間</strong>、<strong>型</strong>、<strong>型のメンバ</strong>という4つの単位で計測される</li><li>型のメンバには「継承の深さ」のメトリックスが含まれない</li><li><strong>サイクロマティック複雑度</strong>、<strong>コード行</strong>等は、上位の単位は下位単位を内包した結果になっている</li><li>コード行は<strong>IL</strong> (Intermediate Language) を元にしているからソースと一致しない (Programコンストラクタに1行追加されている)</li></ul><p>各メトリックス値を更にブレイクダウンする必要があるようです。<br>というわけで次回は <strong>保守容易性指数</strong> について、ソースコードを交えながら説明します。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> C# </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> ソフトウェア工学 </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> .NETでコード メトリックスを試してみる </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでコード メトリックスを試してみる 第2回</title>
      <link href="2012/04/26/42/"/>
      <url>2012/04/26/42/</url>
      
        <content type="html"><![CDATA[<p>前回は<strong>Visual Studio Code Metrics PowerTool 10.0</strong>をインストールしました。<br>今回は実際に使ってみます。</p><a id="more"></a><h1 id="Introduce"><a href="#Introduce" class="headerlink" title="Introduce"></a>Introduce</h1><p>(1) コマンドプロンプトを起動します。</p><p><a href="../../../../public/2012/04/codemetrics_2_0.png"><img src="../../../../public/2012/04/codemetrics_2_0-300x273.png" title="codemetrics_2_(0)"></a></p><p>(2) <strong>cd</strong> コマンドで、<strong>Visual Studio Code Metrics PowerTool 10.0</strong>のインストール先ディレクトリに移動します</p><p><strong>注: OSによってインストール先が異なります(恐らく)</strong></p><p><strong>64bit OS</strong><br>C:\Program Files (x86)\Microsoft Visual Studio 10.0\Team Tools\Static Analysis Tools\FxCop</p><p><strong>32bit OS</strong><br>C:\Program Files\Microsoft Visual Studio 10.0\Team Tools\Static Analysis Tools\FxCop</p><p><a href="../../../../public/2012/04/codemetrics_2_1.png"><img src="../../../../public/2012/04/codemetrics_2_1-300x273.png" title="codemetrics_2_(1)"></a></p><p>(3) 目的のディレクトリで <strong>Metrics.exe /?</strong> と入力して、ヘルプを表示します。</p><p><a href="../../../../public/2012/04/codemetrics_2_2.png"><img src="../../../../public/2012/04/codemetrics_2_2-300x273.png" title="codemetrics_2_(2)"></a></p><p>表示されたのは、Metrics.exeのヘルプです。<br>下記は私が訳したヘルプの概要です。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;file:  [Short form: &#x2F;f:]</span><br><span class="line">Assembly file(s) to analyze.</span><br><span class="line">[訳:解析するアセンブリファイル]</span><br><span class="line"></span><br><span class="line">&#x2F;out:  [Short form: &#x2F;o:]</span><br><span class="line">Metrics results XML output file.</span><br><span class="line">[訳:メトリックスした結果のXMLの出力先ファイル]</span><br><span class="line"></span><br><span class="line">&#x2F;directory:  [Short form: &#x2F;d:]</span><br><span class="line">Location to search for assembly dependencies.</span><br><span class="line">[訳:解析するアセンブリが依存しているアセンブリの探索先]</span><br><span class="line"></span><br><span class="line">&#x2F;searchgac  [Short form: &#x2F;gac]</span><br><span class="line">Search the Global Assembly Cache for missing references.</span><br><span class="line">[訳:参照先が見当たらない場合にGACを探索します]</span><br><span class="line"></span><br><span class="line">&#x2F;platform:  [Short form: &#x2F;plat:]</span><br><span class="line">Location of framework assemblies, such as mscorlib.dll.</span><br><span class="line">[訳:mscorlib.dllをはじめとする.NET Framework アセンブリの探索先]</span><br><span class="line"></span><br><span class="line">&#x2F;reference:  [Short form: &#x2F;ref:]</span><br><span class="line">Reference assemblies required for analysis.</span><br><span class="line">[訳:解析に必要な参照アセンブリ]</span><br><span class="line"></span><br><span class="line">&#x2F;ignoreinvalidtargets  [Short form: &#x2F;iit]</span><br><span class="line">Silently ignore invalid target files.</span><br><span class="line">[訳:無効な解析対象を無視します]</span><br><span class="line"></span><br><span class="line">&#x2F;ignoregeneratedcode  [Short form: &#x2F;igc]</span><br><span class="line">Do not calculate metrics for generated code.</span><br><span class="line">[訳:生成したコードのメトリックスを計算しません]</span><br><span class="line"></span><br><span class="line">&#x2F;successfile  [Short form: &#x2F;sf]</span><br><span class="line">Create .lastcodemetricsssucceeded file in output report directory if no errors occur during calculation.</span><br><span class="line">[訳:計算中にエラーが発生しなかった場合、レポート出力先ディレクトリに .lastcodemetricsssucceeded ファイルを生成します]</span><br><span class="line"></span><br><span class="line">&#x2F;quiet  [Short form: &#x2F;q]</span><br><span class="line">Silence all console output other than error reporting.</span><br><span class="line">[訳:エラー以外コンソールへ出力しません]</span><br><span class="line"></span><br><span class="line">&#x2F;help  [Short form: &#x2F;?]</span><br><span class="line">Display this help message.</span><br><span class="line">[訳:ヘルプメッセージを表示します]</span><br></pre></td></tr></table></figure><p>割と豊富なオプションですが、今回以降使うのは</p><ul><li><strong>/file: [Short form: /f:]</strong></li><li><strong>/out: [Short form: /o:]</strong></li></ul><p>の2つがメインとなります。</p><h1 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h1><p>実際に使ってみます。<br>ここではサンプルとして</p><p>```csharp<br>namespace CodeMetricsTest<br>{<br>    class Program<br>    {<br>        static void Main(string[] args)<br>        {<br>        }<br>    }<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">のような、コンソールプログラム **CodeMetricsTest.exe** を用意しました。</span><br><span class="line">ターゲットフレームワークのバージョンは2.0です。2.0以降でも問題ないでしょう。</span><br><span class="line"></span><br><span class="line">CodeMetricsTest.exeとCodeMetricsTest.pdbをMetrics.exeと同じディレクトリにコピーして下記のコマンドを入力してください。</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;&#96;dos</span><br><span class="line">Metrics.exe &#x2F;file:CodeMetricsTest.exe &#x2F;out:CodeMetricsTestReport.xml</span><br></pre></td></tr></table></figure><p><a href="../../../../public/2012/04/codemetrics_2_3.png"><img src="../../../../public/2012/04/codemetrics_2_3-300x273.png" title="codemetrics_2_(3)"></a></p><p>なにやら、英語が表示されましたが、エラーではありません。<br>成功していれば、同じディレクトリに <strong>CodeMetricsTestReport.xml</strong> が作成されています。</p><p>結論を言ってしまうと、このxmlファイルこそが、今回解析したアセンブリのコードメトリクス値を記したレポートになるのです。</p><p>今回はここまでです。<br>次回は、今回出現したxmlファイルの中身の説明とプログラムからの利用方法について説明します。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> C# </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> ソフトウェア工学 </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> .NETでコード メトリックスを試してみる </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Wordpress</title>
      <link href="2012/04/25/39/"/>
      <url>2012/04/25/39/</url>
      
        <content type="html"><![CDATA[<p>の設定で一日が終了。昨日の記事の続きはまた次回…</p>]]></content>
      
      
      <categories>
          
          <category> その他 </category>
          
          <category> 雑記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.NETでコード メトリックスを試してみる 第1回</title>
      <link href="2012/04/24/26/"/>
      <url>2012/04/24/26/</url>
      
        <content type="html"><![CDATA[<p>技術屋さんなので、プログラマーなのでそれらしいネタで情報提供しましょう。<br>最近の自分のトレンドはソフトウェア工学(っぽいこと)。</p><p>ソフトウェアの品質管理やプロジェクト管理に手を出しています。<br>会社でも作業工数の管理や進捗度合いの管理にRedmineを使っています(個人で)。<br>家でもRedmineでプロジェクト管理しています。</p><p><strong>Viva!! Redmine</strong></p><p>…閑話休題。</p><a id="more"></a><p>コードの品質が良い、悪いって直感的です。<br>読みやすいソース？バグの少ないソース？保守がしやすい？機能追加しやすい？ そういうのを数字でわかりやすくしよう、ってのがソフトウェアメトリックスです。</p><blockquote><p><strong>ソフトウェア測定法</strong> ソフトウェア測定法（ソフトウェアそくていほう）またはソフトウェアメトリック（英: Software metric ）とは、ソフトウェアやその仕様の属性の尺度である。<br>定量的手法の威力は他の分野で証明されていたことから、計算機科学の分野でも同様の手法をソフトウェア開発に持ち込もうとする努力が続けられてきた。Tom DeMarco は DeMarco, T. (1982) Controlling Software Projects: Management, Measurement &amp; Estimation, Yourdon Press, New York, USA, p3 の中で「測定できないものは制御できない」と記している。</p><p><a href="https://ja.wikipedia.org/wiki/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E6%B8%AC%E5%AE%9A%E6%B3%95">ウィキペディア（Wikipedia）</a></p></blockquote><p>何だか難しそうですが、触れてみるのが一番。</p><p>というわけで、.NETでコードメトリックスを試してみましょう。</p><p><strong>Visual Studio Code Metrics PowerTool 10.0</strong>というMicrosoft社が無償で提供しているツールがあります。<br>ダウンロード先は<a href="http://www.microsoft.com/download/en/details.aspx?id=9422">ここ</a>から。</p><p>このツール、<strong>VisualStudio 2010</strong>の<strong>Premium</strong>と<strong>Ultimate</strong>のみで提供されているコードメトリックスと同じことをCUIで実施してくれます。<br>利用方法もコマンドをたたくだけのお手軽仕様。</p><p><strong>MetricsSetup.exe</strong>というインストーラをダブルクリックしてインストールするだけです。<br>インストールは下記の手順に従ってください。</p><p>(1) [Next] をクリック。</p><p><img src="../../../../public/2012/04/wordpress0.png" alt="インストール画面1"></p><p>(2) ライセンス規約に同意できたら [<strong>I have read and accept the license terms.</strong>] をチェックし [Install] をクリック。</p><p><img src="../../../../public/2012/04/wordpress1.png" alt="インストール画面2"></p><p>(3) セットアップ進行中。2,3分待ってください(すぐ終わります) <img src="../../../../public/2012/04/wordpress2.png" alt="インストール画面3"></p><p>(4) セットアップ完了。[Finish] をクリックしてインストーラを終了します。</p><p><img src="../../../../public/2012/04/wordpress3.png" alt="インストール画面4"></p><p>以上で終了です。</p><p>今回はここまでです。<br>次回は実際にコード分析を行ってみたいと思います。</p>]]></content>
      
      
      <categories>
          
          <category> Microsoft </category>
          
          <category> .NET Framework </category>
          
          <category> net-framework </category>
          
          <category> C# </category>
          
          <category> ソフトウェア紹介 </category>
          
          <category> .NETで○○○を試してみる </category>
          
          <category> ソフトウェア工学 </category>
          
          <category> netで○○○を試してみる </category>
          
          <category> .NETでコード メトリックスを試してみる </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>iKnow! 進捗報告 [4/16-4/22]</title>
      <link href="2012/04/23/22/"/>
      <url>2012/04/23/22/</url>
      
        <content type="html"><![CDATA[<p>今週は、</p><ul><li><strong>目標 : 08時間00分</strong></li><li><strong>実績 : 05時間20分</strong></li><li><strong>合計 : 05時間20分</strong></li></ul><p>でした。<br>4/17から開始したので、まぁ妥当なところかと。</p><p><strong>反省点</strong><br>土日も学習しなきゃ<strong>orz</strong></p><p>・・・どうでもいいけど、WordPressのエディタ使いにくいです。</p>]]></content>
      
      
      <categories>
          
          <category> iKnow! </category>
          
          <category> 英語 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>目標宣言</title>
      <link href="2012/04/23/14/"/>
      <url>2012/04/23/14/</url>
      
        <content type="html"><![CDATA[<p>どこの会社でも、そうなんでしょうが、毎年自己のスキルアップなどの目標を掲げているとは思うのですが、自分もまぁ目標を立てています。<br>新人の時は、資格の取得を目標にしていました。</p><p>でもさすがに、4年目だと資格だけでなく、具体的に<strong>生産性アップ</strong>だの<strong>顧客満足度向上</strong>だのお題目を掲げることになる。<br>なるのだが、客先と接点が薄い部署だし、担当レベルだと正直未だに利益率とか数字を意識しにくい。<br>いや、工数は日々入力していますが。</p><p>まぁ、そういう目標はわかりにくいし、情報発信しにくいんで、ここでは<strong>英語</strong>、具体的には<strong>TOEIC</strong>で目標点数を宣言して、自分を追い込みますorz とりあえず私のTOEIC歴(大学時代のは忘れました)</p><table><thead><tr><th align="left">年度</th><th align="left">実施回数</th><th align="left">点数</th></tr></thead><tbody><tr><td align="left">2009</td><td align="left">1st</td><td align="left">475</td></tr><tr><td align="left">2009</td><td align="left">2nd</td><td align="left">425</td></tr><tr><td align="left">2010</td><td align="left">1st</td><td align="left">忘れました</td></tr><tr><td align="left">2010</td><td align="left">2nd</td><td align="left">忘れました</td></tr><tr><td align="left">2011</td><td align="left">1st</td><td align="left">555</td></tr><tr><td align="left">2011</td><td align="left">2nd</td><td align="left">565</td></tr></tbody></table><p>年2回の社内受験があるのですが、現在565。入社時より90点向上しています。<br>これでも入社直後で昇格用件を満たしたんです。かなり少ないんですよ？</p><p>で、今年の目標は</p><p><strong>600点</strong></p><p>・・・低いって言わないでください。<br>で、ストレッチ目標が<strong>650点</strong>。</p><p>まぁ、妥当なところかと。<br>じゃぁ実現計画は？っていうと</p><p><strong>iKnow!始めます</strong></p><p>ってことです。<br>とりあえず、毎週日曜日に進捗報告します。</p>]]></content>
      
      
      <categories>
          
          <category> iKnow! </category>
          
          <category> 英語 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello, world!!</title>
      <link href="2012/04/23/7/"/>
      <url>2012/04/23/7/</url>
      
        <content type="html"><![CDATA[<p>WordPress始めました。<br>ブログ自体は、何個か過去に綴ってきてはいましたが、まぁ、例によって飽き自然消滅しました。<br>ただ、社会人になってからは、大学時代から続いている<strong>mixi</strong>以外は、何もしていない状況でした。</p><p>そんなこんなで、2012年になり、社会人4年目。技術者としてワンランクもツーランクもレベルアップするために何かできないか？ そう思い始めたのが「情報発信」。</p><p>まずは、ネット上の誰かの役に立つ情報を提供できたら、という小さな目標から歩いて行きたいと思います。</p>]]></content>
      
      
      <categories>
          
          <category> その他 </category>
          
          <category> 雑記 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
